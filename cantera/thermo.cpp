/* Generated by Cython 3.0.0 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include/numpy/arrayscalars.h",
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include/numpy/ndarrayobject.h",
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include/numpy/ndarraytypes.h",
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "include/cantera/base/AnyMap.h",
            "include/cantera/base/Delegator.h",
            "include/cantera/base/ExtensionManager.h",
            "include/cantera/base/ExtensionManagerFactory.h",
            "include/cantera/base/Interface.h",
            "include/cantera/base/Solution.h",
            "include/cantera/base/SolutionArray.h",
            "include/cantera/base/Units.h",
            "include/cantera/base/global.h",
            "include/cantera/base/stringUtils.h",
            "include/cantera/cython/funcWrapper.h",
            "include/cantera/cython/kinetics_utils.h",
            "include/cantera/cython/thermo_utils.h",
            "include/cantera/cython/transport_utils.h",
            "include/cantera/cython/utils_utils.h",
            "include/cantera/extensions/PythonExtensionManager.h",
            "include/cantera/extensions/PythonHandle.h",
            "include/cantera/kinetics/InterfaceKinetics.h",
            "include/cantera/kinetics/Kinetics.h",
            "include/cantera/kinetics/KineticsFactory.h",
            "include/cantera/numerics/Func1.h",
            "include/cantera/numerics/Func1Factory.h",
            "include/cantera/numerics/eigen_sparse.h",
            "include/cantera/thermo/Elements.h",
            "include/cantera/thermo/PlasmaPhase.h",
            "include/cantera/thermo/Species.h",
            "include/cantera/thermo/SpeciesThermoFactory.h",
            "include/cantera/thermo/SpeciesThermoInterpType.h",
            "include/cantera/thermo/SurfPhase.h",
            "include/cantera/thermo/ThermoFactory.h",
            "include/cantera/thermo/ThermoPhase.h",
            "include/cantera/transport/DustyGasTransport.h",
            "include/cantera/transport/Transport.h",
            "include/cantera/transport/TransportData.h",
            "include/cantera/transport/TransportFactory.h"
        ],
        "include_dirs": [
            "include",
            "include/cantera/ext",
            "src",
            "cantera",
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include"
        ],
        "language": "c++",
        "name": "cantera._cantera",
        "sources": [
            "cantera/thermo.pyx",
            "cantera/_utils.pyx",
            "cantera/solutionbase.pyx",
            "cantera/kinetics.pyx",
            "cantera/reactor.pyx",
            "cantera/units.pyx",
            "cantera/_onedim.pyx",
            "cantera/transport.pyx",
            "cantera/delegator.pyx",
            "cantera/mixture.pyx",
            "cantera/speciesthermo.pyx",
            "cantera/func1.pyx",
            "cantera/_cantera.pyx",
            "cantera/constants.pyx",
            "cantera/reaction.pyx",
            "cantera/reactionpath.pyx",
            "cantera/preconditioners.pyx",
            "cantera/yamlwriter.pyx",
            "src/equil/MultiPhase.cpp",
            "src/equil/vcs_solve_TP.cpp",
            "src/equil/vcs_VolPhase.cpp",
            "src/equil/BasisOptimize.cpp",
            "src/equil/vcs_solve.cpp",
            "src/equil/vcs_MultiPhaseEquil.cpp",
            "src/equil/ChemEquil.cpp",
            "src/equil/vcs_util.cpp",
            "src/equil/MultiPhaseEquil.cpp",
            "src/oneD/MultiJac.cpp",
            "src/oneD/MultiNewton.cpp",
            "src/oneD/DomainFactory.cpp",
            "src/oneD/StFlow.cpp",
            "src/oneD/OneDim.cpp",
            "src/oneD/Domain1D.cpp",
            "src/oneD/refine.cpp",
            "src/oneD/Boundary1D.cpp",
            "src/oneD/Sim1D.cpp",
            "src/oneD/IonFlow.cpp",
            "src/transport/DustyGasTransport.cpp",
            "src/transport/HighPressureGasTransport.cpp",
            "src/transport/WaterTransport.cpp",
            "src/transport/MMCollisionInt.cpp",
            "src/transport/MultiTransport.cpp",
            "src/transport/GasTransport.cpp",
            "src/transport/IonGasTransport.cpp",
            "src/transport/TransportData.cpp",
            "src/transport/MixTransport.cpp",
            "src/transport/Transport.cpp",
            "src/transport/TransportFactory.cpp",
            "src/kinetics/ImplicitSurfChem.cpp",
            "src/kinetics/Falloff.cpp",
            "src/kinetics/Reaction.cpp",
            "src/kinetics/BulkKinetics.cpp",
            "src/kinetics/Kinetics.cpp",
            "src/kinetics/Arrhenius.cpp",
            "src/kinetics/TwoTempPlasmaRate.cpp",
            "src/kinetics/Group.cpp",
            "src/kinetics/InterfaceKinetics.cpp",
            "src/kinetics/ReactionRateDelegator.cpp",
            "src/kinetics/InterfaceRate.cpp",
            "src/kinetics/ChebyshevRate.cpp",
            "src/kinetics/ReactionPath.cpp",
            "src/kinetics/ReactionRateFactory.cpp",
            "src/kinetics/solveSP.cpp",
            "src/kinetics/PlogRate.cpp",
            "src/kinetics/Custom.cpp",
            "src/kinetics/KineticsFactory.cpp",
            "src/kinetics/BlowersMaselRate.cpp",
            "src/pch/system.cpp",
            "src/numerics/FuncEval.cpp",
            "src/numerics/Func1.cpp",
            "src/numerics/BandMatrix.cpp",
            "src/numerics/DenseMatrix.cpp",
            "src/numerics/Integrators.cpp",
            "src/numerics/PreconditionerFactory.cpp",
            "src/numerics/CVodesIntegrator.cpp",
            "src/numerics/IdasIntegrator.cpp",
            "src/numerics/polyfit.cpp",
            "src/numerics/funcs.cpp",
            "src/numerics/AdaptivePreconditioner.cpp",
            "src/numerics/Func1Factory.cpp",
            "src/numerics/ResidJacEval.cpp",
            "src/thermo/HMWSoln.cpp",
            "src/thermo/MargulesVPSSTP.cpp",
            "src/thermo/Nasa9PolyMultiTempRegion.cpp",
            "src/thermo/PengRobinson.cpp",
            "src/thermo/RedlichKwongMFTP.cpp",
            "src/thermo/WaterSSTP.cpp",
            "src/thermo/Phase.cpp",
            "src/thermo/StoichSubstance.cpp",
            "src/thermo/PDSS_SSVol.cpp",
            "src/thermo/VPStandardStateTP.cpp",
            "src/thermo/Mu0Poly.cpp",
            "src/thermo/MaskellSolidSolnPhase.cpp",
            "src/thermo/SurfPhase.cpp",
            "src/thermo/WaterProps.cpp",
            "src/thermo/IdealGasPhase.cpp",
            "src/thermo/RedlichKisterVPSSTP.cpp",
            "src/thermo/IdealMolalSoln.cpp",
            "src/thermo/SpeciesThermoFactory.cpp",
            "src/thermo/CoverageDependentSurfPhase.cpp",
            "src/thermo/PDSSFactory.cpp",
            "src/thermo/IonsFromNeutralVPSSTP.cpp",
            "src/thermo/PureFluidPhase.cpp",
            "src/thermo/PDSS_Water.cpp",
            "src/thermo/MolalityVPSSTP.cpp",
            "src/thermo/PDSS_IonsFromNeutral.cpp",
            "src/thermo/ThermoPhase.cpp",
            "src/thermo/PDSS_HKFT.cpp",
            "src/thermo/Elements.cpp",
            "src/thermo/MixtureFugacityTP.cpp",
            "src/thermo/PDSS_IdealGas.cpp",
            "src/thermo/SpeciesThermoInterpType.cpp",
            "src/thermo/Nasa9Poly1.cpp",
            "src/thermo/Species.cpp",
            "src/thermo/PDSS_ConstVol.cpp",
            "src/thermo/DebyeHuckel.cpp",
            "src/thermo/ConstCpPoly.cpp",
            "src/thermo/LatticePhase.cpp",
            "src/thermo/NasaPoly2.cpp",
            "src/thermo/PDSS.cpp",
            "src/thermo/LatticeSolidPhase.cpp",
            "src/thermo/WaterPropsIAPWS.cpp",
            "src/thermo/IdealSolidSolnPhase.cpp",
            "src/thermo/MultiSpeciesThermo.cpp",
            "src/thermo/ThermoFactory.cpp",
            "src/thermo/SingleSpeciesTP.cpp",
            "src/thermo/IdealSolnGasVPSS.cpp",
            "src/thermo/GibbsExcessVPSSTP.cpp",
            "src/thermo/BinarySolutionTabulatedThermo.cpp",
            "src/thermo/WaterPropsIAPWSphi.cpp",
            "src/thermo/PlasmaPhase.cpp",
            "src/zeroD/IdealGasConstPressureReactor.cpp",
            "src/zeroD/ConstPressureReactor.cpp",
            "src/zeroD/flowControllers.cpp",
            "src/zeroD/MoleReactor.cpp",
            "src/zeroD/FlowReactor.cpp",
            "src/zeroD/FlowDevice.cpp",
            "src/zeroD/Wall.cpp",
            "src/zeroD/Reactor.cpp",
            "src/zeroD/ReactorSurface.cpp",
            "src/zeroD/FlowDeviceFactory.cpp",
            "src/zeroD/IdealGasMoleReactor.cpp",
            "src/zeroD/WallFactory.cpp",
            "src/zeroD/ReactorNet.cpp",
            "src/zeroD/ReactorBase.cpp",
            "src/zeroD/IdealGasReactor.cpp",
            "src/zeroD/ReactorFactory.cpp",
            "src/zeroD/ConstPressureMoleReactor.cpp",
            "src/zeroD/IdealGasConstPressureMoleReactor.cpp",
            "src/base/Array.cpp",
            "src/base/Storage.cpp",
            "src/base/ctexceptions.cpp",
            "src/base/ExtensionManagerFactory.cpp",
            "src/base/AnyMap.cpp",
            "src/base/checkFinite.cpp",
            "src/base/application.cpp",
            "src/base/Solution.cpp",
            "src/base/YamlWriter.cpp",
            "src/base/clockWC.cpp",
            "src/base/ExtensionManager.cpp",
            "src/base/Units.cpp",
            "src/base/ValueCache.cpp",
            "src/base/stringUtils.cpp",
            "src/base/SolutionArray.cpp",
            "src/base/Interface.cpp",
            "src/base/global.cpp",
            "src/extensions/PythonExtensionManager.cpp",
            "src/extensions/canteraShared.cpp",
            "src/extensions/pythonShim.cpp",
            "src/tpx/Water.cpp",
            "src/tpx/CarbonDioxide.cpp",
            "src/tpx/Sub.cpp",
            "src/tpx/Methane.cpp",
            "src/tpx/HFC134a.cpp",
            "src/tpx/Hydrogen.cpp",
            "src/tpx/Oxygen.cpp",
            "src/tpx/utils.cpp",
            "src/tpx/Heptane.cpp",
            "src/tpx/Nitrogen.cpp"
        ]
    },
    "module_name": "cantera._cantera"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if (PY_VERSION_HEX < 0x030700b1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600)) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0_0"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject *co=NULL, *result=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(p))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto end;
        if (!(empty = PyTuple_New(0))) goto end;
        result = (PyCodeObject*) PyObject_Call(replace, empty, kwds);
    end:
        Py_XDECREF((PyObject*) co);
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE(obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__cantera__thermo
#define __PYX_HAVE_API__cantera__thermo
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <string>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <functional>
#include <memory>
#include <stdio.h>
#include "pythread.h"

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include "cantera/cython/funcWrapper.h"
#include "cantera/numerics/Func1.h"
#include "cantera/numerics/Func1Factory.h"
#include "cantera/base/Units.h"
#include <array>
#include "cantera/extensions/PythonHandle.h"
#include "cantera/base/Delegator.h"
#include "cantera/base/ExtensionManager.h"
#include "cantera/base/ExtensionManagerFactory.h"
#include "cantera/extensions/PythonExtensionManager.h"
#include "cantera/thermo/ThermoFactory.h"
#include "cantera/kinetics/KineticsFactory.h"
#include "cantera/transport/TransportFactory.h"
#include "cantera/base/Interface.h"
#include "cantera/base/Solution.h"
#include "cantera/base/SolutionArray.h"
#include "cantera/thermo/Species.h"
#include "cantera/thermo/ThermoPhase.h"
#include "cantera/thermo/SurfPhase.h"
#include "cantera/thermo/PlasmaPhase.h"
#include "cantera/cython/thermo_utils.h"
#include "cantera/thermo/Elements.h"
#include "cantera/thermo/SpeciesThermoInterpType.h"
#include "cantera/thermo/SpeciesThermoFactory.h"
#include "cantera/numerics/eigen_sparse.h"
#include "cantera/kinetics/Kinetics.h"
#include "cantera/kinetics/InterfaceKinetics.h"
#include "cantera/cython/kinetics_utils.h"
#include "cantera/transport/Transport.h"
#include "cantera/transport/DustyGasTransport.h"
#include "cantera/transport/TransportData.h"
#include "cantera/cython/transport_utils.h"
#include <unordered_map>
#include "cantera/base/AnyMap.h"
#include "cantera/base/stringUtils.h"
#include "cantera/base/global.h"
#include "cantera/cython/utils_utils.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else  // Py < 3.12
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "cantera/thermo.pyx",
  "<stringsource>",
  "contextvars.pxd",
  "__init__.cython-30.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "cantera/func1.pxd",
  "cantera/units.pxd",
  "cantera/solutionbase.pxd",
  "cantera/speciesthermo.pxd",
  "cantera/kinetics.pxd",
  "cantera/transport.pxd",
  "cantera/_utils.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* BufferFormatStructs.proto */
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* #### Code section: numeric_typedefs ### */

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":732
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":733
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":734
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":735
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":739
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":740
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":741
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":742
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":746
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":747
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":756
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":757
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":758
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":760
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":761
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":762
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":764
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":765
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":767
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":768
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":769
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_7cantera_5func1_Func1;
struct __pyx_obj_7cantera_5units_Units;
struct __pyx_obj_7cantera_5units_UnitStack;
struct __pyx_obj_7cantera_5units_UnitSystem;
struct __pyx_obj_7cantera_12solutionbase__SolutionBase;
struct __pyx_obj_7cantera_12solutionbase_SolutionArrayBase;
struct __pyx_obj_7cantera_13speciesthermo_SpeciesThermo;
struct __pyx_obj_7cantera_8kinetics_Kinetics;
struct __pyx_obj_7cantera_8kinetics_InterfaceKinetics;
struct __pyx_obj_7cantera_9transport_GasTransportData;
struct __pyx_obj_7cantera_9transport_Transport;
struct __pyx_obj_7cantera_9transport_DustyGasTransport;
struct __pyx_obj_7cantera_6_utils_AnyMap;
struct __pyx_obj_7cantera_6thermo_Species;
struct __pyx_obj_7cantera_6thermo_ThermoPhase;
struct __pyx_obj_7cantera_6thermo_InterfacePhase;
struct __pyx_obj_7cantera_6thermo_PureFluid;
struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr;
struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr;
struct __pyx_opt_args_7cpython_11contextvars_get_value;
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value {
  int __pyx_n;
  PyObject *default_value;
};

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {
  int __pyx_n;
  PyObject *default_value;
};

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":771
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":772
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":775
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "ctcxx.pxd":19
 * from cython.operator cimport dereference as deref, preincrement as inc
 * 
 * ctypedef stdmap[string,double] Composition             # <<<<<<<<<<<<<<
 * 
 * import numpy as np
 */
typedef std::map<std::string,double>  __pyx_t_7cantera_5ctcxx_Composition;

/* "delegator.pxd":107
 * 
 * 
 * ctypedef CxxDelegator* CxxDelegatorPtr             # <<<<<<<<<<<<<<
 * 
 * cdef int assign_delegates(object, CxxDelegator*) except -1
 */
typedef Cantera::Delegator *__pyx_t_7cantera_9delegator_CxxDelegatorPtr;
struct __pyx_opt_args_7cantera_12solutionbase__assign_Solution;

/* "solutionbase.pxd":99
 * 
 * 
 * ctypedef void (*transportMethod1d)(CxxTransport*, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * ctypedef void (*transportMethod2d)(CxxTransport*, size_t, double*) except +translate_exception
 * ctypedef void (*transportPolyMethod1i)(CxxTransport*, size_t, double*) except +translate_exception
 */
typedef void (*__pyx_t_7cantera_12solutionbase_transportMethod1d)(Cantera::Transport *, double *);

/* "solutionbase.pxd":100
 * 
 * ctypedef void (*transportMethod1d)(CxxTransport*, double*) except +translate_exception
 * ctypedef void (*transportMethod2d)(CxxTransport*, size_t, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * ctypedef void (*transportPolyMethod1i)(CxxTransport*, size_t, double*) except +translate_exception
 * ctypedef void (*transportPolyMethod2i)(CxxTransport*, size_t, size_t, double*) except +translate_exception
 */
typedef void (*__pyx_t_7cantera_12solutionbase_transportMethod2d)(Cantera::Transport *, size_t, double *);

/* "solutionbase.pxd":101
 * ctypedef void (*transportMethod1d)(CxxTransport*, double*) except +translate_exception
 * ctypedef void (*transportMethod2d)(CxxTransport*, size_t, double*) except +translate_exception
 * ctypedef void (*transportPolyMethod1i)(CxxTransport*, size_t, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * ctypedef void (*transportPolyMethod2i)(CxxTransport*, size_t, size_t, double*) except +translate_exception
 * 
 */
typedef void (*__pyx_t_7cantera_12solutionbase_transportPolyMethod1i)(Cantera::Transport *, size_t, double *);

/* "solutionbase.pxd":102
 * ctypedef void (*transportMethod2d)(CxxTransport*, size_t, double*) except +translate_exception
 * ctypedef void (*transportPolyMethod1i)(CxxTransport*, size_t, double*) except +translate_exception
 * ctypedef void (*transportPolyMethod2i)(CxxTransport*, size_t, size_t, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * 
 * cdef _assign_Solution(_SolutionBase soln, shared_ptr[CxxSolution] cxx_soln,
 */
typedef void (*__pyx_t_7cantera_12solutionbase_transportPolyMethod2i)(Cantera::Transport *, size_t, size_t, double *);

/* "solutionbase.pxd":104
 * ctypedef void (*transportPolyMethod2i)(CxxTransport*, size_t, size_t, double*) except +translate_exception
 * 
 * cdef _assign_Solution(_SolutionBase soln, shared_ptr[CxxSolution] cxx_soln,             # <<<<<<<<<<<<<<
 *                       pybool reset_adjacent, pybool weak=?)
 * cdef object _wrap_Solution(shared_ptr[CxxSolution] cxx_soln)
 */
struct __pyx_opt_args_7cantera_12solutionbase__assign_Solution {
  int __pyx_n;
  PyBoolObject *weak;
};

/* "kinetics.pxd":140
 * 
 * 
 * ctypedef void (*kineticsMethod1d)(CxxKinetics*, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * ctypedef CxxSparseMatrix (*kineticsMethodSparse)(CxxKinetics*) except +translate_exception
 * 
 */
typedef void (*__pyx_t_7cantera_8kinetics_kineticsMethod1d)(Cantera::Kinetics *, double *);

/* "kinetics.pxd":141
 * 
 * ctypedef void (*kineticsMethod1d)(CxxKinetics*, double*) except +translate_exception
 * ctypedef CxxSparseMatrix (*kineticsMethodSparse)(CxxKinetics*) except +translate_exception             # <<<<<<<<<<<<<<
 * 
 * cdef class Kinetics(_SolutionBase):
 */
typedef Eigen::SparseMatrix<double> (*__pyx_t_7cantera_8kinetics_kineticsMethodSparse)(Cantera::Kinetics *);
struct __pyx_opt_args_7cantera_6_utils_py_to_anymap;
struct __pyx_opt_args_7cantera_6_utils_python_to_anyvalue;

/* "_utils.pxd":106
 * cdef Composition comp_map(X) except *
 * 
 * cdef CxxAnyMap py_to_anymap(data, cbool hyphenize=*) except *             # <<<<<<<<<<<<<<
 * cdef anymap_to_py(CxxAnyMap& m)
 * 
 */
struct __pyx_opt_args_7cantera_6_utils_py_to_anymap {
  int __pyx_n;
  bool hyphenize;
};

/* "_utils.pxd":109
 * cdef anymap_to_py(CxxAnyMap& m)
 * 
 * cdef CxxAnyValue python_to_anyvalue(item, name=*) except *             # <<<<<<<<<<<<<<
 * cdef anyvalue_to_python(string name, CxxAnyValue& v)
 */
struct __pyx_opt_args_7cantera_6_utils_python_to_anyvalue {
  int __pyx_n;
  PyObject *name;
};

/* "cantera/thermo.pxd":244
 * 
 * 
 * ctypedef void (*thermoMethod1d)(CxxThermoPhase*, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "cantera/thermo/Elements.h" namespace "Cantera":
 */
typedef void (*__pyx_t_7cantera_6thermo_thermoMethod1d)(Cantera::ThermoPhase *, double *);

/* "cantera/thermo.pyx":17
 * from .units cimport *
 * 
 * cdef enum ThermoBasisType:             # <<<<<<<<<<<<<<
 *     mass_basis = 0
 *     molar_basis = 1
 */
enum __pyx_t_7cantera_6thermo_ThermoBasisType {
  __pyx_e_7cantera_6thermo_mass_basis = 0,
  __pyx_e_7cantera_6thermo_molar_basis = 1
};

/* "cantera/thermo.pyx":21
 *     molar_basis = 1
 * 
 * ctypedef CxxPlasmaPhase* CxxPlasmaPhasePtr             # <<<<<<<<<<<<<<
 * ctypedef CxxSurfPhase* CxxSurfPhasePtr
 * 
 */
typedef Cantera::PlasmaPhase *__pyx_t_7cantera_6thermo_CxxPlasmaPhasePtr;

/* "cantera/thermo.pyx":22
 * 
 * ctypedef CxxPlasmaPhase* CxxPlasmaPhasePtr
 * ctypedef CxxSurfPhase* CxxSurfPhasePtr             # <<<<<<<<<<<<<<
 * 
 * class ThermoModelMethodError(Exception):
 */
typedef Cantera::SurfPhase *__pyx_t_7cantera_6thermo_CxxSurfPhasePtr;

/* "func1.pxd":46
 * 
 * 
 * cdef class Func1:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxFunc1] _func
 *     cdef CxxFunc1* func
 */
struct __pyx_obj_7cantera_5func1_Func1 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_5func1_Func1 *__pyx_vtab;
  std::shared_ptr<Cantera::Func1>  _func;
  Cantera::Func1 *func;
  PyObject *callable;
  PyObject *exception;
};


/* "units.pxd":42
 * 
 * 
 * cdef class Units:             # <<<<<<<<<<<<<<
 *     cdef CxxUnits units
 *     @staticmethod
 */
struct __pyx_obj_7cantera_5units_Units {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_5units_Units *__pyx_vtab;
  Cantera::Units units;
};


/* "units.pxd":47
 *     cdef Units copy(CxxUnits)
 * 
 * cdef class UnitStack:             # <<<<<<<<<<<<<<
 *     cdef CxxUnitStack stack
 *     @staticmethod
 */
struct __pyx_obj_7cantera_5units_UnitStack {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_5units_UnitStack *__pyx_vtab;
  Cantera::UnitStack stack;
};


/* "units.pxd":53
 * 
 * 
 * cdef class UnitSystem:             # <<<<<<<<<<<<<<
 *     cdef _set_unitSystem(self, shared_ptr[CxxUnitSystem] units)
 *     cdef shared_ptr[CxxUnitSystem] _unitsystem
 */
struct __pyx_obj_7cantera_5units_UnitSystem {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_5units_UnitSystem *__pyx_vtab;
  std::shared_ptr<Cantera::UnitSystem>  _unitsystem;
  Cantera::UnitSystem *unitsystem;
};


/* "solutionbase.pxd":108
 * cdef object _wrap_Solution(shared_ptr[CxxSolution] cxx_soln)
 * 
 * cdef class _SolutionBase:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxSolution] _base
 *     cdef weak_ptr[CxxSolution] weak_base
 */
struct __pyx_obj_7cantera_12solutionbase__SolutionBase {
  PyObject_HEAD
  std::shared_ptr<Cantera::Solution>  _base;
  std::weak_ptr<Cantera::Solution>  weak_base;
  Cantera::Solution *base;
  Cantera::ThermoPhase *thermo;
  Cantera::Kinetics *kinetics;
  Cantera::Transport *transport;
  int thermo_basis;
  PyArrayObject *_selected_species;
  PyObject *parent;
  PyObject *_adjacent;
  PyObject *_soln_changed_callback;
  PyObject *_references;
};


/* "solutionbase.pxd":122
 *     cdef public object _references
 * 
 * cdef class SolutionArrayBase:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxSolutionArray] _base
 *     cdef CxxSolutionArray* base
 */
struct __pyx_obj_7cantera_12solutionbase_SolutionArrayBase {
  PyObject_HEAD
  std::shared_ptr<Cantera::SolutionArray>  _base;
  Cantera::SolutionArray *base;
  PyObject *_weakref_proxy;
};


/* "speciesthermo.pxd":28
 * 
 * 
 * cdef class SpeciesThermo:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxSpeciesThermo] _spthermo
 *     cdef CxxSpeciesThermo* spthermo
 */
struct __pyx_obj_7cantera_13speciesthermo_SpeciesThermo {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_13speciesthermo_SpeciesThermo *__pyx_vtab;
  std::shared_ptr<Cantera::SpeciesThermoInterpType>  _spthermo;
  Cantera::SpeciesThermoInterpType *spthermo;
};


/* "kinetics.pxd":143
 * ctypedef CxxSparseMatrix (*kineticsMethodSparse)(CxxKinetics*) except +translate_exception
 * 
 * cdef class Kinetics(_SolutionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_8kinetics_Kinetics {
  struct __pyx_obj_7cantera_12solutionbase__SolutionBase __pyx_base;
};


/* "kinetics.pxd":146
 *     pass
 * 
 * cdef class InterfaceKinetics(Kinetics):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_8kinetics_InterfaceKinetics {
  struct __pyx_obj_7cantera_8kinetics_Kinetics __pyx_base;
};


/* "transport.pxd":76
 * 
 * 
 * cdef class GasTransportData:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxTransportData] _data
 *     cdef CxxGasTransportData* data
 */
struct __pyx_obj_7cantera_9transport_GasTransportData {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_9transport_GasTransportData *__pyx_vtab;
  std::shared_ptr<Cantera::TransportData>  _data;
  Cantera::GasTransportData *data;
};


/* "transport.pxd":81
 *     cdef _assign(self, shared_ptr[CxxTransportData] other)
 * 
 * cdef class Transport(_SolutionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_9transport_Transport {
  struct __pyx_obj_7cantera_12solutionbase__SolutionBase __pyx_base;
};


/* "transport.pxd":84
 *     pass
 * 
 * cdef class DustyGasTransport(Transport):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_9transport_DustyGasTransport {
  struct __pyx_obj_7cantera_9transport_Transport __pyx_base;
};


/* "_utils.pxd":96
 *     cdef void CxxSetLogger "setLogger" (CxxPythonLogger*)
 * 
 * cdef class AnyMap(dict):             # <<<<<<<<<<<<<<
 *     cdef _set_CxxUnitSystem(self, shared_ptr[CxxUnitSystem] units)
 *     cdef UnitSystem unitsystem
 */
struct __pyx_obj_7cantera_6_utils_AnyMap {
  PyDictObject __pyx_base;
  struct __pyx_vtabstruct_7cantera_6_utils_AnyMap *__pyx_vtab;
  struct __pyx_obj_7cantera_5units_UnitSystem *unitsystem;
};


/* "cantera/thermo.pxd":259
 * 
 * 
 * cdef class Species:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxSpecies] _species
 *     cdef CxxSpecies* species
 */
struct __pyx_obj_7cantera_6thermo_Species {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_6thermo_Species *__pyx_vtab;
  std::shared_ptr<Cantera::Species>  _species;
  Cantera::Species *species;
  struct __pyx_obj_7cantera_12solutionbase__SolutionBase *_phase;
};


/* "cantera/thermo.pxd":266
 *     cdef _assign(self, shared_ptr[CxxSpecies] other)
 * 
 * cdef class ThermoPhase(_SolutionBase):             # <<<<<<<<<<<<<<
 *     cdef double _mass_factor(self)
 *     cdef double _mole_factor(self)
 */
struct __pyx_obj_7cantera_6thermo_ThermoPhase {
  struct __pyx_obj_7cantera_12solutionbase__SolutionBase __pyx_base;
  struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *__pyx_vtab;
  Cantera::PlasmaPhase *plasma;
  PyObject *_enable_plasma;
};


/* "cantera/thermo.pxd":276
 *     cdef public object _enable_plasma
 * 
 * cdef class InterfacePhase(ThermoPhase):             # <<<<<<<<<<<<<<
 *     cdef CxxSurfPhase* surf
 */
struct __pyx_obj_7cantera_6thermo_InterfacePhase {
  struct __pyx_obj_7cantera_6thermo_ThermoPhase __pyx_base;
  Cantera::SurfPhase *surf;
};


/* "cantera/thermo.pyx":1952
 * 
 * 
 * cdef class PureFluid(ThermoPhase):             # <<<<<<<<<<<<<<
 *     """
 *     A pure substance that can  be a gas, a liquid, a mixed gas-liquid fluid,
 */
struct __pyx_obj_7cantera_6thermo_PureFluid {
  struct __pyx_obj_7cantera_6thermo_ThermoPhase __pyx_base;
};


/* "cantera/thermo.pyx":2134
 * def _element_symbols():
 *     syms = elementSymbols()
 *     return tuple(pystr(s) for s in syms)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr {
  PyObject_HEAD
  std::vector<std::string>  __pyx_genexpr_arg_0;
  std::string __pyx_v_s;
  std::vector<std::string> ::iterator __pyx_t_0;
};


/* "cantera/thermo.pyx":2139
 * def _element_names():
 *     names = elementNames()
 *     return tuple(pystr(n) for n in names)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  std::vector<std::string>  __pyx_genexpr_arg_0;
  std::string __pyx_v_n;
  std::vector<std::string> ::iterator __pyx_t_0;
};



/* "func1.pxd":46
 * 
 * 
 * cdef class Func1:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxFunc1] _func
 *     cdef CxxFunc1* func
 */

struct __pyx_vtabstruct_7cantera_5func1_Func1 {
  void (*_set_callback)(struct __pyx_obj_7cantera_5func1_Func1 *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7cantera_5func1_Func1 *__pyx_vtabptr_7cantera_5func1_Func1;


/* "units.pxd":42
 * 
 * 
 * cdef class Units:             # <<<<<<<<<<<<<<
 *     cdef CxxUnits units
 *     @staticmethod
 */

struct __pyx_vtabstruct_7cantera_5units_Units {
  struct __pyx_obj_7cantera_5units_Units *(*copy)(Cantera::Units);
};
static struct __pyx_vtabstruct_7cantera_5units_Units *__pyx_vtabptr_7cantera_5units_Units;


/* "units.pxd":47
 *     cdef Units copy(CxxUnits)
 * 
 * cdef class UnitStack:             # <<<<<<<<<<<<<<
 *     cdef CxxUnitStack stack
 *     @staticmethod
 */

struct __pyx_vtabstruct_7cantera_5units_UnitStack {
  struct __pyx_obj_7cantera_5units_UnitStack *(*copy)(Cantera::UnitStack const &);
};
static struct __pyx_vtabstruct_7cantera_5units_UnitStack *__pyx_vtabptr_7cantera_5units_UnitStack;


/* "units.pxd":53
 * 
 * 
 * cdef class UnitSystem:             # <<<<<<<<<<<<<<
 *     cdef _set_unitSystem(self, shared_ptr[CxxUnitSystem] units)
 *     cdef shared_ptr[CxxUnitSystem] _unitsystem
 */

struct __pyx_vtabstruct_7cantera_5units_UnitSystem {
  PyObject *(*_set_unitSystem)(struct __pyx_obj_7cantera_5units_UnitSystem *, std::shared_ptr<Cantera::UnitSystem> );
};
static struct __pyx_vtabstruct_7cantera_5units_UnitSystem *__pyx_vtabptr_7cantera_5units_UnitSystem;


/* "speciesthermo.pxd":28
 * 
 * 
 * cdef class SpeciesThermo:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxSpeciesThermo] _spthermo
 *     cdef CxxSpeciesThermo* spthermo
 */

struct __pyx_vtabstruct_7cantera_13speciesthermo_SpeciesThermo {
  PyObject *(*_assign)(struct __pyx_obj_7cantera_13speciesthermo_SpeciesThermo *, std::shared_ptr<Cantera::SpeciesThermoInterpType> );
};
static struct __pyx_vtabstruct_7cantera_13speciesthermo_SpeciesThermo *__pyx_vtabptr_7cantera_13speciesthermo_SpeciesThermo;


/* "transport.pxd":76
 * 
 * 
 * cdef class GasTransportData:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxTransportData] _data
 *     cdef CxxGasTransportData* data
 */

struct __pyx_vtabstruct_7cantera_9transport_GasTransportData {
  PyObject *(*_assign)(struct __pyx_obj_7cantera_9transport_GasTransportData *, std::shared_ptr<Cantera::TransportData> );
};
static struct __pyx_vtabstruct_7cantera_9transport_GasTransportData *__pyx_vtabptr_7cantera_9transport_GasTransportData;


/* "_utils.pxd":96
 *     cdef void CxxSetLogger "setLogger" (CxxPythonLogger*)
 * 
 * cdef class AnyMap(dict):             # <<<<<<<<<<<<<<
 *     cdef _set_CxxUnitSystem(self, shared_ptr[CxxUnitSystem] units)
 *     cdef UnitSystem unitsystem
 */

struct __pyx_vtabstruct_7cantera_6_utils_AnyMap {
  PyObject *(*_set_CxxUnitSystem)(struct __pyx_obj_7cantera_6_utils_AnyMap *, std::shared_ptr<Cantera::UnitSystem> );
};
static struct __pyx_vtabstruct_7cantera_6_utils_AnyMap *__pyx_vtabptr_7cantera_6_utils_AnyMap;


/* "cantera/thermo.pyx":37
 * 
 * 
 * cdef class Species:             # <<<<<<<<<<<<<<
 *     """
 *     A class which stores data about a single chemical species that may be
 */

struct __pyx_vtabstruct_7cantera_6thermo_Species {
  PyObject *(*_assign)(struct __pyx_obj_7cantera_6thermo_Species *, std::shared_ptr<Cantera::Species> );
};
static struct __pyx_vtabstruct_7cantera_6thermo_Species *__pyx_vtabptr_7cantera_6thermo_Species;


/* "cantera/thermo.pyx":255
 * 
 * 
 * cdef class ThermoPhase(_SolutionBase):             # <<<<<<<<<<<<<<
 *     """
 *     A phase with an equation of state.
 */

struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase {
  double (*_mass_factor)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *);
  double (*_mole_factor)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *);
  int (*element_index)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, PyObject *, int __pyx_skip_dispatch);
  int (*species_index)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, PyObject *, int __pyx_skip_dispatch);
  PyArrayObject *(*_getArray1)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, __pyx_t_7cantera_6thermo_thermoMethod1d);
  void (*_setArray1)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, __pyx_t_7cantera_6thermo_thermoMethod1d, PyObject *);
};
static struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *__pyx_vtabptr_7cantera_6thermo_ThermoPhase;


/* "cantera/thermo.pyx":1888
 * 
 * 
 * cdef class InterfacePhase(ThermoPhase):             # <<<<<<<<<<<<<<
 *     """ A class representing a surface, edge phase """
 *     def __cinit__(self, *args, **kwargs):
 */

struct __pyx_vtabstruct_7cantera_6thermo_InterfacePhase {
  struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase __pyx_base;
};
static struct __pyx_vtabstruct_7cantera_6thermo_InterfacePhase *__pyx_vtabptr_7cantera_6thermo_InterfacePhase;


/* "cantera/thermo.pyx":1952
 * 
 * 
 * cdef class PureFluid(ThermoPhase):             # <<<<<<<<<<<<<<
 *     """
 *     A pure substance that can  be a gas, a liquid, a mixed gas-liquid fluid,
 */

struct __pyx_vtabstruct_7cantera_6thermo_PureFluid {
  struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase __pyx_base;
};
static struct __pyx_vtabstruct_7cantera_6thermo_PureFluid *__pyx_vtabptr_7cantera_6thermo_PureFluid;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* MoveIfSupported.proto */
#if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyBytes_AS_STRING(obj), PyBytes_GET_SIZE(obj));
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyByteArray_AS_STRING(obj), PyByteArray_GET_SIZE(obj));
}

/* pyunicode_as_double.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?  PyFloat_AS_DOUBLE(obj) :\
 likely(PyLong_CheckExact(obj)) ?\
 PyLong_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static int __Pyx_PyFloat_BoolEqObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_BoolEqObjC(op1, op2, floatval, inplace, zerodivision_check)\
    __Pyx_PyObject_IsTrueAndDecref(PyObject_RichCompare(op1, op2, Py_EQ))
    #endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_SubtractCObj(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* AssertionsEnabled.proto */
#define __Pyx_init_assertions_enabled()
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __pyx_assertions_enabled() (1)
#elif PY_VERSION_HEX < 0x03080000  ||  CYTHON_COMPILING_IN_PYPY  ||  defined(Py_LIMITED_API)
  #define __pyx_assertions_enabled() (!Py_OptimizeFlag)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030900A6
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  #undef __Pyx_init_assertions_enabled
  static void __Pyx_init_assertions_enabled(void) {
    __pyx_assertions_enabled_flag = ! _PyInterpreterState_GetConfig(__Pyx_PyThreadState_Current->interp)->optimization_level;
  }
#else
  #define __pyx_assertions_enabled() (!Py_OptimizeFlag)
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(__Pyx_PyLong_IsNonNeg(x)) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_0
#define __PYX_HAVE_RT_ImportType_proto_3_0_0
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_0(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_0(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_0 {
   __Pyx_ImportType_CheckSize_Error_3_0_0 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_0 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_0 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_0(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_0 check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* Py3UpdateBases.proto */
static PyObject* __Pyx_PEP560_update_bases(PyObject *bases);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CyFunctionClassCell.proto */
static int __Pyx_CyFunction_InitClassCell(PyObject *cyfunctions, PyObject *classobj);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(PyObject *module);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_0_0(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_7cantera_6thermo_7Species__assign(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, std::shared_ptr<Cantera::Species>  __pyx_v_other); /* proto*/
static double __pyx_f_7cantera_6thermo_11ThermoPhase__mass_factor(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto*/
static double __pyx_f_7cantera_6thermo_11ThermoPhase__mole_factor(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto*/
static int __pyx_f_7cantera_6thermo_11ThermoPhase_element_index(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_element, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_7cantera_6thermo_11ThermoPhase_species_index(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_species, int __pyx_skip_dispatch); /* proto*/
static PyArrayObject *__pyx_f_7cantera_6thermo_11ThermoPhase__getArray1(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, __pyx_t_7cantera_6thermo_thermoMethod1d __pyx_v_method); /* proto*/
static void __pyx_f_7cantera_6thermo_11ThermoPhase__setArray1(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, __pyx_t_7cantera_6thermo_thermoMethod1d __pyx_v_method, PyObject *__pyx_v_values); /* proto*/

/* Module declarations from "libcpp.vector" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.map" */

/* Module declarations from "libcpp.cast" */

/* Module declarations from "libcpp.pair" */

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.functional" */

/* Module declarations from "libcpp.memory" */

/* Module declarations from "cpython.version" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "cpython.module" */

/* Module declarations from "cpython.mem" */

/* Module declarations from "cpython.tuple" */

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.sequence" */

/* Module declarations from "cpython.mapping" */

/* Module declarations from "cpython.iterator" */

/* Module declarations from "cpython.number" */

/* Module declarations from "cpython.int" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.bool" */

/* Module declarations from "cpython.long" */

/* Module declarations from "cpython.float" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.complex" */

/* Module declarations from "cpython.string" */

/* Module declarations from "cpython.unicode" */

/* Module declarations from "cpython.pyport" */

/* Module declarations from "cpython.dict" */

/* Module declarations from "cpython.instance" */

/* Module declarations from "cpython.function" */

/* Module declarations from "cpython.method" */

/* Module declarations from "cpython.weakref" */

/* Module declarations from "cpython.getargs" */

/* Module declarations from "cpython.pythread" */

/* Module declarations from "cpython.pystate" */

/* Module declarations from "cpython.cobject" */

/* Module declarations from "cpython.oldbuffer" */

/* Module declarations from "cpython.set" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "cpython.bytes" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "cpython.contextvars" */

/* Module declarations from "cpython" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "cantera.ctcxx" */

/* Module declarations from "cantera.func1" */

/* Module declarations from "cantera.units" */

/* Module declarations from "cantera.delegator" */

/* Module declarations from "cantera.solutionbase" */

/* Module declarations from "cantera.speciesthermo" */
static PyObject *(*__pyx_f_7cantera_13speciesthermo_wrapSpeciesThermo)(std::shared_ptr<Cantera::SpeciesThermoInterpType> ); /*proto*/

/* Module declarations from "cantera.kinetics" */

/* Module declarations from "cantera.transport" */

/* Module declarations from "libcpp.unordered_map" */

/* Module declarations from "cantera._utils" */
static std::string (*__pyx_f_7cantera_6_utils_stringify)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_7cantera_6_utils_pystr)(std::string); /*proto*/
static PyObject *(*__pyx_f_7cantera_6_utils_comp_map_to_dict)(__pyx_t_7cantera_5ctcxx_Composition); /*proto*/
static __pyx_t_7cantera_5ctcxx_Composition (*__pyx_f_7cantera_6_utils_comp_map)(PyObject *); /*proto*/
static Cantera::AnyMap (*__pyx_f_7cantera_6_utils_py_to_anymap)(PyObject *, struct __pyx_opt_args_7cantera_6_utils_py_to_anymap *__pyx_optional_args); /*proto*/
static PyObject *(*__pyx_f_7cantera_6_utils_anymap_to_py)(Cantera::AnyMap &); /*proto*/

/* Module declarations from "cantera.thermo" */
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(std::vector<std::string>  const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_double_t = { "double_t", NULL, sizeof(__pyx_t_5numpy_double_t), { 0 }, 0, 'R', 0, 0 };
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "cantera.thermo"
extern int __pyx_module_is_main_cantera__thermo;
int __pyx_module_is_main_cantera__thermo = 0;

/* Implementation of "cantera.thermo" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_P[] = "P";
static const char __pyx_k_Q[] = "Q";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_Y[] = "Y";
static const char __pyx_k_Z[] = "Z";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_o[] = "o";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_TP[] = "TP";
static const char __pyx_k_XY[] = "XY";
static const char __pyx_k__3[] = ".";
static const char __pyx_k__4[] = ":";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_kv[] = "kv";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_or[] = " or {}";
static const char __pyx_k_1_0[] = ":1.0";
static const char __pyx_k_TPX[] = "TPX";
static const char __pyx_k_TPY[] = "TPY";
static const char __pyx_k_The[] = "The ";
static const char __pyx_k__17[] = "*";
static const char __pyx_k_arg[] = "arg";
static const char __pyx_k_arr[] = "arr";
static const char __pyx_k_cov[] = "cov";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_iso[] = "iso";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_phi[] = "phi";
static const char __pyx_k__109[] = "?";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_auto[] = "auto";
static const char __pyx_k_comp[] = "comp";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_fuel[] = "fuel";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mass[] = "mass";
static const char __pyx_k_mole[] = "mole";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_root[] = "root";
static const char __pyx_k_rtol[] = "rtol";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_syms[] = "syms";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_M_mix[] = "M_mix";
static const char __pyx_k_P_sat[] = "P_sat";
static const char __pyx_k_X_mix[] = "X_mix";
static const char __pyx_k_Y_mix[] = "Y_mix";
static const char __pyx_k_alias[] = "alias";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_basis[] = "basis";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_molar[] = "molar";
static const char __pyx_k_names[] = "names";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_utils[] = "_utils";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_Bilger[] = "Bilger";
static const char __pyx_k_M_fuel[] = "M_fuel";
static const char __pyx_k_P_orig[] = "P_orig";
static const char __pyx_k_T_orig[] = "T_orig";
static const char __pyx_k_Y_orig[] = "Y_orig";
static const char __pyx_k_Z_fuel[] = "Z_fuel";
static const char __pyx_k_charge[] = "charge";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_e_name[] = "e_name";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_factor[] = "factor";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_init_2[] = "init";
static const char __pyx_k_levels[] = "levels";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "_name";
static const char __pyx_k_name_3[] = "__name__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_report[] = "report";
static const char __pyx_k_solver[] = "solver";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_symbol[] = "_symbol";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_weight[] = "_weight";
static const char __pyx_k_Element[] = "Element";
static const char __pyx_k_Species[] = "<Species {}>";
static const char __pyx_k_any_map[] = "any_map";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_density[] = "density";
static const char __pyx_k_diluent[] = "diluent";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_element[] = "element";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_n_atoms[] = "n_atoms";
static const char __pyx_k_newaxis[] = "newaxis";
static const char __pyx_k_numbers[] = "numbers";
static const char __pyx_k_ox_comp[] = "ox_comp";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_section[] = "section";
static const char __pyx_k_species[] = "species";
static const char __pyx_k_squeeze[] = "squeeze";
static const char __pyx_k_weakref[] = "weakref";
static const char __pyx_k_X_fuelox[] = "X_fuelox";
static const char __pyx_k_Y_fuelox[] = "Y_fuelox";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_fraction[] = "fraction";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_max_iter[] = "max_iter";
static const char __pyx_k_oxidizer[] = "oxidizer";
static const char __pyx_k_property[] = "property";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_symbol_2[] = "symbol";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_weight_2[] = "weight";
static const char __pyx_k_PureFluid[] = "PureFluid";
static const char __pyx_k_Species_2[] = "Species";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_data_dist[] = "data_dist";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_from_dict[] = "from_dict";
static const char __pyx_k_from_yaml[] = "from_yaml";
static const char __pyx_k_fuel_comp[] = "fuel_comp";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_log_level[] = "log_level";
static const char __pyx_k_max_steps[] = "max_steps";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_n_species[] = "n_species";
static const char __pyx_k_numbers_2[] = "_numbers";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_threshold[] = "threshold";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_n_elements[] = "n_elements";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_state_size[] = "state_size";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_ThermoPhase[] = "ThermoPhase";
static const char __pyx_k_Z_fuel_mole[] = "Z_fuel_mole";
static const char __pyx_k_add_species[] = "add_species";
static const char __pyx_k_composition[] = "composition";
static const char __pyx_k_cxx_species[] = "cxx_species";
static const char __pyx_k_data_levels[] = "data_levels";
static const char __pyx_k_equilibrate[] = "equilibrate";
static const char __pyx_k_mro_entries[] = "__mro_entries__";
static const char __pyx_k_show_thermo[] = "show_thermo";
static const char __pyx_k_CanteraError[] = "CanteraError";
static const char __pyx_k_Element_name[] = "Element.name";
static const char __pyx_k_Got_Expected[] = "Got {}. Expected {}";
static const char __pyx_k_diluent_comp[] = "diluent_comp";
static const char __pyx_k_distribution[] = "distribution";
static const char __pyx_k_element_name[] = "element_name";
static const char __pyx_k_find_isomers[] = "find_isomers";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_species_name[] = "species_name";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_thermo_model[] = "thermo_model";
static const char __pyx_k_atomic_number[] = "_atomic_number";
static const char __pyx_k_atomic_weight[] = "atomic_weight";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_element_index[] = "element_index";
static const char __pyx_k_element_names[] = "_element_names";
static const char __pyx_k_fraction_dict[] = "fraction_dict";
static const char __pyx_k_fraction_type[] = "fraction_type";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_species_index[] = "species_index";
static const char __pyx_k_species_names[] = "species_names";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_Element___init[] = "Element.__init__";
static const char __pyx_k_Element_symbol[] = "Element.symbol";
static const char __pyx_k_Element_weight[] = "Element.weight";
static const char __pyx_k_InterfacePhase[] = "InterfacePhase";
static const char __pyx_k_cantera_thermo[] = "cantera.thermo";
static const char __pyx_k_estimate_equil[] = "estimate_equil";
static const char __pyx_k_fraction_value[] = "fraction_value";
static const char __pyx_k_list_from_file[] = "list_from_file";
static const char __pyx_k_list_from_yaml[] = "list_from_yaml";
static const char __pyx_k_modify_species[] = "modify_species";
static const char __pyx_k_original_state[] = "original_state";
static const char __pyx_k_atomic_number_2[] = "atomic_number";
static const char __pyx_k_clear_user_data[] = "clear_user_data";
static const char __pyx_k_element_names_2[] = "element_names";
static const char __pyx_k_element_symbols[] = "_element_symbols";
static const char __pyx_k_include_species[] = "include_species";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_mixture_fraction[] = "mixture_fraction";
static const char __pyx_k_update_user_data[] = "update_user_data";
static const char __pyx_k_No_such_element_r[] = "No such element {!r}.";
static const char __pyx_k_No_such_species_r[] = "No such species {!r}.";
static const char __pyx_k_Species_from_dict[] = "Species.from_dict";
static const char __pyx_k_Species_from_yaml[] = "Species.from_yaml";
static const char __pyx_k_WeakKeyDictionary[] = "WeakKeyDictionary";
static const char __pyx_k_add_species_alias[] = "add_species_alias";
static const char __pyx_k_ascontiguousarray[] = "ascontiguousarray";
static const char __pyx_k_critical_pressure[] = "critical_pressure";
static const char __pyx_k_element_symbols_2[] = "element_symbols";
static const char __pyx_k_equivalence_ratio[] = "equivalence_ratio";
static const char __pyx_k_ThermoPhase_report[] = "ThermoPhase.report";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cantera_thermo_pyx[] = "cantera/thermo.pyx";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_mass_fraction_dict[] = "mass_fraction_dict";
static const char __pyx_k_mole_fraction_dict[] = "mole_fraction_dict";
static const char __pyx_k_Invalid_composition[] = "Invalid composition";
static const char __pyx_k_ThermoPhase_n_atoms[] = "ThermoPhase.n_atoms";
static const char __pyx_k_ThermoPhase_species[] = "ThermoPhase.species";
static const char __pyx_k_composition_to_array[] = "__composition_to_array";
static const char __pyx_k_num_elements_defined[] = "num_elements_defined";
static const char __pyx_k_set_mixture_fraction[] = "set_mixture_fraction";
static const char __pyx_k_Element_atomic_number[] = "Element.atomic_number";
static const char __pyx_k_mean_molecular_weight[] = "mean_molecular_weight";
static const char __pyx_k_set_equivalence_ratio[] = "set_equivalence_ratio";
static const char __pyx_k_stoich_air_fuel_ratio[] = "stoich_air_fuel_ratio";
static const char __pyx_k_Species_list_from_file[] = "Species.list_from_file";
static const char __pyx_k_Species_list_from_yaml[] = "Species.list_from_yaml";
static const char __pyx_k_ThermoModelMethodError[] = "ThermoModelMethodError";
static const char __pyx_k_Species___reduce_cython[] = "Species.__reduce_cython__";
static const char __pyx_k_Species_clear_user_data[] = "Species.clear_user_data";
static const char __pyx_k_ThermoPhase_add_species[] = "ThermoPhase.add_species";
static const char __pyx_k_ThermoPhase_equilibrate[] = "ThermoPhase.equilibrate";
static const char __pyx_k_elemental_mass_fraction[] = "elemental_mass_fraction";
static const char __pyx_k_elemental_mole_fraction[] = "elemental_mole_fraction";
static const char __pyx_k_Species_update_user_data[] = "Species.update_user_data";
static const char __pyx_k_ThermoPhase_element_name[] = "ThermoPhase.element_name";
static const char __pyx_k_ThermoPhase_find_isomers[] = "ThermoPhase.find_isomers";
static const char __pyx_k_ThermoPhase_species_name[] = "ThermoPhase.species_name";
static const char __pyx_k_n_electron_energy_levels[] = "n_electron_energy_levels";
static const char __pyx_k_PureFluid___reduce_cython[] = "PureFluid.__reduce_cython__";
static const char __pyx_k_Species___setstate_cython[] = "Species.__setstate_cython__";
static const char __pyx_k_ThermoPhase_atomic_weight[] = "ThermoPhase.atomic_weight";
static const char __pyx_k_ThermoPhase_element_index[] = "ThermoPhase.element_index";
static const char __pyx_k_ThermoPhase_species_index[] = "ThermoPhase.species_index";
static const char __pyx_k_Array_has_incorrect_length[] = "Array has incorrect length. ";
static const char __pyx_k_ThermoPhase_modify_species[] = "ThermoPhase.modify_species";
static const char __pyx_k_This_method_is_invalid_for[] = "This method is invalid for ";
static const char __pyx_k_incorrect_number_of_values[] = "incorrect number of values";
static const char __pyx_k_set_unnormalized_coverages[] = "set_unnormalized_coverages";
static const char __pyx_k_PureFluid___setstate_cython[] = "PureFluid.__setstate_cython__";
static const char __pyx_k_ThermoPhase___reduce_cython[] = "ThermoPhase.__reduce_cython__";
static const char __pyx_k_ThermoPhase_report_line_298[] = "ThermoPhase.report (line 298)";
static const char __pyx_k_ThermoPhase_mixture_fraction[] = "ThermoPhase.mixture_fraction";
static const char __pyx_k_ThermoPhase_n_atoms_line_608[] = "ThermoPhase.n_atoms (line 608)";
static const char __pyx_k_element_names_locals_genexpr[] = "_element_names.<locals>.genexpr";
static const char __pyx_k_ThermoModelMethodError___init[] = "ThermoModelMethodError.__init__";
static const char __pyx_k_ThermoPhase___setstate_cython[] = "ThermoPhase.__setstate_cython__";
static const char __pyx_k_ThermoPhase_add_species_alias[] = "ThermoPhase.add_species_alias";
static const char __pyx_k_ThermoPhase_equivalence_ratio[] = "ThermoPhase.equivalence_ratio";
static const char __pyx_k_Get_the_equivalence_ratio_math[] = "\n        Get the equivalence ratio :math:`\\phi` of the current mixture, which is a\n        conserved quantity. Considers the oxidation of C to CO2, H to H2O\n        and S to SO2. Other elements are assumed not to participate in oxidation\n        (that is, N ends up as N2). If fuel and oxidizer are not specified, the\n        equivalence ratio is computed from the available oxygen and the\n        required oxygen for complete oxidation:\n\n        .. math:: \\phi = \\frac{Z_{\\mathrm{mole},C} + Z_{\\mathrm{mole},S}\n                  + \\frac{1}{4}Z_{\\mathrm{mole},H}} {\\frac{1}{2}Z_{\\mathrm{mole},O}}\n\n        where :math:`Z_{\\mathrm{mole},e}` is the elemental mole fraction of element\n        :math:`e`. If the fuel and oxidizer compositions are specified, :math:`\\phi` is\n        computed from:\n\n        .. math:: \\phi = \\frac{Z}{1-Z}\\frac{1-Z_{\\mathrm{st}}}{Z_{\\mathrm{st}}}\n\n        where :math:`Z` is the Bilger mixture fraction and :math:`Z_{\\mathrm{st}}`\n        the Bilger mixture fraction at stoichiometric conditions.\n        The ``basis`` determines the composition of fuel and oxidizer:\n        ``basis='mole'`` (default) means mole fractions, ``basis='mass'`` means\n        mass fractions. Note that this definition takes all species into account.\n        In case certain species like inert diluents should be ignored, a\n        list of species can be provided with ``include_species``. This means that\n        only these species are considered for the computation of the equivalence\n        ratio. For more information, see `Python example\n        <https://cantera.org/examples/python/thermo/equivalenceRatio.py.html>`_ ::\n\n            >>> gas.set_equivalence_ratio(0.5, fuel='CH3:0.5, CH3OH:.5, N2:0.125', oxidizer='O2:0.21, N2:0.79, NO:0.01')\n            >>> gas.equivalence_ratio(fuel='CH3:0.5, CH3OH:.5, N2:0.125', oxidizer='O2:0.21, N2:0.79, NO:0.01')\n            0.5\n\n        :param fuel:\n            Fuel species name or mole/mass fr""actions as string, array, or dict.\n        :param oxidizer:\n            Oxidizer species name or mole/mass fractions as a string, array, or dict.\n        :param basis:\n            Determines if ``fuel`` and ``oxidizer`` are given in mole fractions\n            (``basis=\"mole\"``) or mass fractions (``basis=\"mass\"``)\n        :param include_species:\n            List of species names (optional). Only these species are considered for the\n            computation of the equivalence ratio. By default, all species are considered\n        ";
static const char __pyx_k_InterfacePhase___reduce_cython[] = "InterfacePhase.__reduce_cython__";
static const char __pyx_k_ThermoPhase_mass_fraction_dict[] = "ThermoPhase.mass_fraction_dict";
static const char __pyx_k_ThermoPhase_mole_fraction_dict[] = "ThermoPhase.mole_fraction_dict";
static const char __pyx_k_element_symbols_locals_genexpr[] = "_element_symbols.<locals>.genexpr";
static const char __pyx_k_fraction_after_dilution_cannot[] = " fraction after dilution cannot be higher than {fraction_type} fraction in the original mixture.";
static const char __pyx_k_An_element_or_a_named_isotope_d[] = "\n    An element or a named isotope defined in Cantera.\n\n    Class `Element` gets data for the elements and isotopes defined in\n    :ct:`Elements.cpp`. This class can be used in two ways. The\n    first way is to get information about all of the elements stored in\n    Cantera. The three attributes `num_elements_defined`,\n    `element_symbols`, and `element_names` can be accessed by::\n\n        >>> ct.Element.num_elements_defined\n        >>> ct.Element.element_symbols\n        >>> ct.Element.element_names\n\n    Otherwise, if the class `Element` is called with an argument, it\n    stores the data about that particular element. For example::\n\n        >>> ar_sym = ct.Element('Ar')\n        >>> ar_name = ct.Element('argon')\n        >>> ar_num = ct.Element(18)\n\n    would all create instances with the information for argon. The\n    available argument options to create an instance of the `Element`\n    class with the element information are the `name`, `symbol`, and\n    `atomic_number`. Once an instance of the class is made, the `name`,\n    `atomic_number`, `symbol`, and atomic `weight` can be accessed as\n    attributes of the instance of the `Element` class.\n\n        >>> ar_sym.name\n        'argon'\n        >>> ar_sym.weight\n        39.948\n        >>> ar_sym.atomic_number\n        18\n        >>> ar_sym.symbol\n        'Ar'\n\n    The elements available are listed below, in the `element_symbols`\n    and `element_names` attribute documentation.\n    ";
static const char __pyx_k_Exception_raised_for_an_invalid[] = "Exception raised for an invalid method used by a thermo model\n\n    :param thermo_model:\n        The thermo model used by class `ThermoPhase`\n\n    ";
static const char __pyx_k_Generate_a_report_describing_th[] = "\n        Generate a report describing the thermodynamic state of this phase. To\n        print the report to the terminal, simply call the phase object. The\n        following two statements are equivalent::\n\n        >>> phase()\n        >>> print(phase.report())\n        ";
static const char __pyx_k_Get_the_elemental_mass_fraction[] = "\n        Get the elemental mass fraction :math:`Z_{\\mathrm{mass},m}` of element\n        :math:`m` as defined by:\n\n        .. math:: Z_{\\mathrm{mass},m} = \\sum_k \\frac{a_{m,k} M_m}{M_k} Y_k\n\n        with :math:`a_{m,k}` being the number of atoms of element :math:`m` in\n        species :math:`k`, :math:`M_m` the atomic weight of element :math:`m`,\n        :math:`M_k` the molecular weight of species :math:`k`, and :math:`Y_k`\n        the mass fraction of species :math:`k`::\n\n            >>> phase.elemental_mass_fraction('H')\n            1.0\n\n        :param m:\n            Base element, may be specified by name or by index.\n        ";
static const char __pyx_k_Get_the_elemental_mole_fraction[] = "\n        Get the elemental mole fraction :math:`Z_{\\mathrm{mole},m}` of element\n        :math:`m` (the number of atoms of element m divided by the total number\n        of atoms) as defined by:\n\n        .. math:: Z_{\\mathrm{mole},m} = \\frac{\\sum_k a_{m,k} X_k}\n                                             {\\sum_k \\sum_j a_{j,k} X_k}\n\n        with :math:`a_{m,k}` being the number of atoms of element :math:`m` in\n        species :math:`k`, :math:`\\sum_j` being a sum over all elements, and\n        :math:`X_k` being the mole fraction of species :math:`k`::\n\n            >>> phase.elemental_mole_fraction('H')\n            1.0\n\n        :param m:\n            Base element, may be specified by name or by index.\n        ";
static const char __pyx_k_Get_the_mixture_fraction_of_the[] = "\n        Get the mixture fraction of the current mixture in\n        (kg fuel / (kg oxidizer + kg fuel)). This is a quantity that is conserved after\n        oxidation. Considers the oxidation of C to CO2, H to H2O and S to SO2. Other\n        elements are assumed not to participate in oxidation (that is, N ends up as N2).\n        The ``basis`` determines the composition of fuel and oxidizer:\n        ``basis=\"mole\"`` (default) means mole fractions, ``basis=\"mass\"`` means mass\n        fractions. The mixture fraction can be computed from a single element (for\n        example, carbon with ``element=\"C\"``)\n\n        .. math:: Z_m = \\frac{Z_{\\mathrm{mass},m}-Z_{\\mathrm{mass},m,\\mathrm{ox}}}\n            {Z_{\\mathrm{mass},\\mathrm{fuel}}-Z_{\\mathrm{mass},m,\\mathrm{ox}}}\n\n        where :math:`Z_{\\mathrm{mass},m}` is the elemental mass fraction of\n        element :math:`m` in the mixture, and :math:`Z_{\\mathrm{mass},m,\\mathrm{ox}}`\n        and :math:`Z_{\\mathrm{mass},\\mathrm{fuel}}` are the elemental mass fractions of\n        the oxidizer and fuel, or from the Bilger mixture fraction\n        (``element=\"Bilger\"``), which considers the elements C, S, H and O\n        (R. W. Bilger, \"Turbulent jet diffusion flames,\" Prog. Energy Combust. Sci.,\n        109-131 (1979)). The Bilger mixture fraction is computed by default:\n\n        .. math:: Z_m = Z_{\\mathrm{Bilger}} = \\frac{\\beta-\\beta_{\\mathrm{ox}}}\n            {\\beta_{\\mathrm{fuel}}-\\beta_{\\mathrm{ox}}}\n\n        with\n\n        .. math:: \\beta = 2\\frac{Z_C}{M_C}+2\\frac{Z_S}{M_S}+\\frac{1}{2}\\frac{Z_H}{M_H}\n            - \\frac{Z_O}{M_O}\n\n        and :math:`M_m` the atomic weight of element :math:`m`.\n        For more information, see `Python example\n        <https://cantera.org/examples/python/thermo/equivalenceRatio.py.html>`_.::\n\n            >>> gas.set_mixture_fraction(0.5, 'CH3:0.5, CH3OH:0.5, N2:0.125', 'O2:0.21, N2:0.79, NO:0.01')\n            >>> gas.mixture_fr""action('CH3:0.5, CH3OH:0.5, N2:0.125', 'O2:0.21, N2:0.79, NO:.01')\n            0.5\n\n        :param fuel:\n            Fuel species name or mole/mass fractions as string, array, or dict.\n        :param oxidizer:\n            Oxidizer species name or mole/mass fractions as a string, array, or\n            dict.\n        :param basis:\n            Determines if ``fuel`` and ``oxidizer`` are given in mole\n            fractions (``basis='mole'``) or mass fractions (``basis='mass'``)\n        :param element:\n            Computes the mixture fraction from the specified elemental\n            mass fraction (given by element name or element index) or as\n            the Bilger mixture fraction (default)\n        ";
static const char __pyx_k_Get_the_stoichiometric_air_to_f[] = "\n        Get the stoichiometric air to fuel ratio (kg oxidizer / kg fuel). Considers the\n        oxidation of C to CO2, H to H2O and S to SO2. Other elements are assumed\n        not to participate in oxidation (that is, N ends up as N2).\n        The ``basis`` determines the composition of fuel and oxidizer: ``basis='mole'`` (default)\n        means mole fractions, ``basis='mass'`` means mass fractions::\n\n            >>> gas.set_mixture_fraction(0.5, 'CH3:0.5, CH3OH:.5, N2:0.125', 'O2:0.21, N2:0.79, NO:0.01')\n            >>> gas.stoich_air_fuel_ratio('CH3:0.5, CH3OH:.5, N2:0.125', 'O2:0.21, N2:0.79, NO:0.01')\n            8.148040722239438\n\n        :param fuel:\n            Fuel species name or mole/mass fractions as string, array, or dict.\n        :param oxidizer:\n            Oxidizer species name or mole/mass fractions as a string, array, or\n            dict.\n        :param basis:\n            Determines if ``fuel`` and ``oxidizer`` are given in mole\n            fractions (``basis='mole'``) or mass fractions (``basis='mass'``)\n\n        ";
static const char __pyx_k_InterfacePhase_set_unnormalized[] = "InterfacePhase.set_unnormalized_coverages";
static const char __pyx_k_Invalid_format_for_the_fraction[] = "Invalid format for the fraction. Must be provided for example as fraction='fuel:0.1'";
static const char __pyx_k_Number_of_atoms_of_element_elem[] = "\n        Number of atoms of element ``element`` in species ``species``. The element\n        and species may be specified by name or by index.\n\n        >>> phase.n_atoms('CH4','H')\n        4\n        ";
static const char __pyx_k_Set_the_composition_to_a_mixtur[] = "\n        Set the composition to a mixture of ``fuel`` and ``oxidizer`` at the\n        specified equivalence ratio ``phi``, holding temperature and pressure\n        constant. Considers the oxidation of C to CO2, H to H2O and S to SO2.\n        Other elements are assumed not to participate in oxidation (that is,\n        N ends up as N2). The ``basis`` determines the fuel and oxidizer\n        compositions: ``basis='mole'`` means mole fractions (default),\n        ``basis='mass'`` means mass fractions. The fuel/oxidizer mixture can be\n        be diluted by a ``diluent`` based on a mixing ``fraction``. The amount of\n        diluent is quantified as a fraction of fuel, oxidizer or the fuel/oxidizer\n        mixture. For more information, see `Python example\n        <https://cantera.org/examples/python/thermo/equivalenceRatio.py.html>`_ ::\n\n            >>> gas.set_equivalence_ratio(0.5, 'CH4', 'O2:1.0, N2:3.76', basis='mole')\n            >>> gas.mass_fraction_dict()\n            {'CH4': 0.02837633052851, 'N2': 0.7452356312613, 'O2': 0.22638803821018}\n            >>> gas.set_equivalence_ratio(1.2, 'NH3:0.8,CO:0.2', 'O2:1', basis='mole')\n            >>> gas.mass_fraction_dict()\n            {'CO': 0.14784006249290, 'NH3': 0.35956645545401, 'O2': 0.49259348205308}\n\n        :param phi:\n            Equivalence ratio\n        :param fuel:\n            Fuel species name or mole/mass fractions as string, array, or dict.\n        :param oxidizer:\n            Oxidizer species name or mole/mass fractions as a string, array, or dict.\n        :param basis:\n            Determines if ``fuel`` and ``oxidizer`` are given in mole\n            fractions (``basis='mole'``) or mass fractions (``basis='mass'``).\n        :param diluent:\n            Optional parameter. Required if dilution is used. Specifies the composition\n            of the diluent in mole/mass fractions as a string, array or dict.\n        :param fraction:\n            Optional parameter. Dilutes the fuel""/oxidizer mixture with the diluent\n            according to ``fraction``. Fraction can refer to the fraction of diluent in\n            the  mixture (for example ``fraction=\"diluent:0.7\"`` will create a mixture\n            with 30 % fuel/oxidizer and 70 % diluent), the fraction of fuel in the\n            mixture (for example ``fraction=\"fuel:0.1\"`` means that the mixture contains\n            10 % fuel. The amount of oxidizer is determined from the equivalence ratio\n            and the remaining mixture is the diluent) or fraction of oxidizer in the\n            mixture (for example ``fraction=\"oxidizer:0.1\"``). The fraction itself is\n            interpreted as mole or mass fraction based on ``basis``. The diluent is not\n            considered in the computation of the equivalence ratio. Default is no\n            dilution or ``fraction=None``. May be given as string or dictionary (for\n            example ``fraction={\"fuel\":0.7}``).\n        ";
static const char __pyx_k_ThermoPhase__composition_to_arr[] = "_ThermoPhase__composition_to_array";
static const char __pyx_k_Valid_choices_are_mass_or_molar[] = "Valid choices are 'mass' or 'molar'. Got {!r}.";
static const char __pyx_k_element_must_be_a_string_or_a_n[] = "'element' must be a string or a number. Got {!r}.";
static const char __pyx_k_fuel_or_oxidizer_fraction_after[] = " fuel or oxidizer fraction after dilution cannot be higher than {fraction_type} fraction in the original mixture.";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_set_discretized_electron_energy[] = "set_discretized_electron_energy_distribution";
static const char __pyx_k_set_unnormalized_mass_fractions[] = "set_unnormalized_mass_fractions";
static const char __pyx_k_set_unnormalized_mole_fractions[] = "set_unnormalized_mole_fractions";
static const char __pyx_k_species_must_be_a_string_or_a_n[] = "'species' must be a string or a number. Got {!r}.";
static const char __pyx_k_Argument_must_be_a_string_or_a_n[] = "Argument must be a string or a number. Got {!r}.";
static const char __pyx_k_Array_has_incorrect_length_Got_e[] = "Array has incorrect length. Got {}, expected {}.";
static const char __pyx_k_Cannot_add_species_to_ThermoPhas[] = "Cannot add species to ThermoPhase object because it is being used by another object,\nsuch as a Reactor, Domain1D (flame), SolutionArray, Quantity, or Mixture object.";
static const char __pyx_k_Cannot_set_vapor_quality_outside[] = "Cannot set vapor quality outside the two-phase region";
static const char __pyx_k_If_dilution_is_used_both_fractio[] = "If dilution is used, both 'fraction' and 'diluent' parameters are required.";
static const char __pyx_k_InterfacePhase___setstate_cython[] = "InterfacePhase.__setstate_cython__";
static const char __pyx_k_Length_of_levels_and_distributio[] = "Length of levels and distribution are different";
static const char __pyx_k_No_fuel_in_the_fuel_oxidizer_mix[] = "No fuel in the fuel/oxidizer mixture";
static const char __pyx_k_No_oxidizer_in_the_fuel_oxidizer[] = "No oxidizer in the fuel/oxidizer mixture";
static const char __pyx_k_The_fraction_argument_must_be_gi[] = "The fraction argument must be given as string or dictionary.";
static const char __pyx_k_The_fraction_must_be_between_0_a[] = "The fraction must be between 0 and 1";
static const char __pyx_k_The_fraction_must_specify_fuel_o[] = "The fraction must specify 'fuel', 'oxidizer' or 'diluent'";
static const char __pyx_k_The_input_argument_to_Element_mu[] = "The input argument to Element must be a string or an integer";
static const char __pyx_k_ThermoPhase___composition_to_arr[] = "ThermoPhase.__composition_to_array";
static const char __pyx_k_ThermoPhase___get___locals_lambd[] = "ThermoPhase.__get__.<locals>.<lambda>";
static const char __pyx_k_ThermoPhase_elemental_mass_fract[] = "ThermoPhase.elemental_mass_fraction";
static const char __pyx_k_ThermoPhase_elemental_mole_fract[] = "ThermoPhase.elemental_mole_fraction";
static const char __pyx_k_ThermoPhase_equivalence_ratio_li[] = "ThermoPhase.equivalence_ratio (line 918)";
static const char __pyx_k_ThermoPhase_mixture_fraction_lin[] = "ThermoPhase.mixture_fraction (line 990)";
static const char __pyx_k_ThermoPhase_set_discretized_elec[] = "ThermoPhase.set_discretized_electron_energy_distribution";
static const char __pyx_k_ThermoPhase_set_equivalence_rati[] = "ThermoPhase.set_equivalence_ratio";
static const char __pyx_k_ThermoPhase_set_mixture_fraction[] = "ThermoPhase.set_mixture_fraction";
static const char __pyx_k_ThermoPhase_set_unnormalized_mas[] = "ThermoPhase.set_unnormalized_mass_fractions";
static const char __pyx_k_ThermoPhase_set_unnormalized_mol[] = "ThermoPhase.set_unnormalized_mole_fractions";
static const char __pyx_k_ThermoPhase_stoich_air_fuel_rati[] = "ThermoPhase.stoich_air_fuel_ratio";
static const char __pyx_k_This_method_is_invalid_for_therm[] = "This method is invalid for thermo model: ";
static const char __pyx_k_Underlying_ThermoPhase_object_is[] = "Underlying ThermoPhase object is of the wrong type.";
static const char __pyx_k_basis_must_either_be_mass_or_mol[] = "basis must either be 'mass' or mole'.";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self__base_self_base_self_kineti[] = "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling";
static const char __pyx_k_Set_the_composition_to_a_mixtur_2[] = "\n        Set the composition to a mixture of ``fuel`` and ``oxidizer`` at the\n        specified mixture fraction ``mixture_fraction`` (kg fuel / kg mixture), holding\n        temperature and pressure constant. Considers the oxidation of C to CO2,\n        H to H2O and S to SO2. Other elements are assumed not to participate in\n        oxidation (that is, N ends up as N2). The ``basis`` determines the composition\n        of fuel and oxidizer: ``basis='mole'`` (default) means mole fractions,\n        ``basis='mass'`` means mass fractions. For more information, see `Python\n        example\n        <https://cantera.org/examples/python/thermo/equivalenceRatio.py.html>`_ ::\n\n            >>> gas.set_mixture_fraction(0.5, 'CH4', 'O2:1.0, N2:3.76')\n            >>> gas.mass_fraction_dict()\n            {'CH4': 0.5, 'N2': 0.38350014242997776, 'O2': 0.11649985757002226}\n            >>> gas.set_mixture_fraction(0.5, {'NH3':0.8, 'CO':0.2}, 'O2:1.0')\n            >>> gas.mass_fraction_dict()\n            {'CO': 0.145682068778996, 'NH3': 0.354317931221004, 'O2': 0.5}\n\n        :param mixture_fraction:\n            Mixture fraction (kg fuel / kg mixture)\n        :param fuel:\n            Fuel species name or mole/mass fractions as string, array, or dict.\n        :param oxidizer:\n            Oxidizer species name or mole/mass fractions as a string, array, or\n            dict.\n        :param basis: determines if ``fuel`` and ``oxidizer`` are given in mole\n            fractions (``basis='mole'``) or mass fractions (``basis='mass'``)\n        ";
static const char __pyx_k_Array_has_incorrect_length_Got_e_2[] = "Array has incorrect length. Got {}, expected {}";
static const char __pyx_k_ThermoPhase_elemental_mass_fract_2[] = "ThermoPhase.elemental_mass_fraction (line 1082)";
static const char __pyx_k_ThermoPhase_elemental_mole_fract_2[] = "ThermoPhase.elemental_mole_fraction (line 1102)";
static const char __pyx_k_ThermoPhase_set_equivalence_rati_2[] = "ThermoPhase.set_equivalence_ratio (line 735)";
static const char __pyx_k_ThermoPhase_set_mixture_fraction_2[] = "ThermoPhase.set_mixture_fraction (line 882)";
static const char __pyx_k_ThermoPhase_stoich_air_fuel_rati_2[] = "ThermoPhase.stoich_air_fuel_ratio (line 1053)";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_7cantera_6thermo_22ThermoModelMethodError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_thermo_model); /* proto */
static int __pyx_pf_7cantera_6thermo_7Species___cinit__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, PyObject *__pyx_v_init, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_7cantera_6thermo_7Species_2__init__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_composition, PyObject *__pyx_v_charge, PyObject *__pyx_v_size, PyObject *__pyx_v_init, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_4from_yaml(PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_6from_dict(PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_8list_from_file(PyObject *__pyx_v_filename, PyObject *__pyx_v_section); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_10list_from_yaml(PyObject *__pyx_v_text, PyObject *__pyx_v_section); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_4name___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_11composition___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_6charge___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_4size___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_16molecular_weight___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_6thermo___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_7Species_6thermo_2__set__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, struct __pyx_obj_7cantera_13speciesthermo_SpeciesThermo *__pyx_v_spthermo); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_9transport___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_7Species_9transport_2__set__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, struct __pyx_obj_7cantera_9transport_GasTransportData *__pyx_v_tran); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_10input_data___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_12update_user_data(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_14clear_user_data(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_16__repr__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Species_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase___init__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12thermo_model___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_15phase_of_matter___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2report(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_show_thermo, float __pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_4__call__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7is_pure___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_20has_phase_transition___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_15is_compressible___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12_native_mode___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_kv); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13_native_state___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12_full_states___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_15_partial_states___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_5basis___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_5basis_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_6equilibrate(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_XY, PyObject *__pyx_v_solver, double __pyx_v_rtol, int __pyx_v_max_steps, int __pyx_v_max_iter, int __pyx_v_estimate_equil, int __pyx_v_log_level); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10n_elements___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_8element_index(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_element); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10element_name(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13element_names___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12atomic_weight(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_14atomic_weights___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_9n_species___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_18n_selected_species___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_14species_name(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13species_names___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_16species_index(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_species); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_18species(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_20modify_species(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_k, struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_species); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_22add_species(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_species); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_24add_species_alias(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_alias); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_26find_isomers(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_comp); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_28n_atoms(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_species, PyObject *__pyx_v_element); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_17molecular_weights___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7charges___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_21mean_molecular_weight___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1Y___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_1Y_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_Y); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1X___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_1X_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_X); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_14concentrations___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_14concentrations_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_C); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_30__composition_to_array(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_comp, PyObject *__pyx_v_basis); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_32set_equivalence_ratio(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_phi, PyObject *__pyx_v_fuel, PyObject *__pyx_v_oxidizer, PyObject *__pyx_v_basis, PyObject *__pyx_v_diluent, PyObject *__pyx_v_fraction); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_34set_mixture_fraction(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_mixture_fraction, PyObject *__pyx_v_fuel, PyObject *__pyx_v_oxidizer, PyObject *__pyx_v_basis); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_36equivalence_ratio(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_fuel, PyObject *__pyx_v_oxidizer, PyObject *__pyx_v_basis, PyObject *__pyx_v_include_species); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_38mixture_fraction(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_fuel, PyObject *__pyx_v_oxidizer, PyObject *__pyx_v_basis, PyObject *__pyx_v_element); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_40stoich_air_fuel_ratio(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_fuel, PyObject *__pyx_v_oxidizer, PyObject *__pyx_v_basis); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_42elemental_mass_fraction(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_44elemental_mole_fraction(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_46set_unnormalized_mass_fractions(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_Y); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_48set_unnormalized_mole_fractions(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_X); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_50mass_fraction_dict(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, double __pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_52mole_fraction_dict(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, double __pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1P___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1T___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7density___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12density_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12density_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1v___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_11volume_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_11volume_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1u___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_15int_energy_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_15int_energy_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1h___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13enthalpy_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13enthalpy_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1s___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12entropy_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12entropy_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1g___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10gibbs_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10gibbs_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2cv___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7cv_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7cv_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2cp___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7cp_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7cp_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_20critical_temperature___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_17critical_pressure___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_16critical_density___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_5P_sat___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_5T_sat___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10state_size___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_5state___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_5state_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_state); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2TD___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2TD_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3TDX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3TDX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3TDY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3TDY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2TP___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2TP_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3TPX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3TPX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3TPY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3TPY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2UV___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2UV_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3UVX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3UVX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3UVY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3UVY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2DP___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2DP_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3DPX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3DPX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3DPY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3DPY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2HP___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2HP_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3HPX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3HPX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3HPY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3HPY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2SP___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2SP_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3SPX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3SPX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3SPY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3SPY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2SV___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2SV_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3SVX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3SVX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3SVY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3SVY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_24partial_molar_enthalpies___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_23partial_molar_entropies___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_26partial_molar_int_energies___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_19chemical_potentials___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_26electrochemical_potentials___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_16partial_molar_cp___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_21partial_molar_volumes___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_22standard_enthalpies_RT___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_20standard_entropies_R___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_24standard_int_energies_RT___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_17standard_gibbs_RT___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13standard_cp_R___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10activities___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_21activity_coefficients___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_26isothermal_compressibility___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_23thermal_expansion_coeff___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_11sound_speed___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_8min_temp___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_8max_temp___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_18reference_pressure___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_18electric_potential___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_18electric_potential_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_28standard_concentration_units___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2Te___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2Te_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2Pe___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_54set_discretized_electron_energy_distribution(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_levels, PyObject *__pyx_v_distribution); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_24n_electron_energy_levels___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_22electron_energy_levels___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_22electron_energy_levels_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_levels); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_28electron_energy_distribution___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_distribution_type); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_20mean_electron_energy___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_20mean_electron_energy_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, double __pyx_v_energy); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_17quadrature_method___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_17quadrature_method_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_method); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_enable); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_14_enable_plasma___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_14_enable_plasma_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cantera_6thermo_11ThermoPhase_14_enable_plasma_4__del__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_56__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_58__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cantera_6thermo_14InterfacePhase___cinit__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_8adjacent___get__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_12site_density___get__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_14InterfacePhase_12site_density_2__set__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_9coverages___get__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_14InterfacePhase_9coverages_2__set__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self, PyObject *__pyx_v_theta); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_2set_unnormalized_coverages(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self, PyObject *__pyx_v_cov); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_1Q___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_9PureFluid_1Q_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_Q); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2TQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_9PureFluid_2TQ_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2PQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_9PureFluid_2PQ_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2ST___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_9PureFluid_2ST_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2TV___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_9PureFluid_2TV_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2PV___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_9PureFluid_2PV_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2UP___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_9PureFluid_2UP_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2VH___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_9PureFluid_2VH_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2TH___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_9PureFluid_2TH_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2SH___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_9PureFluid_2SH_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3TDQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3TPQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_6thermo_9PureFluid_3TPQ_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3UVQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3DPQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3HPQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3SPQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3SVQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_16_element_symbols_genexpr(CYTHON_UNUSED PyObject *__pyx_self, std::vector<std::string>  __pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo__element_symbols(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_14_element_names_genexpr(CYTHON_UNUSED PyObject *__pyx_self, std::vector<std::string>  __pyx_genexpr_arg_0); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_2_element_names(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Element___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Element_2name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Element_4atomic_number(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Element_6symbol(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_6thermo_7Element_8weight(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_7cantera_6thermo_Species(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cantera_6thermo_ThermoPhase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cantera_6thermo_InterfacePhase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cantera_6thermo_PureFluid(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cantera_6thermo___pyx_scope_struct__genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cantera_6thermo___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, 0, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, 0, 0, 0, 0};
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_5func1_Func1;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_5units_Units;
  PyTypeObject *__pyx_ptype_7cantera_5units_UnitStack;
  PyTypeObject *__pyx_ptype_7cantera_5units_UnitSystem;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_12solutionbase__SolutionBase;
  PyTypeObject *__pyx_ptype_7cantera_12solutionbase_SolutionArrayBase;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_13speciesthermo_SpeciesThermo;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_8kinetics_Kinetics;
  PyTypeObject *__pyx_ptype_7cantera_8kinetics_InterfaceKinetics;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_9transport_GasTransportData;
  PyTypeObject *__pyx_ptype_7cantera_9transport_Transport;
  PyTypeObject *__pyx_ptype_7cantera_9transport_DustyGasTransport;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_6_utils_AnyMap;
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_7cantera_6thermo_Species;
  PyObject *__pyx_type_7cantera_6thermo_ThermoPhase;
  PyObject *__pyx_type_7cantera_6thermo_InterfacePhase;
  PyObject *__pyx_type_7cantera_6thermo_PureFluid;
  PyObject *__pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr;
  PyObject *__pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr;
  #endif
  PyTypeObject *__pyx_ptype_7cantera_6thermo_Species;
  PyTypeObject *__pyx_ptype_7cantera_6thermo_ThermoPhase;
  PyTypeObject *__pyx_ptype_7cantera_6thermo_InterfacePhase;
  PyTypeObject *__pyx_ptype_7cantera_6thermo_PureFluid;
  PyTypeObject *__pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr;
  PyTypeObject *__pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr;
  PyObject *__pyx_kp_u_1_0;
  PyObject *__pyx_kp_s_An_element_or_a_named_isotope_d;
  PyObject *__pyx_kp_u_Argument_must_be_a_string_or_a_n;
  PyObject *__pyx_kp_u_Array_has_incorrect_length;
  PyObject *__pyx_kp_u_Array_has_incorrect_length_Got_e;
  PyObject *__pyx_kp_u_Array_has_incorrect_length_Got_e_2;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_n_u_Bilger;
  PyObject *__pyx_kp_u_Cannot_add_species_to_ThermoPhas;
  PyObject *__pyx_kp_u_Cannot_set_vapor_quality_outside;
  PyObject *__pyx_n_s_CanteraError;
  PyObject *__pyx_n_s_Element;
  PyObject *__pyx_n_s_Element___init;
  PyObject *__pyx_n_s_Element_atomic_number;
  PyObject *__pyx_n_s_Element_name;
  PyObject *__pyx_n_s_Element_symbol;
  PyObject *__pyx_n_s_Element_weight;
  PyObject *__pyx_kp_s_Exception_raised_for_an_invalid;
  PyObject *__pyx_kp_u_Generate_a_report_describing_th;
  PyObject *__pyx_kp_u_Get_the_elemental_mass_fraction;
  PyObject *__pyx_kp_u_Get_the_elemental_mole_fraction;
  PyObject *__pyx_kp_u_Get_the_equivalence_ratio_math;
  PyObject *__pyx_kp_u_Get_the_mixture_fraction_of_the;
  PyObject *__pyx_kp_u_Get_the_stoichiometric_air_to_f;
  PyObject *__pyx_kp_u_Got_Expected;
  PyObject *__pyx_kp_u_If_dilution_is_used_both_fractio;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_n_s_InterfacePhase;
  PyObject *__pyx_n_s_InterfacePhase___reduce_cython;
  PyObject *__pyx_n_s_InterfacePhase___setstate_cython;
  PyObject *__pyx_n_s_InterfacePhase_set_unnormalized;
  PyObject *__pyx_kp_u_Invalid_composition;
  PyObject *__pyx_kp_u_Invalid_format_for_the_fraction;
  PyObject *__pyx_kp_u_Length_of_levels_and_distributio;
  PyObject *__pyx_n_s_M_fuel;
  PyObject *__pyx_n_s_M_mix;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_kp_u_No_fuel_in_the_fuel_oxidizer_mix;
  PyObject *__pyx_kp_u_No_oxidizer_in_the_fuel_oxidizer;
  PyObject *__pyx_kp_u_No_such_element_r;
  PyObject *__pyx_kp_u_No_such_species_r;
  PyObject *__pyx_kp_u_Number_of_atoms_of_element_elem;
  PyObject *__pyx_n_s_P;
  PyObject *__pyx_n_s_P_orig;
  PyObject *__pyx_n_s_P_sat;
  PyObject *__pyx_n_s_PureFluid;
  PyObject *__pyx_n_s_PureFluid___reduce_cython;
  PyObject *__pyx_n_s_PureFluid___setstate_cython;
  PyObject *__pyx_n_s_Q;
  PyObject *__pyx_kp_u_Set_the_composition_to_a_mixtur;
  PyObject *__pyx_kp_u_Set_the_composition_to_a_mixtur_2;
  PyObject *__pyx_kp_u_Species;
  PyObject *__pyx_n_s_Species_2;
  PyObject *__pyx_n_s_Species___reduce_cython;
  PyObject *__pyx_n_s_Species___setstate_cython;
  PyObject *__pyx_n_s_Species_clear_user_data;
  PyObject *__pyx_n_s_Species_from_dict;
  PyObject *__pyx_n_s_Species_from_yaml;
  PyObject *__pyx_n_s_Species_list_from_file;
  PyObject *__pyx_n_s_Species_list_from_yaml;
  PyObject *__pyx_n_s_Species_update_user_data;
  PyObject *__pyx_n_s_T;
  PyObject *__pyx_n_s_TP;
  PyObject *__pyx_n_s_TPX;
  PyObject *__pyx_n_s_TPY;
  PyObject *__pyx_n_s_T_orig;
  PyObject *__pyx_kp_u_The;
  PyObject *__pyx_kp_u_The_fraction_argument_must_be_gi;
  PyObject *__pyx_kp_u_The_fraction_must_be_between_0_a;
  PyObject *__pyx_kp_u_The_fraction_must_specify_fuel_o;
  PyObject *__pyx_kp_u_The_input_argument_to_Element_mu;
  PyObject *__pyx_n_s_ThermoModelMethodError;
  PyObject *__pyx_n_s_ThermoModelMethodError___init;
  PyObject *__pyx_n_s_ThermoPhase;
  PyObject *__pyx_n_s_ThermoPhase___composition_to_arr;
  PyObject *__pyx_n_s_ThermoPhase___get___locals_lambd;
  PyObject *__pyx_n_s_ThermoPhase___reduce_cython;
  PyObject *__pyx_n_s_ThermoPhase___setstate_cython;
  PyObject *__pyx_n_s_ThermoPhase__composition_to_arr;
  PyObject *__pyx_n_s_ThermoPhase_add_species;
  PyObject *__pyx_n_s_ThermoPhase_add_species_alias;
  PyObject *__pyx_n_s_ThermoPhase_atomic_weight;
  PyObject *__pyx_n_s_ThermoPhase_element_index;
  PyObject *__pyx_n_s_ThermoPhase_element_name;
  PyObject *__pyx_n_s_ThermoPhase_elemental_mass_fract;
  PyObject *__pyx_kp_u_ThermoPhase_elemental_mass_fract_2;
  PyObject *__pyx_n_s_ThermoPhase_elemental_mole_fract;
  PyObject *__pyx_kp_u_ThermoPhase_elemental_mole_fract_2;
  PyObject *__pyx_n_s_ThermoPhase_equilibrate;
  PyObject *__pyx_n_s_ThermoPhase_equivalence_ratio;
  PyObject *__pyx_kp_u_ThermoPhase_equivalence_ratio_li;
  PyObject *__pyx_n_s_ThermoPhase_find_isomers;
  PyObject *__pyx_n_s_ThermoPhase_mass_fraction_dict;
  PyObject *__pyx_n_s_ThermoPhase_mixture_fraction;
  PyObject *__pyx_kp_u_ThermoPhase_mixture_fraction_lin;
  PyObject *__pyx_n_s_ThermoPhase_modify_species;
  PyObject *__pyx_n_s_ThermoPhase_mole_fraction_dict;
  PyObject *__pyx_n_s_ThermoPhase_n_atoms;
  PyObject *__pyx_kp_u_ThermoPhase_n_atoms_line_608;
  PyObject *__pyx_n_s_ThermoPhase_report;
  PyObject *__pyx_kp_u_ThermoPhase_report_line_298;
  PyObject *__pyx_n_s_ThermoPhase_set_discretized_elec;
  PyObject *__pyx_n_s_ThermoPhase_set_equivalence_rati;
  PyObject *__pyx_kp_u_ThermoPhase_set_equivalence_rati_2;
  PyObject *__pyx_n_s_ThermoPhase_set_mixture_fraction;
  PyObject *__pyx_kp_u_ThermoPhase_set_mixture_fraction_2;
  PyObject *__pyx_n_s_ThermoPhase_set_unnormalized_mas;
  PyObject *__pyx_n_s_ThermoPhase_set_unnormalized_mol;
  PyObject *__pyx_n_s_ThermoPhase_species;
  PyObject *__pyx_n_s_ThermoPhase_species_index;
  PyObject *__pyx_n_s_ThermoPhase_species_name;
  PyObject *__pyx_n_s_ThermoPhase_stoich_air_fuel_rati;
  PyObject *__pyx_kp_u_ThermoPhase_stoich_air_fuel_rati_2;
  PyObject *__pyx_kp_u_This_method_is_invalid_for;
  PyObject *__pyx_kp_u_This_method_is_invalid_for_therm;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_u_Underlying_ThermoPhase_object_is;
  PyObject *__pyx_kp_u_Valid_choices_are_mass_or_molar;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_WeakKeyDictionary;
  PyObject *__pyx_n_s_X;
  PyObject *__pyx_n_s_XY;
  PyObject *__pyx_n_s_X_fuelox;
  PyObject *__pyx_n_s_X_mix;
  PyObject *__pyx_n_s_Y;
  PyObject *__pyx_n_s_Y_fuelox;
  PyObject *__pyx_n_s_Y_mix;
  PyObject *__pyx_n_s_Y_orig;
  PyObject *__pyx_n_s_Z;
  PyObject *__pyx_n_s_Z_fuel;
  PyObject *__pyx_n_s_Z_fuel_mole;
  PyObject *__pyx_n_s__109;
  PyObject *__pyx_n_s__17;
  PyObject *__pyx_kp_u__3;
  PyObject *__pyx_kp_u__4;
  PyObject *__pyx_n_s_a;
  PyObject *__pyx_n_s_add_species;
  PyObject *__pyx_n_s_add_species_alias;
  PyObject *__pyx_n_s_alias;
  PyObject *__pyx_n_s_any_map;
  PyObject *__pyx_n_s_arg;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_arr;
  PyObject *__pyx_n_s_array;
  PyObject *__pyx_n_s_asarray;
  PyObject *__pyx_n_s_ascontiguousarray;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_atomic_number;
  PyObject *__pyx_n_s_atomic_number_2;
  PyObject *__pyx_n_s_atomic_weight;
  PyObject *__pyx_n_u_auto;
  PyObject *__pyx_n_s_b;
  PyObject *__pyx_n_s_basis;
  PyObject *__pyx_kp_u_basis_must_either_be_mass_or_mol;
  PyObject *__pyx_n_s_cantera_thermo;
  PyObject *__pyx_kp_s_cantera_thermo_pyx;
  PyObject *__pyx_n_s_charge;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_clear_user_data;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_comp;
  PyObject *__pyx_n_s_composition;
  PyObject *__pyx_n_s_composition_to_array;
  PyObject *__pyx_n_s_copy;
  PyObject *__pyx_n_s_cov;
  PyObject *__pyx_n_s_critical_pressure;
  PyObject *__pyx_n_s_cxx_species;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_data_dist;
  PyObject *__pyx_n_s_data_levels;
  PyObject *__pyx_n_s_density;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_diluent;
  PyObject *__pyx_n_u_diluent;
  PyObject *__pyx_n_s_diluent_comp;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_distribution;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_double;
  PyObject *__pyx_n_s_dtype;
  PyObject *__pyx_n_s_e_name;
  PyObject *__pyx_n_s_element;
  PyObject *__pyx_n_s_element_index;
  PyObject *__pyx_kp_u_element_must_be_a_string_or_a_n;
  PyObject *__pyx_n_s_element_name;
  PyObject *__pyx_n_s_element_names;
  PyObject *__pyx_n_s_element_names_2;
  PyObject *__pyx_n_s_element_names_locals_genexpr;
  PyObject *__pyx_n_s_element_symbols;
  PyObject *__pyx_n_s_element_symbols_2;
  PyObject *__pyx_n_s_element_symbols_locals_genexpr;
  PyObject *__pyx_n_s_elemental_mass_fraction;
  PyObject *__pyx_n_s_elemental_mole_fraction;
  PyObject *__pyx_n_s_empty;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_equilibrate;
  PyObject *__pyx_n_s_equivalence_ratio;
  PyObject *__pyx_n_s_estimate_equil;
  PyObject *__pyx_n_s_f;
  PyObject *__pyx_n_s_factor;
  PyObject *__pyx_n_s_filename;
  PyObject *__pyx_n_s_find_isomers;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_n_s_fraction;
  PyObject *__pyx_kp_u_fraction_after_dilution_cannot;
  PyObject *__pyx_n_s_fraction_dict;
  PyObject *__pyx_n_s_fraction_type;
  PyObject *__pyx_n_s_fraction_value;
  PyObject *__pyx_n_s_from_dict;
  PyObject *__pyx_n_s_from_yaml;
  PyObject *__pyx_n_s_fuel;
  PyObject *__pyx_n_u_fuel;
  PyObject *__pyx_n_s_fuel_comp;
  PyObject *__pyx_kp_u_fuel_or_oxidizer_fraction_after;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_genexpr;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_h;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_include_species;
  PyObject *__pyx_kp_u_incorrect_number_of_values;
  PyObject *__pyx_n_s_indices;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_init_2;
  PyObject *__pyx_n_u_init_2;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_iso;
  PyObject *__pyx_n_s_item;
  PyObject *__pyx_n_s_items;
  PyObject *__pyx_n_u_items;
  PyObject *__pyx_n_s_k;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_s_kv;
  PyObject *__pyx_n_s_levels;
  PyObject *__pyx_n_s_list_from_file;
  PyObject *__pyx_n_s_list_from_yaml;
  PyObject *__pyx_n_s_log_level;
  PyObject *__pyx_n_s_lower;
  PyObject *__pyx_n_s_m;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_u_mass;
  PyObject *__pyx_n_s_mass_fraction_dict;
  PyObject *__pyx_n_s_max_iter;
  PyObject *__pyx_n_s_max_steps;
  PyObject *__pyx_n_s_mean_molecular_weight;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_mixture_fraction;
  PyObject *__pyx_n_s_modify_species;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_u_molar;
  PyObject *__pyx_n_u_mole;
  PyObject *__pyx_n_s_mole_fraction_dict;
  PyObject *__pyx_n_s_mro_entries;
  PyObject *__pyx_n_s_n_atoms;
  PyObject *__pyx_n_s_n_electron_energy_levels;
  PyObject *__pyx_n_s_n_elements;
  PyObject *__pyx_n_s_n_species;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_name_3;
  PyObject *__pyx_n_s_names;
  PyObject *__pyx_n_s_ndim;
  PyObject *__pyx_n_s_newaxis;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_num_elements_defined;
  PyObject *__pyx_n_s_numbers;
  PyObject *__pyx_n_s_numbers_2;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
  PyObject *__pyx_n_s_o;
  PyObject *__pyx_kp_u_or;
  PyObject *__pyx_n_s_original_state;
  PyObject *__pyx_n_s_ox_comp;
  PyObject *__pyx_n_s_oxidizer;
  PyObject *__pyx_n_u_oxidizer;
  PyObject *__pyx_n_s_phi;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_print;
  PyObject *__pyx_n_s_property;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_report;
  PyObject *__pyx_n_s_root;
  PyObject *__pyx_n_s_rtol;
  PyObject *__pyx_n_s_s;
  PyObject *__pyx_n_s_section;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self__base_self_base_self_kineti;
  PyObject *__pyx_n_s_send;
  PyObject *__pyx_n_s_set_discretized_electron_energy;
  PyObject *__pyx_n_s_set_equivalence_ratio;
  PyObject *__pyx_n_s_set_mixture_fraction;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_n_s_set_unnormalized_coverages;
  PyObject *__pyx_n_s_set_unnormalized_mass_fractions;
  PyObject *__pyx_n_s_set_unnormalized_mole_fractions;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_show_thermo;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_solver;
  PyObject *__pyx_n_s_sorted;
  PyObject *__pyx_n_u_source;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_species;
  PyObject *__pyx_n_u_species;
  PyObject *__pyx_n_s_species_index;
  PyObject *__pyx_kp_u_species_must_be_a_string_or_a_n;
  PyObject *__pyx_n_s_species_name;
  PyObject *__pyx_n_s_species_names;
  PyObject *__pyx_n_s_squeeze;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_n_s_state_size;
  PyObject *__pyx_n_s_staticmethod;
  PyObject *__pyx_n_s_stoich_air_fuel_ratio;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_symbol;
  PyObject *__pyx_n_s_symbol_2;
  PyObject *__pyx_n_s_syms;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_text;
  PyObject *__pyx_n_s_thermo_model;
  PyObject *__pyx_n_s_threshold;
  PyObject *__pyx_n_s_throw;
  PyObject *__pyx_n_s_u;
  PyObject *__pyx_n_s_update_user_data;
  PyObject *__pyx_n_s_upper;
  PyObject *__pyx_n_s_utils;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_n_s_values;
  PyObject *__pyx_n_s_warnings;
  PyObject *__pyx_n_s_weakref;
  PyObject *__pyx_n_s_weight;
  PyObject *__pyx_n_s_weight_2;
  PyObject *__pyx_n_s_zeros;
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_float_1eneg_4;
  PyObject *__pyx_float_1eneg_9;
  PyObject *__pyx_float_1eneg_14;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_100;
  PyObject *__pyx_int_1000;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_tuple__32;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__37;
  PyObject *__pyx_tuple__39;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__59;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__68;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_tuple__75;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__87;
  PyObject *__pyx_tuple__89;
  PyObject *__pyx_tuple__93;
  PyObject *__pyx_tuple__99;
  PyObject *__pyx_tuple__101;
  PyObject *__pyx_tuple__103;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__21;
  PyObject *__pyx_codeobj__23;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__36;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__58;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__62;
  PyObject *__pyx_codeobj__64;
  PyObject *__pyx_codeobj__66;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__74;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__78;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__81;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__88;
  PyObject *__pyx_codeobj__90;
  PyObject *__pyx_codeobj__91;
  PyObject *__pyx_codeobj__92;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__95;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__98;
  PyObject *__pyx_codeobj__100;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__105;
  PyObject *__pyx_codeobj__106;
  PyObject *__pyx_codeobj__107;
  PyObject *__pyx_codeobj__108;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_5func1_Func1);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_5units_Units);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_5units_UnitStack);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_5units_UnitSystem);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_12solutionbase__SolutionBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_12solutionbase_SolutionArrayBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_13speciesthermo_SpeciesThermo);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_8kinetics_Kinetics);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_8kinetics_InterfaceKinetics);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_9transport_GasTransportData);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_9transport_Transport);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_9transport_DustyGasTransport);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_6_utils_AnyMap);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_6thermo_Species);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_6thermo_Species);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_6thermo_ThermoPhase);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_6thermo_ThermoPhase);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_6thermo_InterfacePhase);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_6thermo_InterfacePhase);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_6thermo_PureFluid);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_6thermo_PureFluid);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1_0);
  Py_CLEAR(clear_module_state->__pyx_kp_s_An_element_or_a_named_isotope_d);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Argument_must_be_a_string_or_a_n);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Array_has_incorrect_length);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Array_has_incorrect_length_Got_e);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Array_has_incorrect_length_Got_e_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_n_u_Bilger);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_add_species_to_ThermoPhas);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_set_vapor_quality_outside);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanteraError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Element);
  Py_CLEAR(clear_module_state->__pyx_n_s_Element___init);
  Py_CLEAR(clear_module_state->__pyx_n_s_Element_atomic_number);
  Py_CLEAR(clear_module_state->__pyx_n_s_Element_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_Element_symbol);
  Py_CLEAR(clear_module_state->__pyx_n_s_Element_weight);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Exception_raised_for_an_invalid);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Generate_a_report_describing_th);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Get_the_elemental_mass_fraction);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Get_the_elemental_mole_fraction);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Get_the_equivalence_ratio_math);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Get_the_mixture_fraction_of_the);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Get_the_stoichiometric_air_to_f);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Got_Expected);
  Py_CLEAR(clear_module_state->__pyx_kp_u_If_dilution_is_used_both_fractio);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_n_s_InterfacePhase);
  Py_CLEAR(clear_module_state->__pyx_n_s_InterfacePhase___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_InterfacePhase___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_InterfacePhase_set_unnormalized);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_composition);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_format_for_the_fraction);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Length_of_levels_and_distributio);
  Py_CLEAR(clear_module_state->__pyx_n_s_M_fuel);
  Py_CLEAR(clear_module_state->__pyx_n_s_M_mix);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_fuel_in_the_fuel_oxidizer_mix);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_oxidizer_in_the_fuel_oxidizer);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_such_element_r);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_such_species_r);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Number_of_atoms_of_element_elem);
  Py_CLEAR(clear_module_state->__pyx_n_s_P);
  Py_CLEAR(clear_module_state->__pyx_n_s_P_orig);
  Py_CLEAR(clear_module_state->__pyx_n_s_P_sat);
  Py_CLEAR(clear_module_state->__pyx_n_s_PureFluid);
  Py_CLEAR(clear_module_state->__pyx_n_s_PureFluid___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_PureFluid___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Q);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Set_the_composition_to_a_mixtur);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Set_the_composition_to_a_mixtur_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Species);
  Py_CLEAR(clear_module_state->__pyx_n_s_Species_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Species___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Species___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Species_clear_user_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_Species_from_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_Species_from_yaml);
  Py_CLEAR(clear_module_state->__pyx_n_s_Species_list_from_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_Species_list_from_yaml);
  Py_CLEAR(clear_module_state->__pyx_n_s_Species_update_user_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_T);
  Py_CLEAR(clear_module_state->__pyx_n_s_TP);
  Py_CLEAR(clear_module_state->__pyx_n_s_TPX);
  Py_CLEAR(clear_module_state->__pyx_n_s_TPY);
  Py_CLEAR(clear_module_state->__pyx_n_s_T_orig);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_fraction_argument_must_be_gi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_fraction_must_be_between_0_a);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_fraction_must_specify_fuel_o);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_input_argument_to_Element_mu);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoModelMethodError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoModelMethodError___init);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase___composition_to_arr);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase___get___locals_lambd);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase__composition_to_arr);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_add_species);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_add_species_alias);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_atomic_weight);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_element_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_element_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_elemental_mass_fract);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ThermoPhase_elemental_mass_fract_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_elemental_mole_fract);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ThermoPhase_elemental_mole_fract_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_equilibrate);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_equivalence_ratio);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ThermoPhase_equivalence_ratio_li);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_find_isomers);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_mass_fraction_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_mixture_fraction);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ThermoPhase_mixture_fraction_lin);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_modify_species);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_mole_fraction_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_n_atoms);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ThermoPhase_n_atoms_line_608);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_report);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ThermoPhase_report_line_298);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_set_discretized_elec);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_set_equivalence_rati);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ThermoPhase_set_equivalence_rati_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_set_mixture_fraction);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ThermoPhase_set_mixture_fraction_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_set_unnormalized_mas);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_set_unnormalized_mol);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_species);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_species_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_species_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoPhase_stoich_air_fuel_rati);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ThermoPhase_stoich_air_fuel_rati_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_This_method_is_invalid_for);
  Py_CLEAR(clear_module_state->__pyx_kp_u_This_method_is_invalid_for_therm);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Underlying_ThermoPhase_object_is);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Valid_choices_are_mass_or_molar);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_WeakKeyDictionary);
  Py_CLEAR(clear_module_state->__pyx_n_s_X);
  Py_CLEAR(clear_module_state->__pyx_n_s_XY);
  Py_CLEAR(clear_module_state->__pyx_n_s_X_fuelox);
  Py_CLEAR(clear_module_state->__pyx_n_s_X_mix);
  Py_CLEAR(clear_module_state->__pyx_n_s_Y);
  Py_CLEAR(clear_module_state->__pyx_n_s_Y_fuelox);
  Py_CLEAR(clear_module_state->__pyx_n_s_Y_mix);
  Py_CLEAR(clear_module_state->__pyx_n_s_Y_orig);
  Py_CLEAR(clear_module_state->__pyx_n_s_Z);
  Py_CLEAR(clear_module_state->__pyx_n_s_Z_fuel);
  Py_CLEAR(clear_module_state->__pyx_n_s_Z_fuel_mole);
  Py_CLEAR(clear_module_state->__pyx_n_s__109);
  Py_CLEAR(clear_module_state->__pyx_n_s__17);
  Py_CLEAR(clear_module_state->__pyx_kp_u__3);
  Py_CLEAR(clear_module_state->__pyx_kp_u__4);
  Py_CLEAR(clear_module_state->__pyx_n_s_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_species);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_species_alias);
  Py_CLEAR(clear_module_state->__pyx_n_s_alias);
  Py_CLEAR(clear_module_state->__pyx_n_s_any_map);
  Py_CLEAR(clear_module_state->__pyx_n_s_arg);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_arr);
  Py_CLEAR(clear_module_state->__pyx_n_s_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_asarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_ascontiguousarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_atomic_number);
  Py_CLEAR(clear_module_state->__pyx_n_s_atomic_number_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_atomic_weight);
  Py_CLEAR(clear_module_state->__pyx_n_u_auto);
  Py_CLEAR(clear_module_state->__pyx_n_s_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_basis);
  Py_CLEAR(clear_module_state->__pyx_kp_u_basis_must_either_be_mass_or_mol);
  Py_CLEAR(clear_module_state->__pyx_n_s_cantera_thermo);
  Py_CLEAR(clear_module_state->__pyx_kp_s_cantera_thermo_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_charge);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_clear_user_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_comp);
  Py_CLEAR(clear_module_state->__pyx_n_s_composition);
  Py_CLEAR(clear_module_state->__pyx_n_s_composition_to_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_cov);
  Py_CLEAR(clear_module_state->__pyx_n_s_critical_pressure);
  Py_CLEAR(clear_module_state->__pyx_n_s_cxx_species);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_data_dist);
  Py_CLEAR(clear_module_state->__pyx_n_s_data_levels);
  Py_CLEAR(clear_module_state->__pyx_n_s_density);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_diluent);
  Py_CLEAR(clear_module_state->__pyx_n_u_diluent);
  Py_CLEAR(clear_module_state->__pyx_n_s_diluent_comp);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_distribution);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_double);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_e_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_element);
  Py_CLEAR(clear_module_state->__pyx_n_s_element_index);
  Py_CLEAR(clear_module_state->__pyx_kp_u_element_must_be_a_string_or_a_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_element_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_element_names);
  Py_CLEAR(clear_module_state->__pyx_n_s_element_names_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_element_names_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_element_symbols);
  Py_CLEAR(clear_module_state->__pyx_n_s_element_symbols_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_element_symbols_locals_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_elemental_mass_fraction);
  Py_CLEAR(clear_module_state->__pyx_n_s_elemental_mole_fraction);
  Py_CLEAR(clear_module_state->__pyx_n_s_empty);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_equilibrate);
  Py_CLEAR(clear_module_state->__pyx_n_s_equivalence_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_estimate_equil);
  Py_CLEAR(clear_module_state->__pyx_n_s_f);
  Py_CLEAR(clear_module_state->__pyx_n_s_factor);
  Py_CLEAR(clear_module_state->__pyx_n_s_filename);
  Py_CLEAR(clear_module_state->__pyx_n_s_find_isomers);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_n_s_fraction);
  Py_CLEAR(clear_module_state->__pyx_kp_u_fraction_after_dilution_cannot);
  Py_CLEAR(clear_module_state->__pyx_n_s_fraction_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_fraction_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_fraction_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_yaml);
  Py_CLEAR(clear_module_state->__pyx_n_s_fuel);
  Py_CLEAR(clear_module_state->__pyx_n_u_fuel);
  Py_CLEAR(clear_module_state->__pyx_n_s_fuel_comp);
  Py_CLEAR(clear_module_state->__pyx_kp_u_fuel_or_oxidizer_fraction_after);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_h);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_include_species);
  Py_CLEAR(clear_module_state->__pyx_kp_u_incorrect_number_of_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_indices);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_2);
  Py_CLEAR(clear_module_state->__pyx_n_u_init_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_subclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_iso);
  Py_CLEAR(clear_module_state->__pyx_n_s_item);
  Py_CLEAR(clear_module_state->__pyx_n_s_items);
  Py_CLEAR(clear_module_state->__pyx_n_u_items);
  Py_CLEAR(clear_module_state->__pyx_n_s_k);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_kv);
  Py_CLEAR(clear_module_state->__pyx_n_s_levels);
  Py_CLEAR(clear_module_state->__pyx_n_s_list_from_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_list_from_yaml);
  Py_CLEAR(clear_module_state->__pyx_n_s_log_level);
  Py_CLEAR(clear_module_state->__pyx_n_s_lower);
  Py_CLEAR(clear_module_state->__pyx_n_s_m);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_u_mass);
  Py_CLEAR(clear_module_state->__pyx_n_s_mass_fraction_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_iter);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_steps);
  Py_CLEAR(clear_module_state->__pyx_n_s_mean_molecular_weight);
  Py_CLEAR(clear_module_state->__pyx_n_s_metaclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_mixture_fraction);
  Py_CLEAR(clear_module_state->__pyx_n_s_modify_species);
  Py_CLEAR(clear_module_state->__pyx_n_s_module);
  Py_CLEAR(clear_module_state->__pyx_n_u_molar);
  Py_CLEAR(clear_module_state->__pyx_n_u_mole);
  Py_CLEAR(clear_module_state->__pyx_n_s_mole_fraction_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_mro_entries);
  Py_CLEAR(clear_module_state->__pyx_n_s_n_atoms);
  Py_CLEAR(clear_module_state->__pyx_n_s_n_electron_energy_levels);
  Py_CLEAR(clear_module_state->__pyx_n_s_n_elements);
  Py_CLEAR(clear_module_state->__pyx_n_s_n_species);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_names);
  Py_CLEAR(clear_module_state->__pyx_n_s_ndim);
  Py_CLEAR(clear_module_state->__pyx_n_s_newaxis);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_elements_defined);
  Py_CLEAR(clear_module_state->__pyx_n_s_numbers);
  Py_CLEAR(clear_module_state->__pyx_n_s_numbers_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_CLEAR(clear_module_state->__pyx_n_s_o);
  Py_CLEAR(clear_module_state->__pyx_kp_u_or);
  Py_CLEAR(clear_module_state->__pyx_n_s_original_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_ox_comp);
  Py_CLEAR(clear_module_state->__pyx_n_s_oxidizer);
  Py_CLEAR(clear_module_state->__pyx_n_u_oxidizer);
  Py_CLEAR(clear_module_state->__pyx_n_s_phi);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepare);
  Py_CLEAR(clear_module_state->__pyx_n_s_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_property);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_report);
  Py_CLEAR(clear_module_state->__pyx_n_s_root);
  Py_CLEAR(clear_module_state->__pyx_n_s_rtol);
  Py_CLEAR(clear_module_state->__pyx_n_s_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_section);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__base_self_base_self_kineti);
  Py_CLEAR(clear_module_state->__pyx_n_s_send);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_discretized_electron_energy);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_equivalence_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_mixture_fraction);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_unnormalized_coverages);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_unnormalized_mass_fractions);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_unnormalized_mole_fractions);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_show_thermo);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_solver);
  Py_CLEAR(clear_module_state->__pyx_n_s_sorted);
  Py_CLEAR(clear_module_state->__pyx_n_u_source);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_species);
  Py_CLEAR(clear_module_state->__pyx_n_u_species);
  Py_CLEAR(clear_module_state->__pyx_n_s_species_index);
  Py_CLEAR(clear_module_state->__pyx_kp_u_species_must_be_a_string_or_a_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_species_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_species_names);
  Py_CLEAR(clear_module_state->__pyx_n_s_squeeze);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_state_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_staticmethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_stoich_air_fuel_ratio);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_symbol);
  Py_CLEAR(clear_module_state->__pyx_n_s_symbol_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_syms);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_text);
  Py_CLEAR(clear_module_state->__pyx_n_s_thermo_model);
  Py_CLEAR(clear_module_state->__pyx_n_s_threshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_throw);
  Py_CLEAR(clear_module_state->__pyx_n_s_u);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_user_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_upper);
  Py_CLEAR(clear_module_state->__pyx_n_s_utils);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_warnings);
  Py_CLEAR(clear_module_state->__pyx_n_s_weakref);
  Py_CLEAR(clear_module_state->__pyx_n_s_weight);
  Py_CLEAR(clear_module_state->__pyx_n_s_weight_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeros);
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_1_0);
  Py_CLEAR(clear_module_state->__pyx_float_1eneg_4);
  Py_CLEAR(clear_module_state->__pyx_float_1eneg_9);
  Py_CLEAR(clear_module_state->__pyx_float_1eneg_14);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_100);
  Py_CLEAR(clear_module_state->__pyx_int_1000);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__32);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__37);
  Py_CLEAR(clear_module_state->__pyx_tuple__39);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__59);
  Py_CLEAR(clear_module_state->__pyx_tuple__61);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__68);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__73);
  Py_CLEAR(clear_module_state->__pyx_tuple__75);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__87);
  Py_CLEAR(clear_module_state->__pyx_tuple__89);
  Py_CLEAR(clear_module_state->__pyx_tuple__93);
  Py_CLEAR(clear_module_state->__pyx_tuple__99);
  Py_CLEAR(clear_module_state->__pyx_tuple__101);
  Py_CLEAR(clear_module_state->__pyx_tuple__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__21);
  Py_CLEAR(clear_module_state->__pyx_codeobj__23);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__36);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__58);
  Py_CLEAR(clear_module_state->__pyx_codeobj__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__62);
  Py_CLEAR(clear_module_state->__pyx_codeobj__64);
  Py_CLEAR(clear_module_state->__pyx_codeobj__66);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__74);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__78);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__88);
  Py_CLEAR(clear_module_state->__pyx_codeobj__90);
  Py_CLEAR(clear_module_state->__pyx_codeobj__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__92);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__100);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__105);
  Py_CLEAR(clear_module_state->__pyx_codeobj__106);
  Py_CLEAR(clear_module_state->__pyx_codeobj__107);
  Py_CLEAR(clear_module_state->__pyx_codeobj__108);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_5func1_Func1);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_5units_Units);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_5units_UnitStack);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_5units_UnitSystem);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_12solutionbase__SolutionBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_12solutionbase_SolutionArrayBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_13speciesthermo_SpeciesThermo);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_8kinetics_Kinetics);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_8kinetics_InterfaceKinetics);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_9transport_GasTransportData);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_9transport_Transport);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_9transport_DustyGasTransport);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_6_utils_AnyMap);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_6thermo_Species);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_6thermo_Species);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_6thermo_ThermoPhase);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_6thermo_ThermoPhase);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_6thermo_InterfacePhase);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_6thermo_InterfacePhase);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_6thermo_PureFluid);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_6thermo_PureFluid);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1_0);
  Py_VISIT(traverse_module_state->__pyx_kp_s_An_element_or_a_named_isotope_d);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Argument_must_be_a_string_or_a_n);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Array_has_incorrect_length);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Array_has_incorrect_length_Got_e);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Array_has_incorrect_length_Got_e_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_n_u_Bilger);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_add_species_to_ThermoPhas);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_set_vapor_quality_outside);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanteraError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Element);
  Py_VISIT(traverse_module_state->__pyx_n_s_Element___init);
  Py_VISIT(traverse_module_state->__pyx_n_s_Element_atomic_number);
  Py_VISIT(traverse_module_state->__pyx_n_s_Element_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_Element_symbol);
  Py_VISIT(traverse_module_state->__pyx_n_s_Element_weight);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Exception_raised_for_an_invalid);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Generate_a_report_describing_th);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Get_the_elemental_mass_fraction);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Get_the_elemental_mole_fraction);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Get_the_equivalence_ratio_math);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Get_the_mixture_fraction_of_the);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Get_the_stoichiometric_air_to_f);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Got_Expected);
  Py_VISIT(traverse_module_state->__pyx_kp_u_If_dilution_is_used_both_fractio);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_n_s_InterfacePhase);
  Py_VISIT(traverse_module_state->__pyx_n_s_InterfacePhase___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_InterfacePhase___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_InterfacePhase_set_unnormalized);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_composition);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_format_for_the_fraction);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Length_of_levels_and_distributio);
  Py_VISIT(traverse_module_state->__pyx_n_s_M_fuel);
  Py_VISIT(traverse_module_state->__pyx_n_s_M_mix);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_fuel_in_the_fuel_oxidizer_mix);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_oxidizer_in_the_fuel_oxidizer);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_such_element_r);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_such_species_r);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Number_of_atoms_of_element_elem);
  Py_VISIT(traverse_module_state->__pyx_n_s_P);
  Py_VISIT(traverse_module_state->__pyx_n_s_P_orig);
  Py_VISIT(traverse_module_state->__pyx_n_s_P_sat);
  Py_VISIT(traverse_module_state->__pyx_n_s_PureFluid);
  Py_VISIT(traverse_module_state->__pyx_n_s_PureFluid___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_PureFluid___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Q);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Set_the_composition_to_a_mixtur);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Set_the_composition_to_a_mixtur_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Species);
  Py_VISIT(traverse_module_state->__pyx_n_s_Species_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Species___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Species___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Species_clear_user_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_Species_from_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_Species_from_yaml);
  Py_VISIT(traverse_module_state->__pyx_n_s_Species_list_from_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_Species_list_from_yaml);
  Py_VISIT(traverse_module_state->__pyx_n_s_Species_update_user_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_T);
  Py_VISIT(traverse_module_state->__pyx_n_s_TP);
  Py_VISIT(traverse_module_state->__pyx_n_s_TPX);
  Py_VISIT(traverse_module_state->__pyx_n_s_TPY);
  Py_VISIT(traverse_module_state->__pyx_n_s_T_orig);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_fraction_argument_must_be_gi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_fraction_must_be_between_0_a);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_fraction_must_specify_fuel_o);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_input_argument_to_Element_mu);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoModelMethodError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoModelMethodError___init);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase___composition_to_arr);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase___get___locals_lambd);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase__composition_to_arr);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_add_species);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_add_species_alias);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_atomic_weight);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_element_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_element_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_elemental_mass_fract);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ThermoPhase_elemental_mass_fract_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_elemental_mole_fract);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ThermoPhase_elemental_mole_fract_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_equilibrate);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_equivalence_ratio);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ThermoPhase_equivalence_ratio_li);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_find_isomers);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_mass_fraction_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_mixture_fraction);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ThermoPhase_mixture_fraction_lin);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_modify_species);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_mole_fraction_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_n_atoms);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ThermoPhase_n_atoms_line_608);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_report);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ThermoPhase_report_line_298);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_set_discretized_elec);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_set_equivalence_rati);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ThermoPhase_set_equivalence_rati_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_set_mixture_fraction);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ThermoPhase_set_mixture_fraction_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_set_unnormalized_mas);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_set_unnormalized_mol);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_species);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_species_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_species_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoPhase_stoich_air_fuel_rati);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ThermoPhase_stoich_air_fuel_rati_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_This_method_is_invalid_for);
  Py_VISIT(traverse_module_state->__pyx_kp_u_This_method_is_invalid_for_therm);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Underlying_ThermoPhase_object_is);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Valid_choices_are_mass_or_molar);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_WeakKeyDictionary);
  Py_VISIT(traverse_module_state->__pyx_n_s_X);
  Py_VISIT(traverse_module_state->__pyx_n_s_XY);
  Py_VISIT(traverse_module_state->__pyx_n_s_X_fuelox);
  Py_VISIT(traverse_module_state->__pyx_n_s_X_mix);
  Py_VISIT(traverse_module_state->__pyx_n_s_Y);
  Py_VISIT(traverse_module_state->__pyx_n_s_Y_fuelox);
  Py_VISIT(traverse_module_state->__pyx_n_s_Y_mix);
  Py_VISIT(traverse_module_state->__pyx_n_s_Y_orig);
  Py_VISIT(traverse_module_state->__pyx_n_s_Z);
  Py_VISIT(traverse_module_state->__pyx_n_s_Z_fuel);
  Py_VISIT(traverse_module_state->__pyx_n_s_Z_fuel_mole);
  Py_VISIT(traverse_module_state->__pyx_n_s__109);
  Py_VISIT(traverse_module_state->__pyx_n_s__17);
  Py_VISIT(traverse_module_state->__pyx_kp_u__3);
  Py_VISIT(traverse_module_state->__pyx_kp_u__4);
  Py_VISIT(traverse_module_state->__pyx_n_s_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_species);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_species_alias);
  Py_VISIT(traverse_module_state->__pyx_n_s_alias);
  Py_VISIT(traverse_module_state->__pyx_n_s_any_map);
  Py_VISIT(traverse_module_state->__pyx_n_s_arg);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_arr);
  Py_VISIT(traverse_module_state->__pyx_n_s_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_asarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_ascontiguousarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_atomic_number);
  Py_VISIT(traverse_module_state->__pyx_n_s_atomic_number_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_atomic_weight);
  Py_VISIT(traverse_module_state->__pyx_n_u_auto);
  Py_VISIT(traverse_module_state->__pyx_n_s_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_basis);
  Py_VISIT(traverse_module_state->__pyx_kp_u_basis_must_either_be_mass_or_mol);
  Py_VISIT(traverse_module_state->__pyx_n_s_cantera_thermo);
  Py_VISIT(traverse_module_state->__pyx_kp_s_cantera_thermo_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_charge);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_clear_user_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_comp);
  Py_VISIT(traverse_module_state->__pyx_n_s_composition);
  Py_VISIT(traverse_module_state->__pyx_n_s_composition_to_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_cov);
  Py_VISIT(traverse_module_state->__pyx_n_s_critical_pressure);
  Py_VISIT(traverse_module_state->__pyx_n_s_cxx_species);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_data_dist);
  Py_VISIT(traverse_module_state->__pyx_n_s_data_levels);
  Py_VISIT(traverse_module_state->__pyx_n_s_density);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_diluent);
  Py_VISIT(traverse_module_state->__pyx_n_u_diluent);
  Py_VISIT(traverse_module_state->__pyx_n_s_diluent_comp);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_distribution);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_double);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_e_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_element);
  Py_VISIT(traverse_module_state->__pyx_n_s_element_index);
  Py_VISIT(traverse_module_state->__pyx_kp_u_element_must_be_a_string_or_a_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_element_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_element_names);
  Py_VISIT(traverse_module_state->__pyx_n_s_element_names_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_element_names_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_element_symbols);
  Py_VISIT(traverse_module_state->__pyx_n_s_element_symbols_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_element_symbols_locals_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_elemental_mass_fraction);
  Py_VISIT(traverse_module_state->__pyx_n_s_elemental_mole_fraction);
  Py_VISIT(traverse_module_state->__pyx_n_s_empty);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_equilibrate);
  Py_VISIT(traverse_module_state->__pyx_n_s_equivalence_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_estimate_equil);
  Py_VISIT(traverse_module_state->__pyx_n_s_f);
  Py_VISIT(traverse_module_state->__pyx_n_s_factor);
  Py_VISIT(traverse_module_state->__pyx_n_s_filename);
  Py_VISIT(traverse_module_state->__pyx_n_s_find_isomers);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_n_s_fraction);
  Py_VISIT(traverse_module_state->__pyx_kp_u_fraction_after_dilution_cannot);
  Py_VISIT(traverse_module_state->__pyx_n_s_fraction_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_fraction_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_fraction_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_yaml);
  Py_VISIT(traverse_module_state->__pyx_n_s_fuel);
  Py_VISIT(traverse_module_state->__pyx_n_u_fuel);
  Py_VISIT(traverse_module_state->__pyx_n_s_fuel_comp);
  Py_VISIT(traverse_module_state->__pyx_kp_u_fuel_or_oxidizer_fraction_after);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_h);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_include_species);
  Py_VISIT(traverse_module_state->__pyx_kp_u_incorrect_number_of_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_indices);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_2);
  Py_VISIT(traverse_module_state->__pyx_n_u_init_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_subclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_iso);
  Py_VISIT(traverse_module_state->__pyx_n_s_item);
  Py_VISIT(traverse_module_state->__pyx_n_s_items);
  Py_VISIT(traverse_module_state->__pyx_n_u_items);
  Py_VISIT(traverse_module_state->__pyx_n_s_k);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_kv);
  Py_VISIT(traverse_module_state->__pyx_n_s_levels);
  Py_VISIT(traverse_module_state->__pyx_n_s_list_from_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_list_from_yaml);
  Py_VISIT(traverse_module_state->__pyx_n_s_log_level);
  Py_VISIT(traverse_module_state->__pyx_n_s_lower);
  Py_VISIT(traverse_module_state->__pyx_n_s_m);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_u_mass);
  Py_VISIT(traverse_module_state->__pyx_n_s_mass_fraction_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_iter);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_steps);
  Py_VISIT(traverse_module_state->__pyx_n_s_mean_molecular_weight);
  Py_VISIT(traverse_module_state->__pyx_n_s_metaclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_mixture_fraction);
  Py_VISIT(traverse_module_state->__pyx_n_s_modify_species);
  Py_VISIT(traverse_module_state->__pyx_n_s_module);
  Py_VISIT(traverse_module_state->__pyx_n_u_molar);
  Py_VISIT(traverse_module_state->__pyx_n_u_mole);
  Py_VISIT(traverse_module_state->__pyx_n_s_mole_fraction_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_mro_entries);
  Py_VISIT(traverse_module_state->__pyx_n_s_n_atoms);
  Py_VISIT(traverse_module_state->__pyx_n_s_n_electron_energy_levels);
  Py_VISIT(traverse_module_state->__pyx_n_s_n_elements);
  Py_VISIT(traverse_module_state->__pyx_n_s_n_species);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_names);
  Py_VISIT(traverse_module_state->__pyx_n_s_ndim);
  Py_VISIT(traverse_module_state->__pyx_n_s_newaxis);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_elements_defined);
  Py_VISIT(traverse_module_state->__pyx_n_s_numbers);
  Py_VISIT(traverse_module_state->__pyx_n_s_numbers_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_VISIT(traverse_module_state->__pyx_n_s_o);
  Py_VISIT(traverse_module_state->__pyx_kp_u_or);
  Py_VISIT(traverse_module_state->__pyx_n_s_original_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_ox_comp);
  Py_VISIT(traverse_module_state->__pyx_n_s_oxidizer);
  Py_VISIT(traverse_module_state->__pyx_n_u_oxidizer);
  Py_VISIT(traverse_module_state->__pyx_n_s_phi);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepare);
  Py_VISIT(traverse_module_state->__pyx_n_s_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_property);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_report);
  Py_VISIT(traverse_module_state->__pyx_n_s_root);
  Py_VISIT(traverse_module_state->__pyx_n_s_rtol);
  Py_VISIT(traverse_module_state->__pyx_n_s_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_section);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__base_self_base_self_kineti);
  Py_VISIT(traverse_module_state->__pyx_n_s_send);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_discretized_electron_energy);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_equivalence_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_mixture_fraction);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_unnormalized_coverages);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_unnormalized_mass_fractions);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_unnormalized_mole_fractions);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_show_thermo);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_solver);
  Py_VISIT(traverse_module_state->__pyx_n_s_sorted);
  Py_VISIT(traverse_module_state->__pyx_n_u_source);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_species);
  Py_VISIT(traverse_module_state->__pyx_n_u_species);
  Py_VISIT(traverse_module_state->__pyx_n_s_species_index);
  Py_VISIT(traverse_module_state->__pyx_kp_u_species_must_be_a_string_or_a_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_species_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_species_names);
  Py_VISIT(traverse_module_state->__pyx_n_s_squeeze);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_state_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_staticmethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_stoich_air_fuel_ratio);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_symbol);
  Py_VISIT(traverse_module_state->__pyx_n_s_symbol_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_syms);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_text);
  Py_VISIT(traverse_module_state->__pyx_n_s_thermo_model);
  Py_VISIT(traverse_module_state->__pyx_n_s_threshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_throw);
  Py_VISIT(traverse_module_state->__pyx_n_s_u);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_user_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_upper);
  Py_VISIT(traverse_module_state->__pyx_n_s_utils);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_warnings);
  Py_VISIT(traverse_module_state->__pyx_n_s_weakref);
  Py_VISIT(traverse_module_state->__pyx_n_s_weight);
  Py_VISIT(traverse_module_state->__pyx_n_s_weight_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeros);
  Py_VISIT(traverse_module_state->__pyx_float_0_0);
  Py_VISIT(traverse_module_state->__pyx_float_1_0);
  Py_VISIT(traverse_module_state->__pyx_float_1eneg_4);
  Py_VISIT(traverse_module_state->__pyx_float_1eneg_9);
  Py_VISIT(traverse_module_state->__pyx_float_1eneg_14);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_100);
  Py_VISIT(traverse_module_state->__pyx_int_1000);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__32);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__37);
  Py_VISIT(traverse_module_state->__pyx_tuple__39);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__59);
  Py_VISIT(traverse_module_state->__pyx_tuple__61);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__68);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__73);
  Py_VISIT(traverse_module_state->__pyx_tuple__75);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__87);
  Py_VISIT(traverse_module_state->__pyx_tuple__89);
  Py_VISIT(traverse_module_state->__pyx_tuple__93);
  Py_VISIT(traverse_module_state->__pyx_tuple__99);
  Py_VISIT(traverse_module_state->__pyx_tuple__101);
  Py_VISIT(traverse_module_state->__pyx_tuple__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__21);
  Py_VISIT(traverse_module_state->__pyx_codeobj__23);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__36);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__58);
  Py_VISIT(traverse_module_state->__pyx_codeobj__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__62);
  Py_VISIT(traverse_module_state->__pyx_codeobj__64);
  Py_VISIT(traverse_module_state->__pyx_codeobj__66);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__74);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__78);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__88);
  Py_VISIT(traverse_module_state->__pyx_codeobj__90);
  Py_VISIT(traverse_module_state->__pyx_codeobj__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__92);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__100);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__105);
  Py_VISIT(traverse_module_state->__pyx_codeobj__106);
  Py_VISIT(traverse_module_state->__pyx_codeobj__107);
  Py_VISIT(traverse_module_state->__pyx_codeobj__108);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4bool_bool __pyx_mstate_global->__pyx_ptype_7cpython_4bool_bool
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_7complex_complex __pyx_mstate_global->__pyx_ptype_7cpython_7complex_complex
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_5func1_Func1 __pyx_mstate_global->__pyx_ptype_7cantera_5func1_Func1
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_5units_Units __pyx_mstate_global->__pyx_ptype_7cantera_5units_Units
#define __pyx_ptype_7cantera_5units_UnitStack __pyx_mstate_global->__pyx_ptype_7cantera_5units_UnitStack
#define __pyx_ptype_7cantera_5units_UnitSystem __pyx_mstate_global->__pyx_ptype_7cantera_5units_UnitSystem
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_12solutionbase__SolutionBase __pyx_mstate_global->__pyx_ptype_7cantera_12solutionbase__SolutionBase
#define __pyx_ptype_7cantera_12solutionbase_SolutionArrayBase __pyx_mstate_global->__pyx_ptype_7cantera_12solutionbase_SolutionArrayBase
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_13speciesthermo_SpeciesThermo __pyx_mstate_global->__pyx_ptype_7cantera_13speciesthermo_SpeciesThermo
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_8kinetics_Kinetics __pyx_mstate_global->__pyx_ptype_7cantera_8kinetics_Kinetics
#define __pyx_ptype_7cantera_8kinetics_InterfaceKinetics __pyx_mstate_global->__pyx_ptype_7cantera_8kinetics_InterfaceKinetics
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_9transport_GasTransportData __pyx_mstate_global->__pyx_ptype_7cantera_9transport_GasTransportData
#define __pyx_ptype_7cantera_9transport_Transport __pyx_mstate_global->__pyx_ptype_7cantera_9transport_Transport
#define __pyx_ptype_7cantera_9transport_DustyGasTransport __pyx_mstate_global->__pyx_ptype_7cantera_9transport_DustyGasTransport
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_6_utils_AnyMap __pyx_mstate_global->__pyx_ptype_7cantera_6_utils_AnyMap
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_7cantera_6thermo_Species __pyx_mstate_global->__pyx_type_7cantera_6thermo_Species
#define __pyx_type_7cantera_6thermo_ThermoPhase __pyx_mstate_global->__pyx_type_7cantera_6thermo_ThermoPhase
#define __pyx_type_7cantera_6thermo_InterfacePhase __pyx_mstate_global->__pyx_type_7cantera_6thermo_InterfacePhase
#define __pyx_type_7cantera_6thermo_PureFluid __pyx_mstate_global->__pyx_type_7cantera_6thermo_PureFluid
#define __pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr __pyx_mstate_global->__pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr
#define __pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr __pyx_mstate_global->__pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr
#endif
#define __pyx_ptype_7cantera_6thermo_Species __pyx_mstate_global->__pyx_ptype_7cantera_6thermo_Species
#define __pyx_ptype_7cantera_6thermo_ThermoPhase __pyx_mstate_global->__pyx_ptype_7cantera_6thermo_ThermoPhase
#define __pyx_ptype_7cantera_6thermo_InterfacePhase __pyx_mstate_global->__pyx_ptype_7cantera_6thermo_InterfacePhase
#define __pyx_ptype_7cantera_6thermo_PureFluid __pyx_mstate_global->__pyx_ptype_7cantera_6thermo_PureFluid
#define __pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr __pyx_mstate_global->__pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr
#define __pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr __pyx_mstate_global->__pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr
#define __pyx_kp_u_1_0 __pyx_mstate_global->__pyx_kp_u_1_0
#define __pyx_kp_s_An_element_or_a_named_isotope_d __pyx_mstate_global->__pyx_kp_s_An_element_or_a_named_isotope_d
#define __pyx_kp_u_Argument_must_be_a_string_or_a_n __pyx_mstate_global->__pyx_kp_u_Argument_must_be_a_string_or_a_n
#define __pyx_kp_u_Array_has_incorrect_length __pyx_mstate_global->__pyx_kp_u_Array_has_incorrect_length
#define __pyx_kp_u_Array_has_incorrect_length_Got_e __pyx_mstate_global->__pyx_kp_u_Array_has_incorrect_length_Got_e
#define __pyx_kp_u_Array_has_incorrect_length_Got_e_2 __pyx_mstate_global->__pyx_kp_u_Array_has_incorrect_length_Got_e_2
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_n_u_Bilger __pyx_mstate_global->__pyx_n_u_Bilger
#define __pyx_kp_u_Cannot_add_species_to_ThermoPhas __pyx_mstate_global->__pyx_kp_u_Cannot_add_species_to_ThermoPhas
#define __pyx_kp_u_Cannot_set_vapor_quality_outside __pyx_mstate_global->__pyx_kp_u_Cannot_set_vapor_quality_outside
#define __pyx_n_s_CanteraError __pyx_mstate_global->__pyx_n_s_CanteraError
#define __pyx_n_s_Element __pyx_mstate_global->__pyx_n_s_Element
#define __pyx_n_s_Element___init __pyx_mstate_global->__pyx_n_s_Element___init
#define __pyx_n_s_Element_atomic_number __pyx_mstate_global->__pyx_n_s_Element_atomic_number
#define __pyx_n_s_Element_name __pyx_mstate_global->__pyx_n_s_Element_name
#define __pyx_n_s_Element_symbol __pyx_mstate_global->__pyx_n_s_Element_symbol
#define __pyx_n_s_Element_weight __pyx_mstate_global->__pyx_n_s_Element_weight
#define __pyx_kp_s_Exception_raised_for_an_invalid __pyx_mstate_global->__pyx_kp_s_Exception_raised_for_an_invalid
#define __pyx_kp_u_Generate_a_report_describing_th __pyx_mstate_global->__pyx_kp_u_Generate_a_report_describing_th
#define __pyx_kp_u_Get_the_elemental_mass_fraction __pyx_mstate_global->__pyx_kp_u_Get_the_elemental_mass_fraction
#define __pyx_kp_u_Get_the_elemental_mole_fraction __pyx_mstate_global->__pyx_kp_u_Get_the_elemental_mole_fraction
#define __pyx_kp_u_Get_the_equivalence_ratio_math __pyx_mstate_global->__pyx_kp_u_Get_the_equivalence_ratio_math
#define __pyx_kp_u_Get_the_mixture_fraction_of_the __pyx_mstate_global->__pyx_kp_u_Get_the_mixture_fraction_of_the
#define __pyx_kp_u_Get_the_stoichiometric_air_to_f __pyx_mstate_global->__pyx_kp_u_Get_the_stoichiometric_air_to_f
#define __pyx_kp_u_Got_Expected __pyx_mstate_global->__pyx_kp_u_Got_Expected
#define __pyx_kp_u_If_dilution_is_used_both_fractio __pyx_mstate_global->__pyx_kp_u_If_dilution_is_used_both_fractio
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_n_s_InterfacePhase __pyx_mstate_global->__pyx_n_s_InterfacePhase
#define __pyx_n_s_InterfacePhase___reduce_cython __pyx_mstate_global->__pyx_n_s_InterfacePhase___reduce_cython
#define __pyx_n_s_InterfacePhase___setstate_cython __pyx_mstate_global->__pyx_n_s_InterfacePhase___setstate_cython
#define __pyx_n_s_InterfacePhase_set_unnormalized __pyx_mstate_global->__pyx_n_s_InterfacePhase_set_unnormalized
#define __pyx_kp_u_Invalid_composition __pyx_mstate_global->__pyx_kp_u_Invalid_composition
#define __pyx_kp_u_Invalid_format_for_the_fraction __pyx_mstate_global->__pyx_kp_u_Invalid_format_for_the_fraction
#define __pyx_kp_u_Length_of_levels_and_distributio __pyx_mstate_global->__pyx_kp_u_Length_of_levels_and_distributio
#define __pyx_n_s_M_fuel __pyx_mstate_global->__pyx_n_s_M_fuel
#define __pyx_n_s_M_mix __pyx_mstate_global->__pyx_n_s_M_mix
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_kp_u_No_fuel_in_the_fuel_oxidizer_mix __pyx_mstate_global->__pyx_kp_u_No_fuel_in_the_fuel_oxidizer_mix
#define __pyx_kp_u_No_oxidizer_in_the_fuel_oxidizer __pyx_mstate_global->__pyx_kp_u_No_oxidizer_in_the_fuel_oxidizer
#define __pyx_kp_u_No_such_element_r __pyx_mstate_global->__pyx_kp_u_No_such_element_r
#define __pyx_kp_u_No_such_species_r __pyx_mstate_global->__pyx_kp_u_No_such_species_r
#define __pyx_kp_u_Number_of_atoms_of_element_elem __pyx_mstate_global->__pyx_kp_u_Number_of_atoms_of_element_elem
#define __pyx_n_s_P __pyx_mstate_global->__pyx_n_s_P
#define __pyx_n_s_P_orig __pyx_mstate_global->__pyx_n_s_P_orig
#define __pyx_n_s_P_sat __pyx_mstate_global->__pyx_n_s_P_sat
#define __pyx_n_s_PureFluid __pyx_mstate_global->__pyx_n_s_PureFluid
#define __pyx_n_s_PureFluid___reduce_cython __pyx_mstate_global->__pyx_n_s_PureFluid___reduce_cython
#define __pyx_n_s_PureFluid___setstate_cython __pyx_mstate_global->__pyx_n_s_PureFluid___setstate_cython
#define __pyx_n_s_Q __pyx_mstate_global->__pyx_n_s_Q
#define __pyx_kp_u_Set_the_composition_to_a_mixtur __pyx_mstate_global->__pyx_kp_u_Set_the_composition_to_a_mixtur
#define __pyx_kp_u_Set_the_composition_to_a_mixtur_2 __pyx_mstate_global->__pyx_kp_u_Set_the_composition_to_a_mixtur_2
#define __pyx_kp_u_Species __pyx_mstate_global->__pyx_kp_u_Species
#define __pyx_n_s_Species_2 __pyx_mstate_global->__pyx_n_s_Species_2
#define __pyx_n_s_Species___reduce_cython __pyx_mstate_global->__pyx_n_s_Species___reduce_cython
#define __pyx_n_s_Species___setstate_cython __pyx_mstate_global->__pyx_n_s_Species___setstate_cython
#define __pyx_n_s_Species_clear_user_data __pyx_mstate_global->__pyx_n_s_Species_clear_user_data
#define __pyx_n_s_Species_from_dict __pyx_mstate_global->__pyx_n_s_Species_from_dict
#define __pyx_n_s_Species_from_yaml __pyx_mstate_global->__pyx_n_s_Species_from_yaml
#define __pyx_n_s_Species_list_from_file __pyx_mstate_global->__pyx_n_s_Species_list_from_file
#define __pyx_n_s_Species_list_from_yaml __pyx_mstate_global->__pyx_n_s_Species_list_from_yaml
#define __pyx_n_s_Species_update_user_data __pyx_mstate_global->__pyx_n_s_Species_update_user_data
#define __pyx_n_s_T __pyx_mstate_global->__pyx_n_s_T
#define __pyx_n_s_TP __pyx_mstate_global->__pyx_n_s_TP
#define __pyx_n_s_TPX __pyx_mstate_global->__pyx_n_s_TPX
#define __pyx_n_s_TPY __pyx_mstate_global->__pyx_n_s_TPY
#define __pyx_n_s_T_orig __pyx_mstate_global->__pyx_n_s_T_orig
#define __pyx_kp_u_The __pyx_mstate_global->__pyx_kp_u_The
#define __pyx_kp_u_The_fraction_argument_must_be_gi __pyx_mstate_global->__pyx_kp_u_The_fraction_argument_must_be_gi
#define __pyx_kp_u_The_fraction_must_be_between_0_a __pyx_mstate_global->__pyx_kp_u_The_fraction_must_be_between_0_a
#define __pyx_kp_u_The_fraction_must_specify_fuel_o __pyx_mstate_global->__pyx_kp_u_The_fraction_must_specify_fuel_o
#define __pyx_kp_u_The_input_argument_to_Element_mu __pyx_mstate_global->__pyx_kp_u_The_input_argument_to_Element_mu
#define __pyx_n_s_ThermoModelMethodError __pyx_mstate_global->__pyx_n_s_ThermoModelMethodError
#define __pyx_n_s_ThermoModelMethodError___init __pyx_mstate_global->__pyx_n_s_ThermoModelMethodError___init
#define __pyx_n_s_ThermoPhase __pyx_mstate_global->__pyx_n_s_ThermoPhase
#define __pyx_n_s_ThermoPhase___composition_to_arr __pyx_mstate_global->__pyx_n_s_ThermoPhase___composition_to_arr
#define __pyx_n_s_ThermoPhase___get___locals_lambd __pyx_mstate_global->__pyx_n_s_ThermoPhase___get___locals_lambd
#define __pyx_n_s_ThermoPhase___reduce_cython __pyx_mstate_global->__pyx_n_s_ThermoPhase___reduce_cython
#define __pyx_n_s_ThermoPhase___setstate_cython __pyx_mstate_global->__pyx_n_s_ThermoPhase___setstate_cython
#define __pyx_n_s_ThermoPhase__composition_to_arr __pyx_mstate_global->__pyx_n_s_ThermoPhase__composition_to_arr
#define __pyx_n_s_ThermoPhase_add_species __pyx_mstate_global->__pyx_n_s_ThermoPhase_add_species
#define __pyx_n_s_ThermoPhase_add_species_alias __pyx_mstate_global->__pyx_n_s_ThermoPhase_add_species_alias
#define __pyx_n_s_ThermoPhase_atomic_weight __pyx_mstate_global->__pyx_n_s_ThermoPhase_atomic_weight
#define __pyx_n_s_ThermoPhase_element_index __pyx_mstate_global->__pyx_n_s_ThermoPhase_element_index
#define __pyx_n_s_ThermoPhase_element_name __pyx_mstate_global->__pyx_n_s_ThermoPhase_element_name
#define __pyx_n_s_ThermoPhase_elemental_mass_fract __pyx_mstate_global->__pyx_n_s_ThermoPhase_elemental_mass_fract
#define __pyx_kp_u_ThermoPhase_elemental_mass_fract_2 __pyx_mstate_global->__pyx_kp_u_ThermoPhase_elemental_mass_fract_2
#define __pyx_n_s_ThermoPhase_elemental_mole_fract __pyx_mstate_global->__pyx_n_s_ThermoPhase_elemental_mole_fract
#define __pyx_kp_u_ThermoPhase_elemental_mole_fract_2 __pyx_mstate_global->__pyx_kp_u_ThermoPhase_elemental_mole_fract_2
#define __pyx_n_s_ThermoPhase_equilibrate __pyx_mstate_global->__pyx_n_s_ThermoPhase_equilibrate
#define __pyx_n_s_ThermoPhase_equivalence_ratio __pyx_mstate_global->__pyx_n_s_ThermoPhase_equivalence_ratio
#define __pyx_kp_u_ThermoPhase_equivalence_ratio_li __pyx_mstate_global->__pyx_kp_u_ThermoPhase_equivalence_ratio_li
#define __pyx_n_s_ThermoPhase_find_isomers __pyx_mstate_global->__pyx_n_s_ThermoPhase_find_isomers
#define __pyx_n_s_ThermoPhase_mass_fraction_dict __pyx_mstate_global->__pyx_n_s_ThermoPhase_mass_fraction_dict
#define __pyx_n_s_ThermoPhase_mixture_fraction __pyx_mstate_global->__pyx_n_s_ThermoPhase_mixture_fraction
#define __pyx_kp_u_ThermoPhase_mixture_fraction_lin __pyx_mstate_global->__pyx_kp_u_ThermoPhase_mixture_fraction_lin
#define __pyx_n_s_ThermoPhase_modify_species __pyx_mstate_global->__pyx_n_s_ThermoPhase_modify_species
#define __pyx_n_s_ThermoPhase_mole_fraction_dict __pyx_mstate_global->__pyx_n_s_ThermoPhase_mole_fraction_dict
#define __pyx_n_s_ThermoPhase_n_atoms __pyx_mstate_global->__pyx_n_s_ThermoPhase_n_atoms
#define __pyx_kp_u_ThermoPhase_n_atoms_line_608 __pyx_mstate_global->__pyx_kp_u_ThermoPhase_n_atoms_line_608
#define __pyx_n_s_ThermoPhase_report __pyx_mstate_global->__pyx_n_s_ThermoPhase_report
#define __pyx_kp_u_ThermoPhase_report_line_298 __pyx_mstate_global->__pyx_kp_u_ThermoPhase_report_line_298
#define __pyx_n_s_ThermoPhase_set_discretized_elec __pyx_mstate_global->__pyx_n_s_ThermoPhase_set_discretized_elec
#define __pyx_n_s_ThermoPhase_set_equivalence_rati __pyx_mstate_global->__pyx_n_s_ThermoPhase_set_equivalence_rati
#define __pyx_kp_u_ThermoPhase_set_equivalence_rati_2 __pyx_mstate_global->__pyx_kp_u_ThermoPhase_set_equivalence_rati_2
#define __pyx_n_s_ThermoPhase_set_mixture_fraction __pyx_mstate_global->__pyx_n_s_ThermoPhase_set_mixture_fraction
#define __pyx_kp_u_ThermoPhase_set_mixture_fraction_2 __pyx_mstate_global->__pyx_kp_u_ThermoPhase_set_mixture_fraction_2
#define __pyx_n_s_ThermoPhase_set_unnormalized_mas __pyx_mstate_global->__pyx_n_s_ThermoPhase_set_unnormalized_mas
#define __pyx_n_s_ThermoPhase_set_unnormalized_mol __pyx_mstate_global->__pyx_n_s_ThermoPhase_set_unnormalized_mol
#define __pyx_n_s_ThermoPhase_species __pyx_mstate_global->__pyx_n_s_ThermoPhase_species
#define __pyx_n_s_ThermoPhase_species_index __pyx_mstate_global->__pyx_n_s_ThermoPhase_species_index
#define __pyx_n_s_ThermoPhase_species_name __pyx_mstate_global->__pyx_n_s_ThermoPhase_species_name
#define __pyx_n_s_ThermoPhase_stoich_air_fuel_rati __pyx_mstate_global->__pyx_n_s_ThermoPhase_stoich_air_fuel_rati
#define __pyx_kp_u_ThermoPhase_stoich_air_fuel_rati_2 __pyx_mstate_global->__pyx_kp_u_ThermoPhase_stoich_air_fuel_rati_2
#define __pyx_kp_u_This_method_is_invalid_for __pyx_mstate_global->__pyx_kp_u_This_method_is_invalid_for
#define __pyx_kp_u_This_method_is_invalid_for_therm __pyx_mstate_global->__pyx_kp_u_This_method_is_invalid_for_therm
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_u_Underlying_ThermoPhase_object_is __pyx_mstate_global->__pyx_kp_u_Underlying_ThermoPhase_object_is
#define __pyx_kp_u_Valid_choices_are_mass_or_molar __pyx_mstate_global->__pyx_kp_u_Valid_choices_are_mass_or_molar
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_WeakKeyDictionary __pyx_mstate_global->__pyx_n_s_WeakKeyDictionary
#define __pyx_n_s_X __pyx_mstate_global->__pyx_n_s_X
#define __pyx_n_s_XY __pyx_mstate_global->__pyx_n_s_XY
#define __pyx_n_s_X_fuelox __pyx_mstate_global->__pyx_n_s_X_fuelox
#define __pyx_n_s_X_mix __pyx_mstate_global->__pyx_n_s_X_mix
#define __pyx_n_s_Y __pyx_mstate_global->__pyx_n_s_Y
#define __pyx_n_s_Y_fuelox __pyx_mstate_global->__pyx_n_s_Y_fuelox
#define __pyx_n_s_Y_mix __pyx_mstate_global->__pyx_n_s_Y_mix
#define __pyx_n_s_Y_orig __pyx_mstate_global->__pyx_n_s_Y_orig
#define __pyx_n_s_Z __pyx_mstate_global->__pyx_n_s_Z
#define __pyx_n_s_Z_fuel __pyx_mstate_global->__pyx_n_s_Z_fuel
#define __pyx_n_s_Z_fuel_mole __pyx_mstate_global->__pyx_n_s_Z_fuel_mole
#define __pyx_n_s__109 __pyx_mstate_global->__pyx_n_s__109
#define __pyx_n_s__17 __pyx_mstate_global->__pyx_n_s__17
#define __pyx_kp_u__3 __pyx_mstate_global->__pyx_kp_u__3
#define __pyx_kp_u__4 __pyx_mstate_global->__pyx_kp_u__4
#define __pyx_n_s_a __pyx_mstate_global->__pyx_n_s_a
#define __pyx_n_s_add_species __pyx_mstate_global->__pyx_n_s_add_species
#define __pyx_n_s_add_species_alias __pyx_mstate_global->__pyx_n_s_add_species_alias
#define __pyx_n_s_alias __pyx_mstate_global->__pyx_n_s_alias
#define __pyx_n_s_any_map __pyx_mstate_global->__pyx_n_s_any_map
#define __pyx_n_s_arg __pyx_mstate_global->__pyx_n_s_arg
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_arr __pyx_mstate_global->__pyx_n_s_arr
#define __pyx_n_s_array __pyx_mstate_global->__pyx_n_s_array
#define __pyx_n_s_asarray __pyx_mstate_global->__pyx_n_s_asarray
#define __pyx_n_s_ascontiguousarray __pyx_mstate_global->__pyx_n_s_ascontiguousarray
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_atomic_number __pyx_mstate_global->__pyx_n_s_atomic_number
#define __pyx_n_s_atomic_number_2 __pyx_mstate_global->__pyx_n_s_atomic_number_2
#define __pyx_n_s_atomic_weight __pyx_mstate_global->__pyx_n_s_atomic_weight
#define __pyx_n_u_auto __pyx_mstate_global->__pyx_n_u_auto
#define __pyx_n_s_b __pyx_mstate_global->__pyx_n_s_b
#define __pyx_n_s_basis __pyx_mstate_global->__pyx_n_s_basis
#define __pyx_kp_u_basis_must_either_be_mass_or_mol __pyx_mstate_global->__pyx_kp_u_basis_must_either_be_mass_or_mol
#define __pyx_n_s_cantera_thermo __pyx_mstate_global->__pyx_n_s_cantera_thermo
#define __pyx_kp_s_cantera_thermo_pyx __pyx_mstate_global->__pyx_kp_s_cantera_thermo_pyx
#define __pyx_n_s_charge __pyx_mstate_global->__pyx_n_s_charge
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_clear_user_data __pyx_mstate_global->__pyx_n_s_clear_user_data
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_comp __pyx_mstate_global->__pyx_n_s_comp
#define __pyx_n_s_composition __pyx_mstate_global->__pyx_n_s_composition
#define __pyx_n_s_composition_to_array __pyx_mstate_global->__pyx_n_s_composition_to_array
#define __pyx_n_s_copy __pyx_mstate_global->__pyx_n_s_copy
#define __pyx_n_s_cov __pyx_mstate_global->__pyx_n_s_cov
#define __pyx_n_s_critical_pressure __pyx_mstate_global->__pyx_n_s_critical_pressure
#define __pyx_n_s_cxx_species __pyx_mstate_global->__pyx_n_s_cxx_species
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_data_dist __pyx_mstate_global->__pyx_n_s_data_dist
#define __pyx_n_s_data_levels __pyx_mstate_global->__pyx_n_s_data_levels
#define __pyx_n_s_density __pyx_mstate_global->__pyx_n_s_density
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_diluent __pyx_mstate_global->__pyx_n_s_diluent
#define __pyx_n_u_diluent __pyx_mstate_global->__pyx_n_u_diluent
#define __pyx_n_s_diluent_comp __pyx_mstate_global->__pyx_n_s_diluent_comp
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_distribution __pyx_mstate_global->__pyx_n_s_distribution
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_double __pyx_mstate_global->__pyx_n_s_double
#define __pyx_n_s_dtype __pyx_mstate_global->__pyx_n_s_dtype
#define __pyx_n_s_e_name __pyx_mstate_global->__pyx_n_s_e_name
#define __pyx_n_s_element __pyx_mstate_global->__pyx_n_s_element
#define __pyx_n_s_element_index __pyx_mstate_global->__pyx_n_s_element_index
#define __pyx_kp_u_element_must_be_a_string_or_a_n __pyx_mstate_global->__pyx_kp_u_element_must_be_a_string_or_a_n
#define __pyx_n_s_element_name __pyx_mstate_global->__pyx_n_s_element_name
#define __pyx_n_s_element_names __pyx_mstate_global->__pyx_n_s_element_names
#define __pyx_n_s_element_names_2 __pyx_mstate_global->__pyx_n_s_element_names_2
#define __pyx_n_s_element_names_locals_genexpr __pyx_mstate_global->__pyx_n_s_element_names_locals_genexpr
#define __pyx_n_s_element_symbols __pyx_mstate_global->__pyx_n_s_element_symbols
#define __pyx_n_s_element_symbols_2 __pyx_mstate_global->__pyx_n_s_element_symbols_2
#define __pyx_n_s_element_symbols_locals_genexpr __pyx_mstate_global->__pyx_n_s_element_symbols_locals_genexpr
#define __pyx_n_s_elemental_mass_fraction __pyx_mstate_global->__pyx_n_s_elemental_mass_fraction
#define __pyx_n_s_elemental_mole_fraction __pyx_mstate_global->__pyx_n_s_elemental_mole_fraction
#define __pyx_n_s_empty __pyx_mstate_global->__pyx_n_s_empty
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_equilibrate __pyx_mstate_global->__pyx_n_s_equilibrate
#define __pyx_n_s_equivalence_ratio __pyx_mstate_global->__pyx_n_s_equivalence_ratio
#define __pyx_n_s_estimate_equil __pyx_mstate_global->__pyx_n_s_estimate_equil
#define __pyx_n_s_f __pyx_mstate_global->__pyx_n_s_f
#define __pyx_n_s_factor __pyx_mstate_global->__pyx_n_s_factor
#define __pyx_n_s_filename __pyx_mstate_global->__pyx_n_s_filename
#define __pyx_n_s_find_isomers __pyx_mstate_global->__pyx_n_s_find_isomers
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_n_s_fraction __pyx_mstate_global->__pyx_n_s_fraction
#define __pyx_kp_u_fraction_after_dilution_cannot __pyx_mstate_global->__pyx_kp_u_fraction_after_dilution_cannot
#define __pyx_n_s_fraction_dict __pyx_mstate_global->__pyx_n_s_fraction_dict
#define __pyx_n_s_fraction_type __pyx_mstate_global->__pyx_n_s_fraction_type
#define __pyx_n_s_fraction_value __pyx_mstate_global->__pyx_n_s_fraction_value
#define __pyx_n_s_from_dict __pyx_mstate_global->__pyx_n_s_from_dict
#define __pyx_n_s_from_yaml __pyx_mstate_global->__pyx_n_s_from_yaml
#define __pyx_n_s_fuel __pyx_mstate_global->__pyx_n_s_fuel
#define __pyx_n_u_fuel __pyx_mstate_global->__pyx_n_u_fuel
#define __pyx_n_s_fuel_comp __pyx_mstate_global->__pyx_n_s_fuel_comp
#define __pyx_kp_u_fuel_or_oxidizer_fraction_after __pyx_mstate_global->__pyx_kp_u_fuel_or_oxidizer_fraction_after
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_genexpr __pyx_mstate_global->__pyx_n_s_genexpr
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_h __pyx_mstate_global->__pyx_n_s_h
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_include_species __pyx_mstate_global->__pyx_n_s_include_species
#define __pyx_kp_u_incorrect_number_of_values __pyx_mstate_global->__pyx_kp_u_incorrect_number_of_values
#define __pyx_n_s_indices __pyx_mstate_global->__pyx_n_s_indices
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_init_2 __pyx_mstate_global->__pyx_n_s_init_2
#define __pyx_n_u_init_2 __pyx_mstate_global->__pyx_n_u_init_2
#define __pyx_n_s_init_subclass __pyx_mstate_global->__pyx_n_s_init_subclass
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_iso __pyx_mstate_global->__pyx_n_s_iso
#define __pyx_n_s_item __pyx_mstate_global->__pyx_n_s_item
#define __pyx_n_s_items __pyx_mstate_global->__pyx_n_s_items
#define __pyx_n_u_items __pyx_mstate_global->__pyx_n_u_items
#define __pyx_n_s_k __pyx_mstate_global->__pyx_n_s_k
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_n_s_kv __pyx_mstate_global->__pyx_n_s_kv
#define __pyx_n_s_levels __pyx_mstate_global->__pyx_n_s_levels
#define __pyx_n_s_list_from_file __pyx_mstate_global->__pyx_n_s_list_from_file
#define __pyx_n_s_list_from_yaml __pyx_mstate_global->__pyx_n_s_list_from_yaml
#define __pyx_n_s_log_level __pyx_mstate_global->__pyx_n_s_log_level
#define __pyx_n_s_lower __pyx_mstate_global->__pyx_n_s_lower
#define __pyx_n_s_m __pyx_mstate_global->__pyx_n_s_m
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_u_mass __pyx_mstate_global->__pyx_n_u_mass
#define __pyx_n_s_mass_fraction_dict __pyx_mstate_global->__pyx_n_s_mass_fraction_dict
#define __pyx_n_s_max_iter __pyx_mstate_global->__pyx_n_s_max_iter
#define __pyx_n_s_max_steps __pyx_mstate_global->__pyx_n_s_max_steps
#define __pyx_n_s_mean_molecular_weight __pyx_mstate_global->__pyx_n_s_mean_molecular_weight
#define __pyx_n_s_metaclass __pyx_mstate_global->__pyx_n_s_metaclass
#define __pyx_n_s_mixture_fraction __pyx_mstate_global->__pyx_n_s_mixture_fraction
#define __pyx_n_s_modify_species __pyx_mstate_global->__pyx_n_s_modify_species
#define __pyx_n_s_module __pyx_mstate_global->__pyx_n_s_module
#define __pyx_n_u_molar __pyx_mstate_global->__pyx_n_u_molar
#define __pyx_n_u_mole __pyx_mstate_global->__pyx_n_u_mole
#define __pyx_n_s_mole_fraction_dict __pyx_mstate_global->__pyx_n_s_mole_fraction_dict
#define __pyx_n_s_mro_entries __pyx_mstate_global->__pyx_n_s_mro_entries
#define __pyx_n_s_n_atoms __pyx_mstate_global->__pyx_n_s_n_atoms
#define __pyx_n_s_n_electron_energy_levels __pyx_mstate_global->__pyx_n_s_n_electron_energy_levels
#define __pyx_n_s_n_elements __pyx_mstate_global->__pyx_n_s_n_elements
#define __pyx_n_s_n_species __pyx_mstate_global->__pyx_n_s_n_species
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_name_3 __pyx_mstate_global->__pyx_n_s_name_3
#define __pyx_n_s_names __pyx_mstate_global->__pyx_n_s_names
#define __pyx_n_s_ndim __pyx_mstate_global->__pyx_n_s_ndim
#define __pyx_n_s_newaxis __pyx_mstate_global->__pyx_n_s_newaxis
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_num_elements_defined __pyx_mstate_global->__pyx_n_s_num_elements_defined
#define __pyx_n_s_numbers __pyx_mstate_global->__pyx_n_s_numbers
#define __pyx_n_s_numbers_2 __pyx_mstate_global->__pyx_n_s_numbers_2
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_kp_u_numpy_core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy_core_multiarray_failed_to
#define __pyx_kp_u_numpy_core_umath_failed_to_impor __pyx_mstate_global->__pyx_kp_u_numpy_core_umath_failed_to_impor
#define __pyx_n_s_o __pyx_mstate_global->__pyx_n_s_o
#define __pyx_kp_u_or __pyx_mstate_global->__pyx_kp_u_or
#define __pyx_n_s_original_state __pyx_mstate_global->__pyx_n_s_original_state
#define __pyx_n_s_ox_comp __pyx_mstate_global->__pyx_n_s_ox_comp
#define __pyx_n_s_oxidizer __pyx_mstate_global->__pyx_n_s_oxidizer
#define __pyx_n_u_oxidizer __pyx_mstate_global->__pyx_n_u_oxidizer
#define __pyx_n_s_phi __pyx_mstate_global->__pyx_n_s_phi
#define __pyx_n_s_prepare __pyx_mstate_global->__pyx_n_s_prepare
#define __pyx_n_s_print __pyx_mstate_global->__pyx_n_s_print
#define __pyx_n_s_property __pyx_mstate_global->__pyx_n_s_property
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_report __pyx_mstate_global->__pyx_n_s_report
#define __pyx_n_s_root __pyx_mstate_global->__pyx_n_s_root
#define __pyx_n_s_rtol __pyx_mstate_global->__pyx_n_s_rtol
#define __pyx_n_s_s __pyx_mstate_global->__pyx_n_s_s
#define __pyx_n_s_section __pyx_mstate_global->__pyx_n_s_section
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self__base_self_base_self_kineti __pyx_mstate_global->__pyx_kp_s_self__base_self_base_self_kineti
#define __pyx_n_s_send __pyx_mstate_global->__pyx_n_s_send
#define __pyx_n_s_set_discretized_electron_energy __pyx_mstate_global->__pyx_n_s_set_discretized_electron_energy
#define __pyx_n_s_set_equivalence_ratio __pyx_mstate_global->__pyx_n_s_set_equivalence_ratio
#define __pyx_n_s_set_mixture_fraction __pyx_mstate_global->__pyx_n_s_set_mixture_fraction
#define __pyx_n_s_set_name __pyx_mstate_global->__pyx_n_s_set_name
#define __pyx_n_s_set_unnormalized_coverages __pyx_mstate_global->__pyx_n_s_set_unnormalized_coverages
#define __pyx_n_s_set_unnormalized_mass_fractions __pyx_mstate_global->__pyx_n_s_set_unnormalized_mass_fractions
#define __pyx_n_s_set_unnormalized_mole_fractions __pyx_mstate_global->__pyx_n_s_set_unnormalized_mole_fractions
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_show_thermo __pyx_mstate_global->__pyx_n_s_show_thermo
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_solver __pyx_mstate_global->__pyx_n_s_solver
#define __pyx_n_s_sorted __pyx_mstate_global->__pyx_n_s_sorted
#define __pyx_n_u_source __pyx_mstate_global->__pyx_n_u_source
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_species __pyx_mstate_global->__pyx_n_s_species
#define __pyx_n_u_species __pyx_mstate_global->__pyx_n_u_species
#define __pyx_n_s_species_index __pyx_mstate_global->__pyx_n_s_species_index
#define __pyx_kp_u_species_must_be_a_string_or_a_n __pyx_mstate_global->__pyx_kp_u_species_must_be_a_string_or_a_n
#define __pyx_n_s_species_name __pyx_mstate_global->__pyx_n_s_species_name
#define __pyx_n_s_species_names __pyx_mstate_global->__pyx_n_s_species_names
#define __pyx_n_s_squeeze __pyx_mstate_global->__pyx_n_s_squeeze
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_n_s_state_size __pyx_mstate_global->__pyx_n_s_state_size
#define __pyx_n_s_staticmethod __pyx_mstate_global->__pyx_n_s_staticmethod
#define __pyx_n_s_stoich_air_fuel_ratio __pyx_mstate_global->__pyx_n_s_stoich_air_fuel_ratio
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_symbol __pyx_mstate_global->__pyx_n_s_symbol
#define __pyx_n_s_symbol_2 __pyx_mstate_global->__pyx_n_s_symbol_2
#define __pyx_n_s_syms __pyx_mstate_global->__pyx_n_s_syms
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_text __pyx_mstate_global->__pyx_n_s_text
#define __pyx_n_s_thermo_model __pyx_mstate_global->__pyx_n_s_thermo_model
#define __pyx_n_s_threshold __pyx_mstate_global->__pyx_n_s_threshold
#define __pyx_n_s_throw __pyx_mstate_global->__pyx_n_s_throw
#define __pyx_n_s_u __pyx_mstate_global->__pyx_n_s_u
#define __pyx_n_s_update_user_data __pyx_mstate_global->__pyx_n_s_update_user_data
#define __pyx_n_s_upper __pyx_mstate_global->__pyx_n_s_upper
#define __pyx_n_s_utils __pyx_mstate_global->__pyx_n_s_utils
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_n_s_values __pyx_mstate_global->__pyx_n_s_values
#define __pyx_n_s_warnings __pyx_mstate_global->__pyx_n_s_warnings
#define __pyx_n_s_weakref __pyx_mstate_global->__pyx_n_s_weakref
#define __pyx_n_s_weight __pyx_mstate_global->__pyx_n_s_weight
#define __pyx_n_s_weight_2 __pyx_mstate_global->__pyx_n_s_weight_2
#define __pyx_n_s_zeros __pyx_mstate_global->__pyx_n_s_zeros
#define __pyx_float_0_0 __pyx_mstate_global->__pyx_float_0_0
#define __pyx_float_1_0 __pyx_mstate_global->__pyx_float_1_0
#define __pyx_float_1eneg_4 __pyx_mstate_global->__pyx_float_1eneg_4
#define __pyx_float_1eneg_9 __pyx_mstate_global->__pyx_float_1eneg_9
#define __pyx_float_1eneg_14 __pyx_mstate_global->__pyx_float_1eneg_14
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_100 __pyx_mstate_global->__pyx_int_100
#define __pyx_int_1000 __pyx_mstate_global->__pyx_int_1000
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__30 __pyx_mstate_global->__pyx_tuple__30
#define __pyx_tuple__32 __pyx_mstate_global->__pyx_tuple__32
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__37 __pyx_mstate_global->__pyx_tuple__37
#define __pyx_tuple__39 __pyx_mstate_global->__pyx_tuple__39
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__59 __pyx_mstate_global->__pyx_tuple__59
#define __pyx_tuple__61 __pyx_mstate_global->__pyx_tuple__61
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__68 __pyx_mstate_global->__pyx_tuple__68
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__73 __pyx_mstate_global->__pyx_tuple__73
#define __pyx_tuple__75 __pyx_mstate_global->__pyx_tuple__75
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__87 __pyx_mstate_global->__pyx_tuple__87
#define __pyx_tuple__89 __pyx_mstate_global->__pyx_tuple__89
#define __pyx_tuple__93 __pyx_mstate_global->__pyx_tuple__93
#define __pyx_tuple__99 __pyx_mstate_global->__pyx_tuple__99
#define __pyx_tuple__101 __pyx_mstate_global->__pyx_tuple__101
#define __pyx_tuple__103 __pyx_mstate_global->__pyx_tuple__103
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__21 __pyx_mstate_global->__pyx_codeobj__21
#define __pyx_codeobj__23 __pyx_mstate_global->__pyx_codeobj__23
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__36 __pyx_mstate_global->__pyx_codeobj__36
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__58 __pyx_mstate_global->__pyx_codeobj__58
#define __pyx_codeobj__60 __pyx_mstate_global->__pyx_codeobj__60
#define __pyx_codeobj__62 __pyx_mstate_global->__pyx_codeobj__62
#define __pyx_codeobj__64 __pyx_mstate_global->__pyx_codeobj__64
#define __pyx_codeobj__66 __pyx_mstate_global->__pyx_codeobj__66
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__74 __pyx_mstate_global->__pyx_codeobj__74
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__78 __pyx_mstate_global->__pyx_codeobj__78
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__88 __pyx_mstate_global->__pyx_codeobj__88
#define __pyx_codeobj__90 __pyx_mstate_global->__pyx_codeobj__90
#define __pyx_codeobj__91 __pyx_mstate_global->__pyx_codeobj__91
#define __pyx_codeobj__92 __pyx_mstate_global->__pyx_codeobj__92
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__95 __pyx_mstate_global->__pyx_codeobj__95
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__98 __pyx_mstate_global->__pyx_codeobj__98
#define __pyx_codeobj__100 __pyx_mstate_global->__pyx_codeobj__100
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__105 __pyx_mstate_global->__pyx_codeobj__105
#define __pyx_codeobj__106 __pyx_mstate_global->__pyx_codeobj__106
#define __pyx_codeobj__107 __pyx_mstate_global->__pyx_codeobj__107
#define __pyx_codeobj__108 __pyx_mstate_global->__pyx_codeobj__108
/* #### Code section: module_code ### */

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(std::vector<std::string>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":68
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(1, 68, __pyx_L1_error)

    /* "vector.to_py":67
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
 */
  }

  /* "vector.to_py":69
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
 */
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":71
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
 */
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":76
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
 */
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":77
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)
 */
    __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":78
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(o, i, item)
 * 
 */
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":79
 *         item = v[i]
 *         Py_INCREF(item)
 *         PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
 */
    PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item);
  }

  /* "vector.to_py":81
 *         PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":66
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(const vector[X]& v):             # <<<<<<<<<<<<<<
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 16, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("real", 0);

  /* "cpython/complex.pxd":20
 *         @property
 *         cdef inline double real(self):
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = __pyx_v_self->cval.real;
  goto __pyx_L0;

  /* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("imag", 0);

  /* "cpython/complex.pxd":24
 *         @property
 *         cdef inline double imag(self):
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
 */
  __pyx_r = __pyx_v_self->cval.imag;
  goto __pyx_L0;

  /* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":117
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":118
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 118, __pyx_L1_error)

  /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
  __pyx_t_2 = (__pyx_v_value == NULL);
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":121
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
 */
    __Pyx_INCREF(__pyx_v_default_value);
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
    goto __pyx_L3;
  }

  /* "cpython/contextvars.pxd":124
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_v_value);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_pyvalue = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":125
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
 */
    Py_XDECREF(__pyx_v_value);
  }
  __pyx_L3:;

  /* "cpython/contextvars.pxd":126
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value_no_default", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":135
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":136
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 136, __pyx_L1_error)

  /* "cpython/contextvars.pxd":138
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_value);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pyvalue = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":139
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 */
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":140
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":249
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":255
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":261
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":269
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":276
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":282
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":291
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":784
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":787
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":790
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);
  if (__pyx_t_1) {

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":794
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":796
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":971
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":972
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":973
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":971
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":975
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":976
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":977
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = (__pyx_v_base == NULL);
  if (__pyx_t_1) {

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":978
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":977
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":979
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":975
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":983
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":984
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":985
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 985, __pyx_L3_error)

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":984
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":986
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 986, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":987
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 987, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 987, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":984
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":983
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":989
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":990
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":991
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 991, __pyx_L3_error)

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":990
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":992
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 992, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":993
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 993, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 993, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":990
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":989
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":995
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":996
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":997
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 997, __pyx_L3_error)

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":996
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":998
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 998, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":999
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 999, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 999, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":996
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":995
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1002
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1014
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1002
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1017
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1029
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1017
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1032
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1039
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1032
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1042
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1046
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1042
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1049
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1053
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1049
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cantera/thermo.pyx":32
 *     """
 * 
 *     def __init__(self, thermo_model):             # <<<<<<<<<<<<<<
 *         self.thermo_model = thermo_model
 *         super().__init__(f"This method is invalid for {self.thermo_model}")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_22ThermoModelMethodError_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_22ThermoModelMethodError_1__init__ = {"__init__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_22ThermoModelMethodError_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_22ThermoModelMethodError_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_thermo_model = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_thermo_model,0};
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 32, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_thermo_model)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 32, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 32, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 32, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_thermo_model = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 32, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoModelMethodError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_22ThermoModelMethodError___init__(__pyx_self, __pyx_v_self, __pyx_v_thermo_model);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_22ThermoModelMethodError___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_thermo_model) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/thermo.pyx":33
 * 
 *     def __init__(self, thermo_model):
 *         self.thermo_model = thermo_model             # <<<<<<<<<<<<<<
 *         super().__init__(f"This method is invalid for {self.thermo_model}")
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_thermo_model, __pyx_v_thermo_model) < 0) __PYX_ERR(0, 33, __pyx_L1_error)

  /* "cantera/thermo.pyx":34
 *     def __init__(self, thermo_model):
 *         self.thermo_model = thermo_model
 *         super().__init__(f"This method is invalid for {self.thermo_model}")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_GetClassObj(__pyx_self);
  if (!__pyx_t_2) { PyErr_SetString(PyExc_SystemError, "super(): empty __class__ cell"); __PYX_ERR(0, 34, __pyx_L1_error) }
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_This_method_is_invalid_for, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":32
 *     """
 * 
 *     def __init__(self, thermo_model):             # <<<<<<<<<<<<<<
 *         self.thermo_model = thermo_model
 *         super().__init__(f"This method is invalid for {self.thermo_model}")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoModelMethodError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":78
 * 
 *     """
 *     def __cinit__(self, *args, init=True, **kwargs):             # <<<<<<<<<<<<<<
 *         if init:
 *             self._species.reset(new CxxSpecies())
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_7Species_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_6thermo_7Species_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_init = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_init_2,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      if (kw_args == 1) {
        const Py_ssize_t index = 0;
        PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = value; kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, 0, "__cinit__") < 0)) __PYX_ERR(0, 78, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs < 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_init = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 0, __pyx_nargs); __PYX_ERR(0, 78, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("cantera.thermo.Species.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species___cinit__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self), __pyx_v_init, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_7Species___cinit__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, PyObject *__pyx_v_init, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cantera/thermo.pyx":79
 *     """
 *     def __cinit__(self, *args, init=True, **kwargs):
 *         if init:             # <<<<<<<<<<<<<<
 *             self._species.reset(new CxxSpecies())
 *             self.species = self._species.get()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_init); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 79, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":80
 *     def __cinit__(self, *args, init=True, **kwargs):
 *         if init:
 *             self._species.reset(new CxxSpecies())             # <<<<<<<<<<<<<<
 *             self.species = self._species.get()
 * 
 */
    __pyx_v_self->_species.reset(new Cantera::Species());

    /* "cantera/thermo.pyx":81
 *         if init:
 *             self._species.reset(new CxxSpecies())
 *             self.species = self._species.get()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, name=None, composition=None, charge=None, size=None,
 */
    __pyx_v_self->species = __pyx_v_self->_species.get();

    /* "cantera/thermo.pyx":79
 *     """
 *     def __cinit__(self, *args, init=True, **kwargs):
 *         if init:             # <<<<<<<<<<<<<<
 *             self._species.reset(new CxxSpecies())
 *             self.species = self._species.get()
 */
  }

  /* "cantera/thermo.pyx":78
 * 
 *     """
 *     def __cinit__(self, *args, init=True, **kwargs):             # <<<<<<<<<<<<<<
 *         if init:
 *             self._species.reset(new CxxSpecies())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.Species.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":83
 *             self.species = self._species.get()
 * 
 *     def __init__(self, name=None, composition=None, charge=None, size=None,             # <<<<<<<<<<<<<<
 *                  *args, init=True, **kwargs):
 *         if not init:
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_7Species_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_6thermo_7Species_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_composition = 0;
  PyObject *__pyx_v_charge = 0;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_init = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_v_args = __Pyx_ArgsSlice_VARARGS(__pyx_args, 4, __pyx_nargs);
  if (unlikely(!__pyx_v_args)) {
    __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
    __Pyx_RefNannyFinishContext();
    return -1;
  }
  __Pyx_GOTREF(__pyx_v_args);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_composition,&__pyx_n_s_charge,&__pyx_n_s_size,&__pyx_n_s_init_2,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);

    /* "cantera/thermo.pyx":84
 * 
 *     def __init__(self, name=None, composition=None, charge=None, size=None,
 *                  *args, init=True, **kwargs):             # <<<<<<<<<<<<<<
 *         if not init:
 *             return
 */
    values[4] = ((PyObject *)Py_True);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        default:
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_composition);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_charge);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_size);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 4;
        PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = value; kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        const Py_ssize_t used_pos_args = (kwd_pos_args < 4) ? kwd_pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 83, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        default:
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_composition = values[1];
    __pyx_v_charge = values[2];
    __pyx_v_size = values[3];
    __pyx_v_init = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("cantera.thermo.Species.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_2__init__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self), __pyx_v_name, __pyx_v_composition, __pyx_v_charge, __pyx_v_size, __pyx_v_init, __pyx_v_args, __pyx_v_kwargs);

  /* "cantera/thermo.pyx":83
 *             self.species = self._species.get()
 * 
 *     def __init__(self, name=None, composition=None, charge=None, size=None,             # <<<<<<<<<<<<<<
 *                  *args, init=True, **kwargs):
 *         if not init:
 */

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_7Species_2__init__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_composition, PyObject *__pyx_v_charge, PyObject *__pyx_v_size, PyObject *__pyx_v_init, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::string __pyx_t_3;
  __pyx_t_7cantera_5ctcxx_Composition __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/thermo.pyx":85
 *     def __init__(self, name=None, composition=None, charge=None, size=None,
 *                  *args, init=True, **kwargs):
 *         if not init:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_init); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "cantera/thermo.pyx":86
 *                  *args, init=True, **kwargs):
 *         if not init:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if name is not None:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cantera/thermo.pyx":85
 *     def __init__(self, name=None, composition=None, charge=None, size=None,
 *                  *args, init=True, **kwargs):
 *         if not init:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "cantera/thermo.pyx":88
 *             return
 * 
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             self.species.name = stringify(name)
 * 
 */
  __pyx_t_2 = (__pyx_v_name != Py_None);
  if (__pyx_t_2) {

    /* "cantera/thermo.pyx":89
 * 
 *         if name is not None:
 *             self.species.name = stringify(name)             # <<<<<<<<<<<<<<
 * 
 *         if composition is not None:
 */
    __pyx_t_3 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
    __pyx_v_self->species->name = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

    /* "cantera/thermo.pyx":88
 *             return
 * 
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             self.species.name = stringify(name)
 * 
 */
  }

  /* "cantera/thermo.pyx":91
 *             self.species.name = stringify(name)
 * 
 *         if composition is not None:             # <<<<<<<<<<<<<<
 *             self.species.composition = comp_map(composition)
 * 
 */
  __pyx_t_2 = (__pyx_v_composition != Py_None);
  if (__pyx_t_2) {

    /* "cantera/thermo.pyx":92
 * 
 *         if composition is not None:
 *             self.species.composition = comp_map(composition)             # <<<<<<<<<<<<<<
 * 
 *         if charge is not None:
 */
    __pyx_t_4 = __pyx_f_7cantera_6_utils_comp_map(__pyx_v_composition); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
    __pyx_v_self->species->composition = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

    /* "cantera/thermo.pyx":91
 *             self.species.name = stringify(name)
 * 
 *         if composition is not None:             # <<<<<<<<<<<<<<
 *             self.species.composition = comp_map(composition)
 * 
 */
  }

  /* "cantera/thermo.pyx":94
 *             self.species.composition = comp_map(composition)
 * 
 *         if charge is not None:             # <<<<<<<<<<<<<<
 *             self.species.charge = charge
 * 
 */
  __pyx_t_2 = (__pyx_v_charge != Py_None);
  if (__pyx_t_2) {

    /* "cantera/thermo.pyx":95
 * 
 *         if charge is not None:
 *             self.species.charge = charge             # <<<<<<<<<<<<<<
 * 
 *         if size is not None:
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_charge); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L1_error)
    __pyx_v_self->species->charge = __pyx_t_5;

    /* "cantera/thermo.pyx":94
 *             self.species.composition = comp_map(composition)
 * 
 *         if charge is not None:             # <<<<<<<<<<<<<<
 *             self.species.charge = charge
 * 
 */
  }

  /* "cantera/thermo.pyx":97
 *             self.species.charge = charge
 * 
 *         if size is not None:             # <<<<<<<<<<<<<<
 *             self.species.size = size
 * 
 */
  __pyx_t_2 = (__pyx_v_size != Py_None);
  if (__pyx_t_2) {

    /* "cantera/thermo.pyx":98
 * 
 *         if size is not None:
 *             self.species.size = size             # <<<<<<<<<<<<<<
 * 
 *     cdef _assign(self, shared_ptr[CxxSpecies] other):
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_size); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L1_error)
    __pyx_v_self->species->size = __pyx_t_5;

    /* "cantera/thermo.pyx":97
 *             self.species.charge = charge
 * 
 *         if size is not None:             # <<<<<<<<<<<<<<
 *             self.species.size = size
 * 
 */
  }

  /* "cantera/thermo.pyx":83
 *             self.species = self._species.get()
 * 
 *     def __init__(self, name=None, composition=None, charge=None, size=None,             # <<<<<<<<<<<<<<
 *                  *args, init=True, **kwargs):
 *         if not init:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.Species.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":100
 *             self.species.size = size
 * 
 *     cdef _assign(self, shared_ptr[CxxSpecies] other):             # <<<<<<<<<<<<<<
 *         self._species = other
 *         self.species = self._species.get()
 */

static PyObject *__pyx_f_7cantera_6thermo_7Species__assign(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, std::shared_ptr<Cantera::Species>  __pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_assign", 0);

  /* "cantera/thermo.pyx":101
 * 
 *     cdef _assign(self, shared_ptr[CxxSpecies] other):
 *         self._species = other             # <<<<<<<<<<<<<<
 *         self.species = self._species.get()
 * 
 */
  __pyx_v_self->_species = __pyx_v_other;

  /* "cantera/thermo.pyx":102
 *     cdef _assign(self, shared_ptr[CxxSpecies] other):
 *         self._species = other
 *         self.species = self._species.get()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->species = __pyx_v_self->_species.get();

  /* "cantera/thermo.pyx":100
 *             self.species.size = size
 * 
 *     cdef _assign(self, shared_ptr[CxxSpecies] other):             # <<<<<<<<<<<<<<
 *         self._species = other
 *         self.species = self._species.get()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":104
 *         self.species = self._species.get()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_yaml(text):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_5from_yaml(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_7Species_4from_yaml, "\n        Create a `Species` object from its YAML string representation.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Species_5from_yaml = {"from_yaml", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_5from_yaml, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_4from_yaml};
static PyObject *__pyx_pw_7cantera_6thermo_7Species_5from_yaml(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_text = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_yaml (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_text)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 104, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "from_yaml") < 0)) __PYX_ERR(0, 104, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_text = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_yaml", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 104, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.Species.from_yaml", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_4from_yaml(__pyx_v_text);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_4from_yaml(PyObject *__pyx_v_text) {
  std::shared_ptr<Cantera::Species>  __pyx_v_cxx_species;
  struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_species = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  Cantera::AnyMap __pyx_t_2;
  std::shared_ptr<Cantera::Species>  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_yaml", 0);

  /* "cantera/thermo.pyx":109
 *         Create a `Species` object from its YAML string representation.
 *         """
 *         cxx_species = CxxNewSpecies(AnyMapFromYamlString(stringify(text)))             # <<<<<<<<<<<<<<
 *         species = Species(init=False)
 *         species._assign(cxx_species)
 */
  __pyx_t_1 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_text); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L1_error)
  try {
    __pyx_t_2 = Cantera::AnyMap::fromYamlString(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 109, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = newSpecies(__pyx_t_2);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 109, __pyx_L1_error)
  }
  __pyx_v_cxx_species = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "cantera/thermo.pyx":110
 *         """
 *         cxx_species = CxxNewSpecies(AnyMapFromYamlString(stringify(text)))
 *         species = Species(init=False)             # <<<<<<<<<<<<<<
 *         species._assign(cxx_species)
 *         return species
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_init_2, Py_False) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cantera_6thermo_Species), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_species = ((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cantera/thermo.pyx":111
 *         cxx_species = CxxNewSpecies(AnyMapFromYamlString(stringify(text)))
 *         species = Species(init=False)
 *         species._assign(cxx_species)             # <<<<<<<<<<<<<<
 *         return species
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_Species *)__pyx_v_species->__pyx_vtab)->_assign(__pyx_v_species, __pyx_v_cxx_species); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cantera/thermo.pyx":112
 *         species = Species(init=False)
 *         species._assign(cxx_species)
 *         return species             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_species);
  __pyx_r = ((PyObject *)__pyx_v_species);
  goto __pyx_L0;

  /* "cantera/thermo.pyx":104
 *         self.species = self._species.get()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_yaml(text):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cantera.thermo.Species.from_yaml", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_species);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":114
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_dict(data):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_7from_dict(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_7Species_6from_dict, "\n        Create a `Species` object from a dictionary corresponding to its YAML\n        representation.\n\n        :param data:\n            A dictionary corresponding to the YAML representation.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Species_7from_dict = {"from_dict", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_7from_dict, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_6from_dict};
static PyObject *__pyx_pw_7cantera_6thermo_7Species_7from_dict(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_data = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_dict (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "from_dict") < 0)) __PYX_ERR(0, 114, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_data = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_dict", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 114, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.Species.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_6from_dict(__pyx_v_data);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_6from_dict(PyObject *__pyx_v_data) {
  Cantera::AnyMap __pyx_v_any_map;
  std::shared_ptr<Cantera::Species>  __pyx_v_cxx_species;
  struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_species = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Cantera::AnyMap __pyx_t_1;
  std::shared_ptr<Cantera::Species>  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("from_dict", 0);

  /* "cantera/thermo.pyx":123
 *             A dictionary corresponding to the YAML representation.
 *         """
 *         cdef CxxAnyMap any_map = py_to_anymap(data)             # <<<<<<<<<<<<<<
 *         cxx_species = CxxNewSpecies(any_map)
 *         species = Species(init=False)
 */
  __pyx_t_1 = __pyx_f_7cantera_6_utils_py_to_anymap(__pyx_v_data, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 123, __pyx_L1_error)
  __pyx_v_any_map = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "cantera/thermo.pyx":124
 *         """
 *         cdef CxxAnyMap any_map = py_to_anymap(data)
 *         cxx_species = CxxNewSpecies(any_map)             # <<<<<<<<<<<<<<
 *         species = Species(init=False)
 *         species._assign(cxx_species)
 */
  try {
    __pyx_t_2 = newSpecies(__pyx_v_any_map);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 124, __pyx_L1_error)
  }
  __pyx_v_cxx_species = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "cantera/thermo.pyx":125
 *         cdef CxxAnyMap any_map = py_to_anymap(data)
 *         cxx_species = CxxNewSpecies(any_map)
 *         species = Species(init=False)             # <<<<<<<<<<<<<<
 *         species._assign(cxx_species)
 *         return species
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_init_2, Py_False) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cantera_6thermo_Species), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_species = ((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":126
 *         cxx_species = CxxNewSpecies(any_map)
 *         species = Species(init=False)
 *         species._assign(cxx_species)             # <<<<<<<<<<<<<<
 *         return species
 * 
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_7cantera_6thermo_Species *)__pyx_v_species->__pyx_vtab)->_assign(__pyx_v_species, __pyx_v_cxx_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":127
 *         species = Species(init=False)
 *         species._assign(cxx_species)
 *         return species             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_species);
  __pyx_r = ((PyObject *)__pyx_v_species);
  goto __pyx_L0;

  /* "cantera/thermo.pyx":114
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_dict(data):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.Species.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_species);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":129
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def list_from_file(filename, section="species"):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_9list_from_file(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_7Species_8list_from_file, "\n        Create a list of Species objects from all of the species defined in the section\n        ``section`` of a YAML file. Directories on Cantera's input file path will be\n        searched for the specified file.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Species_9list_from_file = {"list_from_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_9list_from_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_8list_from_file};
static PyObject *__pyx_pw_7cantera_6thermo_7Species_9list_from_file(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_section = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_from_file (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_section,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_n_u_species);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filename)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 129, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_section);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 129, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "list_from_file") < 0)) __PYX_ERR(0, 129, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_section = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list_from_file", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 129, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.Species.list_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_8list_from_file(__pyx_v_filename, __pyx_v_section);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_8list_from_file(PyObject *__pyx_v_filename, PyObject *__pyx_v_section) {
  Cantera::AnyMap __pyx_v_root;
  PyObject *__pyx_v_species = NULL;
  std::shared_ptr<Cantera::Species>  __pyx_v_a;
  struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  Cantera::AnyMap __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Cantera::AnyValue __pyx_t_4;
  std::vector<std::shared_ptr<Cantera::Species> >  __pyx_t_5;
  std::vector<std::shared_ptr<Cantera::Species> > ::iterator __pyx_t_6;
  std::vector<std::shared_ptr<Cantera::Species> >  __pyx_t_7;
  std::shared_ptr<Cantera::Species>  __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_from_file", 0);

  /* "cantera/thermo.pyx":136
 *         searched for the specified file.
 *         """
 *         root = AnyMapFromYamlFile(stringify(filename))             # <<<<<<<<<<<<<<
 *         species = []
 *         for a in CxxGetSpecies(root[stringify(section)]):
 */
  __pyx_t_1 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 136, __pyx_L1_error)
  try {
    __pyx_t_2 = Cantera::AnyMap::fromYamlFile(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 136, __pyx_L1_error)
  }
  __pyx_v_root = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "cantera/thermo.pyx":137
 *         """
 *         root = AnyMapFromYamlFile(stringify(filename))
 *         species = []             # <<<<<<<<<<<<<<
 *         for a in CxxGetSpecies(root[stringify(section)]):
 *             b = Species(init=False)
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_species = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":138
 *         root = AnyMapFromYamlFile(stringify(filename))
 *         species = []
 *         for a in CxxGetSpecies(root[stringify(section)]):             # <<<<<<<<<<<<<<
 *             b = Species(init=False)
 *             b._assign(a)
 */
  __pyx_t_1 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_section); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_root[__pyx_t_1];
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 138, __pyx_L1_error)
  }
  try {
    __pyx_t_5 = getSpecies(__pyx_t_4);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 138, __pyx_L1_error)
  }
  __pyx_t_7 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);
  __pyx_t_6 = __pyx_t_7.begin();
  for (;;) {
    if (!(__pyx_t_6 != __pyx_t_7.end())) break;
    __pyx_t_8 = *__pyx_t_6;
    ++__pyx_t_6;
    __pyx_v_a = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);

    /* "cantera/thermo.pyx":139
 *         species = []
 *         for a in CxxGetSpecies(root[stringify(section)]):
 *             b = Species(init=False)             # <<<<<<<<<<<<<<
 *             b._assign(a)
 *             species.append(b)
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_init_2, Py_False) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cantera_6thermo_Species), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_b, ((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_t_9));
    __pyx_t_9 = 0;

    /* "cantera/thermo.pyx":140
 *         for a in CxxGetSpecies(root[stringify(section)]):
 *             b = Species(init=False)
 *             b._assign(a)             # <<<<<<<<<<<<<<
 *             species.append(b)
 *         return species
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_7cantera_6thermo_Species *)__pyx_v_b->__pyx_vtab)->_assign(__pyx_v_b, __pyx_v_a); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "cantera/thermo.pyx":141
 *             b = Species(init=False)
 *             b._assign(a)
 *             species.append(b)             # <<<<<<<<<<<<<<
 *         return species
 * 
 */
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_species, ((PyObject *)__pyx_v_b)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 141, __pyx_L1_error)

    /* "cantera/thermo.pyx":138
 *         root = AnyMapFromYamlFile(stringify(filename))
 *         species = []
 *         for a in CxxGetSpecies(root[stringify(section)]):             # <<<<<<<<<<<<<<
 *             b = Species(init=False)
 *             b._assign(a)
 */
  }

  /* "cantera/thermo.pyx":142
 *             b._assign(a)
 *             species.append(b)
 *         return species             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_species);
  __pyx_r = __pyx_v_species;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":129
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def list_from_file(filename, section="species"):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cantera.thermo.Species.list_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_species);
  __Pyx_XDECREF((PyObject *)__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":144
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def list_from_yaml(text, section=None):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_11list_from_yaml(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_7Species_10list_from_yaml, "\n        Create a list of Species objects from all the species defined in a YAML\n        string. If ``text`` is a YAML mapping, the ``section`` name of the list\n        to be read must be specified. If ``text`` is a YAML list, no ``section``\n        name should be supplied.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Species_11list_from_yaml = {"list_from_yaml", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_11list_from_yaml, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_10list_from_yaml};
static PyObject *__pyx_pw_7cantera_6thermo_7Species_11list_from_yaml(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_text = 0;
  PyObject *__pyx_v_section = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_from_yaml (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_section,0};
    PyObject* values[2] = {0,0};

    /* "cantera/thermo.pyx":145
 * 
 *     @staticmethod
 *     def list_from_yaml(text, section=None):             # <<<<<<<<<<<<<<
 *         """
 *         Create a list of Species objects from all the species defined in a YAML
 */
    values[1] = ((PyObject *)Py_None);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_text)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_section);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "list_from_yaml") < 0)) __PYX_ERR(0, 144, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = values[0];
    __pyx_v_section = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list_from_yaml", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 144, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.Species.list_from_yaml", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_10list_from_yaml(__pyx_v_text, __pyx_v_section);

  /* "cantera/thermo.pyx":144
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def list_from_yaml(text, section=None):
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_10list_from_yaml(PyObject *__pyx_v_text, PyObject *__pyx_v_section) {
  Cantera::AnyMap __pyx_v_root;
  std::vector<std::shared_ptr<Cantera::Species> >  __pyx_v_cxx_species;
  PyObject *__pyx_v_species = NULL;
  std::shared_ptr<Cantera::Species>  __pyx_v_a;
  struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_b = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  Cantera::AnyMap __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Cantera::AnyValue __pyx_t_5;
  std::vector<std::shared_ptr<Cantera::Species> >  __pyx_t_6;
  std::vector<std::shared_ptr<Cantera::Species> > ::iterator __pyx_t_7;
  std::shared_ptr<Cantera::Species>  __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_from_yaml", 0);

  /* "cantera/thermo.pyx":152
 *         name should be supplied.
 *         """
 *         root = AnyMapFromYamlString(stringify(text))             # <<<<<<<<<<<<<<
 * 
 *         # ``items`` is the pseudo-key used to access a list when it is at the
 */
  __pyx_t_1 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_text); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L1_error)
  try {
    __pyx_t_2 = Cantera::AnyMap::fromYamlString(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 152, __pyx_L1_error)
  }
  __pyx_v_root = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "cantera/thermo.pyx":156
 *         # ``items`` is the pseudo-key used to access a list when it is at the
 *         # top level of a YAML document
 *         cxx_species = CxxGetSpecies(root[stringify(section or "items")])             # <<<<<<<<<<<<<<
 *         species = []
 *         for a in cxx_species:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_section); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 156, __pyx_L1_error)
  if (!__pyx_t_4) {
  } else {
    __Pyx_INCREF(__pyx_v_section);
    __pyx_t_3 = __pyx_v_section;
    goto __pyx_L3_bool_binop_done;
  }
  __Pyx_INCREF(__pyx_n_u_items);
  __pyx_t_3 = __pyx_n_u_items;
  __pyx_L3_bool_binop_done:;
  __pyx_t_1 = __pyx_f_7cantera_6_utils_stringify(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_5 = __pyx_v_root[__pyx_t_1];
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 156, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = getSpecies(__pyx_t_5);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 156, __pyx_L1_error)
  }
  __pyx_v_cxx_species = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

  /* "cantera/thermo.pyx":157
 *         # top level of a YAML document
 *         cxx_species = CxxGetSpecies(root[stringify(section or "items")])
 *         species = []             # <<<<<<<<<<<<<<
 *         for a in cxx_species:
 *             b = Species(init=False)
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_species = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":158
 *         cxx_species = CxxGetSpecies(root[stringify(section or "items")])
 *         species = []
 *         for a in cxx_species:             # <<<<<<<<<<<<<<
 *             b = Species(init=False)
 *             b._assign(a)
 */
  __pyx_t_7 = __pyx_v_cxx_species.begin();
  for (;;) {
    if (!(__pyx_t_7 != __pyx_v_cxx_species.end())) break;
    __pyx_t_8 = *__pyx_t_7;
    ++__pyx_t_7;
    __pyx_v_a = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);

    /* "cantera/thermo.pyx":159
 *         species = []
 *         for a in cxx_species:
 *             b = Species(init=False)             # <<<<<<<<<<<<<<
 *             b._assign(a)
 *             species.append(b)
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_init_2, Py_False) < 0) __PYX_ERR(0, 159, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cantera_6thermo_Species), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_b, ((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_t_9));
    __pyx_t_9 = 0;

    /* "cantera/thermo.pyx":160
 *         for a in cxx_species:
 *             b = Species(init=False)
 *             b._assign(a)             # <<<<<<<<<<<<<<
 *             species.append(b)
 *         return species
 */
    __pyx_t_9 = ((struct __pyx_vtabstruct_7cantera_6thermo_Species *)__pyx_v_b->__pyx_vtab)->_assign(__pyx_v_b, __pyx_v_a); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "cantera/thermo.pyx":161
 *             b = Species(init=False)
 *             b._assign(a)
 *             species.append(b)             # <<<<<<<<<<<<<<
 *         return species
 * 
 */
    __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_species, ((PyObject *)__pyx_v_b)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 161, __pyx_L1_error)

    /* "cantera/thermo.pyx":158
 *         cxx_species = CxxGetSpecies(root[stringify(section or "items")])
 *         species = []
 *         for a in cxx_species:             # <<<<<<<<<<<<<<
 *             b = Species(init=False)
 *             b._assign(a)
 */
  }

  /* "cantera/thermo.pyx":162
 *             b._assign(a)
 *             species.append(b)
 *         return species             # <<<<<<<<<<<<<<
 * 
 *     property name:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_species);
  __pyx_r = __pyx_v_species;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":144
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def list_from_yaml(text, section=None):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cantera.thermo.Species.list_from_yaml", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_species);
  __Pyx_XDECREF((PyObject *)__pyx_v_b);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":166
 *     property name:
 *         """ The name of the species. """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.species.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_7Species_4name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_4name___get__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_4name___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":167
 *         """ The name of the species. """
 *         def __get__(self):
 *             return pystr(self.species.name)             # <<<<<<<<<<<<<<
 * 
 *     property composition:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6_utils_pystr(__pyx_v_self->species->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":166
 *     property name:
 *         """ The name of the species. """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.species.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.Species.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":174
 *         element names; values are the corresponding atomicities.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return comp_map_to_dict(self.species.composition)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_11composition_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_7Species_11composition_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_11composition___get__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_11composition___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":175
 *         """
 *         def __get__(self):
 *             return comp_map_to_dict(self.species.composition)             # <<<<<<<<<<<<<<
 * 
 *     property charge:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6_utils_comp_map_to_dict(__pyx_v_self->species->composition); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":174
 *         element names; values are the corresponding atomicities.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return comp_map_to_dict(self.species.composition)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.Species.composition.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":181
 *         The electrical charge on the species, in units of the elementary charge.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.species.charge
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_6charge_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_7Species_6charge_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_6charge___get__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_6charge___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":182
 *         """
 *         def __get__(self):
 *             return self.species.charge             # <<<<<<<<<<<<<<
 * 
 *     property size:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->species->charge); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":181
 *         The electrical charge on the species, in units of the elementary charge.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.species.charge
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.Species.charge.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":186
 *     property size:
 *         """ The effective size [m] of the species. """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.species.size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_7Species_4size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_4size___get__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_4size___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":187
 *         """ The effective size [m] of the species. """
 *         def __get__(self):
 *             return self.species.size             # <<<<<<<<<<<<<<
 * 
 *     property molecular_weight:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->species->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":186
 *     property size:
 *         """ The effective size [m] of the species. """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.species.size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.Species.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":194
 *         .. versionadded:: 3.0
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.species.molecularWeight()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_16molecular_weight_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_7Species_16molecular_weight_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_16molecular_weight___get__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_16molecular_weight___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":195
 *         """
 *         def __get__(self):
 *             return self.species.molecularWeight()             # <<<<<<<<<<<<<<
 * 
 *     property thermo:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->species->molecularWeight();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 195, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":194
 *         .. versionadded:: 3.0
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.species.molecularWeight()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.Species.molecular_weight.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":202
 *         of class `SpeciesThermo`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.species.thermo.get() != NULL:
 *                 return wrapSpeciesThermo(self.species.thermo)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_6thermo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_7Species_6thermo_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_6thermo___get__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_6thermo___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":203
 *         """
 *         def __get__(self):
 *             if self.species.thermo.get() != NULL:             # <<<<<<<<<<<<<<
 *                 return wrapSpeciesThermo(self.species.thermo)
 *             else:
 */
  __pyx_t_1 = (__pyx_v_self->species->thermo.get() != NULL);
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":204
 *         def __get__(self):
 *             if self.species.thermo.get() != NULL:
 *                 return wrapSpeciesThermo(self.species.thermo)             # <<<<<<<<<<<<<<
 *             else:
 *                 return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_7cantera_13speciesthermo_wrapSpeciesThermo(((std::shared_ptr<Cantera::SpeciesThermoInterpType> )__pyx_v_self->species->thermo)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cantera/thermo.pyx":203
 *         """
 *         def __get__(self):
 *             if self.species.thermo.get() != NULL:             # <<<<<<<<<<<<<<
 *                 return wrapSpeciesThermo(self.species.thermo)
 *             else:
 */
  }

  /* "cantera/thermo.pyx":206
 *                 return wrapSpeciesThermo(self.species.thermo)
 *             else:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, SpeciesThermo spthermo):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "cantera/thermo.pyx":202
 *         of class `SpeciesThermo`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.species.thermo.get() != NULL:
 *                 return wrapSpeciesThermo(self.species.thermo)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.Species.thermo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":208
 *                 return None
 * 
 *         def __set__(self, SpeciesThermo spthermo):             # <<<<<<<<<<<<<<
 *             self.species.thermo = spthermo._spthermo
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_7Species_6thermo_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_spthermo); /*proto*/
static int __pyx_pw_7cantera_6thermo_7Species_6thermo_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_spthermo) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_spthermo), __pyx_ptype_7cantera_13speciesthermo_SpeciesThermo, 1, "spthermo", 0))) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_6thermo_2__set__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self), ((struct __pyx_obj_7cantera_13speciesthermo_SpeciesThermo *)__pyx_v_spthermo));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_7Species_6thermo_2__set__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, struct __pyx_obj_7cantera_13speciesthermo_SpeciesThermo *__pyx_v_spthermo) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<Cantera::SpeciesThermoInterpType>  __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":209
 * 
 *         def __set__(self, SpeciesThermo spthermo):
 *             self.species.thermo = spthermo._spthermo             # <<<<<<<<<<<<<<
 * 
 *     property transport:
 */
  __pyx_t_1 = __pyx_v_spthermo->_spthermo;
  __pyx_v_self->species->thermo = __PYX_STD_MOVE_IF_SUPPORTED(((std::shared_ptr<Cantera::SpeciesThermoInterpType> )__pyx_t_1));

  /* "cantera/thermo.pyx":208
 *                 return None
 * 
 *         def __set__(self, SpeciesThermo spthermo):             # <<<<<<<<<<<<<<
 *             self.species.thermo = spthermo._spthermo
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":216
 *         `GasTransportData`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.species.transport.get() != NULL:
 *                 data = GasTransportData(init=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_9transport_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_7Species_9transport_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_9transport___get__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_9transport___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self) {
  struct __pyx_obj_7cantera_9transport_GasTransportData *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":217
 *         """
 *         def __get__(self):
 *             if self.species.transport.get() != NULL:             # <<<<<<<<<<<<<<
 *                 data = GasTransportData(init=False)
 *                 data._assign(self.species.transport)
 */
  __pyx_t_1 = (__pyx_v_self->species->transport.get() != NULL);
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":218
 *         def __get__(self):
 *             if self.species.transport.get() != NULL:
 *                 data = GasTransportData(init=False)             # <<<<<<<<<<<<<<
 *                 data._assign(self.species.transport)
 *                 return data
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_init_2, Py_False) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cantera_9transport_GasTransportData), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_data = ((struct __pyx_obj_7cantera_9transport_GasTransportData *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "cantera/thermo.pyx":219
 *             if self.species.transport.get() != NULL:
 *                 data = GasTransportData(init=False)
 *                 data._assign(self.species.transport)             # <<<<<<<<<<<<<<
 *                 return data
 *             else:
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_7cantera_9transport_GasTransportData *)__pyx_v_data->__pyx_vtab)->_assign(__pyx_v_data, ((std::shared_ptr<Cantera::TransportData> )__pyx_v_self->species->transport)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cantera/thermo.pyx":220
 *                 data = GasTransportData(init=False)
 *                 data._assign(self.species.transport)
 *                 return data             # <<<<<<<<<<<<<<
 *             else:
 *                 return None
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_data);
    __pyx_r = ((PyObject *)__pyx_v_data);
    goto __pyx_L0;

    /* "cantera/thermo.pyx":217
 *         """
 *         def __get__(self):
 *             if self.species.transport.get() != NULL:             # <<<<<<<<<<<<<<
 *                 data = GasTransportData(init=False)
 *                 data._assign(self.species.transport)
 */
  }

  /* "cantera/thermo.pyx":222
 *                 return data
 *             else:
 *                 return None             # <<<<<<<<<<<<<<
 *         def __set__(self, GasTransportData tran):
 *             self.species.transport = tran._data
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "cantera/thermo.pyx":216
 *         `GasTransportData`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.species.transport.get() != NULL:
 *                 data = GasTransportData(init=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.Species.transport.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":223
 *             else:
 *                 return None
 *         def __set__(self, GasTransportData tran):             # <<<<<<<<<<<<<<
 *             self.species.transport = tran._data
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_7Species_9transport_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tran); /*proto*/
static int __pyx_pw_7cantera_6thermo_7Species_9transport_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tran) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tran), __pyx_ptype_7cantera_9transport_GasTransportData, 1, "tran", 0))) __PYX_ERR(0, 223, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_9transport_2__set__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self), ((struct __pyx_obj_7cantera_9transport_GasTransportData *)__pyx_v_tran));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_7Species_9transport_2__set__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, struct __pyx_obj_7cantera_9transport_GasTransportData *__pyx_v_tran) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<Cantera::TransportData>  __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":224
 *                 return None
 *         def __set__(self, GasTransportData tran):
 *             self.species.transport = tran._data             # <<<<<<<<<<<<<<
 * 
 *     property input_data:
 */
  __pyx_t_1 = __pyx_v_tran->_data;
  __pyx_v_self->species->transport = __PYX_STD_MOVE_IF_SUPPORTED(((std::shared_ptr<Cantera::TransportData> )__pyx_t_1));

  /* "cantera/thermo.pyx":223
 *             else:
 *                 return None
 *         def __set__(self, GasTransportData tran):             # <<<<<<<<<<<<<<
 *             self.species.transport = tran._data
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":231
 *         provided with its input (YAML) definition.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CxxThermoPhase* phase = self._phase.thermo if self._phase else NULL
 *             return anymap_to_py(self.species.parameters(phase))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_10input_data_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_7Species_10input_data_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_10input_data___get__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_10input_data___get__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self) {
  Cantera::ThermoPhase *__pyx_v_phase;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Cantera::ThermoPhase *__pyx_t_1;
  int __pyx_t_2;
  Cantera::AnyMap __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":232
 *         """
 *         def __get__(self):
 *             cdef CxxThermoPhase* phase = self._phase.thermo if self._phase else NULL             # <<<<<<<<<<<<<<
 *             return anymap_to_py(self.species.parameters(phase))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self->_phase)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 232, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_1 = __pyx_v_self->_phase->thermo;
  } else {
    __pyx_t_1 = NULL;
  }
  __pyx_v_phase = __pyx_t_1;

  /* "cantera/thermo.pyx":233
 *         def __get__(self):
 *             cdef CxxThermoPhase* phase = self._phase.thermo if self._phase else NULL
 *             return anymap_to_py(self.species.parameters(phase))             # <<<<<<<<<<<<<<
 * 
 *     def update_user_data(self, data):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_3 = __pyx_v_self->species->parameters(__pyx_v_phase);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 233, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_f_7cantera_6_utils_anymap_to_py(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":231
 *         provided with its input (YAML) definition.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CxxThermoPhase* phase = self._phase.thermo if self._phase else NULL
 *             return anymap_to_py(self.species.parameters(phase))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.Species.input_data.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":235
 *             return anymap_to_py(self.species.parameters(phase))
 * 
 *     def update_user_data(self, data):             # <<<<<<<<<<<<<<
 *         """
 *         Add the contents of the provided `dict` as additional fields when generating
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_13update_user_data(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_7Species_12update_user_data, "\n        Add the contents of the provided `dict` as additional fields when generating\n        YAML phase definition files with `Solution.write_yaml` or in the data returned\n        by `input_data`. Existing keys with matching names are overwritten.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Species_13update_user_data = {"update_user_data", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_13update_user_data, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_12update_user_data};
static PyObject *__pyx_pw_7cantera_6thermo_7Species_13update_user_data(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_data = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_user_data (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_data)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "update_user_data") < 0)) __PYX_ERR(0, 235, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_data = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_user_data", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 235, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.Species.update_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_12update_user_data(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self), __pyx_v_data);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_12update_user_data(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Cantera::AnyMap __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_user_data", 0);

  /* "cantera/thermo.pyx":241
 *         by `input_data`. Existing keys with matching names are overwritten.
 *         """
 *         self.species.input.update(py_to_anymap(data), False)             # <<<<<<<<<<<<<<
 * 
 *     def clear_user_data(self):
 */
  __pyx_t_1 = __pyx_f_7cantera_6_utils_py_to_anymap(__pyx_v_data, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_v_self->species->input.update(__pyx_t_1, 0);

  /* "cantera/thermo.pyx":235
 *             return anymap_to_py(self.species.parameters(phase))
 * 
 *     def update_user_data(self, data):             # <<<<<<<<<<<<<<
 *         """
 *         Add the contents of the provided `dict` as additional fields when generating
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.Species.update_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":243
 *         self.species.input.update(py_to_anymap(data), False)
 * 
 *     def clear_user_data(self):             # <<<<<<<<<<<<<<
 *         """
 *         Clear all saved input data, so that the data given by `input_data` or
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_15clear_user_data(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_7Species_14clear_user_data, "\n        Clear all saved input data, so that the data given by `input_data` or\n        `Solution.write_yaml` will only include values generated by Cantera based on\n        the current object state.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Species_15clear_user_data = {"clear_user_data", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_15clear_user_data, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_14clear_user_data};
static PyObject *__pyx_pw_7cantera_6thermo_7Species_15clear_user_data(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_user_data (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("clear_user_data", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "clear_user_data", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_14clear_user_data(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_14clear_user_data(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_user_data", 0);

  /* "cantera/thermo.pyx":249
 *         the current object state.
 *         """
 *         self.species.input.clear()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_v_self->species->input.clear();

  /* "cantera/thermo.pyx":243
 *         self.species.input.update(py_to_anymap(data), False)
 * 
 *     def clear_user_data(self):             # <<<<<<<<<<<<<<
 *         """
 *         Clear all saved input data, so that the data given by `input_data` or
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":251
 *         self.species.input.clear()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<Species {}>'.format(self.name)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_17__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_7Species_17__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_16__repr__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_16__repr__(struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "cantera/thermo.pyx":252
 * 
 *     def __repr__(self):
 *         return '<Species {}>'.format(self.name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Species, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":251
 *         self.species.input.clear()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return '<Species {}>'.format(self.name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.Species.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Species_19__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_7Species_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_18__reduce_cython__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.Species.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Species_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Species_21__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_7Species_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.Species.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Species_20__setstate_cython__(((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Species_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.Species.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":266
 *     """
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         super().__init__(*args, **kwargs)
 *         if 'source' not in kwargs:
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = __Pyx_KwargsAsDict_VARARGS(__pyx_kwds, __pyx_kwvalues);
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = PyDict_New();
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase___init__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase___init__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __pyx_t_7cantera_6thermo_CxxPlasmaPhasePtr __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/thermo.pyx":267
 * 
 *     def __init__(self, *args, **kwargs):
 *         super().__init__(*args, **kwargs)             # <<<<<<<<<<<<<<
 *         if 'source' not in kwargs:
 *             self.thermo_basis = mass_basis
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase);
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":268
 *     def __init__(self, *args, **kwargs):
 *         super().__init__(*args, **kwargs)
 *         if 'source' not in kwargs:             # <<<<<<<<<<<<<<
 *             self.thermo_basis = mass_basis
 *         # In composite objects, the ThermoPhase constructor needs to be called first
 */
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_source, __pyx_v_kwargs, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 268, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "cantera/thermo.pyx":269
 *         super().__init__(*args, **kwargs)
 *         if 'source' not in kwargs:
 *             self.thermo_basis = mass_basis             # <<<<<<<<<<<<<<
 *         # In composite objects, the ThermoPhase constructor needs to be called first
 *         # to prevent instantiation of stand-alone 'Kinetics' or 'Transport' objects.
 */
    __pyx_v_self->__pyx_base.thermo_basis = __pyx_e_7cantera_6thermo_mass_basis;

    /* "cantera/thermo.pyx":268
 *     def __init__(self, *args, **kwargs):
 *         super().__init__(*args, **kwargs)
 *         if 'source' not in kwargs:             # <<<<<<<<<<<<<<
 *             self.thermo_basis = mass_basis
 *         # In composite objects, the ThermoPhase constructor needs to be called first
 */
  }

  /* "cantera/thermo.pyx":277
 *         # ThermoPhase if so, since these objects require the number of species to remain
 *         # constant.
 *         self._references = weakref.WeakKeyDictionary()             # <<<<<<<<<<<<<<
 *         # validate plasma phase
 *         self._enable_plasma = False
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_weakref); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_WeakKeyDictionary); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._references);
  __Pyx_DECREF(__pyx_v_self->__pyx_base._references);
  __pyx_v_self->__pyx_base._references = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":279
 *         self._references = weakref.WeakKeyDictionary()
 *         # validate plasma phase
 *         self._enable_plasma = False             # <<<<<<<<<<<<<<
 *         if dynamic_cast[CxxPlasmaPhasePtr](self.thermo):
 *             self._enable_plasma = True
 */
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  __Pyx_GOTREF(__pyx_v_self->_enable_plasma);
  __Pyx_DECREF(__pyx_v_self->_enable_plasma);
  __pyx_v_self->_enable_plasma = Py_False;

  /* "cantera/thermo.pyx":280
 *         # validate plasma phase
 *         self._enable_plasma = False
 *         if dynamic_cast[CxxPlasmaPhasePtr](self.thermo):             # <<<<<<<<<<<<<<
 *             self._enable_plasma = True
 *             self.plasma = <CxxPlasmaPhase*>self.thermo
 */
  try {
    __pyx_t_6 = dynamic_cast<__pyx_t_7cantera_6thermo_CxxPlasmaPhasePtr>(__pyx_v_self->__pyx_base.thermo);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 280, __pyx_L1_error)
  }
  __pyx_t_4 = (__pyx_t_6 != 0);
  if (__pyx_t_4) {

    /* "cantera/thermo.pyx":281
 *         self._enable_plasma = False
 *         if dynamic_cast[CxxPlasmaPhasePtr](self.thermo):
 *             self._enable_plasma = True             # <<<<<<<<<<<<<<
 *             self.plasma = <CxxPlasmaPhase*>self.thermo
 * 
 */
    __Pyx_INCREF(Py_True);
    __Pyx_GIVEREF(Py_True);
    __Pyx_GOTREF(__pyx_v_self->_enable_plasma);
    __Pyx_DECREF(__pyx_v_self->_enable_plasma);
    __pyx_v_self->_enable_plasma = Py_True;

    /* "cantera/thermo.pyx":282
 *         if dynamic_cast[CxxPlasmaPhasePtr](self.thermo):
 *             self._enable_plasma = True
 *             self.plasma = <CxxPlasmaPhase*>self.thermo             # <<<<<<<<<<<<<<
 * 
 *     property thermo_model:
 */
    __pyx_v_self->plasma = ((Cantera::PlasmaPhase *)__pyx_v_self->__pyx_base.thermo);

    /* "cantera/thermo.pyx":280
 *         # validate plasma phase
 *         self._enable_plasma = False
 *         if dynamic_cast[CxxPlasmaPhasePtr](self.thermo):             # <<<<<<<<<<<<<<
 *             self._enable_plasma = True
 *             self.plasma = <CxxPlasmaPhase*>self.thermo
 */
  }

  /* "cantera/thermo.pyx":266
 *     """
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         super().__init__(*args, **kwargs)
 *         if 'source' not in kwargs:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":288
 *         Return thermodynamic model describing phase.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.thermo.type())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12thermo_model_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12thermo_model_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_12thermo_model___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12thermo_model___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":289
 *         """
 *         def __get__(self):
 *             return pystr(self.thermo.type())             # <<<<<<<<<<<<<<
 * 
 *     property phase_of_matter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6_utils_pystr(__pyx_v_self->__pyx_base.thermo->type()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":288
 *         Return thermodynamic model describing phase.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.thermo.type())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.thermo_model.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":295
 *         Get the thermodynamic phase (gas, liquid, etc.) at the current conditions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.thermo.phaseOfMatter())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15phase_of_matter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15phase_of_matter_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_15phase_of_matter___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_15phase_of_matter___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":296
 *         """
 *         def __get__(self):
 *             return pystr(self.thermo.phaseOfMatter())             # <<<<<<<<<<<<<<
 * 
 *     def report(self, show_thermo=True, float threshold=1e-14):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->phaseOfMatter();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 296, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":295
 *         Get the thermodynamic phase (gas, liquid, etc.) at the current conditions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.thermo.phaseOfMatter())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.phase_of_matter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":298
 *             return pystr(self.thermo.phaseOfMatter())
 * 
 *     def report(self, show_thermo=True, float threshold=1e-14):             # <<<<<<<<<<<<<<
 *         """
 *         Generate a report describing the thermodynamic state of this phase. To
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3report(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_2report, "\n        Generate a report describing the thermodynamic state of this phase. To\n        print the report to the terminal, simply call the phase object. The\n        following two statements are equivalent::\n\n        >>> phase()\n        >>> print(phase.report())\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_3report = {"report", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_3report, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_2report};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3report(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_show_thermo = 0;
  float __pyx_v_threshold;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("report (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_show_thermo,&__pyx_n_s_threshold,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_True);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_show_thermo);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_threshold);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "report") < 0)) __PYX_ERR(0, 298, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_show_thermo = values[0];
    if (values[1]) {
      __pyx_v_threshold = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_threshold == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L3_error)
    } else {
      __pyx_v_threshold = ((float)1e-14);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("report", 0, 0, 2, __pyx_nargs); __PYX_ERR(0, 298, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.report", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2report(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_show_thermo, __pyx_v_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2report(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_show_thermo, float __pyx_v_threshold) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("report", 0);

  /* "cantera/thermo.pyx":307
 *         >>> print(phase.report())
 *         """
 *         return pystr(self.thermo.report(bool(show_thermo), threshold))             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_show_thermo); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 307, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.thermo->report((!(!__pyx_t_1)), __pyx_v_threshold);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 307, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":298
 *             return pystr(self.thermo.phaseOfMatter())
 * 
 *     def report(self, show_thermo=True, float threshold=1e-14):             # <<<<<<<<<<<<<<
 *         """
 *         Generate a report describing the thermodynamic state of this phase. To
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.report", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":309
 *         return pystr(self.thermo.report(bool(show_thermo), threshold))
 * 
 *     def __call__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         print(self.report(*args, **kwargs))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 1))) return NULL;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = __Pyx_KwargsAsDict_VARARGS(__pyx_kwds, __pyx_kwvalues);
    if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = PyDict_New();
    if (unlikely(!__pyx_v_kwargs)) return NULL;
    __Pyx_GOTREF(__pyx_v_kwargs);
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_4__call__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_4__call__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "cantera/thermo.pyx":310
 * 
 *     def __call__(self, *args, **kwargs):
 *         print(self.report(*args, **kwargs))             # <<<<<<<<<<<<<<
 * 
 *     property is_pure:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_report); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_v_args, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":309
 *         return pystr(self.thermo.report(bool(show_thermo), threshold))
 * 
 *     def __call__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         print(self.report(*args, **kwargs))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":316
 *         Returns true if the phase represents a pure (fixed composition) substance
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.isPure()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7is_pure_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7is_pure_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_7is_pure___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7is_pure___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":317
 *         """
 *         def __get__(self):
 *             return self.thermo.isPure()             # <<<<<<<<<<<<<<
 * 
 *     property has_phase_transition:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.thermo->isPure()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":316
 *         Returns true if the phase represents a pure (fixed composition) substance
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.isPure()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.is_pure.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":323
 *         Returns true if the phase represents a substance with phase transitions
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.hasPhaseTransition()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_20has_phase_transition_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_20has_phase_transition_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_20has_phase_transition___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_20has_phase_transition___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":324
 *         """
 *         def __get__(self):
 *             return self.thermo.hasPhaseTransition()             # <<<<<<<<<<<<<<
 * 
 *     property is_compressible:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.thermo->hasPhaseTransition()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":323
 *         Returns true if the phase represents a substance with phase transitions
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.hasPhaseTransition()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.has_phase_transition.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":331
 *         the thermodynamic state of a substance
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.isCompressible()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15is_compressible_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15is_compressible_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_15is_compressible___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_15is_compressible___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":332
 *         """
 *         def __get__(self):
 *             return self.thermo.isCompressible()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.thermo->isCompressible()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":331
 *         the thermodynamic state of a substance
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.isCompressible()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.is_compressible.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":334
 *             return self.thermo.isCompressible()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def _native_mode(self):
 *         """  Return string acronym representing native state """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12_native_mode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12_native_mode_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_12_native_mode___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12_native_mode___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":337
 *     def _native_mode(self):
 *         """  Return string acronym representing native state """
 *         return pystr(self.thermo.nativeMode())             # <<<<<<<<<<<<<<
 * 
 *     property _native_state:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6_utils_pystr(__pyx_v_self->__pyx_base.thermo->nativeMode()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":334
 *             return self.thermo.isCompressible()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def _native_mode(self):
 *         """  Return string acronym representing native state """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase._native_mode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":343
 *         Default properties defining a state
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef pair[string, size_t] item
 *             native = {pystr(item.first): item.second for item in self.thermo.nativeState()}
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13_native_state_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13_native_state_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_13_native_state___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":346
 *             cdef pair[string, size_t] item
 *             native = {pystr(item.first): item.second for item in self.thermo.nativeState()}
 *             return tuple([i for i, j in sorted(native.items(), key=lambda kv: kv[1])])             # <<<<<<<<<<<<<<
 * 
 *     property _full_states:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13_native_state_7__get___lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_13_native_state_7__get___lambda = {"lambda", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_13_native_state_7__get___lambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13_native_state_7__get___lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_kv = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kv,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_kv)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda") < 0)) __PYX_ERR(0, 346, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_kv = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase._native_state.__get__.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, __pyx_v_kv);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_kv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_kv, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase._native_state.__get__.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":343
 *         Default properties defining a state
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef pair[string, size_t] item
 *             native = {pystr(item.first): item.second for item in self.thermo.nativeState()}
 */

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13_native_state___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_v_native = NULL;
  std::pair<std::string,size_t>  __pyx_7genexpr__pyx_v_item;
  PyObject *__pyx_8genexpr1__pyx_v_i = NULL;
  CYTHON_UNUSED PyObject *__pyx_8genexpr1__pyx_v_j = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::map<std::string,size_t>  __pyx_t_2;
  std::map<std::string,size_t> ::iterator __pyx_t_3;
  std::map<std::string,size_t>  __pyx_t_4;
  std::pair<std::string,size_t>  __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":345
 *         def __get__(self):
 *             cdef pair[string, size_t] item
 *             native = {pystr(item.first): item.second for item in self.thermo.nativeState()}             # <<<<<<<<<<<<<<
 *             return tuple([i for i, j in sorted(native.items(), key=lambda kv: kv[1])])
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    try {
      __pyx_t_2 = __pyx_v_self->__pyx_base.thermo->nativeState();
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 345, __pyx_L1_error)
    }
    __pyx_t_4 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
    __pyx_t_3 = __pyx_t_4.begin();
    for (;;) {
      if (!(__pyx_t_3 != __pyx_t_4.end())) break;
      __pyx_t_5 = *__pyx_t_3;
      ++__pyx_t_3;
      __pyx_7genexpr__pyx_v_item = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);
      __pyx_t_6 = __pyx_f_7cantera_6_utils_pystr(__pyx_7genexpr__pyx_v_item.first); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyInt_FromSize_t(__pyx_7genexpr__pyx_v_item.second); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_t_6, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 345, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  } /* exit inner scope */
  __pyx_v_native = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":346
 *             cdef pair[string, size_t] item
 *             native = {pystr(item.first): item.second for item in self.thermo.nativeState()}
 *             return tuple([i for i, j in sorted(native.items(), key=lambda kv: kv[1])])             # <<<<<<<<<<<<<<
 * 
 *     property _full_states:
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyDict_Items(__pyx_v_native); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 346, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 346, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 346, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_13_native_state_7__get___lambda, 0, __pyx_n_s_ThermoPhase___get___locals_lambd, NULL, __pyx_n_s_cantera_thermo, __pyx_d, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 346, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_key, __pyx_t_8) < 0) __PYX_ERR(0, 346, __pyx_L8_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 346, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
      __pyx_t_7 = __pyx_t_8; __Pyx_INCREF(__pyx_t_7); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 346, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 346, __pyx_L8_error)
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 346, __pyx_L8_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 346, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 346, __pyx_L8_error)
          #else
          __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 346, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_8);
          #endif
        }
      } else {
        __pyx_t_8 = __pyx_t_10(__pyx_t_7);
        if (unlikely(!__pyx_t_8)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 346, __pyx_L8_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_8);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
        PyObject* sequence = __pyx_t_8;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 346, __pyx_L8_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_11);
        #else
        __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 346, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 346, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_12 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 346, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_12);
        index = 0; __pyx_t_6 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_6)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        index = 1; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L11_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) __PYX_ERR(0, 346, __pyx_L8_error)
        __pyx_t_13 = NULL;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L12_unpacking_done;
        __pyx_L11_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_13 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 346, __pyx_L8_error)
        __pyx_L12_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_i, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_j, __pyx_t_11);
      __pyx_t_11 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr1__pyx_v_i))) __PYX_ERR(0, 346, __pyx_L8_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_j); __pyx_8genexpr1__pyx_v_j = 0;
    goto __pyx_L14_exit_scope;
    __pyx_L8_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_j); __pyx_8genexpr1__pyx_v_j = 0;
    goto __pyx_L1_error;
    __pyx_L14_exit_scope:;
  } /* exit inner scope */
  __pyx_t_7 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":343
 *         Default properties defining a state
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef pair[string, size_t] item
 *             native = {pystr(item.first): item.second for item in self.thermo.nativeState()}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase._native_state.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_native);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_j);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":352
 *         Sets of parameters which set the full thermodynamic state
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             states = self.thermo.fullStates()
 *             states = [pystr(s) for s in states]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12_full_states_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12_full_states_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_12_full_states___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12_full_states___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_v_states = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_s = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_k = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":353
 *         """
 *         def __get__(self):
 *             states = self.thermo.fullStates()             # <<<<<<<<<<<<<<
 *             states = [pystr(s) for s in states]
 *             return {frozenset(k): k for k in states}
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->__pyx_base.thermo->fullStates()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_states = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":354
 *         def __get__(self):
 *             states = self.thermo.fullStates()
 *             states = [pystr(s) for s in states]             # <<<<<<<<<<<<<<
 *             return {frozenset(k): k for k in states}
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_states)) || PyTuple_CheckExact(__pyx_v_states)) {
      __pyx_t_2 = __pyx_v_states; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_states); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 354, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 354, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 354, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 354, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 354, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_s, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_8genexpr2__pyx_v_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 354, __pyx_L5_error)
      __pyx_t_5 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 354, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 354, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_s); __pyx_8genexpr2__pyx_v_s = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_s); __pyx_8genexpr2__pyx_v_s = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_states, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":355
 *             states = self.thermo.fullStates()
 *             states = [pystr(s) for s in states]
 *             return {frozenset(k): k for k in states}             # <<<<<<<<<<<<<<
 * 
 *     property _partial_states:
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_states)) || PyTuple_CheckExact(__pyx_v_states)) {
      __pyx_t_2 = __pyx_v_states; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_states); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 355, __pyx_L12_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 355, __pyx_L12_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 355, __pyx_L12_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 355, __pyx_L12_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_k, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyFrozenSet_New(__pyx_8genexpr3__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_t_5, (PyObject*)__pyx_8genexpr3__pyx_v_k))) __PYX_ERR(0, 355, __pyx_L12_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_k); __pyx_8genexpr3__pyx_v_k = 0;
    goto __pyx_L16_exit_scope;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_k); __pyx_8genexpr3__pyx_v_k = 0;
    goto __pyx_L1_error;
    __pyx_L16_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":352
 *         Sets of parameters which set the full thermodynamic state
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             states = self.thermo.fullStates()
 *             states = [pystr(s) for s in states]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase._full_states.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_states);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_s);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":361
 *         Sets of parameters which set a valid partial thermodynamic state
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             states = self.thermo.partialStates()
 *             states = [pystr(s) for s in states]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15_partial_states_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15_partial_states_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_15_partial_states___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_15_partial_states___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_v_states = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_s = NULL;
  PyObject *__pyx_8genexpr5__pyx_v_k = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":362
 *         """
 *         def __get__(self):
 *             states = self.thermo.partialStates()             # <<<<<<<<<<<<<<
 *             states = [pystr(s) for s in states]
 *             return {frozenset(k): k for k in states}
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->__pyx_base.thermo->partialStates()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_states = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":363
 *         def __get__(self):
 *             states = self.thermo.partialStates()
 *             states = [pystr(s) for s in states]             # <<<<<<<<<<<<<<
 *             return {frozenset(k): k for k in states}
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_states)) || PyTuple_CheckExact(__pyx_v_states)) {
      __pyx_t_2 = __pyx_v_states; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_states); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 363, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 363, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 363, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 363, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 363, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 363, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_s, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_8genexpr4__pyx_v_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 363, __pyx_L5_error)
      __pyx_t_5 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 363, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 363, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_s); __pyx_8genexpr4__pyx_v_s = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_s); __pyx_8genexpr4__pyx_v_s = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_states, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":364
 *             states = self.thermo.partialStates()
 *             states = [pystr(s) for s in states]
 *             return {frozenset(k): k for k in states}             # <<<<<<<<<<<<<<
 * 
 *     property basis:
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_states)) || PyTuple_CheckExact(__pyx_v_states)) {
      __pyx_t_2 = __pyx_v_states; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_states); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 364, __pyx_L12_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 364, __pyx_L12_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 364, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 364, __pyx_L12_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 364, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 364, __pyx_L12_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_k, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyFrozenSet_New(__pyx_8genexpr5__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 364, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_t_5, (PyObject*)__pyx_8genexpr5__pyx_v_k))) __PYX_ERR(0, 364, __pyx_L12_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_k); __pyx_8genexpr5__pyx_v_k = 0;
    goto __pyx_L16_exit_scope;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_k); __pyx_8genexpr5__pyx_v_k = 0;
    goto __pyx_L1_error;
    __pyx_L16_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":361
 *         Sets of parameters which set a valid partial thermodynamic state
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             states = self.thermo.partialStates()
 *             states = [pystr(s) for s in states]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase._partial_states.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_states);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_s);
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":374
 *         such as `HPX` and `UV`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.thermo_basis == mass_basis:
 *                 return 'mass'
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_5basis_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_5basis_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_5basis___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_5basis___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":375
 *         """
 *         def __get__(self):
 *             if self.thermo_basis == mass_basis:             # <<<<<<<<<<<<<<
 *                 return 'mass'
 *             else:
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.thermo_basis == __pyx_e_7cantera_6thermo_mass_basis);
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":376
 *         def __get__(self):
 *             if self.thermo_basis == mass_basis:
 *                 return 'mass'             # <<<<<<<<<<<<<<
 *             else:
 *                 return 'molar'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_mass);
    __pyx_r = __pyx_n_u_mass;
    goto __pyx_L0;

    /* "cantera/thermo.pyx":375
 *         """
 *         def __get__(self):
 *             if self.thermo_basis == mass_basis:             # <<<<<<<<<<<<<<
 *                 return 'mass'
 *             else:
 */
  }

  /* "cantera/thermo.pyx":378
 *                 return 'mass'
 *             else:
 *                 return 'molar'             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_molar);
    __pyx_r = __pyx_n_u_molar;
    goto __pyx_L0;
  }

  /* "cantera/thermo.pyx":374
 *         such as `HPX` and `UV`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.thermo_basis == mass_basis:
 *                 return 'mass'
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":380
 *                 return 'molar'
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value == 'mass':
 *                 self.thermo_basis = mass_basis
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_5basis_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_5basis_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_5basis_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_5basis_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":381
 * 
 *         def __set__(self, value):
 *             if value == 'mass':             # <<<<<<<<<<<<<<
 *                 self.thermo_basis = mass_basis
 *             elif value == 'molar':
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_value, __pyx_n_u_mass, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 381, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":382
 *         def __set__(self, value):
 *             if value == 'mass':
 *                 self.thermo_basis = mass_basis             # <<<<<<<<<<<<<<
 *             elif value == 'molar':
 *                 self.thermo_basis = molar_basis
 */
    __pyx_v_self->__pyx_base.thermo_basis = __pyx_e_7cantera_6thermo_mass_basis;

    /* "cantera/thermo.pyx":381
 * 
 *         def __set__(self, value):
 *             if value == 'mass':             # <<<<<<<<<<<<<<
 *                 self.thermo_basis = mass_basis
 *             elif value == 'molar':
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":383
 *             if value == 'mass':
 *                 self.thermo_basis = mass_basis
 *             elif value == 'molar':             # <<<<<<<<<<<<<<
 *                 self.thermo_basis = molar_basis
 *             else:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_value, __pyx_n_u_molar, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 383, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "cantera/thermo.pyx":384
 *                 self.thermo_basis = mass_basis
 *             elif value == 'molar':
 *                 self.thermo_basis = molar_basis             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Valid choices are 'mass' or 'molar'."
 */
    __pyx_v_self->__pyx_base.thermo_basis = __pyx_e_7cantera_6thermo_molar_basis;

    /* "cantera/thermo.pyx":383
 *             if value == 'mass':
 *                 self.thermo_basis = mass_basis
 *             elif value == 'molar':             # <<<<<<<<<<<<<<
 *                 self.thermo_basis = molar_basis
 *             else:
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":386
 *                 self.thermo_basis = molar_basis
 *             else:
 *                 raise ValueError("Valid choices are 'mass' or 'molar'."             # <<<<<<<<<<<<<<
 *                                  " Got {!r}.".format(value))
 * 
 */
  /*else*/ {

    /* "cantera/thermo.pyx":387
 *             else:
 *                 raise ValueError("Valid choices are 'mass' or 'molar'."
 *                                  " Got {!r}.".format(value))             # <<<<<<<<<<<<<<
 * 
 *     cdef double _mass_factor(self):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Valid_choices_are_mass_or_molar, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_value};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }

    /* "cantera/thermo.pyx":386
 *                 self.thermo_basis = molar_basis
 *             else:
 *                 raise ValueError("Valid choices are 'mass' or 'molar'."             # <<<<<<<<<<<<<<
 *                                  " Got {!r}.".format(value))
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 386, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":380
 *                 return 'molar'
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if value == 'mass':
 *                 self.thermo_basis = mass_basis
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.basis.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":389
 *                                  " Got {!r}.".format(value))
 * 
 *     cdef double _mass_factor(self):             # <<<<<<<<<<<<<<
 *         """ Conversion factor from current basis to kg """
 *         if self.thermo_basis == molar_basis:
 */

static double __pyx_f_7cantera_6thermo_11ThermoPhase__mass_factor(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("_mass_factor", 0);

  /* "cantera/thermo.pyx":391
 *     cdef double _mass_factor(self):
 *         """ Conversion factor from current basis to kg """
 *         if self.thermo_basis == molar_basis:             # <<<<<<<<<<<<<<
 *             return self.thermo.meanMolecularWeight()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.thermo_basis == __pyx_e_7cantera_6thermo_molar_basis);
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":392
 *         """ Conversion factor from current basis to kg """
 *         if self.thermo_basis == molar_basis:
 *             return self.thermo.meanMolecularWeight()             # <<<<<<<<<<<<<<
 *         else:
 *             return 1.0
 */
    __pyx_r = __pyx_v_self->__pyx_base.thermo->meanMolecularWeight();
    goto __pyx_L0;

    /* "cantera/thermo.pyx":391
 *     cdef double _mass_factor(self):
 *         """ Conversion factor from current basis to kg """
 *         if self.thermo_basis == molar_basis:             # <<<<<<<<<<<<<<
 *             return self.thermo.meanMolecularWeight()
 *         else:
 */
  }

  /* "cantera/thermo.pyx":394
 *             return self.thermo.meanMolecularWeight()
 *         else:
 *             return 1.0             # <<<<<<<<<<<<<<
 * 
 *     cdef double _mole_factor(self):
 */
  /*else*/ {
    __pyx_r = 1.0;
    goto __pyx_L0;
  }

  /* "cantera/thermo.pyx":389
 *                                  " Got {!r}.".format(value))
 * 
 *     cdef double _mass_factor(self):             # <<<<<<<<<<<<<<
 *         """ Conversion factor from current basis to kg """
 *         if self.thermo_basis == molar_basis:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":396
 *             return 1.0
 * 
 *     cdef double _mole_factor(self):             # <<<<<<<<<<<<<<
 *         """ Conversion factor from current basis to moles """
 *         if self.thermo_basis == mass_basis:
 */

static double __pyx_f_7cantera_6thermo_11ThermoPhase__mole_factor(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mole_factor", 0);

  /* "cantera/thermo.pyx":398
 *     cdef double _mole_factor(self):
 *         """ Conversion factor from current basis to moles """
 *         if self.thermo_basis == mass_basis:             # <<<<<<<<<<<<<<
 *             return 1.0/self.thermo.meanMolecularWeight()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.thermo_basis == __pyx_e_7cantera_6thermo_mass_basis);
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":399
 *         """ Conversion factor from current basis to moles """
 *         if self.thermo_basis == mass_basis:
 *             return 1.0/self.thermo.meanMolecularWeight()             # <<<<<<<<<<<<<<
 *         else:
 *             return 1.0
 */
    __pyx_t_2 = __pyx_v_self->__pyx_base.thermo->meanMolecularWeight();
    if (unlikely(__pyx_t_2 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 399, __pyx_L1_error)
    }
    __pyx_r = (1.0 / __pyx_t_2);
    goto __pyx_L0;

    /* "cantera/thermo.pyx":398
 *     cdef double _mole_factor(self):
 *         """ Conversion factor from current basis to moles """
 *         if self.thermo_basis == mass_basis:             # <<<<<<<<<<<<<<
 *             return 1.0/self.thermo.meanMolecularWeight()
 *         else:
 */
  }

  /* "cantera/thermo.pyx":401
 *             return 1.0/self.thermo.meanMolecularWeight()
 *         else:
 *             return 1.0             # <<<<<<<<<<<<<<
 * 
 *     def equilibrate(self, XY, solver='auto', double rtol=1e-9,
 */
  /*else*/ {
    __pyx_r = 1.0;
    goto __pyx_L0;
  }

  /* "cantera/thermo.pyx":396
 *             return 1.0
 * 
 *     cdef double _mole_factor(self):             # <<<<<<<<<<<<<<
 *         """ Conversion factor from current basis to moles """
 *         if self.thermo_basis == mass_basis:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase._mole_factor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":403
 *             return 1.0
 * 
 *     def equilibrate(self, XY, solver='auto', double rtol=1e-9,             # <<<<<<<<<<<<<<
 *                     int max_steps=1000, int max_iter=100, int estimate_equil=0,
 *                     int log_level=0):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7equilibrate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_6equilibrate, "\n        Set to a state of chemical equilibrium holding property pair\n        ``XY`` constant.\n\n        :param XY:\n            A two-letter string, which must be one of the set::\n\n                ['TP','TV','HP','SP','SV','UV']\n\n        :param solver:\n            Specifies the equilibrium solver to use. May be one of the following:\n\n            * ``'element_potential'`` - a fast solver using the element potential\n              method\n            * ``'gibbs'`` - a slower but more robust Gibbs minimization solver\n            * ``'vcs'`` - the VCS non-ideal equilibrium solver\n            * ``'auto'`` - The element potential solver will be tried first, then\n              if it fails the Gibbs solver will be tried.\n        :param rtol:\n            The relative error tolerance.\n        :param max_steps:\n            The maximum number of steps in composition to take to find a converged\n            solution.\n        :param max_iter:\n            For the Gibbs minimization solver, this specifies the number of\n            outer iterations on T or P when some property pair other\n            than TP is specified.\n        :param estimate_equil:\n            Integer indicating whether the solver should estimate its own\n            initial condition. If 0, the initial mole fraction vector in the\n            `ThermoPhase` object is used as the initial condition. If 1, the\n            initial mole fraction vector is used if the element abundances are\n            satisfied. If -1, the initial mole fraction vector is thrown out,\n            and an estimate is formulated.\n        :param log_level:\n            Set to a value greater than 0 to write diagnostic output.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_7equilibrate = {"equilibrate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_7equilibrate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_6equilibrate};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7equilibrate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_XY = 0;
  PyObject *__pyx_v_solver = 0;
  double __pyx_v_rtol;
  int __pyx_v_max_steps;
  int __pyx_v_max_iter;
  int __pyx_v_estimate_equil;
  int __pyx_v_log_level;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("equilibrate (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_XY,&__pyx_n_s_solver,&__pyx_n_s_rtol,&__pyx_n_s_max_steps,&__pyx_n_s_max_iter,&__pyx_n_s_estimate_equil,&__pyx_n_s_log_level,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_n_u_auto);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_XY)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_solver);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_rtol);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_steps);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_iter);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_estimate_equil);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_log_level);
          if (value) { values[6] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "equilibrate") < 0)) __PYX_ERR(0, 403, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_XY = values[0];
    __pyx_v_solver = values[1];
    if (values[2]) {
      __pyx_v_rtol = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_rtol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
    } else {
      __pyx_v_rtol = ((double)1e-9);
    }
    if (values[3]) {
      __pyx_v_max_steps = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_max_steps == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 404, __pyx_L3_error)
    } else {
      __pyx_v_max_steps = ((int)0x3E8);
    }
    if (values[4]) {
      __pyx_v_max_iter = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_max_iter == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 404, __pyx_L3_error)
    } else {
      __pyx_v_max_iter = ((int)0x64);
    }
    if (values[5]) {
      __pyx_v_estimate_equil = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_estimate_equil == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 404, __pyx_L3_error)
    } else {
      __pyx_v_estimate_equil = ((int)0);
    }
    if (values[6]) {
      __pyx_v_log_level = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_log_level == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L3_error)
    } else {
      __pyx_v_log_level = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("equilibrate", 0, 1, 7, __pyx_nargs); __PYX_ERR(0, 403, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.equilibrate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_6equilibrate(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_XY, __pyx_v_solver, __pyx_v_rtol, __pyx_v_max_steps, __pyx_v_max_iter, __pyx_v_estimate_equil, __pyx_v_log_level);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_6equilibrate(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_XY, PyObject *__pyx_v_solver, double __pyx_v_rtol, int __pyx_v_max_steps, int __pyx_v_max_iter, int __pyx_v_estimate_equil, int __pyx_v_log_level) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("equilibrate", 0);

  /* "cantera/thermo.pyx":443
 *             Set to a value greater than 0 to write diagnostic output.
 *         """
 *         self.thermo.equilibrate(stringify(XY.upper()), stringify(solver), rtol,             # <<<<<<<<<<<<<<
 *                                 max_steps, max_iter, estimate_equil, log_level)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_XY, __pyx_n_s_upper); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __pyx_f_7cantera_6_utils_stringify(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_solver); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L1_error)

  /* "cantera/thermo.pyx":444
 *         """
 *         self.thermo.equilibrate(stringify(XY.upper()), stringify(solver), rtol,
 *                                 max_steps, max_iter, estimate_equil, log_level)             # <<<<<<<<<<<<<<
 * 
 *     ####### Composition, species, and elements ########
 */
  try {
    __pyx_v_self->__pyx_base.thermo->equilibrate(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5), __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6), __pyx_v_rtol, __pyx_v_max_steps, __pyx_v_max_iter, __pyx_v_estimate_equil, __pyx_v_log_level);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 443, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":403
 *             return 1.0
 * 
 *     def equilibrate(self, XY, solver='auto', double rtol=1e-9,             # <<<<<<<<<<<<<<
 *                     int max_steps=1000, int max_iter=100, int estimate_equil=0,
 *                     int log_level=0):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.equilibrate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":450
 *     property n_elements:
 *         """Number of elements."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.nElements()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_10n_elements_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_10n_elements_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_10n_elements___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10n_elements___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":451
 *         """Number of elements."""
 *         def __get__(self):
 *             return self.thermo.nElements()             # <<<<<<<<<<<<<<
 * 
 *     cpdef int element_index(self, element) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->__pyx_base.thermo->nElements()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":450
 *     property n_elements:
 *         """Number of elements."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.nElements()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.n_elements.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":453
 *             return self.thermo.nElements()
 * 
 *     cpdef int element_index(self, element) except *:             # <<<<<<<<<<<<<<
 *         """
 *         The index of element ``element``, which may be specified as a string or
 */

static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_9element_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_7cantera_6thermo_11ThermoPhase_element_index(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_element, int __pyx_skip_dispatch) {
  size_t __pyx_v_index;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  std::string __pyx_t_8;
  size_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("element_index", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_element_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7cantera_6thermo_11ThermoPhase_9element_index)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_element};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cantera/thermo.pyx":459
 *         returned. If no such element is present, an exception is thrown.
 *         """
 *         if isinstance(element, (str, bytes)):             # <<<<<<<<<<<<<<
 *             index = self.thermo.elementIndex(stringify(element))
 *         elif isinstance(element, (int, float)):
 */
  __pyx_t_7 = PyUnicode_Check(__pyx_v_element); 
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = PyBytes_Check(__pyx_v_element); 
  __pyx_t_6 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "cantera/thermo.pyx":460
 *         """
 *         if isinstance(element, (str, bytes)):
 *             index = self.thermo.elementIndex(stringify(element))             # <<<<<<<<<<<<<<
 *         elif isinstance(element, (int, float)):
 *             index = <int>element
 */
    __pyx_t_8 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_element); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 460, __pyx_L1_error)
    try {
      __pyx_t_9 = __pyx_v_self->__pyx_base.thermo->elementIndex(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 460, __pyx_L1_error)
    }
    __pyx_v_index = __pyx_t_9;

    /* "cantera/thermo.pyx":459
 *         returned. If no such element is present, an exception is thrown.
 *         """
 *         if isinstance(element, (str, bytes)):             # <<<<<<<<<<<<<<
 *             index = self.thermo.elementIndex(stringify(element))
 *         elif isinstance(element, (int, float)):
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":461
 *         if isinstance(element, (str, bytes)):
 *             index = self.thermo.elementIndex(stringify(element))
 *         elif isinstance(element, (int, float)):             # <<<<<<<<<<<<<<
 *             index = <int>element
 *         else:
 */
  __pyx_t_7 = PyInt_Check(__pyx_v_element); 
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_7 = PyFloat_Check(__pyx_v_element); 
  __pyx_t_6 = __pyx_t_7;
  __pyx_L6_bool_binop_done:;
  if (likely(__pyx_t_6)) {

    /* "cantera/thermo.pyx":462
 *             index = self.thermo.elementIndex(stringify(element))
 *         elif isinstance(element, (int, float)):
 *             index = <int>element             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("'element' must be a string or a number."
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_element); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 462, __pyx_L1_error)
    __pyx_v_index = ((int)__pyx_t_5);

    /* "cantera/thermo.pyx":461
 *         if isinstance(element, (str, bytes)):
 *             index = self.thermo.elementIndex(stringify(element))
 *         elif isinstance(element, (int, float)):             # <<<<<<<<<<<<<<
 *             index = <int>element
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":464
 *             index = <int>element
 *         else:
 *             raise TypeError("'element' must be a string or a number."             # <<<<<<<<<<<<<<
 *                             " Got {!r}.".format(element))
 * 
 */
  /*else*/ {

    /* "cantera/thermo.pyx":465
 *         else:
 *             raise TypeError("'element' must be a string or a number."
 *                             " Got {!r}.".format(element))             # <<<<<<<<<<<<<<
 * 
 *         if not 0 <= index < self.n_elements:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_element_must_be_a_string_or_a_n, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_element};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "cantera/thermo.pyx":464
 *             index = <int>element
 *         else:
 *             raise TypeError("'element' must be a string or a number."             # <<<<<<<<<<<<<<
 *                             " Got {!r}.".format(element))
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 464, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":467
 *                             " Got {!r}.".format(element))
 * 
 *         if not 0 <= index < self.n_elements:             # <<<<<<<<<<<<<<
 *             raise ValueError('No such element {!r}.'.format(element))
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_int_0, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_1)) {
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_elements); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = (!__pyx_t_6);
  if (unlikely(__pyx_t_7)) {

    /* "cantera/thermo.pyx":468
 * 
 *         if not 0 <= index < self.n_elements:
 *             raise ValueError('No such element {!r}.'.format(element))             # <<<<<<<<<<<<<<
 * 
 *         return index
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_No_such_element_r, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_element};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 468, __pyx_L1_error)

    /* "cantera/thermo.pyx":467
 *                             " Got {!r}.".format(element))
 * 
 *         if not 0 <= index < self.n_elements:             # <<<<<<<<<<<<<<
 *             raise ValueError('No such element {!r}.'.format(element))
 * 
 */
  }

  /* "cantera/thermo.pyx":470
 *             raise ValueError('No such element {!r}.'.format(element))
 * 
 *         return index             # <<<<<<<<<<<<<<
 * 
 *     def element_name(self, m):
 */
  __pyx_r = __pyx_v_index;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":453
 *             return self.thermo.nElements()
 * 
 *     cpdef int element_index(self, element) except *:             # <<<<<<<<<<<<<<
 *         """
 *         The index of element ``element``, which may be specified as a string or
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.element_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_9element_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_8element_index, "\n        The index of element ``element``, which may be specified as a string or\n        an integer. In the latter case, the index is checked for validity and\n        returned. If no such element is present, an exception is thrown.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_9element_index = {"element_index", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_9element_index, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_8element_index};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_9element_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_element = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("element_index (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_element,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_element)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "element_index") < 0)) __PYX_ERR(0, 453, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_element = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("element_index", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 453, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.element_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_8element_index(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_element);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_8element_index(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("element_index", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6thermo_11ThermoPhase_element_index(__pyx_v_self, __pyx_v_element, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.element_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":472
 *         return index
 * 
 *     def element_name(self, m):             # <<<<<<<<<<<<<<
 *         """Name of the element with index ``m``."""
 *         return pystr(self.thermo.elementName(m))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_11element_name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_10element_name, "Name of the element with index ``m``.");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_11element_name = {"element_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_11element_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_10element_name};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_11element_name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_m = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("element_name (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_m)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "element_name") < 0)) __PYX_ERR(0, 472, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_m = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("element_name", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 472, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.element_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_10element_name(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_m);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10element_name(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("element_name", 0);

  /* "cantera/thermo.pyx":474
 *     def element_name(self, m):
 *         """Name of the element with index ``m``."""
 *         return pystr(self.thermo.elementName(m))             # <<<<<<<<<<<<<<
 * 
 *     property element_names:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_m); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 474, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.thermo->elementName(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 474, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":472
 *         return index
 * 
 *     def element_name(self, m):             # <<<<<<<<<<<<<<
 *         """Name of the element with index ``m``."""
 *         return pystr(self.thermo.elementName(m))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.element_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":478
 *     property element_names:
 *         """A list of all the element names."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return [self.element_name(m) for m in range(self.n_elements)]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13element_names_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13element_names_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_13element_names___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13element_names___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_8genexpr6__pyx_v_m = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":479
 *         """A list of all the element names."""
 *         def __get__(self):
 *             return [self.element_name(m) for m in range(self.n_elements)]             # <<<<<<<<<<<<<<
 * 
 *     def atomic_weight(self, m):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_elements); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 479, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 479, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 479, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 479, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_m, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_element_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 479, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_8genexpr6__pyx_v_m};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 479, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_m); __pyx_8genexpr6__pyx_v_m = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_m); __pyx_8genexpr6__pyx_v_m = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":478
 *     property element_names:
 *         """A list of all the element names."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return [self.element_name(m) for m in range(self.n_elements)]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.element_names.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_m);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":481
 *             return [self.element_name(m) for m in range(self.n_elements)]
 * 
 *     def atomic_weight(self, m):             # <<<<<<<<<<<<<<
 *         """Atomic weight [kg/kmol] of element ``m``"""
 *         return self.thermo.atomicWeight(self.element_index(m))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13atomic_weight(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_12atomic_weight, "Atomic weight [kg/kmol] of element ``m``");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_13atomic_weight = {"atomic_weight", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_13atomic_weight, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_12atomic_weight};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13atomic_weight(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_m = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("atomic_weight (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_m)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "atomic_weight") < 0)) __PYX_ERR(0, 481, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_m = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("atomic_weight", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 481, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.atomic_weight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_12atomic_weight(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_m);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12atomic_weight(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("atomic_weight", 0);

  /* "cantera/thermo.pyx":483
 *     def atomic_weight(self, m):
 *         """Atomic weight [kg/kmol] of element ``m``"""
 *         return self.thermo.atomicWeight(self.element_index(m))             # <<<<<<<<<<<<<<
 * 
 *     property atomic_weights:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->element_index(__pyx_v_self, __pyx_v_m, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.thermo->atomicWeight(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 483, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":481
 *             return [self.element_name(m) for m in range(self.n_elements)]
 * 
 *     def atomic_weight(self, m):             # <<<<<<<<<<<<<<
 *         """Atomic weight [kg/kmol] of element ``m``"""
 *         return self.thermo.atomicWeight(self.element_index(m))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.atomic_weight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":487
 *     property atomic_weights:
 *         """Array of atomic weight [kg/kmol] for each element in the mixture."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([self.thermo.atomicWeight(m) for m in range(self.n_elements)])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_14atomic_weights_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_14atomic_weights_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_14atomic_weights___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_14atomic_weights___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_8genexpr7__pyx_v_m = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  double __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":488
 *         """Array of atomic weight [kg/kmol] for each element in the mixture."""
 *         def __get__(self):
 *             return np.array([self.thermo.atomicWeight(m) for m in range(self.n_elements)])             # <<<<<<<<<<<<<<
 * 
 *     property n_species:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_elements); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 488, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 488, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 488, __pyx_L5_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 488, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_m, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_8genexpr7__pyx_v_m); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L5_error)
      try {
        __pyx_t_9 = __pyx_v_self->__pyx_base.thermo->atomicWeight(__pyx_t_8);
      } catch(...) {
        translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
        __PYX_ERR(0, 488, __pyx_L5_error)
      }
      __pyx_t_5 = PyFloat_FromDouble(__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 488, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_m); __pyx_8genexpr7__pyx_v_m = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_m); __pyx_8genexpr7__pyx_v_m = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_t_4 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_10 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":487
 *     property atomic_weights:
 *         """Array of atomic weight [kg/kmol] for each element in the mixture."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([self.thermo.atomicWeight(m) for m in range(self.n_elements)])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.atomic_weights.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_m);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":492
 *     property n_species:
 *         """Number of species."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.nSpecies()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_9n_species_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_9n_species_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_9n_species___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_9n_species___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":493
 *         """Number of species."""
 *         def __get__(self):
 *             return self.thermo.nSpecies()             # <<<<<<<<<<<<<<
 * 
 *     property n_selected_species:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->__pyx_base.thermo->nSpecies()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":492
 *     property n_species:
 *         """Number of species."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.nSpecies()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.n_species.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":499
 *         Number of species selected for output (by slicing of Solution object)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._selected_species.size or self.n_species
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_18n_selected_species_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_18n_selected_species_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_18n_selected_species___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_18n_selected_species___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  npy_intp __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":500
 *         """
 *         def __get__(self):
 *             return self._selected_species.size or self.n_species             # <<<<<<<<<<<<<<
 * 
 *     def species_name(self, k):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->__pyx_base._selected_species);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_5numpy_7ndarray_4size_size(((PyArrayObject *)__pyx_t_2)); if (unlikely(__pyx_t_3 == ((npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":499
 *         Number of species selected for output (by slicing of Solution object)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._selected_species.size or self.n_species
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.n_selected_species.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":502
 *             return self._selected_species.size or self.n_species
 * 
 *     def species_name(self, k):             # <<<<<<<<<<<<<<
 *         """Name of the species with index ``k``."""
 *         return pystr(self.thermo.speciesName(k))
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15species_name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_14species_name, "Name of the species with index ``k``.");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_15species_name = {"species_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_15species_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_14species_name};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15species_name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_k = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("species_name (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 502, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "species_name") < 0)) __PYX_ERR(0, 502, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_k = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("species_name", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 502, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.species_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_14species_name(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_14species_name(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("species_name", 0);

  /* "cantera/thermo.pyx":504
 *     def species_name(self, k):
 *         """Name of the species with index ``k``."""
 *         return pystr(self.thermo.speciesName(k))             # <<<<<<<<<<<<<<
 * 
 *     property species_names:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_k); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 504, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.thermo->speciesName(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 504, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":502
 *             return self._selected_species.size or self.n_species
 * 
 *     def species_name(self, k):             # <<<<<<<<<<<<<<
 *         """Name of the species with index ``k``."""
 *         return pystr(self.thermo.speciesName(k))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.species_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":508
 *     property species_names:
 *         """A list of all the species names."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._selected_species.size:
 *                 indices = self._selected_species
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13species_names_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13species_names_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_13species_names___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13species_names___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_v_indices = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_k = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  npy_intp __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":509
 *         """A list of all the species names."""
 *         def __get__(self):
 *             if self._selected_species.size:             # <<<<<<<<<<<<<<
 *                 indices = self._selected_species
 *             else:
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base._selected_species);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_5numpy_7ndarray_4size_size(((PyArrayObject *)__pyx_t_1)); if (unlikely(__pyx_t_2 == ((npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "cantera/thermo.pyx":510
 *         def __get__(self):
 *             if self._selected_species.size:
 *                 indices = self._selected_species             # <<<<<<<<<<<<<<
 *             else:
 *                 indices = range(self.n_species)
 */
    __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base._selected_species);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_indices = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "cantera/thermo.pyx":509
 *         """A list of all the species names."""
 *         def __get__(self):
 *             if self._selected_species.size:             # <<<<<<<<<<<<<<
 *                 indices = self._selected_species
 *             else:
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":512
 *                 indices = self._selected_species
 *             else:
 *                 indices = range(self.n_species)             # <<<<<<<<<<<<<<
 *             return [self.species_name(k) for k in indices]
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_indices = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":513
 *             else:
 *                 indices = range(self.n_species)
 *             return [self.species_name(k) for k in indices]             # <<<<<<<<<<<<<<
 * 
 *     cpdef int species_index(self, species) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 513, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
      __pyx_t_1 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 513, __pyx_L6_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 513, __pyx_L6_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 513, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 513, __pyx_L6_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 513, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_1);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 513, __pyx_L6_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_k, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_species_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 513, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_10 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_8genexpr8__pyx_v_k};
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 513, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 513, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_k); __pyx_8genexpr8__pyx_v_k = 0;
    goto __pyx_L10_exit_scope;
    __pyx_L6_error:;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_k); __pyx_8genexpr8__pyx_v_k = 0;
    goto __pyx_L1_error;
    __pyx_L10_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":508
 *     property species_names:
 *         """A list of all the species names."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._selected_species.size:
 *                 indices = self._selected_species
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.species_names.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":515
 *             return [self.species_name(k) for k in indices]
 * 
 *     cpdef int species_index(self, species) except *:             # <<<<<<<<<<<<<<
 *         """
 *         The index of species ``species``, which may be specified as a string or
 */

static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_17species_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static int __pyx_f_7cantera_6thermo_11ThermoPhase_species_index(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_species, int __pyx_skip_dispatch) {
  size_t __pyx_v_index;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  std::string __pyx_t_8;
  size_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("species_index", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || __Pyx_PyType_HasFeature(Py_TYPE(((PyObject *)__pyx_v_self)), (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_typedict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_species_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #ifdef __Pyx_CyFunction_USED
      if (!__Pyx_IsCyOrPyCFunction(__pyx_t_1)
      #else
      if (!PyCFunction_Check(__pyx_t_1)
      #endif
              || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_7cantera_6thermo_11ThermoPhase_17species_index)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_species};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_5;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_typedict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "cantera/thermo.pyx":521
 *         returned. If no such species is present, an exception is thrown.
 *         """
 *         if isinstance(species, (str, bytes)):             # <<<<<<<<<<<<<<
 *             index = self.thermo.speciesIndex(stringify(species))
 *         elif isinstance(species, (int, float)):
 */
  __pyx_t_7 = PyUnicode_Check(__pyx_v_species); 
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = PyBytes_Check(__pyx_v_species); 
  __pyx_t_6 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "cantera/thermo.pyx":522
 *         """
 *         if isinstance(species, (str, bytes)):
 *             index = self.thermo.speciesIndex(stringify(species))             # <<<<<<<<<<<<<<
 *         elif isinstance(species, (int, float)):
 *             index = <int>species
 */
    __pyx_t_8 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_species); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
    try {
      __pyx_t_9 = __pyx_v_self->__pyx_base.thermo->speciesIndex(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 522, __pyx_L1_error)
    }
    __pyx_v_index = __pyx_t_9;

    /* "cantera/thermo.pyx":521
 *         returned. If no such species is present, an exception is thrown.
 *         """
 *         if isinstance(species, (str, bytes)):             # <<<<<<<<<<<<<<
 *             index = self.thermo.speciesIndex(stringify(species))
 *         elif isinstance(species, (int, float)):
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":523
 *         if isinstance(species, (str, bytes)):
 *             index = self.thermo.speciesIndex(stringify(species))
 *         elif isinstance(species, (int, float)):             # <<<<<<<<<<<<<<
 *             index = <int>species
 *         else:
 */
  __pyx_t_7 = PyInt_Check(__pyx_v_species); 
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_7 = PyFloat_Check(__pyx_v_species); 
  __pyx_t_6 = __pyx_t_7;
  __pyx_L6_bool_binop_done:;
  if (likely(__pyx_t_6)) {

    /* "cantera/thermo.pyx":524
 *             index = self.thermo.speciesIndex(stringify(species))
 *         elif isinstance(species, (int, float)):
 *             index = <int>species             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("'species' must be a string or a number."
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_species); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
    __pyx_v_index = ((int)__pyx_t_5);

    /* "cantera/thermo.pyx":523
 *         if isinstance(species, (str, bytes)):
 *             index = self.thermo.speciesIndex(stringify(species))
 *         elif isinstance(species, (int, float)):             # <<<<<<<<<<<<<<
 *             index = <int>species
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":526
 *             index = <int>species
 *         else:
 *             raise TypeError("'species' must be a string or a number."             # <<<<<<<<<<<<<<
 *                             " Got {!r}.".format(species))
 * 
 */
  /*else*/ {

    /* "cantera/thermo.pyx":527
 *         else:
 *             raise TypeError("'species' must be a string or a number."
 *                             " Got {!r}.".format(species))             # <<<<<<<<<<<<<<
 * 
 *         if not 0 <= index < self.n_species:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_species_must_be_a_string_or_a_n, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_species};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "cantera/thermo.pyx":526
 *             index = <int>species
 *         else:
 *             raise TypeError("'species' must be a string or a number."             # <<<<<<<<<<<<<<
 *                             " Got {!r}.".format(species))
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 526, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":529
 *                             " Got {!r}.".format(species))
 * 
 *         if not 0 <= index < self.n_species:             # <<<<<<<<<<<<<<
 *             raise ValueError('No such species {!r}.'.format(species))
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_int_0, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_1)) {
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = (!__pyx_t_6);
  if (unlikely(__pyx_t_7)) {

    /* "cantera/thermo.pyx":530
 * 
 *         if not 0 <= index < self.n_species:
 *             raise ValueError('No such species {!r}.'.format(species))             # <<<<<<<<<<<<<<
 * 
 *         return index
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_No_such_species_r, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_species};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 530, __pyx_L1_error)

    /* "cantera/thermo.pyx":529
 *                             " Got {!r}.".format(species))
 * 
 *         if not 0 <= index < self.n_species:             # <<<<<<<<<<<<<<
 *             raise ValueError('No such species {!r}.'.format(species))
 * 
 */
  }

  /* "cantera/thermo.pyx":532
 *             raise ValueError('No such species {!r}.'.format(species))
 * 
 *         return index             # <<<<<<<<<<<<<<
 * 
 *     property case_sensitive_species_names:
 */
  __pyx_r = __pyx_v_index;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":515
 *             return [self.species_name(k) for k in indices]
 * 
 *     cpdef int species_index(self, species) except *:             # <<<<<<<<<<<<<<
 *         """
 *         The index of species ``species``, which may be specified as a string or
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.species_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_17species_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_16species_index, "\n        The index of species ``species``, which may be specified as a string or\n        an integer. In the latter case, the index is checked for validity and\n        returned. If no such species is present, an exception is thrown.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_17species_index = {"species_index", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_17species_index, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_16species_index};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_17species_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_species = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("species_index (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_species,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_species)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "species_index") < 0)) __PYX_ERR(0, 515, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_species = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("species_index", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 515, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.species_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_16species_index(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_species);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_16species_index(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_species) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("species_index", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6thermo_11ThermoPhase_species_index(__pyx_v_self, __pyx_v_species, 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.species_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":536
 *     property case_sensitive_species_names:
 *         """Enforce case-sensitivity for look up of species names"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.caseSensitiveSpecies()
 *         def __set__(self, val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":537
 *         """Enforce case-sensitivity for look up of species names"""
 *         def __get__(self):
 *             return self.thermo.caseSensitiveSpecies()             # <<<<<<<<<<<<<<
 *         def __set__(self, val):
 *             self.thermo.setCaseSensitiveSpecies(bool(val))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->__pyx_base.thermo->caseSensitiveSpecies()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":536
 *     property case_sensitive_species_names:
 *         """Enforce case-sensitivity for look up of species names"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.caseSensitiveSpecies()
 *         def __set__(self, val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.case_sensitive_species_names.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":538
 *         def __get__(self):
 *             return self.thermo.caseSensitiveSpecies()
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.thermo.setCaseSensitiveSpecies(bool(val))
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":539
 *             return self.thermo.caseSensitiveSpecies()
 *         def __set__(self, val):
 *             self.thermo.setCaseSensitiveSpecies(bool(val))             # <<<<<<<<<<<<<<
 * 
 *     def species(self, k=None):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_val); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 539, __pyx_L1_error)
  __pyx_v_self->__pyx_base.thermo->setCaseSensitiveSpecies((!(!__pyx_t_1)));

  /* "cantera/thermo.pyx":538
 *         def __get__(self):
 *             return self.thermo.caseSensitiveSpecies()
 *         def __set__(self, val):             # <<<<<<<<<<<<<<
 *             self.thermo.setCaseSensitiveSpecies(bool(val))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.case_sensitive_species_names.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":541
 *             self.thermo.setCaseSensitiveSpecies(bool(val))
 * 
 *     def species(self, k=None):             # <<<<<<<<<<<<<<
 *         """
 *         Return the `Species` object for species ``k``, where ``k`` is either the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_19species(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_18species, "\n        Return the `Species` object for species ``k``, where ``k`` is either the\n        species index or the species name. If ``k`` is not specified, a list of\n        all species objects is returned. Changes to this object do not affect\n        the `ThermoPhase` or `Solution` object until the `modify_species`\n        function is called.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_19species = {"species", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_19species, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_18species};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_19species(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_k = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("species (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 541, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "species") < 0)) __PYX_ERR(0, 541, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_k = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("species", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 541, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_18species(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_18species(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_k) {
  struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_s = NULL;
  PyObject *__pyx_8genexpr9__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  std::string __pyx_t_11;
  std::shared_ptr<Cantera::Species>  __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("species", 0);

  /* "cantera/thermo.pyx":549
 *         function is called.
 *         """
 *         if k is None:             # <<<<<<<<<<<<<<
 *             return [self.species(i) for i in range(self.n_species)]
 * 
 */
  __pyx_t_1 = (__pyx_v_k == Py_None);
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":550
 *         """
 *         if k is None:
 *             return [self.species(i) for i in range(self.n_species)]             # <<<<<<<<<<<<<<
 * 
 *         s = Species(init=False)
 */
    __Pyx_XDECREF(__pyx_r);
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 550, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 550, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 550, __pyx_L6_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 550, __pyx_L6_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 550, __pyx_L6_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_6(__pyx_t_3);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 550, __pyx_L6_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr9__pyx_v_i, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_species); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 550, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = NULL;
        __pyx_t_9 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_9 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_8genexpr9__pyx_v_i};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 550, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_i); __pyx_8genexpr9__pyx_v_i = 0;
      goto __pyx_L10_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_i); __pyx_8genexpr9__pyx_v_i = 0;
      goto __pyx_L1_error;
      __pyx_L10_exit_scope:;
    } /* exit inner scope */
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "cantera/thermo.pyx":549
 *         function is called.
 *         """
 *         if k is None:             # <<<<<<<<<<<<<<
 *             return [self.species(i) for i in range(self.n_species)]
 * 
 */
  }

  /* "cantera/thermo.pyx":552
 *             return [self.species(i) for i in range(self.n_species)]
 * 
 *         s = Species(init=False)             # <<<<<<<<<<<<<<
 *         s._phase = self
 *         if isinstance(k, (str, bytes)):
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_init_2, Py_False) < 0) __PYX_ERR(0, 552, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7cantera_6thermo_Species), __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_s = ((struct __pyx_obj_7cantera_6thermo_Species *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":553
 * 
 *         s = Species(init=False)
 *         s._phase = self             # <<<<<<<<<<<<<<
 *         if isinstance(k, (str, bytes)):
 *             s._assign(self.thermo.species(stringify(k)))
 */
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  __Pyx_GOTREF((PyObject *)__pyx_v_s->_phase);
  __Pyx_DECREF((PyObject *)__pyx_v_s->_phase);
  __pyx_v_s->_phase = ((struct __pyx_obj_7cantera_12solutionbase__SolutionBase *)__pyx_v_self);

  /* "cantera/thermo.pyx":554
 *         s = Species(init=False)
 *         s._phase = self
 *         if isinstance(k, (str, bytes)):             # <<<<<<<<<<<<<<
 *             s._assign(self.thermo.species(stringify(k)))
 *         elif isinstance(k, (int, float)):
 */
  __pyx_t_10 = PyUnicode_Check(__pyx_v_k); 
  if (!__pyx_t_10) {
  } else {
    __pyx_t_1 = __pyx_t_10;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_10 = PyBytes_Check(__pyx_v_k); 
  __pyx_t_1 = __pyx_t_10;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":555
 *         s._phase = self
 *         if isinstance(k, (str, bytes)):
 *             s._assign(self.thermo.species(stringify(k)))             # <<<<<<<<<<<<<<
 *         elif isinstance(k, (int, float)):
 *             s._assign(self.thermo.species(<int>k))
 */
    __pyx_t_11 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_k); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 555, __pyx_L1_error)
    try {
      __pyx_t_12 = __pyx_v_self->__pyx_base.thermo->species(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_11));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 555, __pyx_L1_error)
    }
    __pyx_t_3 = ((struct __pyx_vtabstruct_7cantera_6thermo_Species *)__pyx_v_s->__pyx_vtab)->_assign(__pyx_v_s, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_12)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cantera/thermo.pyx":554
 *         s = Species(init=False)
 *         s._phase = self
 *         if isinstance(k, (str, bytes)):             # <<<<<<<<<<<<<<
 *             s._assign(self.thermo.species(stringify(k)))
 *         elif isinstance(k, (int, float)):
 */
    goto __pyx_L11;
  }

  /* "cantera/thermo.pyx":556
 *         if isinstance(k, (str, bytes)):
 *             s._assign(self.thermo.species(stringify(k)))
 *         elif isinstance(k, (int, float)):             # <<<<<<<<<<<<<<
 *             s._assign(self.thermo.species(<int>k))
 *         else:
 */
  __pyx_t_10 = PyInt_Check(__pyx_v_k); 
  if (!__pyx_t_10) {
  } else {
    __pyx_t_1 = __pyx_t_10;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_10 = PyFloat_Check(__pyx_v_k); 
  __pyx_t_1 = __pyx_t_10;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "cantera/thermo.pyx":557
 *             s._assign(self.thermo.species(stringify(k)))
 *         elif isinstance(k, (int, float)):
 *             s._assign(self.thermo.species(<int>k))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Argument must be a string or a number."
 */
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 557, __pyx_L1_error)
    try {
      __pyx_t_12 = __pyx_v_self->__pyx_base.thermo->species(((int)__pyx_t_9));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 557, __pyx_L1_error)
    }
    __pyx_t_3 = ((struct __pyx_vtabstruct_7cantera_6thermo_Species *)__pyx_v_s->__pyx_vtab)->_assign(__pyx_v_s, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_12)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cantera/thermo.pyx":556
 *         if isinstance(k, (str, bytes)):
 *             s._assign(self.thermo.species(stringify(k)))
 *         elif isinstance(k, (int, float)):             # <<<<<<<<<<<<<<
 *             s._assign(self.thermo.species(<int>k))
 *         else:
 */
    goto __pyx_L11;
  }

  /* "cantera/thermo.pyx":559
 *             s._assign(self.thermo.species(<int>k))
 *         else:
 *             raise TypeError("Argument must be a string or a number."             # <<<<<<<<<<<<<<
 *                             " Got {!r}.".format(k))
 *         return s
 */
  /*else*/ {

    /* "cantera/thermo.pyx":560
 *         else:
 *             raise TypeError("Argument must be a string or a number."
 *                             " Got {!r}.".format(k))             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Argument_must_be_a_string_or_a_n, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_k};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "cantera/thermo.pyx":559
 *             s._assign(self.thermo.species(<int>k))
 *         else:
 *             raise TypeError("Argument must be a string or a number."             # <<<<<<<<<<<<<<
 *                             " Got {!r}.".format(k))
 *         return s
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 559, __pyx_L1_error)
  }
  __pyx_L11:;

  /* "cantera/thermo.pyx":561
 *             raise TypeError("Argument must be a string or a number."
 *                             " Got {!r}.".format(k))
 *         return s             # <<<<<<<<<<<<<<
 * 
 *     def modify_species(self, k, Species species):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_s);
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "cantera/thermo.pyx":541
 *             self.thermo.setCaseSensitiveSpecies(bool(val))
 * 
 *     def species(self, k=None):             # <<<<<<<<<<<<<<
 *         """
 *         Return the `Species` object for species ``k``, where ``k`` is either the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":563
 *         return s
 * 
 *     def modify_species(self, k, Species species):             # <<<<<<<<<<<<<<
 *         """
 *         Modify the thermodynamic data associated with a species. The species name,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_21modify_species(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_20modify_species, "\n        Modify the thermodynamic data associated with a species. The species name,\n        elemental composition, and type of thermo parameterization must be unchanged.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_21modify_species = {"modify_species", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_21modify_species, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_20modify_species};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_21modify_species(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_k = 0;
  struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_species = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modify_species (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_species,0};
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_species)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("modify_species", 1, 2, 2, 1); __PYX_ERR(0, 563, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "modify_species") < 0)) __PYX_ERR(0, 563, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_k = values[0];
    __pyx_v_species = ((struct __pyx_obj_7cantera_6thermo_Species *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("modify_species", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 563, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.modify_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species), __pyx_ptype_7cantera_6thermo_Species, 1, "species", 0))) __PYX_ERR(0, 563, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_20modify_species(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_k, __pyx_v_species);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_20modify_species(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_k, struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_species) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("modify_species", 0);

  /* "cantera/thermo.pyx":568
 *         elemental composition, and type of thermo parameterization must be unchanged.
 *         """
 *         self.thermo.modifySpecies(k, species._species)             # <<<<<<<<<<<<<<
 *         if self.kinetics:
 *             self.kinetics.invalidateCache()
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_k); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 568, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->modifySpecies(__pyx_t_1, __pyx_v_species->_species);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 568, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":569
 *         """
 *         self.thermo.modifySpecies(k, species._species)
 *         if self.kinetics:             # <<<<<<<<<<<<<<
 *             self.kinetics.invalidateCache()
 * 
 */
  __pyx_t_2 = (__pyx_v_self->__pyx_base.kinetics != 0);
  if (__pyx_t_2) {

    /* "cantera/thermo.pyx":570
 *         self.thermo.modifySpecies(k, species._species)
 *         if self.kinetics:
 *             self.kinetics.invalidateCache()             # <<<<<<<<<<<<<<
 * 
 *     def add_species(self, Species species):
 */
    try {
      __pyx_v_self->__pyx_base.kinetics->invalidateCache();
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 570, __pyx_L1_error)
    }

    /* "cantera/thermo.pyx":569
 *         """
 *         self.thermo.modifySpecies(k, species._species)
 *         if self.kinetics:             # <<<<<<<<<<<<<<
 *             self.kinetics.invalidateCache()
 * 
 */
  }

  /* "cantera/thermo.pyx":563
 *         return s
 * 
 *     def modify_species(self, k, Species species):             # <<<<<<<<<<<<<<
 *         """
 *         Modify the thermodynamic data associated with a species. The species name,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.modify_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":572
 *             self.kinetics.invalidateCache()
 * 
 *     def add_species(self, Species species):             # <<<<<<<<<<<<<<
 *         """
 *         Add a new species to this phase. Missing elements will be added
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_23add_species(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_22add_species, "\n        Add a new species to this phase. Missing elements will be added\n        automatically.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_23add_species = {"add_species", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_23add_species, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_22add_species};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_23add_species(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_species = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_species (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_species,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_species)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 572, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_species") < 0)) __PYX_ERR(0, 572, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_species = ((struct __pyx_obj_7cantera_6thermo_Species *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_species", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 572, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.add_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_species), __pyx_ptype_7cantera_6thermo_Species, 1, "species", 0))) __PYX_ERR(0, 572, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_22add_species(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_species);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_22add_species(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, struct __pyx_obj_7cantera_6thermo_Species *__pyx_v_species) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_species", 0);

  /* "cantera/thermo.pyx":577
 *         automatically.
 *         """
 *         if self._references:             # <<<<<<<<<<<<<<
 *             raise CanteraError('Cannot add species to ThermoPhase object because it'
 *                 ' is being used by another object,\nsuch as a Reactor, Domain1D (flame),'
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->__pyx_base._references); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 577, __pyx_L1_error)
  if (unlikely(__pyx_t_1)) {

    /* "cantera/thermo.pyx":578
 *         """
 *         if self._references:
 *             raise CanteraError('Cannot add species to ThermoPhase object because it'             # <<<<<<<<<<<<<<
 *                 ' is being used by another object,\nsuch as a Reactor, Domain1D (flame),'
 *                 ' SolutionArray, Quantity, or Mixture object.')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_CanteraError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_Cannot_add_species_to_ThermoPhas};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 578, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 578, __pyx_L1_error)

    /* "cantera/thermo.pyx":577
 *         automatically.
 *         """
 *         if self._references:             # <<<<<<<<<<<<<<
 *             raise CanteraError('Cannot add species to ThermoPhase object because it'
 *                 ' is being used by another object,\nsuch as a Reactor, Domain1D (flame),'
 */
  }

  /* "cantera/thermo.pyx":581
 *                 ' is being used by another object,\nsuch as a Reactor, Domain1D (flame),'
 *                 ' SolutionArray, Quantity, or Mixture object.')
 *         self.thermo.addUndefinedElements()             # <<<<<<<<<<<<<<
 *         self.thermo.addSpecies(species._species)
 *         species._phase = self
 */
  try {
    __pyx_v_self->__pyx_base.thermo->addUndefinedElements();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 581, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":582
 *                 ' SolutionArray, Quantity, or Mixture object.')
 *         self.thermo.addUndefinedElements()
 *         self.thermo.addSpecies(species._species)             # <<<<<<<<<<<<<<
 *         species._phase = self
 *         self.thermo.initThermo()
 */
  try {
    __pyx_v_self->__pyx_base.thermo->addSpecies(__pyx_v_species->_species);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 582, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":583
 *         self.thermo.addUndefinedElements()
 *         self.thermo.addSpecies(species._species)
 *         species._phase = self             # <<<<<<<<<<<<<<
 *         self.thermo.initThermo()
 *         if self.kinetics:
 */
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  __Pyx_GOTREF((PyObject *)__pyx_v_species->_phase);
  __Pyx_DECREF((PyObject *)__pyx_v_species->_phase);
  __pyx_v_species->_phase = ((struct __pyx_obj_7cantera_12solutionbase__SolutionBase *)__pyx_v_self);

  /* "cantera/thermo.pyx":584
 *         self.thermo.addSpecies(species._species)
 *         species._phase = self
 *         self.thermo.initThermo()             # <<<<<<<<<<<<<<
 *         if self.kinetics:
 *             self.kinetics.invalidateCache()
 */
  try {
    __pyx_v_self->__pyx_base.thermo->initThermo();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 584, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":585
 *         species._phase = self
 *         self.thermo.initThermo()
 *         if self.kinetics:             # <<<<<<<<<<<<<<
 *             self.kinetics.invalidateCache()
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.kinetics != 0);
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":586
 *         self.thermo.initThermo()
 *         if self.kinetics:
 *             self.kinetics.invalidateCache()             # <<<<<<<<<<<<<<
 * 
 *     def add_species_alias(self, name, alias):
 */
    try {
      __pyx_v_self->__pyx_base.kinetics->invalidateCache();
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 586, __pyx_L1_error)
    }

    /* "cantera/thermo.pyx":585
 *         species._phase = self
 *         self.thermo.initThermo()
 *         if self.kinetics:             # <<<<<<<<<<<<<<
 *             self.kinetics.invalidateCache()
 * 
 */
  }

  /* "cantera/thermo.pyx":572
 *             self.kinetics.invalidateCache()
 * 
 *     def add_species(self, Species species):             # <<<<<<<<<<<<<<
 *         """
 *         Add a new species to this phase. Missing elements will be added
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.add_species", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":588
 *             self.kinetics.invalidateCache()
 * 
 *     def add_species_alias(self, name, alias):             # <<<<<<<<<<<<<<
 *         """
 *         Add the alternate species name ``alias`` for an original species ``name``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_25add_species_alias(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_24add_species_alias, "\n        Add the alternate species name ``alias`` for an original species ``name``.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_25add_species_alias = {"add_species_alias", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_25add_species_alias, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_24add_species_alias};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_25add_species_alias(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_alias = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_species_alias (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_alias,0};
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 588, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_alias)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 588, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("add_species_alias", 1, 2, 2, 1); __PYX_ERR(0, 588, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_species_alias") < 0)) __PYX_ERR(0, 588, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_alias = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_species_alias", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 588, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.add_species_alias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_24add_species_alias(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_name, __pyx_v_alias);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_24add_species_alias(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_alias) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_species_alias", 0);

  /* "cantera/thermo.pyx":592
 *         Add the alternate species name ``alias`` for an original species ``name``.
 *         """
 *         self.thermo.addSpeciesAlias(stringify(name), stringify(alias))             # <<<<<<<<<<<<<<
 * 
 *     def find_isomers(self, comp):
 */
  __pyx_t_1 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_alias); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 592, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->addSpeciesAlias(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1), __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 592, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":588
 *             self.kinetics.invalidateCache()
 * 
 *     def add_species_alias(self, name, alias):             # <<<<<<<<<<<<<<
 *         """
 *         Add the alternate species name ``alias`` for an original species ``name``.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.add_species_alias", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":594
 *         self.thermo.addSpeciesAlias(stringify(name), stringify(alias))
 * 
 *     def find_isomers(self, comp):             # <<<<<<<<<<<<<<
 *         """
 *         Find species/isomers matching a composition specified by ``comp``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_27find_isomers(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_26find_isomers, "\n        Find species/isomers matching a composition specified by ``comp``.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_27find_isomers = {"find_isomers", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_27find_isomers, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_26find_isomers};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_27find_isomers(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_comp = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_isomers (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_comp,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_comp)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 594, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "find_isomers") < 0)) __PYX_ERR(0, 594, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_comp = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_isomers", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 594, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.find_isomers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_26find_isomers(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_comp);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_26find_isomers(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_comp) {
  std::vector<std::string>  __pyx_v_iso;
  std::string __pyx_9genexpr10__pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_7cantera_5ctcxx_Composition __pyx_t_2;
  std::vector<std::string>  __pyx_t_3;
  int __pyx_t_4;
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  std::vector<std::string> ::iterator __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_isomers", 0);

  /* "cantera/thermo.pyx":599
 *         """
 * 
 *         if isinstance(comp, dict):             # <<<<<<<<<<<<<<
 *             iso = self.thermo.findIsomers(comp_map(comp))
 *         elif isinstance(comp, (str, bytes)):
 */
  __pyx_t_1 = PyDict_Check(__pyx_v_comp); 
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":600
 * 
 *         if isinstance(comp, dict):
 *             iso = self.thermo.findIsomers(comp_map(comp))             # <<<<<<<<<<<<<<
 *         elif isinstance(comp, (str, bytes)):
 *             iso = self.thermo.findIsomers(stringify(comp))
 */
    __pyx_t_2 = __pyx_f_7cantera_6_utils_comp_map(__pyx_v_comp); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 600, __pyx_L1_error)
    try {
      __pyx_t_3 = __pyx_v_self->__pyx_base.thermo->findIsomers(__pyx_t_2);
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 600, __pyx_L1_error)
    }
    __pyx_v_iso = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

    /* "cantera/thermo.pyx":599
 *         """
 * 
 *         if isinstance(comp, dict):             # <<<<<<<<<<<<<<
 *             iso = self.thermo.findIsomers(comp_map(comp))
 *         elif isinstance(comp, (str, bytes)):
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":601
 *         if isinstance(comp, dict):
 *             iso = self.thermo.findIsomers(comp_map(comp))
 *         elif isinstance(comp, (str, bytes)):             # <<<<<<<<<<<<<<
 *             iso = self.thermo.findIsomers(stringify(comp))
 *         else:
 */
  __pyx_t_4 = PyUnicode_Check(__pyx_v_comp); 
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = PyBytes_Check(__pyx_v_comp); 
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "cantera/thermo.pyx":602
 *             iso = self.thermo.findIsomers(comp_map(comp))
 *         elif isinstance(comp, (str, bytes)):
 *             iso = self.thermo.findIsomers(stringify(comp))             # <<<<<<<<<<<<<<
 *         else:
 *             raise CanteraError('Invalid composition')
 */
    __pyx_t_5 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_comp); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 602, __pyx_L1_error)
    try {
      __pyx_t_3 = __pyx_v_self->__pyx_base.thermo->findIsomers(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 602, __pyx_L1_error)
    }
    __pyx_v_iso = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

    /* "cantera/thermo.pyx":601
 *         if isinstance(comp, dict):
 *             iso = self.thermo.findIsomers(comp_map(comp))
 *         elif isinstance(comp, (str, bytes)):             # <<<<<<<<<<<<<<
 *             iso = self.thermo.findIsomers(stringify(comp))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":604
 *             iso = self.thermo.findIsomers(stringify(comp))
 *         else:
 *             raise CanteraError('Invalid composition')             # <<<<<<<<<<<<<<
 * 
 *         return [pystr(b) for b in iso]
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_CanteraError); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_kp_u_Invalid_composition};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 604, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":606
 *             raise CanteraError('Invalid composition')
 * 
 *         return [pystr(b) for b in iso]             # <<<<<<<<<<<<<<
 * 
 *     def n_atoms(self, species, element):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = __pyx_v_iso.begin();
    for (;;) {
      if (!(__pyx_t_10 != __pyx_v_iso.end())) break;
      __pyx_t_5 = *__pyx_t_10;
      ++__pyx_t_10;
      __pyx_9genexpr10__pyx_v_b = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);
      __pyx_t_7 = __pyx_f_7cantera_6_utils_pystr(__pyx_9genexpr10__pyx_v_b); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 606, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 606, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":594
 *         self.thermo.addSpeciesAlias(stringify(name), stringify(alias))
 * 
 *     def find_isomers(self, comp):             # <<<<<<<<<<<<<<
 *         """
 *         Find species/isomers matching a composition specified by ``comp``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.find_isomers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":608
 *         return [pystr(b) for b in iso]
 * 
 *     def n_atoms(self, species, element):             # <<<<<<<<<<<<<<
 *         """
 *         Number of atoms of element ``element`` in species ``species``. The element
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_29n_atoms(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_28n_atoms, "\n        Number of atoms of element ``element`` in species ``species``. The element\n        and species may be specified by name or by index.\n\n        >>> phase.n_atoms('CH4','H')\n        4\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_29n_atoms = {"n_atoms", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_29n_atoms, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_28n_atoms};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_29n_atoms(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_species = 0;
  PyObject *__pyx_v_element = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("n_atoms (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_species,&__pyx_n_s_element,0};
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_species)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 608, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_element)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 608, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("n_atoms", 1, 2, 2, 1); __PYX_ERR(0, 608, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "n_atoms") < 0)) __PYX_ERR(0, 608, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_species = values[0];
    __pyx_v_element = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("n_atoms", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 608, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.n_atoms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_28n_atoms(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_species, __pyx_v_element);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_28n_atoms(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_species, PyObject *__pyx_v_element) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("n_atoms", 0);

  /* "cantera/thermo.pyx":616
 *         4
 *         """
 *         return self.thermo.nAtoms(self.species_index(species),             # <<<<<<<<<<<<<<
 *                                   self.element_index(element))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->species_index(__pyx_v_self, __pyx_v_species, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 616, __pyx_L1_error)

  /* "cantera/thermo.pyx":617
 *         """
 *         return self.thermo.nAtoms(self.species_index(species),
 *                                   self.element_index(element))             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray _getArray1(self, thermoMethod1d method):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->element_index(__pyx_v_self, __pyx_v_element, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 617, __pyx_L1_error)

  /* "cantera/thermo.pyx":616
 *         4
 *         """
 *         return self.thermo.nAtoms(self.species_index(species),             # <<<<<<<<<<<<<<
 *                                   self.element_index(element))
 * 
 */
  try {
    __pyx_t_3 = __pyx_v_self->__pyx_base.thermo->nAtoms(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 616, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":608
 *         return [pystr(b) for b in iso]
 * 
 *     def n_atoms(self, species, element):             # <<<<<<<<<<<<<<
 *         """
 *         Number of atoms of element ``element`` in species ``species``. The element
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.n_atoms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":619
 *                                   self.element_index(element))
 * 
 *     cdef np.ndarray _getArray1(self, thermoMethod1d method):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)
 *         method(self.thermo, &data[0])
 */

static PyArrayObject *__pyx_f_7cantera_6thermo_11ThermoPhase__getArray1(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, __pyx_t_7cantera_6thermo_thermoMethod1d __pyx_v_method) {
  PyArrayObject *__pyx_v_data = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyArrayObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  npy_intp __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_getArray1", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/thermo.pyx":620
 * 
 *     cdef np.ndarray _getArray1(self, thermoMethod1d method):
 *         cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)             # <<<<<<<<<<<<<<
 *         method(self.thermo, &data[0])
 *         if self._selected_species.size:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 620, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 620, __pyx_L1_error)
    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_data = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":621
 *     cdef np.ndarray _getArray1(self, thermoMethod1d method):
 *         cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)
 *         method(self.thermo, &data[0])             # <<<<<<<<<<<<<<
 *         if self._selected_species.size:
 *             return data[self._selected_species]
 */
  __pyx_t_7 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 621, __pyx_L1_error)
  }
  try {
    __pyx_v_method(__pyx_v_self->__pyx_base.thermo, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_data.diminfo[0].strides))));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 621, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":622
 *         cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)
 *         method(self.thermo, &data[0])
 *         if self._selected_species.size:             # <<<<<<<<<<<<<<
 *             return data[self._selected_species]
 *         else:
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base._selected_species);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_8 = __pyx_f_5numpy_7ndarray_4size_size(((PyArrayObject *)__pyx_t_1)); if (unlikely(__pyx_t_8 == ((npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = (__pyx_t_8 != 0);
  if (__pyx_t_9) {

    /* "cantera/thermo.pyx":623
 *         method(self.thermo, &data[0])
 *         if self._selected_species.size:
 *             return data[self._selected_species]             # <<<<<<<<<<<<<<
 *         else:
 *             return data
 */
    __Pyx_XDECREF((PyObject *)__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_data), ((PyObject *)__pyx_v_self->__pyx_base._selected_species)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 623, __pyx_L1_error)
    __pyx_r = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cantera/thermo.pyx":622
 *         cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)
 *         method(self.thermo, &data[0])
 *         if self._selected_species.size:             # <<<<<<<<<<<<<<
 *             return data[self._selected_species]
 *         else:
 */
  }

  /* "cantera/thermo.pyx":625
 *             return data[self._selected_species]
 *         else:
 *             return data             # <<<<<<<<<<<<<<
 * 
 *     cdef void _setArray1(self, thermoMethod1d method, values) except *:
 */
  /*else*/ {
    __Pyx_XDECREF((PyObject *)__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_data);
    __pyx_r = ((PyArrayObject *)__pyx_v_data);
    goto __pyx_L0;
  }

  /* "cantera/thermo.pyx":619
 *                                   self.element_index(element))
 * 
 *     cdef np.ndarray _getArray1(self, thermoMethod1d method):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)
 *         method(self.thermo, &data[0])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase._getArray1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":627
 *             return data
 * 
 *     cdef void _setArray1(self, thermoMethod1d method, values) except *:             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] data
 * 
 */

static void __pyx_f_7cantera_6thermo_11ThermoPhase__setArray1(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, __pyx_t_7cantera_6thermo_thermoMethod1d __pyx_v_method, PyObject *__pyx_v_values) {
  PyArrayObject *__pyx_v_data = 0;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_msg = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_setArray1", 0);
  __Pyx_INCREF(__pyx_v_values);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/thermo.pyx":630
 *         cdef np.ndarray[np.double_t, ndim=1] data
 * 
 *         values = np.squeeze(values)             # <<<<<<<<<<<<<<
 *         if values.ndim == 0:
 *             values = values[np.newaxis] # corner case for single-species phases
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_squeeze); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_values};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF_SET(__pyx_v_values, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":631
 * 
 *         values = np.squeeze(values)
 *         if values.ndim == 0:             # <<<<<<<<<<<<<<
 *             values = values[np.newaxis] # corner case for single-species phases
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_values, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_1, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "cantera/thermo.pyx":632
 *         values = np.squeeze(values)
 *         if values.ndim == 0:
 *             values = values[np.newaxis] # corner case for single-species phases             # <<<<<<<<<<<<<<
 * 
 *         if len(values) == self.n_species:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_newaxis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_values, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_values, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "cantera/thermo.pyx":631
 * 
 *         values = np.squeeze(values)
 *         if values.ndim == 0:             # <<<<<<<<<<<<<<
 *             values = values[np.newaxis] # corner case for single-species phases
 * 
 */
  }

  /* "cantera/thermo.pyx":634
 *             values = values[np.newaxis] # corner case for single-species phases
 * 
 *         if len(values) == self.n_species:             # <<<<<<<<<<<<<<
 *             data = np.ascontiguousarray(values, dtype=np.double)
 *         elif len(values) == len(self._selected_species) != 0:
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 634, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "cantera/thermo.pyx":635
 * 
 *         if len(values) == self.n_species:
 *             data = np.ascontiguousarray(values, dtype=np.double)             # <<<<<<<<<<<<<<
 *         elif len(values) == len(self._selected_species) != 0:
 *             data = np.zeros(self.n_species, dtype=np.double)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_values);
    __Pyx_GIVEREF(__pyx_v_values);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_values);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_double); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 635, __pyx_L1_error)
    __pyx_t_9 = ((PyArrayObject *)__pyx_t_8);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
      __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_4 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_v_data, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
        __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
      }
      __pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 635, __pyx_L1_error)
    }
    __pyx_t_9 = 0;
    __pyx_v_data = ((PyArrayObject *)__pyx_t_8);
    __pyx_t_8 = 0;

    /* "cantera/thermo.pyx":634
 *             values = values[np.newaxis] # corner case for single-species phases
 * 
 *         if len(values) == self.n_species:             # <<<<<<<<<<<<<<
 *             data = np.ascontiguousarray(values, dtype=np.double)
 *         elif len(values) == len(self._selected_species) != 0:
 */
    goto __pyx_L4;
  }

  /* "cantera/thermo.pyx":636
 *         if len(values) == self.n_species:
 *             data = np.ascontiguousarray(values, dtype=np.double)
 *         elif len(values) == len(self._selected_species) != 0:             # <<<<<<<<<<<<<<
 *             data = np.zeros(self.n_species, dtype=np.double)
 *             for i,k in enumerate(self._selected_species):
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_t_8 = ((PyObject *)__pyx_v_self->__pyx_base._selected_species);
  __Pyx_INCREF(__pyx_t_8);
  __pyx_t_13 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_5 = (__pyx_t_6 == __pyx_t_13);
  if (__pyx_t_5) {
    __pyx_t_5 = (__pyx_t_13 != 0);
  }
  if (__pyx_t_5) {

    /* "cantera/thermo.pyx":637
 *             data = np.ascontiguousarray(values, dtype=np.double)
 *         elif len(values) == len(self._selected_species) != 0:
 *             data = np.zeros(self.n_species, dtype=np.double)             # <<<<<<<<<<<<<<
 *             for i,k in enumerate(self._selected_species):
 *                 data[k] = values[i]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_double); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 637, __pyx_L1_error)
    __pyx_t_9 = ((PyArrayObject *)__pyx_t_7);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
      __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_4 < 0)) {
        PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_v_data, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        }
        __pyx_t_12 = __pyx_t_11 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 637, __pyx_L1_error)
    }
    __pyx_t_9 = 0;
    __pyx_v_data = ((PyArrayObject *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "cantera/thermo.pyx":638
 *         elif len(values) == len(self._selected_species) != 0:
 *             data = np.zeros(self.n_species, dtype=np.double)
 *             for i,k in enumerate(self._selected_species):             # <<<<<<<<<<<<<<
 *                 data[k] = values[i]
 *         else:
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_7 = __pyx_int_0;
    if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self->__pyx_base._selected_species))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self->__pyx_base._selected_species))) {
      __pyx_t_8 = ((PyObject *)__pyx_v_self->__pyx_base._selected_species); __Pyx_INCREF(__pyx_t_8); __pyx_t_13 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_8 = PyObject_GetIter(((PyObject *)__pyx_v_self->__pyx_base._selected_species)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 638, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_14 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 638, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 638, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_2); __pyx_t_13++; if (unlikely((0 < 0))) __PYX_ERR(0, 638, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_14(__pyx_t_8);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 638, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7);
      __pyx_t_7 = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "cantera/thermo.pyx":639
 *             data = np.zeros(self.n_species, dtype=np.double)
 *             for i,k in enumerate(self._selected_species):
 *                 data[k] = values[i]             # <<<<<<<<<<<<<<
 *         else:
 *             msg = "Got {}. Expected {}".format(len(values), self.n_species)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_values, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 639, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely((PyObject_SetItem(((PyObject *)__pyx_v_data), __pyx_v_k, __pyx_t_2) < 0))) __PYX_ERR(0, 639, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "cantera/thermo.pyx":638
 *         elif len(values) == len(self._selected_species) != 0:
 *             data = np.zeros(self.n_species, dtype=np.double)
 *             for i,k in enumerate(self._selected_species):             # <<<<<<<<<<<<<<
 *                 data[k] = values[i]
 *         else:
 */
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "cantera/thermo.pyx":636
 *         if len(values) == self.n_species:
 *             data = np.ascontiguousarray(values, dtype=np.double)
 *         elif len(values) == len(self._selected_species) != 0:             # <<<<<<<<<<<<<<
 *             data = np.zeros(self.n_species, dtype=np.double)
 *             for i,k in enumerate(self._selected_species):
 */
    goto __pyx_L4;
  }

  /* "cantera/thermo.pyx":641
 *                 data[k] = values[i]
 *         else:
 *             msg = "Got {}. Expected {}".format(len(values), self.n_species)             # <<<<<<<<<<<<<<
 *             if len(self._selected_species):
 *                 msg += ' or {}'.format(len(self._selected_species))
 */
  /*else*/ {
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Got_Expected, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_13 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 641, __pyx_L1_error)
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_2, __pyx_t_1};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_v_msg = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "cantera/thermo.pyx":642
 *         else:
 *             msg = "Got {}. Expected {}".format(len(values), self.n_species)
 *             if len(self._selected_species):             # <<<<<<<<<<<<<<
 *                 msg += ' or {}'.format(len(self._selected_species))
 *             raise ValueError('Array has incorrect length. ' + msg + '.')
 */
    __pyx_t_7 = ((PyObject *)__pyx_v_self->__pyx_base._selected_species);
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_13 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 642, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_5 = (__pyx_t_13 != 0);
    if (__pyx_t_5) {

      /* "cantera/thermo.pyx":643
 *             msg = "Got {}. Expected {}".format(len(values), self.n_species)
 *             if len(self._selected_species):
 *                 msg += ' or {}'.format(len(self._selected_species))             # <<<<<<<<<<<<<<
 *             raise ValueError('Array has incorrect length. ' + msg + '.')
 *         method(self.thermo, &data[0])
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_or, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base._selected_species);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_13 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_1};
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 643, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_msg, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 643, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_msg, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "cantera/thermo.pyx":642
 *         else:
 *             msg = "Got {}. Expected {}".format(len(values), self.n_species)
 *             if len(self._selected_species):             # <<<<<<<<<<<<<<
 *                 msg += ' or {}'.format(len(self._selected_species))
 *             raise ValueError('Array has incorrect length. ' + msg + '.')
 */
    }

    /* "cantera/thermo.pyx":644
 *             if len(self._selected_species):
 *                 msg += ' or {}'.format(len(self._selected_species))
 *             raise ValueError('Array has incorrect length. ' + msg + '.')             # <<<<<<<<<<<<<<
 *         method(self.thermo, &data[0])
 * 
 */
    __pyx_t_8 = PyNumber_Add(__pyx_kp_u_Array_has_incorrect_length, __pyx_v_msg); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_kp_u__3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 644, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "cantera/thermo.pyx":645
 *                 msg += ' or {}'.format(len(self._selected_species))
 *             raise ValueError('Array has incorrect length. ' + msg + '.')
 *         method(self.thermo, &data[0])             # <<<<<<<<<<<<<<
 * 
 *     property molecular_weights:
 */
  __pyx_t_15 = 0;
  __pyx_t_4 = -1;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(0, 645, __pyx_L1_error)
  }
  try {
    __pyx_v_method(__pyx_v_self->__pyx_base.thermo, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_data.diminfo[0].strides))));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 645, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":627
 *             return data
 * 
 *     cdef void _setArray1(self, thermoMethod1d method, values) except *:             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] data
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase._setArray1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XDECREF(__pyx_v_values);
  __Pyx_RefNannyFinishContext();
}

/* "cantera/thermo.pyx":649
 *     property molecular_weights:
 *         """Array of species molecular weights (molar masses) [kg/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getMolecularWeights)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_17molecular_weights_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_17molecular_weights_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_17molecular_weights___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_17molecular_weights___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":650
 *         """Array of species molecular weights (molar masses) [kg/kmol]."""
 *         def __get__(self):
 *             return self._getArray1(thermo_getMolecularWeights)             # <<<<<<<<<<<<<<
 * 
 *     property charges:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getMolecularWeights)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":649
 *     property molecular_weights:
 *         """Array of species molecular weights (molar masses) [kg/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getMolecularWeights)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.molecular_weights.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":654
 *     property charges:
 *         """Array of species charges [elem. charge]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getCharges)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7charges_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7charges_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_7charges___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7charges___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":655
 *         """Array of species charges [elem. charge]."""
 *         def __get__(self):
 *             return self._getArray1(thermo_getCharges)             # <<<<<<<<<<<<<<
 * 
 *     property mean_molecular_weight:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getCharges)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":654
 *     property charges:
 *         """Array of species charges [elem. charge]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getCharges)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.charges.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":659
 *     property mean_molecular_weight:
 *         """The mean molecular weight (molar mass) [kg/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.meanMolecularWeight()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_21mean_molecular_weight_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_21mean_molecular_weight_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_21mean_molecular_weight___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_21mean_molecular_weight___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":660
 *         """The mean molecular weight (molar mass) [kg/kmol]."""
 *         def __get__(self):
 *             return self.thermo.meanMolecularWeight()             # <<<<<<<<<<<<<<
 * 
 *     property Y:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.thermo->meanMolecularWeight()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":659
 *     property mean_molecular_weight:
 *         """The mean molecular weight (molar mass) [kg/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.meanMolecularWeight()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.mean_molecular_weight.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":673
 *             array([0.1, 0, 0, 0.4, 0, 0, 0, 0, 0.5])
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getMassFractions)
 *         def __set__(self, Y):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1Y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1Y_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_1Y___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1Y___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":674
 *         """
 *         def __get__(self):
 *             return self._getArray1(thermo_getMassFractions)             # <<<<<<<<<<<<<<
 *         def __set__(self, Y):
 *             if isinstance(Y, (str, bytes)):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getMassFractions)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":673
 *             array([0.1, 0, 0, 0.4, 0, 0, 0, 0, 0.5])
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getMassFractions)
 *         def __set__(self, Y):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.Y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":675
 *         def __get__(self):
 *             return self._getArray1(thermo_getMassFractions)
 *         def __set__(self, Y):             # <<<<<<<<<<<<<<
 *             if isinstance(Y, (str, bytes)):
 *                 self.thermo.setMassFractionsByName(stringify(Y))
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_1Y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_Y); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_1Y_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_Y) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_1Y_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_Y));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_1Y_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_Y) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::string __pyx_t_3;
  __pyx_t_7cantera_5ctcxx_Composition __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":676
 *             return self._getArray1(thermo_getMassFractions)
 *         def __set__(self, Y):
 *             if isinstance(Y, (str, bytes)):             # <<<<<<<<<<<<<<
 *                 self.thermo.setMassFractionsByName(stringify(Y))
 *             elif isinstance(Y, dict):
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_Y); 
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyBytes_Check(__pyx_v_Y); 
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":677
 *         def __set__(self, Y):
 *             if isinstance(Y, (str, bytes)):
 *                 self.thermo.setMassFractionsByName(stringify(Y))             # <<<<<<<<<<<<<<
 *             elif isinstance(Y, dict):
 *                 self.thermo.setMassFractionsByName(comp_map(Y))
 */
    __pyx_t_3 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_Y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L1_error)
    try {
      __pyx_v_self->__pyx_base.thermo->setMassFractionsByName(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 677, __pyx_L1_error)
    }

    /* "cantera/thermo.pyx":676
 *             return self._getArray1(thermo_getMassFractions)
 *         def __set__(self, Y):
 *             if isinstance(Y, (str, bytes)):             # <<<<<<<<<<<<<<
 *                 self.thermo.setMassFractionsByName(stringify(Y))
 *             elif isinstance(Y, dict):
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":678
 *             if isinstance(Y, (str, bytes)):
 *                 self.thermo.setMassFractionsByName(stringify(Y))
 *             elif isinstance(Y, dict):             # <<<<<<<<<<<<<<
 *                 self.thermo.setMassFractionsByName(comp_map(Y))
 *             else:
 */
  __pyx_t_1 = PyDict_Check(__pyx_v_Y); 
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":679
 *                 self.thermo.setMassFractionsByName(stringify(Y))
 *             elif isinstance(Y, dict):
 *                 self.thermo.setMassFractionsByName(comp_map(Y))             # <<<<<<<<<<<<<<
 *             else:
 *                 self._setArray1(thermo_setMassFractions, Y)
 */
    __pyx_t_4 = __pyx_f_7cantera_6_utils_comp_map(__pyx_v_Y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L1_error)
    try {
      __pyx_v_self->__pyx_base.thermo->setMassFractionsByName(__pyx_t_4);
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 679, __pyx_L1_error)
    }

    /* "cantera/thermo.pyx":678
 *             if isinstance(Y, (str, bytes)):
 *                 self.thermo.setMassFractionsByName(stringify(Y))
 *             elif isinstance(Y, dict):             # <<<<<<<<<<<<<<
 *                 self.thermo.setMassFractionsByName(comp_map(Y))
 *             else:
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":681
 *                 self.thermo.setMassFractionsByName(comp_map(Y))
 *             else:
 *                 self._setArray1(thermo_setMassFractions, Y)             # <<<<<<<<<<<<<<
 * 
 *     property X:
 */
  /*else*/ {
    ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_setArray1(__pyx_v_self, thermo_setMassFractions, __pyx_v_Y); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":675
 *         def __get__(self):
 *             return self._getArray1(thermo_getMassFractions)
 *         def __set__(self, Y):             # <<<<<<<<<<<<<<
 *             if isinstance(Y, (str, bytes)):
 *                 self.thermo.setMassFractionsByName(stringify(Y))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.Y.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":694
 *             array([0.1, 0, 0, 0.4, 0, 0, 0, 0, 0.5])
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getMoleFractions)
 *         def __set__(self, X):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1X_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1X_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_1X___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1X___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":695
 *         """
 *         def __get__(self):
 *             return self._getArray1(thermo_getMoleFractions)             # <<<<<<<<<<<<<<
 *         def __set__(self, X):
 *             if isinstance(X, (str, bytes)):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getMoleFractions)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":694
 *             array([0.1, 0, 0, 0.4, 0, 0, 0, 0, 0.5])
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getMoleFractions)
 *         def __set__(self, X):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.X.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":696
 *         def __get__(self):
 *             return self._getArray1(thermo_getMoleFractions)
 *         def __set__(self, X):             # <<<<<<<<<<<<<<
 *             if isinstance(X, (str, bytes)):
 *                 self.thermo.setMoleFractionsByName(stringify(X))
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_1X_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_X); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_1X_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_X) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_1X_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_X));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_1X_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_X) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::string __pyx_t_3;
  __pyx_t_7cantera_5ctcxx_Composition __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":697
 *             return self._getArray1(thermo_getMoleFractions)
 *         def __set__(self, X):
 *             if isinstance(X, (str, bytes)):             # <<<<<<<<<<<<<<
 *                 self.thermo.setMoleFractionsByName(stringify(X))
 *             elif isinstance(X, dict):
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_X); 
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyBytes_Check(__pyx_v_X); 
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":698
 *         def __set__(self, X):
 *             if isinstance(X, (str, bytes)):
 *                 self.thermo.setMoleFractionsByName(stringify(X))             # <<<<<<<<<<<<<<
 *             elif isinstance(X, dict):
 *                 self.thermo.setMoleFractionsByName(comp_map(X))
 */
    __pyx_t_3 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_X); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 698, __pyx_L1_error)
    try {
      __pyx_v_self->__pyx_base.thermo->setMoleFractionsByName(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 698, __pyx_L1_error)
    }

    /* "cantera/thermo.pyx":697
 *             return self._getArray1(thermo_getMoleFractions)
 *         def __set__(self, X):
 *             if isinstance(X, (str, bytes)):             # <<<<<<<<<<<<<<
 *                 self.thermo.setMoleFractionsByName(stringify(X))
 *             elif isinstance(X, dict):
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":699
 *             if isinstance(X, (str, bytes)):
 *                 self.thermo.setMoleFractionsByName(stringify(X))
 *             elif isinstance(X, dict):             # <<<<<<<<<<<<<<
 *                 self.thermo.setMoleFractionsByName(comp_map(X))
 *             else:
 */
  __pyx_t_1 = PyDict_Check(__pyx_v_X); 
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":700
 *                 self.thermo.setMoleFractionsByName(stringify(X))
 *             elif isinstance(X, dict):
 *                 self.thermo.setMoleFractionsByName(comp_map(X))             # <<<<<<<<<<<<<<
 *             else:
 *                 self._setArray1(thermo_setMoleFractions, X)
 */
    __pyx_t_4 = __pyx_f_7cantera_6_utils_comp_map(__pyx_v_X); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L1_error)
    try {
      __pyx_v_self->__pyx_base.thermo->setMoleFractionsByName(__pyx_t_4);
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 700, __pyx_L1_error)
    }

    /* "cantera/thermo.pyx":699
 *             if isinstance(X, (str, bytes)):
 *                 self.thermo.setMoleFractionsByName(stringify(X))
 *             elif isinstance(X, dict):             # <<<<<<<<<<<<<<
 *                 self.thermo.setMoleFractionsByName(comp_map(X))
 *             else:
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":702
 *                 self.thermo.setMoleFractionsByName(comp_map(X))
 *             else:
 *                 self._setArray1(thermo_setMoleFractions, X)             # <<<<<<<<<<<<<<
 * 
 *     property concentrations:
 */
  /*else*/ {
    ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_setArray1(__pyx_v_self, thermo_setMoleFractions, __pyx_v_X); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 702, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":696
 *         def __get__(self):
 *             return self._getArray1(thermo_getMoleFractions)
 *         def __set__(self, X):             # <<<<<<<<<<<<<<
 *             if isinstance(X, (str, bytes)):
 *                 self.thermo.setMoleFractionsByName(stringify(X))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.X.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":709
 *         for surface phases, and kmol/m for edge phases.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getConcentrations)
 *         def __set__(self, C):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_14concentrations_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_14concentrations_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_14concentrations___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_14concentrations___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":710
 *         """
 *         def __get__(self):
 *             return self._getArray1(thermo_getConcentrations)             # <<<<<<<<<<<<<<
 *         def __set__(self, C):
 *             self._setArray1(thermo_setConcentrations, C)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getConcentrations)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":709
 *         for surface phases, and kmol/m for edge phases.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getConcentrations)
 *         def __set__(self, C):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.concentrations.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":711
 *         def __get__(self):
 *             return self._getArray1(thermo_getConcentrations)
 *         def __set__(self, C):             # <<<<<<<<<<<<<<
 *             self._setArray1(thermo_setConcentrations, C)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_14concentrations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_C); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_14concentrations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_C) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_14concentrations_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_C));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_14concentrations_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_C) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":712
 *             return self._getArray1(thermo_getConcentrations)
 *         def __set__(self, C):
 *             self._setArray1(thermo_setConcentrations, C)             # <<<<<<<<<<<<<<
 * 
 *     def __composition_to_array(self, comp, basis):
 */
  ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_setArray1(__pyx_v_self, thermo_setConcentrations, __pyx_v_C); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 712, __pyx_L1_error)

  /* "cantera/thermo.pyx":711
 *         def __get__(self):
 *             return self._getArray1(thermo_getConcentrations)
 *         def __set__(self, C):             # <<<<<<<<<<<<<<
 *             self._setArray1(thermo_setConcentrations, C)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.concentrations.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":714
 *             self._setArray1(thermo_setConcentrations, C)
 * 
 *     def __composition_to_array(self, comp, basis):             # <<<<<<<<<<<<<<
 *         """take a mixture composition in mole or mass fraction as string,
 *         dict or array and return array (for internal use)"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_31_ThermoPhase__composition_to_array(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_30__composition_to_array, "take a mixture composition in mole or mass fraction as string,\n        dict or array and return array (for internal use)");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_31_ThermoPhase__composition_to_array = {"_ThermoPhase__composition_to_array", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_31_ThermoPhase__composition_to_array, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_30__composition_to_array};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_31_ThermoPhase__composition_to_array(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_comp = 0;
  PyObject *__pyx_v_basis = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_ThermoPhase__composition_to_array (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_comp,&__pyx_n_s_basis,0};
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_comp)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_basis)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_ThermoPhase__composition_to_array", 1, 2, 2, 1); __PYX_ERR(0, 714, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_ThermoPhase__composition_to_array") < 0)) __PYX_ERR(0, 714, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_comp = values[0];
    __pyx_v_basis = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_ThermoPhase__composition_to_array", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 714, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase._ThermoPhase__composition_to_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_30__composition_to_array(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_comp, __pyx_v_basis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_30__composition_to_array(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_comp, PyObject *__pyx_v_basis) {
  PyObject *__pyx_v_original_state = NULL;
  PyObject *__pyx_v_arr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ThermoPhase__composition_to_array", 0);
  __Pyx_INCREF(__pyx_v_comp);

  /* "cantera/thermo.pyx":717
 *         """take a mixture composition in mole or mass fraction as string,
 *         dict or array and return array (for internal use)"""
 *         if (isinstance(comp, str) and ':' not in comp             # <<<<<<<<<<<<<<
 *             and comp in self.species_names):
 *             comp += ':1.0'
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_comp); 
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "cantera/thermo.pyx":718
 *         dict or array and return array (for internal use)"""
 *         if (isinstance(comp, str) and ':' not in comp
 *             and comp in self.species_names):             # <<<<<<<<<<<<<<
 *             comp += ':1.0'
 * 
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_kp_u__4, __pyx_v_comp, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 717, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_species_names); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_comp, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "cantera/thermo.pyx":717
 *         """take a mixture composition in mole or mass fraction as string,
 *         dict or array and return array (for internal use)"""
 *         if (isinstance(comp, str) and ':' not in comp             # <<<<<<<<<<<<<<
 *             and comp in self.species_names):
 *             comp += ':1.0'
 */
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":719
 *         if (isinstance(comp, str) and ':' not in comp
 *             and comp in self.species_names):
 *             comp += ':1.0'             # <<<<<<<<<<<<<<
 * 
 *         original_state = self.state
 */
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_comp, __pyx_kp_u_1_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_comp, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "cantera/thermo.pyx":717
 *         """take a mixture composition in mole or mass fraction as string,
 *         dict or array and return array (for internal use)"""
 *         if (isinstance(comp, str) and ':' not in comp             # <<<<<<<<<<<<<<
 *             and comp in self.species_names):
 *             comp += ':1.0'
 */
  }

  /* "cantera/thermo.pyx":721
 *             comp += ':1.0'
 * 
 *         original_state = self.state             # <<<<<<<<<<<<<<
 * 
 *         if basis == 'mole':
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_state); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_original_state = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":723
 *         original_state = self.state
 * 
 *         if basis == 'mole':             # <<<<<<<<<<<<<<
 *             self.TPX = None, None, comp
 *             arr = np.copy(self.X)
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_basis, __pyx_n_u_mole, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 723, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":724
 * 
 *         if basis == 'mole':
 *             self.TPX = None, None, comp             # <<<<<<<<<<<<<<
 *             arr = np.copy(self.X)
 *         elif basis == 'mass':
 */
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 1, Py_None);
    __Pyx_INCREF(__pyx_v_comp);
    __Pyx_GIVEREF(__pyx_v_comp);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_comp);
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_TPX, __pyx_t_3) < 0) __PYX_ERR(0, 724, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cantera/thermo.pyx":725
 *         if basis == 'mole':
 *             self.TPX = None, None, comp
 *             arr = np.copy(self.X)             # <<<<<<<<<<<<<<
 *         elif basis == 'mass':
 *             self.TPY = None, None, comp
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_copy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_v_arr = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cantera/thermo.pyx":723
 *         original_state = self.state
 * 
 *         if basis == 'mole':             # <<<<<<<<<<<<<<
 *             self.TPX = None, None, comp
 *             arr = np.copy(self.X)
 */
    goto __pyx_L7;
  }

  /* "cantera/thermo.pyx":726
 *             self.TPX = None, None, comp
 *             arr = np.copy(self.X)
 *         elif basis == 'mass':             # <<<<<<<<<<<<<<
 *             self.TPY = None, None, comp
 *             arr = np.copy(self.Y)
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_basis, __pyx_n_u_mass, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 726, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "cantera/thermo.pyx":727
 *             arr = np.copy(self.X)
 *         elif basis == 'mass':
 *             self.TPY = None, None, comp             # <<<<<<<<<<<<<<
 *             arr = np.copy(self.Y)
 *         else:
 */
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 727, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_3, 1, Py_None);
    __Pyx_INCREF(__pyx_v_comp);
    __Pyx_GIVEREF(__pyx_v_comp);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_comp);
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_TPY, __pyx_t_3) < 0) __PYX_ERR(0, 727, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cantera/thermo.pyx":728
 *         elif basis == 'mass':
 *             self.TPY = None, None, comp
 *             arr = np.copy(self.Y)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("basis must either be 'mass' or mole'.")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_v_arr = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cantera/thermo.pyx":726
 *             self.TPX = None, None, comp
 *             arr = np.copy(self.X)
 *         elif basis == 'mass':             # <<<<<<<<<<<<<<
 *             self.TPY = None, None, comp
 *             arr = np.copy(self.Y)
 */
    goto __pyx_L7;
  }

  /* "cantera/thermo.pyx":730
 *             arr = np.copy(self.Y)
 *         else:
 *             raise ValueError("basis must either be 'mass' or mole'.")             # <<<<<<<<<<<<<<
 * 
 *         self.state = original_state
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 730, __pyx_L1_error)
  }
  __pyx_L7:;

  /* "cantera/thermo.pyx":732
 *             raise ValueError("basis must either be 'mass' or mole'.")
 * 
 *         self.state = original_state             # <<<<<<<<<<<<<<
 *         return arr
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_state, __pyx_v_original_state) < 0) __PYX_ERR(0, 732, __pyx_L1_error)

  /* "cantera/thermo.pyx":733
 * 
 *         self.state = original_state
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     def set_equivalence_ratio(self, phi, fuel, oxidizer, basis="mole", *, diluent=None,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_arr);
  __pyx_r = __pyx_v_arr;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":714
 *             self._setArray1(thermo_setConcentrations, C)
 * 
 *     def __composition_to_array(self, comp, basis):             # <<<<<<<<<<<<<<
 *         """take a mixture composition in mole or mass fraction as string,
 *         dict or array and return array (for internal use)"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase._ThermoPhase__composition_to_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_original_state);
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_XDECREF(__pyx_v_comp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":735
 *         return arr
 * 
 *     def set_equivalence_ratio(self, phi, fuel, oxidizer, basis="mole", *, diluent=None,             # <<<<<<<<<<<<<<
 *                               fraction=None):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_33set_equivalence_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_32set_equivalence_ratio, "\n        Set the composition to a mixture of ``fuel`` and ``oxidizer`` at the\n        specified equivalence ratio ``phi``, holding temperature and pressure\n        constant. Considers the oxidation of C to CO2, H to H2O and S to SO2.\n        Other elements are assumed not to participate in oxidation (that is,\n        N ends up as N2). The ``basis`` determines the fuel and oxidizer\n        compositions: ``basis='mole'`` means mole fractions (default),\n        ``basis='mass'`` means mass fractions. The fuel/oxidizer mixture can be\n        be diluted by a ``diluent`` based on a mixing ``fraction``. The amount of\n        diluent is quantified as a fraction of fuel, oxidizer or the fuel/oxidizer\n        mixture. For more information, see `Python example\n        <https://cantera.org/examples/python/thermo/equivalenceRatio.py.html>`_ ::\n\n            >>> gas.set_equivalence_ratio(0.5, 'CH4', 'O2:1.0, N2:3.76', basis='mole')\n            >>> gas.mass_fraction_dict()\n            {'CH4': 0.02837633052851, 'N2': 0.7452356312613, 'O2': 0.22638803821018}\n            >>> gas.set_equivalence_ratio(1.2, 'NH3:0.8,CO:0.2', 'O2:1', basis='mole')\n            >>> gas.mass_fraction_dict()\n            {'CO': 0.14784006249290, 'NH3': 0.35956645545401, 'O2': 0.49259348205308}\n\n        :param phi:\n            Equivalence ratio\n        :param fuel:\n            Fuel species name or mole/mass fractions as string, array, or dict.\n        :param oxidizer:\n            Oxidizer species name or mole/mass fractions as a string, array, or dict.\n        :param basis:\n            Determines if ``fuel`` and ``oxidizer`` are given in mole\n            fractions (``basis='mole'``) or mass fractions (``basis='mass'``).\n        :param diluent:\n            Optional parameter. Required if dilution is used. Specifies the composition\n            of the diluent in mole/mass fractions as a string, array or dict.\n        :param fraction:\n            Optional parameter. Dilutes the fuel""/oxidizer mixture with the diluent\n            according to ``fraction``. Fraction can refer to the fraction of diluent in\n            the  mixture (for example ``fraction=\"diluent:0.7\"`` will create a mixture\n            with 30 % fuel/oxidizer and 70 % diluent), the fraction of fuel in the\n            mixture (for example ``fraction=\"fuel:0.1\"`` means that the mixture contains\n            10 % fuel. The amount of oxidizer is determined from the equivalence ratio\n            and the remaining mixture is the diluent) or fraction of oxidizer in the\n            mixture (for example ``fraction=\"oxidizer:0.1\"``). The fraction itself is\n            interpreted as mole or mass fraction based on ``basis``. The diluent is not\n            considered in the computation of the equivalence ratio. Default is no\n            dilution or ``fraction=None``. May be given as string or dictionary (for\n            example ``fraction={\"fuel\":0.7}``).\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_33set_equivalence_ratio = {"set_equivalence_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_33set_equivalence_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_32set_equivalence_ratio};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_33set_equivalence_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_phi = 0;
  PyObject *__pyx_v_fuel = 0;
  PyObject *__pyx_v_oxidizer = 0;
  PyObject *__pyx_v_basis = 0;
  PyObject *__pyx_v_diluent = 0;
  PyObject *__pyx_v_fraction = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_equivalence_ratio (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_phi,&__pyx_n_s_fuel,&__pyx_n_s_oxidizer,&__pyx_n_s_basis,&__pyx_n_s_diluent,&__pyx_n_s_fraction,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_u_mole);
    values[4] = ((PyObject *)Py_None);

    /* "cantera/thermo.pyx":736
 * 
 *     def set_equivalence_ratio(self, phi, fuel, oxidizer, basis="mole", *, diluent=None,
 *                               fraction=None):             # <<<<<<<<<<<<<<
 *         """
 *         Set the composition to a mixture of ``fuel`` and ``oxidizer`` at the
 */
    values[5] = ((PyObject *)Py_None);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_phi)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fuel)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_equivalence_ratio", 0, 3, 4, 1); __PYX_ERR(0, 735, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_oxidizer)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_equivalence_ratio", 0, 3, 4, 2); __PYX_ERR(0, 735, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_basis);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 4; index < 6 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_equivalence_ratio") < 0)) __PYX_ERR(0, 735, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_phi = values[0];
    __pyx_v_fuel = values[1];
    __pyx_v_oxidizer = values[2];
    __pyx_v_basis = values[3];
    __pyx_v_diluent = values[4];
    __pyx_v_fraction = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_equivalence_ratio", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 735, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.set_equivalence_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_32set_equivalence_ratio(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_phi, __pyx_v_fuel, __pyx_v_oxidizer, __pyx_v_basis, __pyx_v_diluent, __pyx_v_fraction);

  /* "cantera/thermo.pyx":735
 *         return arr
 * 
 *     def set_equivalence_ratio(self, phi, fuel, oxidizer, basis="mole", *, diluent=None,             # <<<<<<<<<<<<<<
 *                               fraction=None):
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_32set_equivalence_ratio(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_phi, PyObject *__pyx_v_fuel, PyObject *__pyx_v_oxidizer, PyObject *__pyx_v_basis, PyObject *__pyx_v_diluent, PyObject *__pyx_v_fraction) {
  PyArrayObject *__pyx_v_fuel_comp = 0;
  PyArrayObject *__pyx_v_ox_comp = 0;
  PyObject *__pyx_v_fraction_dict = NULL;
  PyObject *__pyx_v_fraction_type = NULL;
  double __pyx_v_fraction_value;
  PyArrayObject *__pyx_v_diluent_comp = 0;
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_P = NULL;
  PyObject *__pyx_v_X_fuelox = NULL;
  PyObject *__pyx_v_Y_fuelox = NULL;
  PyObject *__pyx_v_Z_fuel = NULL;
  PyObject *__pyx_v_Z = NULL;
  PyObject *__pyx_v_Y_mix = NULL;
  PyObject *__pyx_v_factor = NULL;
  PyObject *__pyx_v_X_mix = NULL;
  PyObject *__pyx_v_M_mix = NULL;
  PyObject *__pyx_v_M_fuel = NULL;
  PyObject *__pyx_v_Z_fuel_mole = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_diluent_comp;
  __Pyx_Buffer __pyx_pybuffer_diluent_comp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_fuel_comp;
  __Pyx_Buffer __pyx_pybuffer_fuel_comp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ox_comp;
  __Pyx_Buffer __pyx_pybuffer_ox_comp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Cantera::ThermoBasis __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  std::string __pyx_t_16;
  __pyx_t_7cantera_5ctcxx_Composition __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  PyArrayObject *__pyx_t_19 = NULL;
  Py_UCS4 __pyx_t_20;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_equivalence_ratio", 0);
  __pyx_pybuffer_fuel_comp.pybuffer.buf = NULL;
  __pyx_pybuffer_fuel_comp.refcount = 0;
  __pyx_pybuffernd_fuel_comp.data = NULL;
  __pyx_pybuffernd_fuel_comp.rcbuffer = &__pyx_pybuffer_fuel_comp;
  __pyx_pybuffer_ox_comp.pybuffer.buf = NULL;
  __pyx_pybuffer_ox_comp.refcount = 0;
  __pyx_pybuffernd_ox_comp.data = NULL;
  __pyx_pybuffernd_ox_comp.rcbuffer = &__pyx_pybuffer_ox_comp;
  __pyx_pybuffer_diluent_comp.pybuffer.buf = NULL;
  __pyx_pybuffer_diluent_comp.refcount = 0;
  __pyx_pybuffernd_diluent_comp.data = NULL;
  __pyx_pybuffernd_diluent_comp.rcbuffer = &__pyx_pybuffer_diluent_comp;

  /* "cantera/thermo.pyx":783
 *             example ``fraction={"fuel":0.7}``).
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] fuel_comp = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] ox_comp = np.ascontiguousarray(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":784
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] fuel_comp = np.ascontiguousarray(
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] ox_comp = np.ascontiguousarray(
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ThermoPhase__composition_to_arr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_fuel, __pyx_v_basis};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "cantera/thermo.pyx":783
 *             example ``fraction={"fuel":0.7}``).
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] fuel_comp = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] ox_comp = np.ascontiguousarray(
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":784
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] fuel_comp = np.ascontiguousarray(
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] ox_comp = np.ascontiguousarray(
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cantera/thermo.pyx":783
 *             example ``fraction={"fuel":0.7}``).
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] fuel_comp = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] ox_comp = np.ascontiguousarray(
 */
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 783, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fuel_comp.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_fuel_comp = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_fuel_comp.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 783, __pyx_L1_error)
    } else {__pyx_pybuffernd_fuel_comp.diminfo[0].strides = __pyx_pybuffernd_fuel_comp.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_fuel_comp.diminfo[0].shape = __pyx_pybuffernd_fuel_comp.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_fuel_comp = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "cantera/thermo.pyx":785
 *         cdef np.ndarray[np.double_t, ndim=1] fuel_comp = np.ascontiguousarray(
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] ox_comp = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cantera/thermo.pyx":786
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] ox_comp = np.ascontiguousarray(
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *         self.thermo.setEquivalenceRatio(phi, &fuel_comp[0], &ox_comp[0],
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ThermoPhase__composition_to_arr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_oxidizer, __pyx_v_basis};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "cantera/thermo.pyx":785
 *         cdef np.ndarray[np.double_t, ndim=1] fuel_comp = np.ascontiguousarray(
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] ox_comp = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "cantera/thermo.pyx":786
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] ox_comp = np.ascontiguousarray(
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *         self.thermo.setEquivalenceRatio(phi, &fuel_comp[0], &ox_comp[0],
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 786, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":785
 *         cdef np.ndarray[np.double_t, ndim=1] fuel_comp = np.ascontiguousarray(
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] ox_comp = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 785, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ox_comp.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_ox_comp = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_ox_comp.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 785, __pyx_L1_error)
    } else {__pyx_pybuffernd_ox_comp.diminfo[0].strides = __pyx_pybuffernd_ox_comp.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ox_comp.diminfo[0].shape = __pyx_pybuffernd_ox_comp.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_ox_comp = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":788
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 *         self.thermo.setEquivalenceRatio(phi, &fuel_comp[0], &ox_comp[0],             # <<<<<<<<<<<<<<
 *                                         ThermoBasis.mass if basis == "mass"
 *                                                          else ThermoBasis.molar)
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_phi); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 788, __pyx_L1_error)
  __pyx_t_10 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_fuel_comp.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_fuel_comp.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 788, __pyx_L1_error)
  }
  __pyx_t_11 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_ox_comp.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_ox_comp.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 788, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":789
 * 
 *         self.thermo.setEquivalenceRatio(phi, &fuel_comp[0], &ox_comp[0],
 *                                         ThermoBasis.mass if basis == "mass"             # <<<<<<<<<<<<<<
 *                                                          else ThermoBasis.molar)
 * 
 */
  __pyx_t_13 = (__Pyx_PyUnicode_Equals(__pyx_v_basis, __pyx_n_u_mass, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 789, __pyx_L1_error)
  if (__pyx_t_13) {
    __pyx_t_12 = Cantera::ThermoBasis::mass;
  } else {

    /* "cantera/thermo.pyx":790
 *         self.thermo.setEquivalenceRatio(phi, &fuel_comp[0], &ox_comp[0],
 *                                         ThermoBasis.mass if basis == "mass"
 *                                                          else ThermoBasis.molar)             # <<<<<<<<<<<<<<
 * 
 *         if (fraction is None) != (diluent is None):
 */
    __pyx_t_12 = Cantera::ThermoBasis::molar;
  }

  /* "cantera/thermo.pyx":788
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 *         self.thermo.setEquivalenceRatio(phi, &fuel_comp[0], &ox_comp[0],             # <<<<<<<<<<<<<<
 *                                         ThermoBasis.mass if basis == "mass"
 *                                                          else ThermoBasis.molar)
 */
  try {
    __pyx_v_self->__pyx_base.thermo->setEquivalenceRatio(__pyx_t_9, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_fuel_comp.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_fuel_comp.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_ox_comp.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_ox_comp.diminfo[0].strides))), __pyx_t_12);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 788, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":792
 *                                                          else ThermoBasis.molar)
 * 
 *         if (fraction is None) != (diluent is None):             # <<<<<<<<<<<<<<
 *             raise ValueError("If dilution is used, both 'fraction' and 'diluent' "
 *                              "parameters are required.")
 */
  __pyx_t_13 = (__pyx_v_fraction == Py_None);
  __pyx_t_14 = (__pyx_v_diluent == Py_None);
  __pyx_t_15 = (__pyx_t_13 != __pyx_t_14);
  if (unlikely(__pyx_t_15)) {

    /* "cantera/thermo.pyx":793
 * 
 *         if (fraction is None) != (diluent is None):
 *             raise ValueError("If dilution is used, both 'fraction' and 'diluent' "             # <<<<<<<<<<<<<<
 *                              "parameters are required.")
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 793, __pyx_L1_error)

    /* "cantera/thermo.pyx":792
 *                                                          else ThermoBasis.molar)
 * 
 *         if (fraction is None) != (diluent is None):             # <<<<<<<<<<<<<<
 *             raise ValueError("If dilution is used, both 'fraction' and 'diluent' "
 *                              "parameters are required.")
 */
  }

  /* "cantera/thermo.pyx":796
 *                              "parameters are required.")
 * 
 *         if fraction is None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_15 = (__pyx_v_fraction == Py_None);
  if (__pyx_t_15) {

    /* "cantera/thermo.pyx":797
 * 
 *         if fraction is None:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(fraction, str):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cantera/thermo.pyx":796
 *                              "parameters are required.")
 * 
 *         if fraction is None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "cantera/thermo.pyx":799
 *             return
 * 
 *         if isinstance(fraction, str):             # <<<<<<<<<<<<<<
 *             fraction_dict = comp_map_to_dict(parseCompString(stringify(fraction)))
 *         elif isinstance(fraction, dict):
 */
  __pyx_t_15 = PyUnicode_Check(__pyx_v_fraction); 
  if (__pyx_t_15) {

    /* "cantera/thermo.pyx":800
 * 
 *         if isinstance(fraction, str):
 *             fraction_dict = comp_map_to_dict(parseCompString(stringify(fraction)))             # <<<<<<<<<<<<<<
 *         elif isinstance(fraction, dict):
 *             fraction_dict = fraction
 */
    __pyx_t_16 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_fraction); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 800, __pyx_L1_error)
    try {
      __pyx_t_17 = Cantera::parseCompString(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_16));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 800, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_f_7cantera_6_utils_comp_map_to_dict(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_17)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 800, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_fraction_dict = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cantera/thermo.pyx":799
 *             return
 * 
 *         if isinstance(fraction, str):             # <<<<<<<<<<<<<<
 *             fraction_dict = comp_map_to_dict(parseCompString(stringify(fraction)))
 *         elif isinstance(fraction, dict):
 */
    goto __pyx_L5;
  }

  /* "cantera/thermo.pyx":801
 *         if isinstance(fraction, str):
 *             fraction_dict = comp_map_to_dict(parseCompString(stringify(fraction)))
 *         elif isinstance(fraction, dict):             # <<<<<<<<<<<<<<
 *             fraction_dict = fraction
 *         else:
 */
  __pyx_t_15 = PyDict_Check(__pyx_v_fraction); 
  if (likely(__pyx_t_15)) {

    /* "cantera/thermo.pyx":802
 *             fraction_dict = comp_map_to_dict(parseCompString(stringify(fraction)))
 *         elif isinstance(fraction, dict):
 *             fraction_dict = fraction             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("The fraction argument must be given as string or "
 */
    __Pyx_INCREF(__pyx_v_fraction);
    __pyx_v_fraction_dict = __pyx_v_fraction;

    /* "cantera/thermo.pyx":801
 *         if isinstance(fraction, str):
 *             fraction_dict = comp_map_to_dict(parseCompString(stringify(fraction)))
 *         elif isinstance(fraction, dict):             # <<<<<<<<<<<<<<
 *             fraction_dict = fraction
 *         else:
 */
    goto __pyx_L5;
  }

  /* "cantera/thermo.pyx":804
 *             fraction_dict = fraction
 *         else:
 *             raise ValueError("The fraction argument must be given as string or "             # <<<<<<<<<<<<<<
 *                              "dictionary.")
 * 
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 804, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "cantera/thermo.pyx":807
 *                              "dictionary.")
 * 
 *         if len(fraction_dict) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("Invalid format for the fraction. Must be provided for "
 *                              "example as fraction='fuel:0.1'")
 */
  __pyx_t_18 = PyObject_Length(__pyx_v_fraction_dict); if (unlikely(__pyx_t_18 == ((Py_ssize_t)-1))) __PYX_ERR(0, 807, __pyx_L1_error)
  __pyx_t_15 = (__pyx_t_18 != 1);
  if (unlikely(__pyx_t_15)) {

    /* "cantera/thermo.pyx":808
 * 
 *         if len(fraction_dict) != 1:
 *             raise ValueError("Invalid format for the fraction. Must be provided for "             # <<<<<<<<<<<<<<
 *                              "example as fraction='fuel:0.1'")
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 808, __pyx_L1_error)

    /* "cantera/thermo.pyx":807
 *                              "dictionary.")
 * 
 *         if len(fraction_dict) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("Invalid format for the fraction. Must be provided for "
 *                              "example as fraction='fuel:0.1'")
 */
  }

  /* "cantera/thermo.pyx":811
 *                              "example as fraction='fuel:0.1'")
 * 
 *         fraction_type  = list(fraction_dict.keys())[0]             # <<<<<<<<<<<<<<
 *         fraction_value = float(list(fraction_dict.values())[0])
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_fraction_dict, __pyx_n_s_keys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = __Pyx_PySequence_ListKeepNew(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_fraction_type = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":812
 * 
 *         fraction_type  = list(fraction_dict.keys())[0]
 *         fraction_value = float(list(fraction_dict.values())[0])             # <<<<<<<<<<<<<<
 * 
 *         if fraction_value < 0 or fraction_value > 1:
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_fraction_dict, __pyx_n_s_values); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 812, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = __Pyx_PySequence_ListKeepNew(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_9 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_9 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_fraction_value = __pyx_t_9;

  /* "cantera/thermo.pyx":814
 *         fraction_value = float(list(fraction_dict.values())[0])
 * 
 *         if fraction_value < 0 or fraction_value > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("The fraction must be between 0 and 1")
 * 
 */
  __pyx_t_14 = (__pyx_v_fraction_value < 0.0);
  if (!__pyx_t_14) {
  } else {
    __pyx_t_15 = __pyx_t_14;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_14 = (__pyx_v_fraction_value > 1.0);
  __pyx_t_15 = __pyx_t_14;
  __pyx_L8_bool_binop_done:;
  if (unlikely(__pyx_t_15)) {

    /* "cantera/thermo.pyx":815
 * 
 *         if fraction_value < 0 or fraction_value > 1:
 *             raise ValueError("The fraction must be between 0 and 1")             # <<<<<<<<<<<<<<
 * 
 *         if fraction_type not in ["fuel", "oxidizer", "diluent"]:
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 815, __pyx_L1_error)

    /* "cantera/thermo.pyx":814
 *         fraction_value = float(list(fraction_dict.values())[0])
 * 
 *         if fraction_value < 0 or fraction_value > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("The fraction must be between 0 and 1")
 * 
 */
  }

  /* "cantera/thermo.pyx":817
 *             raise ValueError("The fraction must be between 0 and 1")
 * 
 *         if fraction_type not in ["fuel", "oxidizer", "diluent"]:             # <<<<<<<<<<<<<<
 *             raise ValueError("The fraction must specify 'fuel', 'oxidizer' or "
 *                              "'diluent'")
 */
  __Pyx_INCREF(__pyx_v_fraction_type);
  __pyx_t_4 = __pyx_v_fraction_type;
  __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_t_4, __pyx_n_u_fuel, Py_NE)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 817, __pyx_L1_error)
  if (__pyx_t_14) {
  } else {
    __pyx_t_15 = __pyx_t_14;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_t_4, __pyx_n_u_oxidizer, Py_NE)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 817, __pyx_L1_error)
  if (__pyx_t_14) {
  } else {
    __pyx_t_15 = __pyx_t_14;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_t_4, __pyx_n_u_diluent, Py_NE)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 817, __pyx_L1_error)
  __pyx_t_15 = __pyx_t_14;
  __pyx_L11_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_14 = __pyx_t_15;
  if (unlikely(__pyx_t_14)) {

    /* "cantera/thermo.pyx":818
 * 
 *         if fraction_type not in ["fuel", "oxidizer", "diluent"]:
 *             raise ValueError("The fraction must specify 'fuel', 'oxidizer' or "             # <<<<<<<<<<<<<<
 *                              "'diluent'")
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 818, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 818, __pyx_L1_error)

    /* "cantera/thermo.pyx":817
 *             raise ValueError("The fraction must be between 0 and 1")
 * 
 *         if fraction_type not in ["fuel", "oxidizer", "diluent"]:             # <<<<<<<<<<<<<<
 *             raise ValueError("The fraction must specify 'fuel', 'oxidizer' or "
 *                              "'diluent'")
 */
  }

  /* "cantera/thermo.pyx":821
 *                              "'diluent'")
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] diluent_comp = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(diluent, basis), dtype=np.double)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":822
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] diluent_comp = np.ascontiguousarray(
 *                 self.__composition_to_array(diluent, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *         # this function changes the composition and fixes temperature and pressure
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ThermoPhase__composition_to_arr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_v_diluent, __pyx_v_basis};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 822, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "cantera/thermo.pyx":821
 *                              "'diluent'")
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] diluent_comp = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(diluent, basis), dtype=np.double)
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":822
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] diluent_comp = np.ascontiguousarray(
 *                 self.__composition_to_array(diluent, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *         # this function changes the composition and fixes temperature and pressure
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_double); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 822, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":821
 *                              "'diluent'")
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] diluent_comp = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(diluent, basis), dtype=np.double)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 821, __pyx_L1_error)
  __pyx_t_19 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_diluent_comp.rcbuffer->pybuffer, (PyObject*)__pyx_t_19, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_diluent_comp = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_diluent_comp.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 821, __pyx_L1_error)
    } else {__pyx_pybuffernd_diluent_comp.diminfo[0].strides = __pyx_pybuffernd_diluent_comp.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_diluent_comp.diminfo[0].shape = __pyx_pybuffernd_diluent_comp.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_19 = 0;
  __pyx_v_diluent_comp = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":825
 * 
 *         # this function changes the composition and fixes temperature and pressure
 *         T, P = self.T, self.P             # <<<<<<<<<<<<<<
 *         # if 'fraction' is specified for diluent, just scale the mass or mole fractions
 *         # of the fuel/oxidizer mixture accordingly
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_T = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_P = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":828
 *         # if 'fraction' is specified for diluent, just scale the mass or mole fractions
 *         # of the fuel/oxidizer mixture accordingly
 *         if fraction_type == "diluent":             # <<<<<<<<<<<<<<
 *             if basis == "mole":
 *                 X_fuelox = self.X
 */
  __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_v_fraction_type, __pyx_n_u_diluent, Py_EQ)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 828, __pyx_L1_error)
  if (__pyx_t_14) {

    /* "cantera/thermo.pyx":829
 *         # of the fuel/oxidizer mixture accordingly
 *         if fraction_type == "diluent":
 *             if basis == "mole":             # <<<<<<<<<<<<<<
 *                 X_fuelox = self.X
 *                 self.X = diluent_comp
 */
    __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_v_basis, __pyx_n_u_mole, Py_EQ)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 829, __pyx_L1_error)
    if (__pyx_t_14) {

      /* "cantera/thermo.pyx":830
 *         if fraction_type == "diluent":
 *             if basis == "mole":
 *                 X_fuelox = self.X             # <<<<<<<<<<<<<<
 *                 self.X = diluent_comp
 *                 self.X = (1.0 - fraction_value) * X_fuelox + fraction_value * self.X
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_X_fuelox = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "cantera/thermo.pyx":831
 *             if basis == "mole":
 *                 X_fuelox = self.X
 *                 self.X = diluent_comp             # <<<<<<<<<<<<<<
 *                 self.X = (1.0 - fraction_value) * X_fuelox + fraction_value * self.X
 *             else:
 */
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, ((PyObject *)__pyx_v_diluent_comp)) < 0) __PYX_ERR(0, 831, __pyx_L1_error)

      /* "cantera/thermo.pyx":832
 *                 X_fuelox = self.X
 *                 self.X = diluent_comp
 *                 self.X = (1.0 - fraction_value) * X_fuelox + fraction_value * self.X             # <<<<<<<<<<<<<<
 *             else:
 *                 Y_fuelox = self.Y
 */
      __pyx_t_4 = PyFloat_FromDouble((1.0 - __pyx_v_fraction_value)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_v_X_fuelox); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyFloat_FromDouble(__pyx_v_fraction_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, __pyx_t_3) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "cantera/thermo.pyx":829
 *         # of the fuel/oxidizer mixture accordingly
 *         if fraction_type == "diluent":
 *             if basis == "mole":             # <<<<<<<<<<<<<<
 *                 X_fuelox = self.X
 *                 self.X = diluent_comp
 */
      goto __pyx_L15;
    }

    /* "cantera/thermo.pyx":834
 *                 self.X = (1.0 - fraction_value) * X_fuelox + fraction_value * self.X
 *             else:
 *                 Y_fuelox = self.Y             # <<<<<<<<<<<<<<
 *                 self.Y = diluent_comp
 *                 self.Y = (1.0 - fraction_value) * Y_fuelox + fraction_value * self.Y
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_Y_fuelox = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "cantera/thermo.pyx":835
 *             else:
 *                 Y_fuelox = self.Y
 *                 self.Y = diluent_comp             # <<<<<<<<<<<<<<
 *                 self.Y = (1.0 - fraction_value) * Y_fuelox + fraction_value * self.Y
 *             self.TP = T, P
 */
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, ((PyObject *)__pyx_v_diluent_comp)) < 0) __PYX_ERR(0, 835, __pyx_L1_error)

      /* "cantera/thermo.pyx":836
 *                 Y_fuelox = self.Y
 *                 self.Y = diluent_comp
 *                 self.Y = (1.0 - fraction_value) * Y_fuelox + fraction_value * self.Y             # <<<<<<<<<<<<<<
 *             self.TP = T, P
 *             return
 */
      __pyx_t_3 = PyFloat_FromDouble((1.0 - __pyx_v_fraction_value)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, __pyx_v_Y_fuelox); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyFloat_FromDouble(__pyx_v_fraction_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, __pyx_t_2) < 0) __PYX_ERR(0, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L15:;

    /* "cantera/thermo.pyx":837
 *                 self.Y = diluent_comp
 *                 self.Y = (1.0 - fraction_value) * Y_fuelox + fraction_value * self.Y
 *             self.TP = T, P             # <<<<<<<<<<<<<<
 *             return
 * 
 */
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_T);
    __Pyx_GIVEREF(__pyx_v_T);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_T);
    __Pyx_INCREF(__pyx_v_P);
    __Pyx_GIVEREF(__pyx_v_P);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_P);
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_TP, __pyx_t_2) < 0) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cantera/thermo.pyx":838
 *                 self.Y = (1.0 - fraction_value) * Y_fuelox + fraction_value * self.Y
 *             self.TP = T, P
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # get the mixture fraction before scaling / diluent addition
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "cantera/thermo.pyx":828
 *         # if 'fraction' is specified for diluent, just scale the mass or mole fractions
 *         # of the fuel/oxidizer mixture accordingly
 *         if fraction_type == "diluent":             # <<<<<<<<<<<<<<
 *             if basis == "mole":
 *                 X_fuelox = self.X
 */
  }

  /* "cantera/thermo.pyx":841
 * 
 *         # get the mixture fraction before scaling / diluent addition
 *         Z_fuel = self.mixture_fraction(fuel, oxidizer, basis)             # <<<<<<<<<<<<<<
 * 
 *         if Z_fuel == 0.0 and fraction_type == "fuel":
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mixture_fraction); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_6, __pyx_v_fuel, __pyx_v_oxidizer, __pyx_v_basis};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 3+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_Z_fuel = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":843
 *         Z_fuel = self.mixture_fraction(fuel, oxidizer, basis)
 * 
 *         if Z_fuel == 0.0 and fraction_type == "fuel":             # <<<<<<<<<<<<<<
 *             raise ValueError("No fuel in the fuel/oxidizer mixture")
 * 
 */
  __pyx_t_15 = (__Pyx_PyFloat_BoolEqObjC(__pyx_v_Z_fuel, __pyx_float_0_0, 0.0, 0, 0)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 843, __pyx_L1_error)
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_v_fraction_type, __pyx_n_u_fuel, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 843, __pyx_L1_error)
  __pyx_t_14 = __pyx_t_15;
  __pyx_L17_bool_binop_done:;
  if (unlikely(__pyx_t_14)) {

    /* "cantera/thermo.pyx":844
 * 
 *         if Z_fuel == 0.0 and fraction_type == "fuel":
 *             raise ValueError("No fuel in the fuel/oxidizer mixture")             # <<<<<<<<<<<<<<
 * 
 *         if Z_fuel == 1.0 and fraction_type == "oxidizer":
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 844, __pyx_L1_error)

    /* "cantera/thermo.pyx":843
 *         Z_fuel = self.mixture_fraction(fuel, oxidizer, basis)
 * 
 *         if Z_fuel == 0.0 and fraction_type == "fuel":             # <<<<<<<<<<<<<<
 *             raise ValueError("No fuel in the fuel/oxidizer mixture")
 * 
 */
  }

  /* "cantera/thermo.pyx":846
 *             raise ValueError("No fuel in the fuel/oxidizer mixture")
 * 
 *         if Z_fuel == 1.0 and fraction_type == "oxidizer":             # <<<<<<<<<<<<<<
 *             raise ValueError("No oxidizer in the fuel/oxidizer mixture")
 * 
 */
  __pyx_t_15 = (__Pyx_PyFloat_BoolEqObjC(__pyx_v_Z_fuel, __pyx_float_1_0, 1.0, 0, 0)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 846, __pyx_L1_error)
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L20_bool_binop_done;
  }
  __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_v_fraction_type, __pyx_n_u_oxidizer, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 846, __pyx_L1_error)
  __pyx_t_14 = __pyx_t_15;
  __pyx_L20_bool_binop_done:;
  if (unlikely(__pyx_t_14)) {

    /* "cantera/thermo.pyx":847
 * 
 *         if Z_fuel == 1.0 and fraction_type == "oxidizer":
 *             raise ValueError("No oxidizer in the fuel/oxidizer mixture")             # <<<<<<<<<<<<<<
 * 
 *         if basis == "mass": # for mass basis, it is straight forward
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 847, __pyx_L1_error)

    /* "cantera/thermo.pyx":846
 *             raise ValueError("No fuel in the fuel/oxidizer mixture")
 * 
 *         if Z_fuel == 1.0 and fraction_type == "oxidizer":             # <<<<<<<<<<<<<<
 *             raise ValueError("No oxidizer in the fuel/oxidizer mixture")
 * 
 */
  }

  /* "cantera/thermo.pyx":849
 *             raise ValueError("No oxidizer in the fuel/oxidizer mixture")
 * 
 *         if basis == "mass": # for mass basis, it is straight forward             # <<<<<<<<<<<<<<
 *             if fraction_type == "fuel":
 *                 Z = Z_fuel
 */
  __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_v_basis, __pyx_n_u_mass, Py_EQ)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 849, __pyx_L1_error)
  if (__pyx_t_14) {

    /* "cantera/thermo.pyx":850
 * 
 *         if basis == "mass": # for mass basis, it is straight forward
 *             if fraction_type == "fuel":             # <<<<<<<<<<<<<<
 *                 Z = Z_fuel
 *             else:  # oxidizer
 */
    __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_v_fraction_type, __pyx_n_u_fuel, Py_EQ)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 850, __pyx_L1_error)
    if (__pyx_t_14) {

      /* "cantera/thermo.pyx":851
 *         if basis == "mass": # for mass basis, it is straight forward
 *             if fraction_type == "fuel":
 *                 Z = Z_fuel             # <<<<<<<<<<<<<<
 *             else:  # oxidizer
 *                 Z = 1.0 - Z_fuel
 */
      __Pyx_INCREF(__pyx_v_Z_fuel);
      __pyx_v_Z = __pyx_v_Z_fuel;

      /* "cantera/thermo.pyx":850
 * 
 *         if basis == "mass": # for mass basis, it is straight forward
 *             if fraction_type == "fuel":             # <<<<<<<<<<<<<<
 *                 Z = Z_fuel
 *             else:  # oxidizer
 */
      goto __pyx_L23;
    }

    /* "cantera/thermo.pyx":853
 *                 Z = Z_fuel
 *             else:  # oxidizer
 *                 Z = 1.0 - Z_fuel             # <<<<<<<<<<<<<<
 *             if fraction_value > Z:
 *                 raise ValueError(f"The {fraction_type} fraction after dilution cannot "
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyFloat_SubtractCObj(__pyx_float_1_0, __pyx_v_Z_fuel, 1.0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_Z = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __pyx_L23:;

    /* "cantera/thermo.pyx":854
 *             else:  # oxidizer
 *                 Z = 1.0 - Z_fuel
 *             if fraction_value > Z:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"The {fraction_type} fraction after dilution cannot "
 *                                  "be higher than {fraction_type} fraction in the "
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_fraction_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_v_Z, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_14)) {

      /* "cantera/thermo.pyx":855
 *                 Z = 1.0 - Z_fuel
 *             if fraction_value > Z:
 *                 raise ValueError(f"The {fraction_type} fraction after dilution cannot "             # <<<<<<<<<<<<<<
 *                                  "be higher than {fraction_type} fraction in the "
 *                                  "original mixture.")
 */
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_18 = 0;
      __pyx_t_20 = 127;
      __Pyx_INCREF(__pyx_kp_u_The);
      __pyx_t_18 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_The);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_The);
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_fraction_type, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_20;
      __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_fraction_after_dilution_cannot);
      __pyx_t_18 += 96;
      __Pyx_GIVEREF(__pyx_kp_u_fraction_after_dilution_cannot);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_fraction_after_dilution_cannot);
      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_18, __pyx_t_20); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 855, __pyx_L1_error)

      /* "cantera/thermo.pyx":854
 *             else:  # oxidizer
 *                 Z = 1.0 - Z_fuel
 *             if fraction_value > Z:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"The {fraction_type} fraction after dilution cannot "
 *                                  "be higher than {fraction_type} fraction in the "
 */
    }

    /* "cantera/thermo.pyx":858
 *                                  "be higher than {fraction_type} fraction in the "
 *                                  "original mixture.")
 *             Y_mix = self.Y             # <<<<<<<<<<<<<<
 *             self.Y = diluent_comp
 *             factor = fraction_value / Z
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_Y_mix = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cantera/thermo.pyx":859
 *                                  "original mixture.")
 *             Y_mix = self.Y
 *             self.Y = diluent_comp             # <<<<<<<<<<<<<<
 *             factor = fraction_value / Z
 *             self.Y = factor*Y_mix + (1.0 - factor) * self.Y
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, ((PyObject *)__pyx_v_diluent_comp)) < 0) __PYX_ERR(0, 859, __pyx_L1_error)

    /* "cantera/thermo.pyx":860
 *             Y_mix = self.Y
 *             self.Y = diluent_comp
 *             factor = fraction_value / Z             # <<<<<<<<<<<<<<
 *             self.Y = factor*Y_mix + (1.0 - factor) * self.Y
 *         else:
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_fraction_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_Z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_factor = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cantera/thermo.pyx":861
 *             self.Y = diluent_comp
 *             factor = fraction_value / Z
 *             self.Y = factor*Y_mix + (1.0 - factor) * self.Y             # <<<<<<<<<<<<<<
 *         else:
 *             # convert mass based mixture fraction to molar one, Z = kg fuel / kg mixture
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_factor, __pyx_v_Y_mix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyFloat_SubtractCObj(__pyx_float_1_0, __pyx_v_factor, 1.0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, __pyx_t_6) < 0) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "cantera/thermo.pyx":849
 *             raise ValueError("No oxidizer in the fuel/oxidizer mixture")
 * 
 *         if basis == "mass": # for mass basis, it is straight forward             # <<<<<<<<<<<<<<
 *             if fraction_type == "fuel":
 *                 Z = Z_fuel
 */
    goto __pyx_L22;
  }

  /* "cantera/thermo.pyx":864
 *         else:
 *             # convert mass based mixture fraction to molar one, Z = kg fuel / kg mixture
 *             X_mix = self.X             # <<<<<<<<<<<<<<
 *             M_mix = self.mean_molecular_weight
 *             self.X = fuel_comp
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_X_mix = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "cantera/thermo.pyx":865
 *             # convert mass based mixture fraction to molar one, Z = kg fuel / kg mixture
 *             X_mix = self.X
 *             M_mix = self.mean_molecular_weight             # <<<<<<<<<<<<<<
 *             self.X = fuel_comp
 *             M_fuel = self.mean_molecular_weight
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mean_molecular_weight); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 865, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_M_mix = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "cantera/thermo.pyx":866
 *             X_mix = self.X
 *             M_mix = self.mean_molecular_weight
 *             self.X = fuel_comp             # <<<<<<<<<<<<<<
 *             M_fuel = self.mean_molecular_weight
 *             Z_fuel_mole = Z_fuel * M_mix / M_fuel # mol fuel / mol mixture
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, ((PyObject *)__pyx_v_fuel_comp)) < 0) __PYX_ERR(0, 866, __pyx_L1_error)

    /* "cantera/thermo.pyx":867
 *             M_mix = self.mean_molecular_weight
 *             self.X = fuel_comp
 *             M_fuel = self.mean_molecular_weight             # <<<<<<<<<<<<<<
 *             Z_fuel_mole = Z_fuel * M_mix / M_fuel # mol fuel / mol mixture
 *             if fraction_type == "fuel":
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mean_molecular_weight); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 867, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_M_fuel = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "cantera/thermo.pyx":868
 *             self.X = fuel_comp
 *             M_fuel = self.mean_molecular_weight
 *             Z_fuel_mole = Z_fuel * M_mix / M_fuel # mol fuel / mol mixture             # <<<<<<<<<<<<<<
 *             if fraction_type == "fuel":
 *                 Z = Z_fuel_mole
 */
    __pyx_t_6 = PyNumber_Multiply(__pyx_v_Z_fuel, __pyx_v_M_mix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_v_M_fuel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_Z_fuel_mole = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cantera/thermo.pyx":869
 *             M_fuel = self.mean_molecular_weight
 *             Z_fuel_mole = Z_fuel * M_mix / M_fuel # mol fuel / mol mixture
 *             if fraction_type == "fuel":             # <<<<<<<<<<<<<<
 *                 Z = Z_fuel_mole
 *             else: # oxidizer
 */
    __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_v_fraction_type, __pyx_n_u_fuel, Py_EQ)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 869, __pyx_L1_error)
    if (__pyx_t_14) {

      /* "cantera/thermo.pyx":870
 *             Z_fuel_mole = Z_fuel * M_mix / M_fuel # mol fuel / mol mixture
 *             if fraction_type == "fuel":
 *                 Z = Z_fuel_mole             # <<<<<<<<<<<<<<
 *             else: # oxidizer
 *                 Z = 1.0 - Z_fuel_mole
 */
      __Pyx_INCREF(__pyx_v_Z_fuel_mole);
      __pyx_v_Z = __pyx_v_Z_fuel_mole;

      /* "cantera/thermo.pyx":869
 *             M_fuel = self.mean_molecular_weight
 *             Z_fuel_mole = Z_fuel * M_mix / M_fuel # mol fuel / mol mixture
 *             if fraction_type == "fuel":             # <<<<<<<<<<<<<<
 *                 Z = Z_fuel_mole
 *             else: # oxidizer
 */
      goto __pyx_L25;
    }

    /* "cantera/thermo.pyx":872
 *                 Z = Z_fuel_mole
 *             else: # oxidizer
 *                 Z = 1.0 - Z_fuel_mole             # <<<<<<<<<<<<<<
 *             if fraction_value > Z:
 *                 raise ValueError(f"The {fraction_type} fuel or oxidizer fraction after "
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyFloat_SubtractCObj(__pyx_float_1_0, __pyx_v_Z_fuel_mole, 1.0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 872, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_Z = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __pyx_L25:;

    /* "cantera/thermo.pyx":873
 *             else: # oxidizer
 *                 Z = 1.0 - Z_fuel_mole
 *             if fraction_value > Z:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"The {fraction_type} fuel or oxidizer fraction after "
 *                                  "dilution cannot be higher than {fraction_type} "
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_fraction_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_3, __pyx_v_Z, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_t_14)) {

      /* "cantera/thermo.pyx":874
 *                 Z = 1.0 - Z_fuel_mole
 *             if fraction_value > Z:
 *                 raise ValueError(f"The {fraction_type} fuel or oxidizer fraction after "             # <<<<<<<<<<<<<<
 *                                  "dilution cannot be higher than {fraction_type} "
 *                                  "fraction in the original mixture.")
 */
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 874, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_18 = 0;
      __pyx_t_20 = 127;
      __Pyx_INCREF(__pyx_kp_u_The);
      __pyx_t_18 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_The);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_The);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_fraction_type, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_20 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_20) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_20;
      __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_fuel_or_oxidizer_fraction_after);
      __pyx_t_18 += 113;
      __Pyx_GIVEREF(__pyx_kp_u_fuel_or_oxidizer_fraction_after);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_fuel_or_oxidizer_fraction_after);
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_6, 3, __pyx_t_18, __pyx_t_20); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 874, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 874, __pyx_L1_error)

      /* "cantera/thermo.pyx":873
 *             else: # oxidizer
 *                 Z = 1.0 - Z_fuel_mole
 *             if fraction_value > Z:             # <<<<<<<<<<<<<<
 *                 raise ValueError(f"The {fraction_type} fuel or oxidizer fraction after "
 *                                  "dilution cannot be higher than {fraction_type} "
 */
    }

    /* "cantera/thermo.pyx":877
 *                                  "dilution cannot be higher than {fraction_type} "
 *                                  "fraction in the original mixture.")
 *             self.X = diluent_comp             # <<<<<<<<<<<<<<
 *             factor = fraction_value / Z
 *             self.X = factor * X_mix + (1.0 - factor) * self.X
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, ((PyObject *)__pyx_v_diluent_comp)) < 0) __PYX_ERR(0, 877, __pyx_L1_error)

    /* "cantera/thermo.pyx":878
 *                                  "fraction in the original mixture.")
 *             self.X = diluent_comp
 *             factor = fraction_value / Z             # <<<<<<<<<<<<<<
 *             self.X = factor * X_mix + (1.0 - factor) * self.X
 *         self.TP = T, P
 */
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_fraction_value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_v_Z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_factor = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cantera/thermo.pyx":879
 *             self.X = diluent_comp
 *             factor = fraction_value / Z
 *             self.X = factor * X_mix + (1.0 - factor) * self.X             # <<<<<<<<<<<<<<
 *         self.TP = T, P
 * 
 */
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_factor, __pyx_v_X_mix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyFloat_SubtractCObj(__pyx_float_1_0, __pyx_v_factor, 1.0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, __pyx_t_2) < 0) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L22:;

  /* "cantera/thermo.pyx":880
 *             factor = fraction_value / Z
 *             self.X = factor * X_mix + (1.0 - factor) * self.X
 *         self.TP = T, P             # <<<<<<<<<<<<<<
 * 
 *     def set_mixture_fraction(self, mixture_fraction, fuel, oxidizer, basis='mole'):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_T);
  __Pyx_GIVEREF(__pyx_v_T);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_T);
  __Pyx_INCREF(__pyx_v_P);
  __Pyx_GIVEREF(__pyx_v_P);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_P);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_TP, __pyx_t_2) < 0) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":735
 *         return arr
 * 
 *     def set_equivalence_ratio(self, phi, fuel, oxidizer, basis="mole", *, diluent=None,             # <<<<<<<<<<<<<<
 *                               fraction=None):
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_diluent_comp.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fuel_comp.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ox_comp.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.set_equivalence_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_diluent_comp.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fuel_comp.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ox_comp.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fuel_comp);
  __Pyx_XDECREF((PyObject *)__pyx_v_ox_comp);
  __Pyx_XDECREF(__pyx_v_fraction_dict);
  __Pyx_XDECREF(__pyx_v_fraction_type);
  __Pyx_XDECREF((PyObject *)__pyx_v_diluent_comp);
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_XDECREF(__pyx_v_X_fuelox);
  __Pyx_XDECREF(__pyx_v_Y_fuelox);
  __Pyx_XDECREF(__pyx_v_Z_fuel);
  __Pyx_XDECREF(__pyx_v_Z);
  __Pyx_XDECREF(__pyx_v_Y_mix);
  __Pyx_XDECREF(__pyx_v_factor);
  __Pyx_XDECREF(__pyx_v_X_mix);
  __Pyx_XDECREF(__pyx_v_M_mix);
  __Pyx_XDECREF(__pyx_v_M_fuel);
  __Pyx_XDECREF(__pyx_v_Z_fuel_mole);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":882
 *         self.TP = T, P
 * 
 *     def set_mixture_fraction(self, mixture_fraction, fuel, oxidizer, basis='mole'):             # <<<<<<<<<<<<<<
 *         """
 *         Set the composition to a mixture of ``fuel`` and ``oxidizer`` at the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_35set_mixture_fraction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_34set_mixture_fraction, "\n        Set the composition to a mixture of ``fuel`` and ``oxidizer`` at the\n        specified mixture fraction ``mixture_fraction`` (kg fuel / kg mixture), holding\n        temperature and pressure constant. Considers the oxidation of C to CO2,\n        H to H2O and S to SO2. Other elements are assumed not to participate in\n        oxidation (that is, N ends up as N2). The ``basis`` determines the composition\n        of fuel and oxidizer: ``basis='mole'`` (default) means mole fractions,\n        ``basis='mass'`` means mass fractions. For more information, see `Python\n        example\n        <https://cantera.org/examples/python/thermo/equivalenceRatio.py.html>`_ ::\n\n            >>> gas.set_mixture_fraction(0.5, 'CH4', 'O2:1.0, N2:3.76')\n            >>> gas.mass_fraction_dict()\n            {'CH4': 0.5, 'N2': 0.38350014242997776, 'O2': 0.11649985757002226}\n            >>> gas.set_mixture_fraction(0.5, {'NH3':0.8, 'CO':0.2}, 'O2:1.0')\n            >>> gas.mass_fraction_dict()\n            {'CO': 0.145682068778996, 'NH3': 0.354317931221004, 'O2': 0.5}\n\n        :param mixture_fraction:\n            Mixture fraction (kg fuel / kg mixture)\n        :param fuel:\n            Fuel species name or mole/mass fractions as string, array, or dict.\n        :param oxidizer:\n            Oxidizer species name or mole/mass fractions as a string, array, or\n            dict.\n        :param basis: determines if ``fuel`` and ``oxidizer`` are given in mole\n            fractions (``basis='mole'``) or mass fractions (``basis='mass'``)\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_35set_mixture_fraction = {"set_mixture_fraction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_35set_mixture_fraction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_34set_mixture_fraction};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_35set_mixture_fraction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_mixture_fraction = 0;
  PyObject *__pyx_v_fuel = 0;
  PyObject *__pyx_v_oxidizer = 0;
  PyObject *__pyx_v_basis = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mixture_fraction (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mixture_fraction,&__pyx_n_s_fuel,&__pyx_n_s_oxidizer,&__pyx_n_s_basis,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_u_mole);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mixture_fraction)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fuel)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_mixture_fraction", 0, 3, 4, 1); __PYX_ERR(0, 882, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_oxidizer)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_mixture_fraction", 0, 3, 4, 2); __PYX_ERR(0, 882, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_basis);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 882, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_mixture_fraction") < 0)) __PYX_ERR(0, 882, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_mixture_fraction = values[0];
    __pyx_v_fuel = values[1];
    __pyx_v_oxidizer = values[2];
    __pyx_v_basis = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_mixture_fraction", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 882, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.set_mixture_fraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_34set_mixture_fraction(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_mixture_fraction, __pyx_v_fuel, __pyx_v_oxidizer, __pyx_v_basis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_34set_mixture_fraction(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_mixture_fraction, PyObject *__pyx_v_fuel, PyObject *__pyx_v_oxidizer, PyObject *__pyx_v_basis) {
  PyArrayObject *__pyx_v_f = 0;
  PyArrayObject *__pyx_v_o = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_f;
  __Pyx_Buffer __pyx_pybuffer_f;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_o;
  __Pyx_Buffer __pyx_pybuffer_o;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Cantera::ThermoBasis __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_mixture_fraction", 0);
  __pyx_pybuffer_f.pybuffer.buf = NULL;
  __pyx_pybuffer_f.refcount = 0;
  __pyx_pybuffernd_f.data = NULL;
  __pyx_pybuffernd_f.rcbuffer = &__pyx_pybuffer_f;
  __pyx_pybuffer_o.pybuffer.buf = NULL;
  __pyx_pybuffer_o.refcount = 0;
  __pyx_pybuffernd_o.data = NULL;
  __pyx_pybuffernd_o.rcbuffer = &__pyx_pybuffer_o;

  /* "cantera/thermo.pyx":912
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] f = \
 *                 np.ascontiguousarray(self.__composition_to_array(fuel, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] o = \
 *                 np.ascontiguousarray(self.__composition_to_array(oxidizer, basis), dtype=np.double)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ThermoPhase__composition_to_arr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_fuel, __pyx_v_basis};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 912, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_f.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_f = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_f.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 911, __pyx_L1_error)
    } else {__pyx_pybuffernd_f.diminfo[0].strides = __pyx_pybuffernd_f.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_f.diminfo[0].shape = __pyx_pybuffernd_f.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_f = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "cantera/thermo.pyx":914
 *                 np.ascontiguousarray(self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] o = \
 *                 np.ascontiguousarray(self.__composition_to_array(oxidizer, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *         self.thermo.setMixtureFraction(mixture_fraction, &f[0], &o[0], ThermoBasis.mass if basis == 'mass' else ThermoBasis.molar)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ThermoPhase__composition_to_arr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_oxidizer, __pyx_v_basis};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 914, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_o.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_o = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_o.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 913, __pyx_L1_error)
    } else {__pyx_pybuffernd_o.diminfo[0].strides = __pyx_pybuffernd_o.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_o.diminfo[0].shape = __pyx_pybuffernd_o.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_o = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":916
 *                 np.ascontiguousarray(self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 *         self.thermo.setMixtureFraction(mixture_fraction, &f[0], &o[0], ThermoBasis.mass if basis == 'mass' else ThermoBasis.molar)             # <<<<<<<<<<<<<<
 * 
 *     def equivalence_ratio(self, fuel=None, oxidizer=None, basis="mole",
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_mixture_fraction); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 916, __pyx_L1_error)
  __pyx_t_10 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_f.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_f.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 916, __pyx_L1_error)
  }
  __pyx_t_11 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_o.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_o.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 916, __pyx_L1_error)
  }
  __pyx_t_13 = (__Pyx_PyUnicode_Equals(__pyx_v_basis, __pyx_n_u_mass, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 916, __pyx_L1_error)
  if (__pyx_t_13) {
    __pyx_t_12 = Cantera::ThermoBasis::mass;
  } else {
    __pyx_t_12 = Cantera::ThermoBasis::molar;
  }
  try {
    __pyx_v_self->__pyx_base.thermo->setMixtureFraction(__pyx_t_9, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_f.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_f.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_o.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_o.diminfo[0].strides))), __pyx_t_12);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 916, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":882
 *         self.TP = T, P
 * 
 *     def set_mixture_fraction(self, mixture_fraction, fuel, oxidizer, basis='mole'):             # <<<<<<<<<<<<<<
 *         """
 *         Set the composition to a mixture of ``fuel`` and ``oxidizer`` at the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_f.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_o.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.set_mixture_fraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_f.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_o.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_f);
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":918
 *         self.thermo.setMixtureFraction(mixture_fraction, &f[0], &o[0], ThermoBasis.mass if basis == 'mass' else ThermoBasis.molar)
 * 
 *     def equivalence_ratio(self, fuel=None, oxidizer=None, basis="mole",             # <<<<<<<<<<<<<<
 *                           include_species=None):
 *         r"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_37equivalence_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_36equivalence_ratio, "\n        Get the equivalence ratio :math:`\\phi` of the current mixture, which is a\n        conserved quantity. Considers the oxidation of C to CO2, H to H2O\n        and S to SO2. Other elements are assumed not to participate in oxidation\n        (that is, N ends up as N2). If fuel and oxidizer are not specified, the\n        equivalence ratio is computed from the available oxygen and the\n        required oxygen for complete oxidation:\n\n        .. math:: \\phi = \\frac{Z_{\\mathrm{mole},C} + Z_{\\mathrm{mole},S}\n                  + \\frac{1}{4}Z_{\\mathrm{mole},H}} {\\frac{1}{2}Z_{\\mathrm{mole},O}}\n\n        where :math:`Z_{\\mathrm{mole},e}` is the elemental mole fraction of element\n        :math:`e`. If the fuel and oxidizer compositions are specified, :math:`\\phi` is\n        computed from:\n\n        .. math:: \\phi = \\frac{Z}{1-Z}\\frac{1-Z_{\\mathrm{st}}}{Z_{\\mathrm{st}}}\n\n        where :math:`Z` is the Bilger mixture fraction and :math:`Z_{\\mathrm{st}}`\n        the Bilger mixture fraction at stoichiometric conditions.\n        The ``basis`` determines the composition of fuel and oxidizer:\n        ``basis='mole'`` (default) means mole fractions, ``basis='mass'`` means\n        mass fractions. Note that this definition takes all species into account.\n        In case certain species like inert diluents should be ignored, a\n        list of species can be provided with ``include_species``. This means that\n        only these species are considered for the computation of the equivalence\n        ratio. For more information, see `Python example\n        <https://cantera.org/examples/python/thermo/equivalenceRatio.py.html>`_ ::\n\n            >>> gas.set_equivalence_ratio(0.5, fuel='CH3:0.5, CH3OH:.5, N2:0.125', oxidizer='O2:0.21, N2:0.79, NO:0.01')\n            >>> gas.equivalence_ratio(fuel='CH3:0.5, CH3OH:.5, N2:0.125', oxidizer='O2:0.21, N2:0.79, NO:0.01')\n            0.5\n\n        :param fuel:\n            Fuel species name or mole/mass fr""actions as string, array, or dict.\n        :param oxidizer:\n            Oxidizer species name or mole/mass fractions as a string, array, or dict.\n        :param basis:\n            Determines if ``fuel`` and ``oxidizer`` are given in mole fractions\n            (``basis=\"mole\"``) or mass fractions (``basis=\"mass\"``)\n        :param include_species:\n            List of species names (optional). Only these species are considered for the\n            computation of the equivalence ratio. By default, all species are considered\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_37equivalence_ratio = {"equivalence_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_37equivalence_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_36equivalence_ratio};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_37equivalence_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fuel = 0;
  PyObject *__pyx_v_oxidizer = 0;
  PyObject *__pyx_v_basis = 0;
  PyObject *__pyx_v_include_species = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("equivalence_ratio (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fuel,&__pyx_n_s_oxidizer,&__pyx_n_s_basis,&__pyx_n_s_include_species,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_n_u_mole);

    /* "cantera/thermo.pyx":919
 * 
 *     def equivalence_ratio(self, fuel=None, oxidizer=None, basis="mole",
 *                           include_species=None):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the equivalence ratio :math:`\phi` of the current mixture, which is a
 */
    values[3] = ((PyObject *)Py_None);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fuel);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_oxidizer);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_basis);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_include_species);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 918, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "equivalence_ratio") < 0)) __PYX_ERR(0, 918, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fuel = values[0];
    __pyx_v_oxidizer = values[1];
    __pyx_v_basis = values[2];
    __pyx_v_include_species = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("equivalence_ratio", 0, 0, 4, __pyx_nargs); __PYX_ERR(0, 918, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.equivalence_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_36equivalence_ratio(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_fuel, __pyx_v_oxidizer, __pyx_v_basis, __pyx_v_include_species);

  /* "cantera/thermo.pyx":918
 *         self.thermo.setMixtureFraction(mixture_fraction, &f[0], &o[0], ThermoBasis.mass if basis == 'mass' else ThermoBasis.molar)
 * 
 *     def equivalence_ratio(self, fuel=None, oxidizer=None, basis="mole",             # <<<<<<<<<<<<<<
 *                           include_species=None):
 *         r"""
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_36equivalence_ratio(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_fuel, PyObject *__pyx_v_oxidizer, PyObject *__pyx_v_basis, PyObject *__pyx_v_include_species) {
  PyObject *__pyx_v_Y = NULL;
  PyObject *__pyx_v_indices = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_T_orig = NULL;
  PyObject *__pyx_v_P_orig = NULL;
  PyObject *__pyx_v_Y_orig = NULL;
  double __pyx_v_phi;
  PyArrayObject *__pyx_v_f = 0;
  PyArrayObject *__pyx_v_o = 0;
  PyObject *__pyx_9genexpr11__pyx_v_s = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_f;
  __Pyx_Buffer __pyx_pybuffer_f;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_o;
  __Pyx_Buffer __pyx_pybuffer_o;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  double __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyArrayObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Cantera::ThermoBasis __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("equivalence_ratio", 0);
  __pyx_pybuffer_f.pybuffer.buf = NULL;
  __pyx_pybuffer_f.refcount = 0;
  __pyx_pybuffernd_f.data = NULL;
  __pyx_pybuffernd_f.rcbuffer = &__pyx_pybuffer_f;
  __pyx_pybuffer_o.pybuffer.buf = NULL;
  __pyx_pybuffer_o.refcount = 0;
  __pyx_pybuffernd_o.data = NULL;
  __pyx_pybuffernd_o.rcbuffer = &__pyx_pybuffer_o;

  /* "cantera/thermo.pyx":963
 *             computation of the equivalence ratio. By default, all species are considered
 *         """
 *         if include_species is not None:             # <<<<<<<<<<<<<<
 *             # remove unwanted species temporarily
 *             Y = np.zeros(self.n_species)
 */
  __pyx_t_1 = (__pyx_v_include_species != Py_None);
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":965
 *         if include_species is not None:
 *             # remove unwanted species temporarily
 *             Y = np.zeros(self.n_species)             # <<<<<<<<<<<<<<
 *             indices = [self.species_index(s) for s in include_species]
 *             for k in indices:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_v_Y = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cantera/thermo.pyx":966
 *             # remove unwanted species temporarily
 *             Y = np.zeros(self.n_species)
 *             indices = [self.species_index(s) for s in include_species]             # <<<<<<<<<<<<<<
 *             for k in indices:
 *                 Y[k] = self.Y[k]
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 966, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_v_include_species)) || PyTuple_CheckExact(__pyx_v_include_species)) {
        __pyx_t_4 = __pyx_v_include_species; __Pyx_INCREF(__pyx_t_4); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_include_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 966, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 966, __pyx_L6_error)
      }
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 966, __pyx_L6_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 966, __pyx_L6_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_8(__pyx_t_4);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 966, __pyx_L6_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr11__pyx_v_s, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_6 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->species_index(__pyx_v_self, __pyx_9genexpr11__pyx_v_s, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 966, __pyx_L6_error)
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 966, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_s); __pyx_9genexpr11__pyx_v_s = 0;
      goto __pyx_L10_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_s); __pyx_9genexpr11__pyx_v_s = 0;
      goto __pyx_L1_error;
      __pyx_L10_exit_scope:;
    } /* exit inner scope */
    __pyx_v_indices = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cantera/thermo.pyx":967
 *             Y = np.zeros(self.n_species)
 *             indices = [self.species_index(s) for s in include_species]
 *             for k in indices:             # <<<<<<<<<<<<<<
 *                 Y[k] = self.Y[k]
 *             T_orig, P_orig, Y_orig = self.T, self.P, self.Y
 */
    __pyx_t_2 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
    for (;;) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 967, __pyx_L1_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 967, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "cantera/thermo.pyx":968
 *             indices = [self.species_index(s) for s in include_species]
 *             for k in indices:
 *                 Y[k] = self.Y[k]             # <<<<<<<<<<<<<<
 *             T_orig, P_orig, Y_orig = self.T, self.P, self.Y
 *             self.Y = Y
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_k); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely((PyObject_SetItem(__pyx_v_Y, __pyx_v_k, __pyx_t_3) < 0))) __PYX_ERR(0, 968, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "cantera/thermo.pyx":967
 *             Y = np.zeros(self.n_species)
 *             indices = [self.species_index(s) for s in include_species]
 *             for k in indices:             # <<<<<<<<<<<<<<
 *                 Y[k] = self.Y[k]
 *             T_orig, P_orig, Y_orig = self.T, self.P, self.Y
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cantera/thermo.pyx":969
 *             for k in indices:
 *                 Y[k] = self.Y[k]
 *             T_orig, P_orig, Y_orig = self.T, self.P, self.Y             # <<<<<<<<<<<<<<
 *             self.Y = Y
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_T_orig = __pyx_t_2;
    __pyx_t_2 = 0;
    __pyx_v_P_orig = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_Y_orig = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "cantera/thermo.pyx":970
 *                 Y[k] = self.Y[k]
 *             T_orig, P_orig, Y_orig = self.T, self.P, self.Y
 *             self.Y = Y             # <<<<<<<<<<<<<<
 * 
 *         if fuel is None and oxidizer is None:
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, __pyx_v_Y) < 0) __PYX_ERR(0, 970, __pyx_L1_error)

    /* "cantera/thermo.pyx":963
 *             computation of the equivalence ratio. By default, all species are considered
 *         """
 *         if include_species is not None:             # <<<<<<<<<<<<<<
 *             # remove unwanted species temporarily
 *             Y = np.zeros(self.n_species)
 */
  }

  /* "cantera/thermo.pyx":972
 *             self.Y = Y
 * 
 *         if fuel is None and oxidizer is None:             # <<<<<<<<<<<<<<
 *             phi = self.thermo.equivalenceRatio()
 *             if include_species is not None:
 */
  __pyx_t_9 = (__pyx_v_fuel == Py_None);
  if (__pyx_t_9) {
  } else {
    __pyx_t_1 = __pyx_t_9;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_9 = (__pyx_v_oxidizer == Py_None);
  __pyx_t_1 = __pyx_t_9;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":973
 * 
 *         if fuel is None and oxidizer is None:
 *             phi = self.thermo.equivalenceRatio()             # <<<<<<<<<<<<<<
 *             if include_species is not None:
 *                 self.TPY = T_orig, P_orig, Y_orig
 */
    try {
      __pyx_t_10 = __pyx_v_self->__pyx_base.thermo->equivalenceRatio();
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 973, __pyx_L1_error)
    }
    __pyx_v_phi = __pyx_t_10;

    /* "cantera/thermo.pyx":974
 *         if fuel is None and oxidizer is None:
 *             phi = self.thermo.equivalenceRatio()
 *             if include_species is not None:             # <<<<<<<<<<<<<<
 *                 self.TPY = T_orig, P_orig, Y_orig
 *             return phi
 */
    __pyx_t_1 = (__pyx_v_include_species != Py_None);
    if (__pyx_t_1) {

      /* "cantera/thermo.pyx":975
 *             phi = self.thermo.equivalenceRatio()
 *             if include_species is not None:
 *                 self.TPY = T_orig, P_orig, Y_orig             # <<<<<<<<<<<<<<
 *             return phi
 * 
 */
      if (unlikely(!__pyx_v_T_orig)) { __Pyx_RaiseUnboundLocalError("T_orig"); __PYX_ERR(0, 975, __pyx_L1_error) }
      if (unlikely(!__pyx_v_P_orig)) { __Pyx_RaiseUnboundLocalError("P_orig"); __PYX_ERR(0, 975, __pyx_L1_error) }
      if (unlikely(!__pyx_v_Y_orig)) { __Pyx_RaiseUnboundLocalError("Y_orig"); __PYX_ERR(0, 975, __pyx_L1_error) }
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_v_T_orig);
      __Pyx_GIVEREF(__pyx_v_T_orig);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_T_orig);
      __Pyx_INCREF(__pyx_v_P_orig);
      __Pyx_GIVEREF(__pyx_v_P_orig);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_P_orig);
      __Pyx_INCREF(__pyx_v_Y_orig);
      __Pyx_GIVEREF(__pyx_v_Y_orig);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_Y_orig);
      if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_TPY, __pyx_t_4) < 0) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "cantera/thermo.pyx":974
 *         if fuel is None and oxidizer is None:
 *             phi = self.thermo.equivalenceRatio()
 *             if include_species is not None:             # <<<<<<<<<<<<<<
 *                 self.TPY = T_orig, P_orig, Y_orig
 *             return phi
 */
    }

    /* "cantera/thermo.pyx":976
 *             if include_species is not None:
 *                 self.TPY = T_orig, P_orig, Y_orig
 *             return phi             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] f = np.ascontiguousarray(
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_phi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "cantera/thermo.pyx":972
 *             self.Y = Y
 * 
 *         if fuel is None and oxidizer is None:             # <<<<<<<<<<<<<<
 *             phi = self.thermo.equivalenceRatio()
 *             if include_species is not None:
 */
  }

  /* "cantera/thermo.pyx":978
 *             return phi
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] f = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] o = np.ascontiguousarray(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":979
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] f = np.ascontiguousarray(
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] o = np.ascontiguousarray(
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ThermoPhase__composition_to_arr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_fuel, __pyx_v_basis};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 979, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "cantera/thermo.pyx":978
 *             return phi
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] f = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] o = np.ascontiguousarray(
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":979
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] f = np.ascontiguousarray(
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] o = np.ascontiguousarray(
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "cantera/thermo.pyx":978
 *             return phi
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] f = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] o = np.ascontiguousarray(
 */
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 978, __pyx_L1_error)
  __pyx_t_12 = ((PyArrayObject *)__pyx_t_11);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_f.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_f = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_f.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 978, __pyx_L1_error)
    } else {__pyx_pybuffernd_f.diminfo[0].strides = __pyx_pybuffernd_f.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_f.diminfo[0].shape = __pyx_pybuffernd_f.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_12 = 0;
  __pyx_v_f = ((PyArrayObject *)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "cantera/thermo.pyx":980
 *         cdef np.ndarray[np.double_t, ndim=1] f = np.ascontiguousarray(
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] o = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "cantera/thermo.pyx":981
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] o = np.ascontiguousarray(
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *         phi = self.thermo.equivalenceRatio(&f[0], &o[0],
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ThermoPhase__composition_to_arr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_oxidizer, __pyx_v_basis};
    __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "cantera/thermo.pyx":980
 *         cdef np.ndarray[np.double_t, ndim=1] f = np.ascontiguousarray(
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] o = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_11);
  __pyx_t_11 = 0;

  /* "cantera/thermo.pyx":981
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] o = np.ascontiguousarray(
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *         phi = self.thermo.equivalenceRatio(&f[0], &o[0],
 */
  __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_double); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cantera/thermo.pyx":980
 *         cdef np.ndarray[np.double_t, ndim=1] f = np.ascontiguousarray(
 *                 self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] o = np.ascontiguousarray(             # <<<<<<<<<<<<<<
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 980, __pyx_L1_error)
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_o.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_o = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_o.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 980, __pyx_L1_error)
    } else {__pyx_pybuffernd_o.diminfo[0].strides = __pyx_pybuffernd_o.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_o.diminfo[0].shape = __pyx_pybuffernd_o.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_13 = 0;
  __pyx_v_o = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "cantera/thermo.pyx":983
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 *         phi = self.thermo.equivalenceRatio(&f[0], &o[0],             # <<<<<<<<<<<<<<
 *                                            ThermoBasis.mass if basis=="mass"
 *                                                             else ThermoBasis.molar)
 */
  __pyx_t_14 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_f.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_f.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 983, __pyx_L1_error)
  }
  __pyx_t_15 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_o.diminfo[0].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_o.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 983, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":984
 * 
 *         phi = self.thermo.equivalenceRatio(&f[0], &o[0],
 *                                            ThermoBasis.mass if basis=="mass"             # <<<<<<<<<<<<<<
 *                                                             else ThermoBasis.molar)
 *         if include_species is not None:
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_basis, __pyx_n_u_mass, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 984, __pyx_L1_error)
  if (__pyx_t_1) {
    __pyx_t_16 = Cantera::ThermoBasis::mass;
  } else {

    /* "cantera/thermo.pyx":985
 *         phi = self.thermo.equivalenceRatio(&f[0], &o[0],
 *                                            ThermoBasis.mass if basis=="mass"
 *                                                             else ThermoBasis.molar)             # <<<<<<<<<<<<<<
 *         if include_species is not None:
 *             self.TPY = T_orig, P_orig, Y_orig
 */
    __pyx_t_16 = Cantera::ThermoBasis::molar;
  }

  /* "cantera/thermo.pyx":983
 *                 self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 *         phi = self.thermo.equivalenceRatio(&f[0], &o[0],             # <<<<<<<<<<<<<<
 *                                            ThermoBasis.mass if basis=="mass"
 *                                                             else ThermoBasis.molar)
 */
  try {
    __pyx_t_10 = __pyx_v_self->__pyx_base.thermo->equivalenceRatio((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_f.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_f.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_o.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_o.diminfo[0].strides))), __pyx_t_16);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 983, __pyx_L1_error)
  }
  __pyx_v_phi = __pyx_t_10;

  /* "cantera/thermo.pyx":986
 *                                            ThermoBasis.mass if basis=="mass"
 *                                                             else ThermoBasis.molar)
 *         if include_species is not None:             # <<<<<<<<<<<<<<
 *             self.TPY = T_orig, P_orig, Y_orig
 *         return phi
 */
  __pyx_t_1 = (__pyx_v_include_species != Py_None);
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":987
 *                                                             else ThermoBasis.molar)
 *         if include_species is not None:
 *             self.TPY = T_orig, P_orig, Y_orig             # <<<<<<<<<<<<<<
 *         return phi
 * 
 */
    if (unlikely(!__pyx_v_T_orig)) { __Pyx_RaiseUnboundLocalError("T_orig"); __PYX_ERR(0, 987, __pyx_L1_error) }
    if (unlikely(!__pyx_v_P_orig)) { __Pyx_RaiseUnboundLocalError("P_orig"); __PYX_ERR(0, 987, __pyx_L1_error) }
    if (unlikely(!__pyx_v_Y_orig)) { __Pyx_RaiseUnboundLocalError("Y_orig"); __PYX_ERR(0, 987, __pyx_L1_error) }
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_T_orig);
    __Pyx_GIVEREF(__pyx_v_T_orig);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_T_orig);
    __Pyx_INCREF(__pyx_v_P_orig);
    __Pyx_GIVEREF(__pyx_v_P_orig);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_P_orig);
    __Pyx_INCREF(__pyx_v_Y_orig);
    __Pyx_GIVEREF(__pyx_v_Y_orig);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_Y_orig);
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_TPY, __pyx_t_5) < 0) __PYX_ERR(0, 987, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "cantera/thermo.pyx":986
 *                                            ThermoBasis.mass if basis=="mass"
 *                                                             else ThermoBasis.molar)
 *         if include_species is not None:             # <<<<<<<<<<<<<<
 *             self.TPY = T_orig, P_orig, Y_orig
 *         return phi
 */
  }

  /* "cantera/thermo.pyx":988
 *         if include_species is not None:
 *             self.TPY = T_orig, P_orig, Y_orig
 *         return phi             # <<<<<<<<<<<<<<
 * 
 *     def mixture_fraction(self, fuel, oxidizer, basis='mole', element="Bilger"):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_phi); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":918
 *         self.thermo.setMixtureFraction(mixture_fraction, &f[0], &o[0], ThermoBasis.mass if basis == 'mass' else ThermoBasis.molar)
 * 
 *     def equivalence_ratio(self, fuel=None, oxidizer=None, basis="mole",             # <<<<<<<<<<<<<<
 *                           include_species=None):
 *         r"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_f.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_o.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.equivalence_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_f.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_o.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_Y);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_T_orig);
  __Pyx_XDECREF(__pyx_v_P_orig);
  __Pyx_XDECREF(__pyx_v_Y_orig);
  __Pyx_XDECREF((PyObject *)__pyx_v_f);
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":990
 *         return phi
 * 
 *     def mixture_fraction(self, fuel, oxidizer, basis='mole', element="Bilger"):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the mixture fraction of the current mixture in
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_39mixture_fraction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_38mixture_fraction, "\n        Get the mixture fraction of the current mixture in\n        (kg fuel / (kg oxidizer + kg fuel)). This is a quantity that is conserved after\n        oxidation. Considers the oxidation of C to CO2, H to H2O and S to SO2. Other\n        elements are assumed not to participate in oxidation (that is, N ends up as N2).\n        The ``basis`` determines the composition of fuel and oxidizer:\n        ``basis=\"mole\"`` (default) means mole fractions, ``basis=\"mass\"`` means mass\n        fractions. The mixture fraction can be computed from a single element (for\n        example, carbon with ``element=\"C\"``)\n\n        .. math:: Z_m = \\frac{Z_{\\mathrm{mass},m}-Z_{\\mathrm{mass},m,\\mathrm{ox}}}\n            {Z_{\\mathrm{mass},\\mathrm{fuel}}-Z_{\\mathrm{mass},m,\\mathrm{ox}}}\n\n        where :math:`Z_{\\mathrm{mass},m}` is the elemental mass fraction of\n        element :math:`m` in the mixture, and :math:`Z_{\\mathrm{mass},m,\\mathrm{ox}}`\n        and :math:`Z_{\\mathrm{mass},\\mathrm{fuel}}` are the elemental mass fractions of\n        the oxidizer and fuel, or from the Bilger mixture fraction\n        (``element=\"Bilger\"``), which considers the elements C, S, H and O\n        (R. W. Bilger, \"Turbulent jet diffusion flames,\" Prog. Energy Combust. Sci.,\n        109-131 (1979)). The Bilger mixture fraction is computed by default:\n\n        .. math:: Z_m = Z_{\\mathrm{Bilger}} = \\frac{\\beta-\\beta_{\\mathrm{ox}}}\n            {\\beta_{\\mathrm{fuel}}-\\beta_{\\mathrm{ox}}}\n\n        with\n\n        .. math:: \\beta = 2\\frac{Z_C}{M_C}+2\\frac{Z_S}{M_S}+\\frac{1}{2}\\frac{Z_H}{M_H}\n            - \\frac{Z_O}{M_O}\n\n        and :math:`M_m` the atomic weight of element :math:`m`.\n        For more information, see `Python example\n        <https://cantera.org/examples/python/thermo/equivalenceRatio.py.html>`_.::\n\n            >>> gas.set_mixture_fraction(0.5, 'CH3:0.5, CH3OH:0.5, N2:0.125', 'O2:0.21, N2:0.79, NO:0.01')\n            >>> gas.mixture_fr""action('CH3:0.5, CH3OH:0.5, N2:0.125', 'O2:0.21, N2:0.79, NO:.01')\n            0.5\n\n        :param fuel:\n            Fuel species name or mole/mass fractions as string, array, or dict.\n        :param oxidizer:\n            Oxidizer species name or mole/mass fractions as a string, array, or\n            dict.\n        :param basis:\n            Determines if ``fuel`` and ``oxidizer`` are given in mole\n            fractions (``basis='mole'``) or mass fractions (``basis='mass'``)\n        :param element:\n            Computes the mixture fraction from the specified elemental\n            mass fraction (given by element name or element index) or as\n            the Bilger mixture fraction (default)\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_39mixture_fraction = {"mixture_fraction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_39mixture_fraction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_38mixture_fraction};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_39mixture_fraction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fuel = 0;
  PyObject *__pyx_v_oxidizer = 0;
  PyObject *__pyx_v_basis = 0;
  PyObject *__pyx_v_element = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mixture_fraction (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fuel,&__pyx_n_s_oxidizer,&__pyx_n_s_basis,&__pyx_n_s_element,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)__pyx_n_u_mole);
    values[3] = ((PyObject *)__pyx_n_u_Bilger);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fuel)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 990, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_oxidizer)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 990, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("mixture_fraction", 0, 2, 4, 1); __PYX_ERR(0, 990, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_basis);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 990, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_element);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 990, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "mixture_fraction") < 0)) __PYX_ERR(0, 990, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fuel = values[0];
    __pyx_v_oxidizer = values[1];
    __pyx_v_basis = values[2];
    __pyx_v_element = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mixture_fraction", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 990, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.mixture_fraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_38mixture_fraction(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_fuel, __pyx_v_oxidizer, __pyx_v_basis, __pyx_v_element);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_38mixture_fraction(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_fuel, PyObject *__pyx_v_oxidizer, PyObject *__pyx_v_basis, PyObject *__pyx_v_element) {
  PyArrayObject *__pyx_v_f = 0;
  PyArrayObject *__pyx_v_o = 0;
  PyObject *__pyx_v_e_name = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_f;
  __Pyx_Buffer __pyx_pybuffer_f;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_o;
  __Pyx_Buffer __pyx_pybuffer_o;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Cantera::ThermoBasis __pyx_t_13;
  std::string __pyx_t_14;
  double __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mixture_fraction", 0);
  __pyx_pybuffer_f.pybuffer.buf = NULL;
  __pyx_pybuffer_f.refcount = 0;
  __pyx_pybuffernd_f.data = NULL;
  __pyx_pybuffernd_f.rcbuffer = &__pyx_pybuffer_f;
  __pyx_pybuffer_o.pybuffer.buf = NULL;
  __pyx_pybuffer_o.refcount = 0;
  __pyx_pybuffernd_o.data = NULL;
  __pyx_pybuffernd_o.rcbuffer = &__pyx_pybuffer_o;

  /* "cantera/thermo.pyx":1042
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] f = \
 *                 np.ascontiguousarray(self.__composition_to_array(fuel, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] o = \
 *                 np.ascontiguousarray(self.__composition_to_array(oxidizer, basis), dtype=np.double)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ThermoPhase__composition_to_arr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_fuel, __pyx_v_basis};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1042, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_f.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_f = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_f.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1041, __pyx_L1_error)
    } else {__pyx_pybuffernd_f.diminfo[0].strides = __pyx_pybuffernd_f.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_f.diminfo[0].shape = __pyx_pybuffernd_f.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_f = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "cantera/thermo.pyx":1044
 *                 np.ascontiguousarray(self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] o = \
 *                 np.ascontiguousarray(self.__composition_to_array(oxidizer, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(element, (str, bytes)):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ThermoPhase__composition_to_arr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_oxidizer, __pyx_v_basis};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1044, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_o.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_o = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_o.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1043, __pyx_L1_error)
    } else {__pyx_pybuffernd_o.diminfo[0].strides = __pyx_pybuffernd_o.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_o.diminfo[0].shape = __pyx_pybuffernd_o.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_o = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1046
 *                 np.ascontiguousarray(self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 *         if isinstance(element, (str, bytes)):             # <<<<<<<<<<<<<<
 *             e_name = element
 *         else:
 */
  __pyx_t_10 = PyUnicode_Check(__pyx_v_element); 
  if (!__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_10 = PyBytes_Check(__pyx_v_element); 
  __pyx_t_9 = __pyx_t_10;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_9) {

    /* "cantera/thermo.pyx":1047
 * 
 *         if isinstance(element, (str, bytes)):
 *             e_name = element             # <<<<<<<<<<<<<<
 *         else:
 *             e_name = self.element_name(self.element_index(element))
 */
    __Pyx_INCREF(__pyx_v_element);
    __pyx_v_e_name = __pyx_v_element;

    /* "cantera/thermo.pyx":1046
 *                 np.ascontiguousarray(self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 *         if isinstance(element, (str, bytes)):             # <<<<<<<<<<<<<<
 *             e_name = element
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":1049
 *             e_name = element
 *         else:
 *             e_name = self.element_name(self.element_index(element))             # <<<<<<<<<<<<<<
 * 
 *         return self.thermo.mixtureFraction(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar, stringify(e_name))
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_element_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->element_index(__pyx_v_self, __pyx_v_element, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1049, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_3};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_v_e_name = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":1051
 *             e_name = self.element_name(self.element_index(element))
 * 
 *         return self.thermo.mixtureFraction(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar, stringify(e_name))             # <<<<<<<<<<<<<<
 * 
 *     def stoich_air_fuel_ratio(self, fuel, oxidizer, basis='mole'):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_11 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_f.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_f.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1051, __pyx_L1_error)
  }
  __pyx_t_12 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_o.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_o.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1051, __pyx_L1_error)
  }
  __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_v_basis, __pyx_n_u_mass, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1051, __pyx_L1_error)
  if (__pyx_t_9) {
    __pyx_t_13 = Cantera::ThermoBasis::mass;
  } else {
    __pyx_t_13 = Cantera::ThermoBasis::molar;
  }
  __pyx_t_14 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_e_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1051, __pyx_L1_error)
  try {
    __pyx_t_15 = __pyx_v_self->__pyx_base.thermo->mixtureFraction((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_f.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_f.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_o.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_o.diminfo[0].strides))), __pyx_t_13, __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_14));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1051, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":990
 *         return phi
 * 
 *     def mixture_fraction(self, fuel, oxidizer, basis='mole', element="Bilger"):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the mixture fraction of the current mixture in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_f.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_o.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.mixture_fraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_f.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_o.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_f);
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_e_name);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1053
 *         return self.thermo.mixtureFraction(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar, stringify(e_name))
 * 
 *     def stoich_air_fuel_ratio(self, fuel, oxidizer, basis='mole'):             # <<<<<<<<<<<<<<
 *         """
 *         Get the stoichiometric air to fuel ratio (kg oxidizer / kg fuel). Considers the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_41stoich_air_fuel_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_40stoich_air_fuel_ratio, "\n        Get the stoichiometric air to fuel ratio (kg oxidizer / kg fuel). Considers the\n        oxidation of C to CO2, H to H2O and S to SO2. Other elements are assumed\n        not to participate in oxidation (that is, N ends up as N2).\n        The ``basis`` determines the composition of fuel and oxidizer: ``basis='mole'`` (default)\n        means mole fractions, ``basis='mass'`` means mass fractions::\n\n            >>> gas.set_mixture_fraction(0.5, 'CH3:0.5, CH3OH:.5, N2:0.125', 'O2:0.21, N2:0.79, NO:0.01')\n            >>> gas.stoich_air_fuel_ratio('CH3:0.5, CH3OH:.5, N2:0.125', 'O2:0.21, N2:0.79, NO:0.01')\n            8.148040722239438\n\n        :param fuel:\n            Fuel species name or mole/mass fractions as string, array, or dict.\n        :param oxidizer:\n            Oxidizer species name or mole/mass fractions as a string, array, or\n            dict.\n        :param basis:\n            Determines if ``fuel`` and ``oxidizer`` are given in mole\n            fractions (``basis='mole'``) or mass fractions (``basis='mass'``)\n\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_41stoich_air_fuel_ratio = {"stoich_air_fuel_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_41stoich_air_fuel_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_40stoich_air_fuel_ratio};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_41stoich_air_fuel_ratio(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fuel = 0;
  PyObject *__pyx_v_oxidizer = 0;
  PyObject *__pyx_v_basis = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stoich_air_fuel_ratio (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fuel,&__pyx_n_s_oxidizer,&__pyx_n_s_basis,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_n_u_mole);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fuel)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1053, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_oxidizer)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1053, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("stoich_air_fuel_ratio", 0, 2, 3, 1); __PYX_ERR(0, 1053, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_basis);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1053, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "stoich_air_fuel_ratio") < 0)) __PYX_ERR(0, 1053, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fuel = values[0];
    __pyx_v_oxidizer = values[1];
    __pyx_v_basis = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stoich_air_fuel_ratio", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 1053, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.stoich_air_fuel_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_40stoich_air_fuel_ratio(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_fuel, __pyx_v_oxidizer, __pyx_v_basis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_40stoich_air_fuel_ratio(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_fuel, PyObject *__pyx_v_oxidizer, PyObject *__pyx_v_basis) {
  PyArrayObject *__pyx_v_f = 0;
  PyArrayObject *__pyx_v_o = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_f;
  __Pyx_Buffer __pyx_pybuffer_f;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_o;
  __Pyx_Buffer __pyx_pybuffer_o;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Cantera::ThermoBasis __pyx_t_11;
  int __pyx_t_12;
  double __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stoich_air_fuel_ratio", 0);
  __pyx_pybuffer_f.pybuffer.buf = NULL;
  __pyx_pybuffer_f.refcount = 0;
  __pyx_pybuffernd_f.data = NULL;
  __pyx_pybuffernd_f.rcbuffer = &__pyx_pybuffer_f;
  __pyx_pybuffer_o.pybuffer.buf = NULL;
  __pyx_pybuffer_o.refcount = 0;
  __pyx_pybuffernd_o.data = NULL;
  __pyx_pybuffernd_o.rcbuffer = &__pyx_pybuffer_o;

  /* "cantera/thermo.pyx":1076
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] f = \
 *                 np.ascontiguousarray(self.__composition_to_array(fuel, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] o = \
 *                 np.ascontiguousarray(self.__composition_to_array(oxidizer, basis), dtype=np.double)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ThermoPhase__composition_to_arr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_fuel, __pyx_v_basis};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1076, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_f.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_f = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_f.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1075, __pyx_L1_error)
    } else {__pyx_pybuffernd_f.diminfo[0].strides = __pyx_pybuffernd_f.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_f.diminfo[0].shape = __pyx_pybuffernd_f.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_f = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "cantera/thermo.pyx":1078
 *                 np.ascontiguousarray(self.__composition_to_array(fuel, basis), dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] o = \
 *                 np.ascontiguousarray(self.__composition_to_array(oxidizer, basis), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *         return self.thermo.stoichAirFuelRatio(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ThermoPhase__composition_to_arr); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_oxidizer, __pyx_v_basis};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1078, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_o.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_o = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_o.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1077, __pyx_L1_error)
    } else {__pyx_pybuffernd_o.diminfo[0].strides = __pyx_pybuffernd_o.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_o.diminfo[0].shape = __pyx_pybuffernd_o.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_o = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1080
 *                 np.ascontiguousarray(self.__composition_to_array(oxidizer, basis), dtype=np.double)
 * 
 *         return self.thermo.stoichAirFuelRatio(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar)             # <<<<<<<<<<<<<<
 * 
 *     def elemental_mass_fraction(self, m):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_9 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_f.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_f.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1080, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_o.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_o.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1080, __pyx_L1_error)
  }
  __pyx_t_12 = (__Pyx_PyUnicode_Equals(__pyx_v_basis, __pyx_n_u_mass, Py_EQ)); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 1080, __pyx_L1_error)
  if (__pyx_t_12) {
    __pyx_t_11 = Cantera::ThermoBasis::mass;
  } else {
    __pyx_t_11 = Cantera::ThermoBasis::molar;
  }
  try {
    __pyx_t_13 = __pyx_v_self->__pyx_base.thermo->stoichAirFuelRatio((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_f.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_f.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_o.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_o.diminfo[0].strides))), __pyx_t_11);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1080, __pyx_L1_error)
  }
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1053
 *         return self.thermo.mixtureFraction(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar, stringify(e_name))
 * 
 *     def stoich_air_fuel_ratio(self, fuel, oxidizer, basis='mole'):             # <<<<<<<<<<<<<<
 *         """
 *         Get the stoichiometric air to fuel ratio (kg oxidizer / kg fuel). Considers the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_f.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_o.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.stoich_air_fuel_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_f.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_o.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_f);
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1082
 *         return self.thermo.stoichAirFuelRatio(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar)
 * 
 *     def elemental_mass_fraction(self, m):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the elemental mass fraction :math:`Z_{\mathrm{mass},m}` of element
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_43elemental_mass_fraction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_42elemental_mass_fraction, "\n        Get the elemental mass fraction :math:`Z_{\\mathrm{mass},m}` of element\n        :math:`m` as defined by:\n\n        .. math:: Z_{\\mathrm{mass},m} = \\sum_k \\frac{a_{m,k} M_m}{M_k} Y_k\n\n        with :math:`a_{m,k}` being the number of atoms of element :math:`m` in\n        species :math:`k`, :math:`M_m` the atomic weight of element :math:`m`,\n        :math:`M_k` the molecular weight of species :math:`k`, and :math:`Y_k`\n        the mass fraction of species :math:`k`::\n\n            >>> phase.elemental_mass_fraction('H')\n            1.0\n\n        :param m:\n            Base element, may be specified by name or by index.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_43elemental_mass_fraction = {"elemental_mass_fraction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_43elemental_mass_fraction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_42elemental_mass_fraction};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_43elemental_mass_fraction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_m = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("elemental_mass_fraction (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_m)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1082, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "elemental_mass_fraction") < 0)) __PYX_ERR(0, 1082, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_m = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("elemental_mass_fraction", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1082, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.elemental_mass_fraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_42elemental_mass_fraction(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_m);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_42elemental_mass_fraction(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("elemental_mass_fraction", 0);

  /* "cantera/thermo.pyx":1100
 *             Base element, may be specified by name or by index.
 *         """
 *         return self.thermo.elementalMassFraction(self.element_index(m))             # <<<<<<<<<<<<<<
 * 
 *     def elemental_mole_fraction(self, m):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->element_index(__pyx_v_self, __pyx_v_m, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.thermo->elementalMassFraction(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1100, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1082
 *         return self.thermo.stoichAirFuelRatio(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar)
 * 
 *     def elemental_mass_fraction(self, m):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the elemental mass fraction :math:`Z_{\mathrm{mass},m}` of element
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.elemental_mass_fraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1102
 *         return self.thermo.elementalMassFraction(self.element_index(m))
 * 
 *     def elemental_mole_fraction(self, m):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the elemental mole fraction :math:`Z_{\mathrm{mole},m}` of element
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_45elemental_mole_fraction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_44elemental_mole_fraction, "\n        Get the elemental mole fraction :math:`Z_{\\mathrm{mole},m}` of element\n        :math:`m` (the number of atoms of element m divided by the total number\n        of atoms) as defined by:\n\n        .. math:: Z_{\\mathrm{mole},m} = \\frac{\\sum_k a_{m,k} X_k}\n                                             {\\sum_k \\sum_j a_{j,k} X_k}\n\n        with :math:`a_{m,k}` being the number of atoms of element :math:`m` in\n        species :math:`k`, :math:`\\sum_j` being a sum over all elements, and\n        :math:`X_k` being the mole fraction of species :math:`k`::\n\n            >>> phase.elemental_mole_fraction('H')\n            1.0\n\n        :param m:\n            Base element, may be specified by name or by index.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_45elemental_mole_fraction = {"elemental_mole_fraction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_45elemental_mole_fraction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_44elemental_mole_fraction};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_45elemental_mole_fraction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_m = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("elemental_mole_fraction (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_m)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1102, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "elemental_mole_fraction") < 0)) __PYX_ERR(0, 1102, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_m = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("elemental_mole_fraction", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1102, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.elemental_mole_fraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_44elemental_mole_fraction(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_m);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_44elemental_mole_fraction(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("elemental_mole_fraction", 0);

  /* "cantera/thermo.pyx":1121
 *             Base element, may be specified by name or by index.
 *         """
 *         return self.thermo.elementalMoleFraction(self.element_index(m))             # <<<<<<<<<<<<<<
 * 
 *     def set_unnormalized_mass_fractions(self, Y):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->element_index(__pyx_v_self, __pyx_v_m, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1121, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.thermo->elementalMoleFraction(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1121, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1102
 *         return self.thermo.elementalMassFraction(self.element_index(m))
 * 
 *     def elemental_mole_fraction(self, m):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the elemental mole fraction :math:`Z_{\mathrm{mole},m}` of element
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.elemental_mole_fraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1123
 *         return self.thermo.elementalMoleFraction(self.element_index(m))
 * 
 *     def set_unnormalized_mass_fractions(self, Y):             # <<<<<<<<<<<<<<
 *         """
 *         Set the mass fractions without normalizing to force ``sum(Y) == 1.0``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_47set_unnormalized_mass_fractions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_46set_unnormalized_mass_fractions, "\n        Set the mass fractions without normalizing to force ``sum(Y) == 1.0``.\n        Useful primarily when calculating derivatives with respect to ``Y[k]`` by\n        finite difference.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_47set_unnormalized_mass_fractions = {"set_unnormalized_mass_fractions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_47set_unnormalized_mass_fractions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_46set_unnormalized_mass_fractions};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_47set_unnormalized_mass_fractions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_Y = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_unnormalized_mass_fractions (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Y,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Y)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1123, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_unnormalized_mass_fractions") < 0)) __PYX_ERR(0, 1123, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_Y = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_unnormalized_mass_fractions", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1123, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.set_unnormalized_mass_fractions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_46set_unnormalized_mass_fractions(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_Y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_46set_unnormalized_mass_fractions(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_Y) {
  PyArrayObject *__pyx_v_data = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_unnormalized_mass_fractions", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/thermo.pyx":1130
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] data
 *         if len(Y) == self.n_species:             # <<<<<<<<<<<<<<
 *             data = np.ascontiguousarray(Y, dtype=np.double)
 *         else:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_Y); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1130, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(__pyx_t_5)) {

    /* "cantera/thermo.pyx":1131
 *         cdef np.ndarray[np.double_t, ndim=1] data
 *         if len(Y) == self.n_species:
 *             data = np.ascontiguousarray(Y, dtype=np.double)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Array has incorrect length."
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_Y);
    __Pyx_GIVEREF(__pyx_v_Y);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_Y);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_double); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1131, __pyx_L1_error)
    __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_v_data, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
        __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
      }
      __pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1131, __pyx_L1_error)
    }
    __pyx_t_8 = 0;
    __pyx_v_data = ((PyArrayObject *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "cantera/thermo.pyx":1130
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] data
 *         if len(Y) == self.n_species:             # <<<<<<<<<<<<<<
 *             data = np.ascontiguousarray(Y, dtype=np.double)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":1133
 *             data = np.ascontiguousarray(Y, dtype=np.double)
 *         else:
 *             raise ValueError("Array has incorrect length."             # <<<<<<<<<<<<<<
 *                  " Got {}, expected {}.".format(len(Y), self.n_species))
 *         self.thermo.setMassFractions_NoNorm(&data[0])
 */
  /*else*/ {

    /* "cantera/thermo.pyx":1134
 *         else:
 *             raise ValueError("Array has incorrect length."
 *                  " Got {}, expected {}.".format(len(Y), self.n_species))             # <<<<<<<<<<<<<<
 *         self.thermo.setMassFractions_NoNorm(&data[0])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Array_has_incorrect_length_Got_e, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Length(__pyx_v_Y); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1134, __pyx_L1_error)
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1134, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "cantera/thermo.pyx":1133
 *             data = np.ascontiguousarray(Y, dtype=np.double)
 *         else:
 *             raise ValueError("Array has incorrect length."             # <<<<<<<<<<<<<<
 *                  " Got {}, expected {}.".format(len(Y), self.n_species))
 *         self.thermo.setMassFractions_NoNorm(&data[0])
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1133, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":1135
 *             raise ValueError("Array has incorrect length."
 *                  " Got {}, expected {}.".format(len(Y), self.n_species))
 *         self.thermo.setMassFractions_NoNorm(&data[0])             # <<<<<<<<<<<<<<
 * 
 *     def set_unnormalized_mole_fractions(self, X):
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1135, __pyx_L1_error)
  }
  try {
    __pyx_v_self->__pyx_base.thermo->setMassFractions_NoNorm((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_data.diminfo[0].strides))));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1135, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1123
 *         return self.thermo.elementalMoleFraction(self.element_index(m))
 * 
 *     def set_unnormalized_mass_fractions(self, Y):             # <<<<<<<<<<<<<<
 *         """
 *         Set the mass fractions without normalizing to force ``sum(Y) == 1.0``.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.set_unnormalized_mass_fractions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1137
 *         self.thermo.setMassFractions_NoNorm(&data[0])
 * 
 *     def set_unnormalized_mole_fractions(self, X):             # <<<<<<<<<<<<<<
 *         """
 *         Set the mole fractions without normalizing to force ``sum(X) == 1.0``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_49set_unnormalized_mole_fractions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_48set_unnormalized_mole_fractions, "\n        Set the mole fractions without normalizing to force ``sum(X) == 1.0``.\n        Useful primarily when calculating derivatives with respect to ``X[k]``\n        by finite difference.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_49set_unnormalized_mole_fractions = {"set_unnormalized_mole_fractions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_49set_unnormalized_mole_fractions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_48set_unnormalized_mole_fractions};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_49set_unnormalized_mole_fractions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_X = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_unnormalized_mole_fractions (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_X)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1137, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_unnormalized_mole_fractions") < 0)) __PYX_ERR(0, 1137, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_X = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_unnormalized_mole_fractions", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1137, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.set_unnormalized_mole_fractions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_48set_unnormalized_mole_fractions(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_X);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_48set_unnormalized_mole_fractions(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_X) {
  PyArrayObject *__pyx_v_data = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_unnormalized_mole_fractions", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/thermo.pyx":1144
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] data
 *         if len(X) == self.n_species:             # <<<<<<<<<<<<<<
 *             data = np.ascontiguousarray(X, dtype=np.double)
 *         else:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_X); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1144, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(__pyx_t_5)) {

    /* "cantera/thermo.pyx":1145
 *         cdef np.ndarray[np.double_t, ndim=1] data
 *         if len(X) == self.n_species:
 *             data = np.ascontiguousarray(X, dtype=np.double)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Array has incorrect length."
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_X);
    __Pyx_GIVEREF(__pyx_v_X);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_X);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_double); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1145, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1145, __pyx_L1_error)
    __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_v_data, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
        __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
      }
      __pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1145, __pyx_L1_error)
    }
    __pyx_t_8 = 0;
    __pyx_v_data = ((PyArrayObject *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "cantera/thermo.pyx":1144
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] data
 *         if len(X) == self.n_species:             # <<<<<<<<<<<<<<
 *             data = np.ascontiguousarray(X, dtype=np.double)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":1147
 *             data = np.ascontiguousarray(X, dtype=np.double)
 *         else:
 *             raise ValueError("Array has incorrect length."             # <<<<<<<<<<<<<<
 *                 " Got {}, expected {}.".format(len(X), self.n_species))
 *         self.thermo.setMoleFractions_NoNorm(&data[0])
 */
  /*else*/ {

    /* "cantera/thermo.pyx":1148
 *         else:
 *             raise ValueError("Array has incorrect length."
 *                 " Got {}, expected {}.".format(len(X), self.n_species))             # <<<<<<<<<<<<<<
 *         self.thermo.setMoleFractions_NoNorm(&data[0])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Array_has_incorrect_length_Got_e, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Length(__pyx_v_X); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1148, __pyx_L1_error)
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "cantera/thermo.pyx":1147
 *             data = np.ascontiguousarray(X, dtype=np.double)
 *         else:
 *             raise ValueError("Array has incorrect length."             # <<<<<<<<<<<<<<
 *                 " Got {}, expected {}.".format(len(X), self.n_species))
 *         self.thermo.setMoleFractions_NoNorm(&data[0])
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1147, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":1149
 *             raise ValueError("Array has incorrect length."
 *                 " Got {}, expected {}.".format(len(X), self.n_species))
 *         self.thermo.setMoleFractions_NoNorm(&data[0])             # <<<<<<<<<<<<<<
 * 
 *     def mass_fraction_dict(self, double threshold=0.0):
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1149, __pyx_L1_error)
  }
  try {
    __pyx_v_self->__pyx_base.thermo->setMoleFractions_NoNorm((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_data.diminfo[0].strides))));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1149, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1137
 *         self.thermo.setMassFractions_NoNorm(&data[0])
 * 
 *     def set_unnormalized_mole_fractions(self, X):             # <<<<<<<<<<<<<<
 *         """
 *         Set the mole fractions without normalizing to force ``sum(X) == 1.0``.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.set_unnormalized_mole_fractions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1151
 *         self.thermo.setMoleFractions_NoNorm(&data[0])
 * 
 *     def mass_fraction_dict(self, double threshold=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         Return a dictionary giving the mass fraction for each species by name where the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_51mass_fraction_dict(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_50mass_fraction_dict, "\n        Return a dictionary giving the mass fraction for each species by name where the\n        mass fraction is greater than ``threshold``.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_51mass_fraction_dict = {"mass_fraction_dict", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_51mass_fraction_dict, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_50mass_fraction_dict};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_51mass_fraction_dict(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_threshold;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mass_fraction_dict (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_threshold,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_threshold);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1151, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "mass_fraction_dict") < 0)) __PYX_ERR(0, 1151, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_threshold = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_threshold == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1151, __pyx_L3_error)
    } else {
      __pyx_v_threshold = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mass_fraction_dict", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1151, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.mass_fraction_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_50mass_fraction_dict(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_50mass_fraction_dict(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, double __pyx_v_threshold) {
  __pyx_t_7cantera_5ctcxx_Composition __pyx_v_Y;
  std::pair<std::string,double>  __pyx_9genexpr12__pyx_v_item;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::map<std::string,double> ::iterator __pyx_t_2;
  std::pair<std::string,double>  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mass_fraction_dict", 0);

  /* "cantera/thermo.pyx":1157
 *         """
 *         cdef pair[string,double] item
 *         Y = self.thermo.getMassFractionsByName(threshold)             # <<<<<<<<<<<<<<
 *         return {pystr(item.first):item.second for item in Y}
 * 
 */
  __pyx_v_Y = __pyx_v_self->__pyx_base.thermo->getMassFractionsByName(__pyx_v_threshold);

  /* "cantera/thermo.pyx":1158
 *         cdef pair[string,double] item
 *         Y = self.thermo.getMassFractionsByName(threshold)
 *         return {pystr(item.first):item.second for item in Y}             # <<<<<<<<<<<<<<
 * 
 *     def mole_fraction_dict(self, double threshold=0.0):
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_v_Y.begin();
    for (;;) {
      if (!(__pyx_t_2 != __pyx_v_Y.end())) break;
      __pyx_t_3 = *__pyx_t_2;
      ++__pyx_t_2;
      __pyx_9genexpr12__pyx_v_item = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);
      __pyx_t_4 = __pyx_f_7cantera_6_utils_pystr(__pyx_9genexpr12__pyx_v_item.first); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_9genexpr12__pyx_v_item.second); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1158, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1158, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1151
 *         self.thermo.setMoleFractions_NoNorm(&data[0])
 * 
 *     def mass_fraction_dict(self, double threshold=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         Return a dictionary giving the mass fraction for each species by name where the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.mass_fraction_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1160
 *         return {pystr(item.first):item.second for item in Y}
 * 
 *     def mole_fraction_dict(self, double threshold=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         Return a dictionary giving the mole fraction for each species by name where the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_53mole_fraction_dict(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_52mole_fraction_dict, "\n        Return a dictionary giving the mole fraction for each species by name where the\n        mole fraction is greater than ``threshold``.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_53mole_fraction_dict = {"mole_fraction_dict", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_53mole_fraction_dict, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_52mole_fraction_dict};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_53mole_fraction_dict(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_threshold;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mole_fraction_dict (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_threshold,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_threshold);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1160, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "mole_fraction_dict") < 0)) __PYX_ERR(0, 1160, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_threshold = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_threshold == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1160, __pyx_L3_error)
    } else {
      __pyx_v_threshold = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mole_fraction_dict", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1160, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.mole_fraction_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_52mole_fraction_dict(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_threshold);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_52mole_fraction_dict(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, double __pyx_v_threshold) {
  __pyx_t_7cantera_5ctcxx_Composition __pyx_v_X;
  std::pair<std::string,double>  __pyx_9genexpr13__pyx_v_item;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::map<std::string,double> ::iterator __pyx_t_2;
  std::pair<std::string,double>  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mole_fraction_dict", 0);

  /* "cantera/thermo.pyx":1166
 *         """
 *         cdef pair[string,double] item
 *         X = self.thermo.getMoleFractionsByName(threshold)             # <<<<<<<<<<<<<<
 *         return {pystr(item.first):item.second for item in X}
 * 
 */
  __pyx_v_X = __pyx_v_self->__pyx_base.thermo->getMoleFractionsByName(__pyx_v_threshold);

  /* "cantera/thermo.pyx":1167
 *         cdef pair[string,double] item
 *         X = self.thermo.getMoleFractionsByName(threshold)
 *         return {pystr(item.first):item.second for item in X}             # <<<<<<<<<<<<<<
 * 
 *     ######## Read-only thermodynamic properties ########
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_v_X.begin();
    for (;;) {
      if (!(__pyx_t_2 != __pyx_v_X.end())) break;
      __pyx_t_3 = *__pyx_t_2;
      ++__pyx_t_2;
      __pyx_9genexpr13__pyx_v_item = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);
      __pyx_t_4 = __pyx_f_7cantera_6_utils_pystr(__pyx_9genexpr13__pyx_v_item.first); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyFloat_FromDouble(__pyx_9genexpr13__pyx_v_item.second); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1167, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1160
 *         return {pystr(item.first):item.second for item in Y}
 * 
 *     def mole_fraction_dict(self, double threshold=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         Return a dictionary giving the mole fraction for each species by name where the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.mole_fraction_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1173
 *     property P:
 *         """Pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.pressure()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1P_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1P_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_1P___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1P___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1174
 *         """Pressure [Pa]."""
 *         def __get__(self):
 *             return self.thermo.pressure()             # <<<<<<<<<<<<<<
 * 
 *     property T:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->pressure();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1174, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1173
 *     property P:
 *         """Pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.pressure()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.P.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1178
 *     property T:
 *         """Temperature [K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.temperature()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1T_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_1T___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1T___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1179
 *         """Temperature [K]."""
 *         def __get__(self):
 *             return self.thermo.temperature()             # <<<<<<<<<<<<<<
 * 
 *     property density:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->temperature();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1179, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1178
 *     property T:
 *         """Temperature [K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.temperature()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1183
 *     property density:
 *         """Density [kg/m^3 or kmol/m^3] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.density() / self._mass_factor()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7density_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7density_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_7density___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7density___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1184
 *         """Density [kg/m^3 or kmol/m^3] depending on `basis`."""
 *         def __get__(self):
 *             return self.thermo.density() / self._mass_factor()             # <<<<<<<<<<<<<<
 * 
 *     property density_mass:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->density();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1184, __pyx_L1_error)
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1184, __pyx_L1_error)
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1184, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 / __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1183
 *     property density:
 *         """Density [kg/m^3 or kmol/m^3] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.density() / self._mass_factor()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.density.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1188
 *     property density_mass:
 *         """(Mass) density [kg/m^3]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.density()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12density_mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12density_mass_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_12density_mass___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12density_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1189
 *         """(Mass) density [kg/m^3]."""
 *         def __get__(self):
 *             return self.thermo.density()             # <<<<<<<<<<<<<<
 * 
 *     property density_mole:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->density();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1189, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1188
 *     property density_mass:
 *         """(Mass) density [kg/m^3]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.density()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.density_mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1193
 *     property density_mole:
 *         """Molar density [kmol/m^3]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.molarDensity()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12density_mole_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12density_mole_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_12density_mole___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12density_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1194
 *         """Molar density [kmol/m^3]."""
 *         def __get__(self):
 *             return self.thermo.molarDensity()             # <<<<<<<<<<<<<<
 * 
 *     property v:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->molarDensity();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1194, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1193
 *     property density_mole:
 *         """Molar density [kmol/m^3]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.molarDensity()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.density_mole.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1198
 *     property v:
 *         """Specific volume [m^3/kg or m^3/kmol] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._mass_factor() / self.thermo.density()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1v_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1v_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_1v___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1v___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1199
 *         """Specific volume [m^3/kg or m^3/kmol] depending on `basis`."""
 *         def __get__(self):
 *             return self._mass_factor() / self.thermo.density()             # <<<<<<<<<<<<<<
 * 
 *     property volume_mass:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1199, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->__pyx_base.thermo->density();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1199, __pyx_L1_error)
  }
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1199, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 / __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1198
 *     property v:
 *         """Specific volume [m^3/kg or m^3/kmol] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._mass_factor() / self.thermo.density()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.v.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1203
 *     property volume_mass:
 *         """Specific volume [m^3/kg]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return 1.0 / self.thermo.density()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_11volume_mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_11volume_mass_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_11volume_mass___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_11volume_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1204
 *         """Specific volume [m^3/kg]."""
 *         def __get__(self):
 *             return 1.0 / self.thermo.density()             # <<<<<<<<<<<<<<
 * 
 *     property volume_mole:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->density();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1204, __pyx_L1_error)
  }
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1204, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble((1.0 / __pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1203
 *     property volume_mass:
 *         """Specific volume [m^3/kg]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return 1.0 / self.thermo.density()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.volume_mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1208
 *     property volume_mole:
 *         """Molar volume [m^3/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.molarVolume()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_11volume_mole_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_11volume_mole_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_11volume_mole___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_11volume_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1209
 *         """Molar volume [m^3/kmol]."""
 *         def __get__(self):
 *             return self.thermo.molarVolume()             # <<<<<<<<<<<<<<
 * 
 *     property u:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->molarVolume();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1209, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1208
 *     property volume_mole:
 *         """Molar volume [m^3/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.molarVolume()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.volume_mole.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1213
 *     property u:
 *         """Internal energy in [J/kg or J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.intEnergy_mole() * self._mole_factor()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1u_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1u_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_1u___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1u___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1214
 *         """Internal energy in [J/kg or J/kmol]."""
 *         def __get__(self):
 *             return self.thermo.intEnergy_mole() * self._mole_factor()             # <<<<<<<<<<<<<<
 * 
 *     property int_energy_mole:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->intEnergy_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1214, __pyx_L1_error)
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mole_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1214, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 * __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1213
 *     property u:
 *         """Internal energy in [J/kg or J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.intEnergy_mole() * self._mole_factor()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.u.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1218
 *     property int_energy_mole:
 *         """Molar internal energy [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.intEnergy_mole()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15int_energy_mole_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15int_energy_mole_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_15int_energy_mole___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_15int_energy_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1219
 *         """Molar internal energy [J/kmol]."""
 *         def __get__(self):
 *             return self.thermo.intEnergy_mole()             # <<<<<<<<<<<<<<
 * 
 *     property int_energy_mass:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->intEnergy_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1219, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1218
 *     property int_energy_mole:
 *         """Molar internal energy [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.intEnergy_mole()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.int_energy_mole.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1223
 *     property int_energy_mass:
 *         """Specific internal energy [J/kg]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.intEnergy_mass()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15int_energy_mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_15int_energy_mass_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_15int_energy_mass___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_15int_energy_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1224
 *         """Specific internal energy [J/kg]."""
 *         def __get__(self):
 *             return self.thermo.intEnergy_mass()             # <<<<<<<<<<<<<<
 * 
 *     property h:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->intEnergy_mass();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1224, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1223
 *     property int_energy_mass:
 *         """Specific internal energy [J/kg]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.intEnergy_mass()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.int_energy_mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1228
 *     property h:
 *         """Enthalpy [J/kg or J/kmol] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.enthalpy_mole() * self._mole_factor()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1h_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1h_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_1h___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1h___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1229
 *         """Enthalpy [J/kg or J/kmol] depending on `basis`."""
 *         def __get__(self):
 *             return self.thermo.enthalpy_mole() * self._mole_factor()             # <<<<<<<<<<<<<<
 * 
 *     property enthalpy_mole:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->enthalpy_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1229, __pyx_L1_error)
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mole_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1229, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 * __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1228
 *     property h:
 *         """Enthalpy [J/kg or J/kmol] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.enthalpy_mole() * self._mole_factor()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.h.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1233
 *     property enthalpy_mole:
 *         """Molar enthalpy [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.enthalpy_mole()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13enthalpy_mole_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13enthalpy_mole_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_13enthalpy_mole___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13enthalpy_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1234
 *         """Molar enthalpy [J/kmol]."""
 *         def __get__(self):
 *             return self.thermo.enthalpy_mole()             # <<<<<<<<<<<<<<
 * 
 *     property enthalpy_mass:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->enthalpy_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1234, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1233
 *     property enthalpy_mole:
 *         """Molar enthalpy [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.enthalpy_mole()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.enthalpy_mole.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1238
 *     property enthalpy_mass:
 *         """Specific enthalpy [J/kg]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.enthalpy_mass()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13enthalpy_mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13enthalpy_mass_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_13enthalpy_mass___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13enthalpy_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1239
 *         """Specific enthalpy [J/kg]."""
 *         def __get__(self):
 *             return self.thermo.enthalpy_mass()             # <<<<<<<<<<<<<<
 * 
 *     property s:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->enthalpy_mass();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1239, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1238
 *     property enthalpy_mass:
 *         """Specific enthalpy [J/kg]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.enthalpy_mass()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.enthalpy_mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1243
 *     property s:
 *         """Entropy [J/kg/K or J/kmol/K] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.entropy_mole() * self._mole_factor()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1s_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1s_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_1s___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1s___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1244
 *         """Entropy [J/kg/K or J/kmol/K] depending on `basis`."""
 *         def __get__(self):
 *             return self.thermo.entropy_mole() * self._mole_factor()             # <<<<<<<<<<<<<<
 * 
 *     property entropy_mole:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->entropy_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1244, __pyx_L1_error)
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mole_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1244, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 * __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1243
 *     property s:
 *         """Entropy [J/kg/K or J/kmol/K] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.entropy_mole() * self._mole_factor()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.s.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1248
 *     property entropy_mole:
 *         """Molar entropy [J/kmol/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.entropy_mole()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12entropy_mole_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12entropy_mole_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_12entropy_mole___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12entropy_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1249
 *         """Molar entropy [J/kmol/K]."""
 *         def __get__(self):
 *             return self.thermo.entropy_mole()             # <<<<<<<<<<<<<<
 * 
 *     property entropy_mass:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->entropy_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1249, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1248
 *     property entropy_mole:
 *         """Molar entropy [J/kmol/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.entropy_mole()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.entropy_mole.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1253
 *     property entropy_mass:
 *         """Specific entropy [J/kg/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.entropy_mass()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12entropy_mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_12entropy_mass_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_12entropy_mass___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_12entropy_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1254
 *         """Specific entropy [J/kg/K]."""
 *         def __get__(self):
 *             return self.thermo.entropy_mass()             # <<<<<<<<<<<<<<
 * 
 *     property g:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->entropy_mass();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1254, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1253
 *     property entropy_mass:
 *         """Specific entropy [J/kg/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.entropy_mass()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.entropy_mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1258
 *     property g:
 *         """Gibbs free energy [J/kg or J/kmol] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.gibbs_mole() * self._mole_factor()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1g_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_1g_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_1g___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_1g___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1259
 *         """Gibbs free energy [J/kg or J/kmol] depending on `basis`."""
 *         def __get__(self):
 *             return self.thermo.gibbs_mole() * self._mole_factor()             # <<<<<<<<<<<<<<
 * 
 *     property gibbs_mole:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->gibbs_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1259, __pyx_L1_error)
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mole_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1259, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 * __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1258
 *     property g:
 *         """Gibbs free energy [J/kg or J/kmol] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.gibbs_mole() * self._mole_factor()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.g.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1263
 *     property gibbs_mole:
 *         """Molar Gibbs free energy [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.gibbs_mole()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_10gibbs_mole_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_10gibbs_mole_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_10gibbs_mole___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10gibbs_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1264
 *         """Molar Gibbs free energy [J/kmol]."""
 *         def __get__(self):
 *             return self.thermo.gibbs_mole()             # <<<<<<<<<<<<<<
 * 
 *     property gibbs_mass:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->gibbs_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1264, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1263
 *     property gibbs_mole:
 *         """Molar Gibbs free energy [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.gibbs_mole()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.gibbs_mole.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1268
 *     property gibbs_mass:
 *         """Specific Gibbs free energy [J/kg]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.gibbs_mass()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_10gibbs_mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_10gibbs_mass_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_10gibbs_mass___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10gibbs_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1269
 *         """Specific Gibbs free energy [J/kg]."""
 *         def __get__(self):
 *             return self.thermo.gibbs_mass()             # <<<<<<<<<<<<<<
 * 
 *     property cv:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->gibbs_mass();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1269, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1268
 *     property gibbs_mass:
 *         """Specific Gibbs free energy [J/kg]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.gibbs_mass()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.gibbs_mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1276
 *         `basis`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cv_mole() * self._mole_factor()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2cv_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2cv_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2cv___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2cv___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1277
 *         """
 *         def __get__(self):
 *             return self.thermo.cv_mole() * self._mole_factor()             # <<<<<<<<<<<<<<
 * 
 *     property cv_mole:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->cv_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1277, __pyx_L1_error)
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mole_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1277, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 * __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1276
 *         `basis`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cv_mole() * self._mole_factor()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.cv.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1281
 *     property cv_mole:
 *         """Molar heat capacity at constant volume [J/kmol/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cv_mole()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7cv_mole_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7cv_mole_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_7cv_mole___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7cv_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1282
 *         """Molar heat capacity at constant volume [J/kmol/K]."""
 *         def __get__(self):
 *             return self.thermo.cv_mole()             # <<<<<<<<<<<<<<
 * 
 *     property cv_mass:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->cv_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1282, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1281
 *     property cv_mole:
 *         """Molar heat capacity at constant volume [J/kmol/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cv_mole()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.cv_mole.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1286
 *     property cv_mass:
 *         """Specific heat capacity at constant volume [J/kg/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cv_mass()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7cv_mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7cv_mass_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_7cv_mass___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7cv_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1287
 *         """Specific heat capacity at constant volume [J/kg/K]."""
 *         def __get__(self):
 *             return self.thermo.cv_mass()             # <<<<<<<<<<<<<<
 * 
 *     property cp:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->cv_mass();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1287, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1286
 *     property cv_mass:
 *         """Specific heat capacity at constant volume [J/kg/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cv_mass()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.cv_mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1294
 *         on `basis`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cp_mole() * self._mole_factor()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2cp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2cp_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2cp___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2cp___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1295
 *         """
 *         def __get__(self):
 *             return self.thermo.cp_mole() * self._mole_factor()             # <<<<<<<<<<<<<<
 * 
 *     property cp_mole:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->cp_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1295, __pyx_L1_error)
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mole_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1295, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 * __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1294
 *         on `basis`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cp_mole() * self._mole_factor()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.cp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1299
 *     property cp_mole:
 *         """Molar heat capacity at constant pressure [J/kmol/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cp_mole()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7cp_mole_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7cp_mole_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_7cp_mole___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7cp_mole___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1300
 *         """Molar heat capacity at constant pressure [J/kmol/K]."""
 *         def __get__(self):
 *             return self.thermo.cp_mole()             # <<<<<<<<<<<<<<
 * 
 *     property cp_mass:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->cp_mole();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1300, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1299
 *     property cp_mole:
 *         """Molar heat capacity at constant pressure [J/kmol/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cp_mole()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.cp_mole.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1304
 *     property cp_mass:
 *         """Specific heat capacity at constant pressure [J/kg/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cp_mass()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7cp_mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_7cp_mass_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_7cp_mass___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_7cp_mass___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1305
 *         """Specific heat capacity at constant pressure [J/kg/K]."""
 *         def __get__(self):
 *             return self.thermo.cp_mass()             # <<<<<<<<<<<<<<
 * 
 *     property critical_temperature:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->cp_mass();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1305, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1304
 *     property cp_mass:
 *         """Specific heat capacity at constant pressure [J/kg/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.cp_mass()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.cp_mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1309
 *     property critical_temperature:
 *         """Critical temperature [K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.critTemperature()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_20critical_temperature_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_20critical_temperature_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_20critical_temperature___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_20critical_temperature___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1310
 *         """Critical temperature [K]."""
 *         def __get__(self):
 *             return self.thermo.critTemperature()             # <<<<<<<<<<<<<<
 * 
 *     property critical_pressure:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->critTemperature();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1310, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1309
 *     property critical_temperature:
 *         """Critical temperature [K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.critTemperature()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.critical_temperature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1314
 *     property critical_pressure:
 *         """Critical pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.critPressure()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_17critical_pressure_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_17critical_pressure_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_17critical_pressure___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_17critical_pressure___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1315
 *         """Critical pressure [Pa]."""
 *         def __get__(self):
 *             return self.thermo.critPressure()             # <<<<<<<<<<<<<<
 * 
 *     property critical_density:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->critPressure();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1315, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1314
 *     property critical_pressure:
 *         """Critical pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.critPressure()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.critical_pressure.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1319
 *     property critical_density:
 *         """Critical density [kg/m^3 or kmol/m^3] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.critDensity() / self._mass_factor()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_16critical_density_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_16critical_density_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_16critical_density___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_16critical_density___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1320
 *         """Critical density [kg/m^3 or kmol/m^3] depending on `basis`."""
 *         def __get__(self):
 *             return self.thermo.critDensity() / self._mass_factor()             # <<<<<<<<<<<<<<
 * 
 *     property P_sat:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->critDensity();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1320, __pyx_L1_error)
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1320, __pyx_L1_error)
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1320, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 / __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1319
 *     property critical_density:
 *         """Critical density [kg/m^3 or kmol/m^3] depending on `basis`."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.critDensity() / self._mass_factor()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.critical_density.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1324
 *     property P_sat:
 *         """Saturation pressure [Pa] at the current temperature."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.satPressure(self.T)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_5P_sat_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_5P_sat_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_5P_sat___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_5P_sat___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1325
 *         """Saturation pressure [Pa] at the current temperature."""
 *         def __get__(self):
 *             return self.thermo.satPressure(self.T)             # <<<<<<<<<<<<<<
 * 
 *     property T_sat:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = __pyx_v_self->__pyx_base.thermo->satPressure(__pyx_t_2);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1325, __pyx_L1_error)
  }
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1324
 *     property P_sat:
 *         """Saturation pressure [Pa] at the current temperature."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.satPressure(self.T)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.P_sat.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1329
 *     property T_sat:
 *         """Saturation temperature [K] at the current pressure."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.satTemperature(self.P)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_5T_sat_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_5T_sat_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_5T_sat___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_5T_sat___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1330
 *         """Saturation temperature [K] at the current pressure."""
 *         def __get__(self):
 *             return self.thermo.satTemperature(self.P)             # <<<<<<<<<<<<<<
 * 
 *     ######## Methods to get/set the complete thermodynamic state ########
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = __pyx_v_self->__pyx_base.thermo->satTemperature(__pyx_t_2);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1330, __pyx_L1_error)
  }
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1329
 *     property T_sat:
 *         """Saturation temperature [K] at the current pressure."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.satTemperature(self.P)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.T_sat.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1338
 *         Return size of vector defining internal state of the phase.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.stateSize()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_10state_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_10state_size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_10state_size___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10state_size___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1339
 *         """
 *         def __get__(self):
 *             return self.thermo.stateSize()             # <<<<<<<<<<<<<<
 * 
 *     property state:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->__pyx_base.thermo->stateSize()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1338
 *         Return size of vector defining internal state of the phase.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.stateSize()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.state_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1348
 *         array.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] state = np.empty(self.state_size)
 *             self.thermo.saveState(len(state), &state[0])
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_5state_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_5state_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_5state___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_5state___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyArrayObject *__pyx_v_state = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_state;
  __Pyx_Buffer __pyx_pybuffer_state;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyArrayObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_pybuffer_state.pybuffer.buf = NULL;
  __pyx_pybuffer_state.refcount = 0;
  __pyx_pybuffernd_state.data = NULL;
  __pyx_pybuffernd_state.rcbuffer = &__pyx_pybuffer_state;

  /* "cantera/thermo.pyx":1349
 *         """
 *         def __get__(self):
 *             cdef np.ndarray[np.double_t, ndim=1] state = np.empty(self.state_size)             # <<<<<<<<<<<<<<
 *             self.thermo.saveState(len(state), &state[0])
 *             return state
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_state_size); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1349, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_state.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_state = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_state.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1349, __pyx_L1_error)
    } else {__pyx_pybuffernd_state.diminfo[0].strides = __pyx_pybuffernd_state.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_state.diminfo[0].shape = __pyx_pybuffernd_state.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_state = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":1350
 *         def __get__(self):
 *             cdef np.ndarray[np.double_t, ndim=1] state = np.empty(self.state_size)
 *             self.thermo.saveState(len(state), &state[0])             # <<<<<<<<<<<<<<
 *             return state
 * 
 */
  __pyx_t_7 = PyObject_Length(((PyObject *)__pyx_v_state)); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1350, __pyx_L1_error)
  __pyx_t_8 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_pybuffernd_state.diminfo[0].shape;
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_8 >= __pyx_pybuffernd_state.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1350, __pyx_L1_error)
  }
  try {
    __pyx_v_self->__pyx_base.thermo->saveState(__pyx_t_7, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_state.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_state.diminfo[0].strides))));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1350, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1351
 *             cdef np.ndarray[np.double_t, ndim=1] state = np.empty(self.state_size)
 *             self.thermo.saveState(len(state), &state[0])
 *             return state             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, state):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_state);
  __pyx_r = ((PyObject *)__pyx_v_state);
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1348
 *         array.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] state = np.empty(self.state_size)
 *             self.thermo.saveState(len(state), &state[0])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.state.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_state.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_state);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1353
 *             return state
 * 
 *         def __set__(self, state):             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] cstate = np.asarray(state)
 *             self.thermo.restoreState(len(state), &cstate[0])
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_5state_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_state); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_5state_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_state) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_5state_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_5state_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_state) {
  PyArrayObject *__pyx_v_cstate = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_cstate;
  __Pyx_Buffer __pyx_pybuffer_cstate;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyArrayObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_pybuffer_cstate.pybuffer.buf = NULL;
  __pyx_pybuffer_cstate.refcount = 0;
  __pyx_pybuffernd_cstate.data = NULL;
  __pyx_pybuffernd_cstate.rcbuffer = &__pyx_pybuffer_cstate;

  /* "cantera/thermo.pyx":1354
 * 
 *         def __set__(self, state):
 *             cdef np.ndarray[np.double_t, ndim=1] cstate = np.asarray(state)             # <<<<<<<<<<<<<<
 *             self.thermo.restoreState(len(state), &cstate[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_state};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1354, __pyx_L1_error)
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_cstate.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_cstate = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_cstate.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1354, __pyx_L1_error)
    } else {__pyx_pybuffernd_cstate.diminfo[0].strides = __pyx_pybuffernd_cstate.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_cstate.diminfo[0].shape = __pyx_pybuffernd_cstate.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_5 = 0;
  __pyx_v_cstate = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":1355
 *         def __set__(self, state):
 *             cdef np.ndarray[np.double_t, ndim=1] cstate = np.asarray(state)
 *             self.thermo.restoreState(len(state), &cstate[0])             # <<<<<<<<<<<<<<
 * 
 *     property TD:
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_state); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1355, __pyx_L1_error)
  __pyx_t_7 = 0;
  __pyx_t_4 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_cstate.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_cstate.diminfo[0].shape)) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(0, 1355, __pyx_L1_error)
  }
  try {
    __pyx_v_self->__pyx_base.thermo->restoreState(__pyx_t_6, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_cstate.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_cstate.diminfo[0].strides))));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1355, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1353
 *             return state
 * 
 *         def __set__(self, state):             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] cstate = np.asarray(state)
 *             self.thermo.restoreState(len(state), &cstate[0])
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cstate.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.state.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_cstate.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cstate);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1359
 *     property TD:
 *         """Get/Set temperature [K] and density [kg/m^3 or kmol/m^3]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.density
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2TD_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2TD_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2TD___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2TD___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1360
 *         """Get/Set temperature [K] and density [kg/m^3 or kmol/m^3]."""
 *         def __get__(self):
 *             return self.T, self.density             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1359
 *     property TD:
 *         """Get/Set temperature [K] and density [kg/m^3 or kmol/m^3]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.density
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TD.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1361
 *         def __get__(self):
 *             return self.T, self.density
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2TD_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2TD_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2TD_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2TD_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_D = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1362
 *             return self.T, self.density
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             D = values[1] if values[1] is not None else self.density
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1362, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 2);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1362, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1362, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1363
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T             # <<<<<<<<<<<<<<
 *             D = values[1] if values[1] is not None else self.density
 *             self.thermo.setState_TD(T, D * self._mass_factor())
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_T = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1364
 *             assert len(values) == 2, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 *             D = values[1] if values[1] is not None else self.density             # <<<<<<<<<<<<<<
 *             self.thermo.setState_TD(T, D * self._mass_factor())
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_D = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1365
 *             T = values[0] if values[0] is not None else self.T
 *             D = values[1] if values[1] is not None else self.density
 *             self.thermo.setState_TD(T, D * self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property TDX:
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_T); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1365, __pyx_L1_error)
  __pyx_t_6 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1365, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_D, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  try {
    __pyx_v_self->__pyx_base.thermo->setState_TD(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1365, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1361
 *         def __get__(self):
 *             return self.T, self.density
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TD.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1372
 *         fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.density, self.X
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3TDX_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3TDX_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3TDX___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3TDX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1373
 *         """
 *         def __get__(self):
 *             return self.T, self.density, self.X             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1372
 *         fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.density, self.X
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TDX.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1374
 *         def __get__(self):
 *             return self.T, self.density, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3TDX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3TDX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3TDX_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3TDX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_D = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1375
 *             return self.T, self.density, self.X
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             D = values[1] if values[1] is not None else self.density
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1375, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1375, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1375, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1376
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T             # <<<<<<<<<<<<<<
 *             D = values[1] if values[1] is not None else self.density
 *             self.X = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_T = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1377
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 *             D = values[1] if values[1] is not None else self.density             # <<<<<<<<<<<<<<
 *             self.X = values[2]
 *             self.thermo.setState_TD(T, D * self._mass_factor())
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_D = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1378
 *             T = values[0] if values[0] is not None else self.T
 *             D = values[1] if values[1] is not None else self.density
 *             self.X = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_TD(T, D * self._mass_factor())
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, __pyx_t_3) < 0) __PYX_ERR(0, 1378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1379
 *             D = values[1] if values[1] is not None else self.density
 *             self.X = values[2]
 *             self.thermo.setState_TD(T, D * self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property TDY:
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_T); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1379, __pyx_L1_error)
  __pyx_t_6 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1379, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_D, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  try {
    __pyx_v_self->__pyx_base.thermo->setState_TD(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1379, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1374
 *         def __get__(self):
 *             return self.T, self.density, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TDX.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1386
 *         fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.density, self.Y
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3TDY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3TDY_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3TDY___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3TDY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1387
 *         """
 *         def __get__(self):
 *             return self.T, self.density, self.Y             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1386
 *         fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.density, self.Y
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TDY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1388
 *         def __get__(self):
 *             return self.T, self.density, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3TDY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3TDY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3TDY_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3TDY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_D = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1389
 *             return self.T, self.density, self.Y
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             D = values[1] if values[1] is not None else self.density
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1389, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1389, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1389, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1390
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T             # <<<<<<<<<<<<<<
 *             D = values[1] if values[1] is not None else self.density
 *             self.Y = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_T = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1391
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 *             D = values[1] if values[1] is not None else self.density             # <<<<<<<<<<<<<<
 *             self.Y = values[2]
 *             self.thermo.setState_TD(T, D * self._mass_factor())
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_D = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1392
 *             T = values[0] if values[0] is not None else self.T
 *             D = values[1] if values[1] is not None else self.density
 *             self.Y = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_TD(T, D * self._mass_factor())
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, __pyx_t_3) < 0) __PYX_ERR(0, 1392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1393
 *             D = values[1] if values[1] is not None else self.density
 *             self.Y = values[2]
 *             self.thermo.setState_TD(T, D * self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property TP:
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_T); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1393, __pyx_L1_error)
  __pyx_t_6 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1393, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_D, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  try {
    __pyx_v_self->__pyx_base.thermo->setState_TD(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1393, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1388
 *         def __get__(self):
 *             return self.T, self.density, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TDY.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1397
 *     property TP:
 *         """Get/Set temperature [K] and pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.P
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2TP_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2TP_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2TP___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2TP___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1398
 *         """Get/Set temperature [K] and pressure [Pa]."""
 *         def __get__(self):
 *             return self.T, self.P             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1397
 *     property TP:
 *         """Get/Set temperature [K] and pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.P
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TP.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1399
 *         def __get__(self):
 *             return self.T, self.P
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2TP_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2TP_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2TP_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2TP_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1400
 *             return self.T, self.P
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1400, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 2);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1400, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1400, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1401
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.thermo.setState_TP(T, P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_T = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1402
 *             assert len(values) == 2, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.thermo.setState_TP(T, P)
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1403
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P
 *             self.thermo.setState_TP(T, P)             # <<<<<<<<<<<<<<
 * 
 *     property TPX:
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_T); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1403, __pyx_L1_error)
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1403, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_TP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1403, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1399
 *         def __get__(self):
 *             return self.T, self.P
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TP.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1407
 *     property TPX:
 *         """Get/Set temperature [K], pressure [Pa], and mole fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.P, self.X
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3TPX_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3TPX_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3TPX___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3TPX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1408
 *         """Get/Set temperature [K], pressure [Pa], and mole fractions."""
 *         def __get__(self):
 *             return self.T, self.P, self.X             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1407
 *     property TPX:
 *         """Get/Set temperature [K], pressure [Pa], and mole fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.P, self.X
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TPX.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1409
 *         def __get__(self):
 *             return self.T, self.P, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3TPX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3TPX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3TPX_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3TPX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1410
 *             return self.T, self.P, self.X
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1410, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1410, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1410, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1411
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_T = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1412
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.X = values[2]
 *             self.thermo.setState_TP(T, P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1413
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_TP(T, P)
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, __pyx_t_3) < 0) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1414
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]
 *             self.thermo.setState_TP(T, P)             # <<<<<<<<<<<<<<
 * 
 *     property TPY:
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_T); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L1_error)
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1414, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_TP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1414, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1409
 *         def __get__(self):
 *             return self.T, self.P, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TPX.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1418
 *     property TPY:
 *         """Get/Set temperature [K], pressure [Pa], and mass fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.P, self.Y
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3TPY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3TPY_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3TPY___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3TPY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1419
 *         """Get/Set temperature [K], pressure [Pa], and mass fractions."""
 *         def __get__(self):
 *             return self.T, self.P, self.Y             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1418
 *     property TPY:
 *         """Get/Set temperature [K], pressure [Pa], and mass fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.P, self.Y
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TPY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1420
 *         def __get__(self):
 *             return self.T, self.P, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3TPY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3TPY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3TPY_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3TPY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1421
 *             return self.T, self.P, self.Y
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1421, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1421, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1421, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1422
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_T = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1423
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.Y = values[2]
 *             self.thermo.setState_TP(T, P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1424
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_TP(T, P)
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, __pyx_t_3) < 0) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1425
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]
 *             self.thermo.setState_TP(T, P)             # <<<<<<<<<<<<<<
 * 
 *     property UV:
 */
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_T); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1425, __pyx_L1_error)
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1425, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_TP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1425, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1420
 *         def __get__(self):
 *             return self.T, self.P, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             T = values[0] if values[0] is not None else self.T
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.TPY.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1432
 *         [m^3/kg or m^3/kmol].
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.u, self.v
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2UV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2UV_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2UV___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2UV___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1433
 *         """
 *         def __get__(self):
 *             return self.u, self.v             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1432
 *         [m^3/kg or m^3/kmol].
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.u, self.v
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.UV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1434
 *         def __get__(self):
 *             return self.u, self.v
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2UV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2UV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2UV_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2UV_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_U = NULL;
  PyObject *__pyx_v_V = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1435
 *             return self.u, self.v
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             U = values[0] if values[0] is not None else self.u
 *             V = values[1] if values[1] is not None else self.v
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1435, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 2);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1435, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1435, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1436
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u             # <<<<<<<<<<<<<<
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_UV(U / self._mass_factor(),
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_U = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1437
 *             assert len(values) == 2, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u
 *             V = values[1] if values[1] is not None else self.v             # <<<<<<<<<<<<<<
 *             self.thermo.setState_UV(U / self._mass_factor(),
 *                                     V / self._mass_factor())
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_V = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1438
 *             U = values[0] if values[0] is not None else self.u
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_UV(U / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1438, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_U, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1438, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1439
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_UV(U / self._mass_factor(),
 *                                     V / self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property UVX:
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1439, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_V, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1438
 *             U = values[0] if values[0] is not None else self.u
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_UV(U / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  try {
    __pyx_v_self->__pyx_base.thermo->setState_UV(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1438, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1434
 *         def __get__(self):
 *             return self.u, self.v
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.UV.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_U);
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1446
 *         [m^3/kg or m^3/kmol], and mole fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.u, self.v, self.X
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3UVX_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3UVX_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3UVX___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3UVX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1447
 *         """
 *         def __get__(self):
 *             return self.u, self.v, self.X             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1446
 *         [m^3/kg or m^3/kmol], and mole fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.u, self.v, self.X
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.UVX.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1448
 *         def __get__(self):
 *             return self.u, self.v, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3UVX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3UVX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3UVX_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3UVX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_U = NULL;
  PyObject *__pyx_v_V = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1449
 *             return self.u, self.v, self.X
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             U = values[0] if values[0] is not None else self.u
 *             V = values[1] if values[1] is not None else self.v
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1449, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1449, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1449, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1450
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u             # <<<<<<<<<<<<<<
 *             V = values[1] if values[1] is not None else self.v
 *             self.X = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_U = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1451
 *             assert len(values) == 3, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u
 *             V = values[1] if values[1] is not None else self.v             # <<<<<<<<<<<<<<
 *             self.X = values[2]
 *             self.thermo.setState_UV(U / self._mass_factor(),
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_V = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1452
 *             U = values[0] if values[0] is not None else self.u
 *             V = values[1] if values[1] is not None else self.v
 *             self.X = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_UV(U / self._mass_factor(),
 *                                     V / self._mass_factor())
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, __pyx_t_3) < 0) __PYX_ERR(0, 1452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1453
 *             V = values[1] if values[1] is not None else self.v
 *             self.X = values[2]
 *             self.thermo.setState_UV(U / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1453, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_U, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1454
 *             self.X = values[2]
 *             self.thermo.setState_UV(U / self._mass_factor(),
 *                                     V / self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property UVY:
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1454, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_V, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1453
 *             V = values[1] if values[1] is not None else self.v
 *             self.X = values[2]
 *             self.thermo.setState_UV(U / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  try {
    __pyx_v_self->__pyx_base.thermo->setState_UV(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1453, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1448
 *         def __get__(self):
 *             return self.u, self.v, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.UVX.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_U);
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1461
 *         [m^3/kg or m^3/kmol], and mass fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.u, self.v, self.Y
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3UVY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3UVY_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3UVY___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3UVY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1462
 *         """
 *         def __get__(self):
 *             return self.u, self.v, self.Y             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1461
 *         [m^3/kg or m^3/kmol], and mass fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.u, self.v, self.Y
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.UVY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1463
 *         def __get__(self):
 *             return self.u, self.v, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3UVY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3UVY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3UVY_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3UVY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_U = NULL;
  PyObject *__pyx_v_V = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1464
 *             return self.u, self.v, self.Y
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             U = values[0] if values[0] is not None else self.u
 *             V = values[1] if values[1] is not None else self.v
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1464, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1464, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1464, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1465
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u             # <<<<<<<<<<<<<<
 *             V = values[1] if values[1] is not None else self.v
 *             self.Y = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_U = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1466
 *             assert len(values) == 3, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u
 *             V = values[1] if values[1] is not None else self.v             # <<<<<<<<<<<<<<
 *             self.Y = values[2]
 *             self.thermo.setState_UV(U / self._mass_factor(),
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_V = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1467
 *             U = values[0] if values[0] is not None else self.u
 *             V = values[1] if values[1] is not None else self.v
 *             self.Y = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_UV(U / self._mass_factor(),
 *                                     V / self._mass_factor())
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, __pyx_t_3) < 0) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1468
 *             V = values[1] if values[1] is not None else self.v
 *             self.Y = values[2]
 *             self.thermo.setState_UV(U / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1468, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_U, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1469
 *             self.Y = values[2]
 *             self.thermo.setState_UV(U / self._mass_factor(),
 *                                     V / self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property DP:
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1469, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_V, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1468
 *             V = values[1] if values[1] is not None else self.v
 *             self.Y = values[2]
 *             self.thermo.setState_UV(U / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  try {
    __pyx_v_self->__pyx_base.thermo->setState_UV(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1468, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1463
 *         def __get__(self):
 *             return self.u, self.v, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             U = values[0] if values[0] is not None else self.u
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.UVY.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_U);
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1473
 *     property DP:
 *         """Get/Set density [kg/m^3] and pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.density, self.P
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2DP_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2DP_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2DP___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2DP___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1474
 *         """Get/Set density [kg/m^3] and pressure [Pa]."""
 *         def __get__(self):
 *             return self.density, self.P             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1473
 *     property DP:
 *         """Get/Set density [kg/m^3] and pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.density, self.P
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.DP.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1475
 *         def __get__(self):
 *             return self.density, self.P
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2DP_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2DP_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2DP_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2DP_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_D = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1476
 *             return self.density, self.P
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             D = values[0] if values[0] is not None else self.density
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1476, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 2);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1476, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1476, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1477
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.thermo.setState_DP(D*self._mass_factor(), P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_D = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1478
 *             assert len(values) == 2, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.thermo.setState_DP(D*self._mass_factor(), P)
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1479
 *             D = values[0] if values[0] is not None else self.density
 *             P = values[1] if values[1] is not None else self.P
 *             self.thermo.setState_DP(D*self._mass_factor(), P)             # <<<<<<<<<<<<<<
 * 
 *     property DPX:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1479, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_D, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1479, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_DP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1479, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1475
 *         def __get__(self):
 *             return self.density, self.P
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.DP.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1483
 *     property DPX:
 *         """Get/Set density [kg/m^3], pressure [Pa], and mole fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.density, self.P, self.X
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3DPX_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3DPX_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3DPX___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3DPX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1484
 *         """Get/Set density [kg/m^3], pressure [Pa], and mole fractions."""
 *         def __get__(self):
 *             return self.density, self.P, self.X             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1483
 *     property DPX:
 *         """Get/Set density [kg/m^3], pressure [Pa], and mole fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.density, self.P, self.X
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.DPX.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1485
 *         def __get__(self):
 *             return self.density, self.P, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3DPX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3DPX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3DPX_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3DPX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_D = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1486
 *             return self.density, self.P, self.X
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             D = values[0] if values[0] is not None else self.density
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1486, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1486, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1486, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1487
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_D = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1488
 *             assert len(values) == 3, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.X = values[2]
 *             self.thermo.setState_DP(D*self._mass_factor(), P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1489
 *             D = values[0] if values[0] is not None else self.density
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_DP(D*self._mass_factor(), P)
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, __pyx_t_3) < 0) __PYX_ERR(0, 1489, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1490
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]
 *             self.thermo.setState_DP(D*self._mass_factor(), P)             # <<<<<<<<<<<<<<
 * 
 *     property DPY:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1490, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_D, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1490, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_DP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1490, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1485
 *         def __get__(self):
 *             return self.density, self.P, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.DPX.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1494
 *     property DPY:
 *         """Get/Set density [kg/m^3], pressure [Pa], and mass fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.density, self.P, self.Y
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3DPY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3DPY_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3DPY___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3DPY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1495
 *         """Get/Set density [kg/m^3], pressure [Pa], and mass fractions."""
 *         def __get__(self):
 *             return self.density, self.P, self.Y             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1494
 *     property DPY:
 *         """Get/Set density [kg/m^3], pressure [Pa], and mass fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.density, self.P, self.Y
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.DPY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1496
 *         def __get__(self):
 *             return self.density, self.P, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3DPY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3DPY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3DPY_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3DPY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_D = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1497
 *             return self.density, self.P, self.Y
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             D = values[0] if values[0] is not None else self.density
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1497, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1497, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1497, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1498
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_D = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1499
 *             assert len(values) == 3, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.Y = values[2]
 *             self.thermo.setState_DP(D*self._mass_factor(), P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1500
 *             D = values[0] if values[0] is not None else self.density
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_DP(D*self._mass_factor(), P)
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, __pyx_t_3) < 0) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1501
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]
 *             self.thermo.setState_DP(D*self._mass_factor(), P)             # <<<<<<<<<<<<<<
 * 
 *     property HP:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1501, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_D, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1501, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_DP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1501, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1496
 *         def __get__(self):
 *             return self.density, self.P, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             D = values[0] if values[0] is not None else self.density
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.DPY.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_D);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1505
 *     property HP:
 *         """Get/Set enthalpy [J/kg or J/kmol] and pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.h, self.P
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2HP_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2HP_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2HP___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2HP___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1506
 *         """Get/Set enthalpy [J/kg or J/kmol] and pressure [Pa]."""
 *         def __get__(self):
 *             return self.h, self.P             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1505
 *     property HP:
 *         """Get/Set enthalpy [J/kg or J/kmol] and pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.h, self.P
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.HP.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1507
 *         def __get__(self):
 *             return self.h, self.P
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2HP_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2HP_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2HP_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2HP_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_H = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1508
 *             return self.h, self.P
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             H = values[0] if values[0] is not None else self.h
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1508, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 2);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1508, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1508, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1509
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.thermo.setState_HP(H / self._mass_factor(), P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_H = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1510
 *             assert len(values) == 2, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.thermo.setState_HP(H / self._mass_factor(), P)
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1511
 *             H = values[0] if values[0] is not None else self.h
 *             P = values[1] if values[1] is not None else self.P
 *             self.thermo.setState_HP(H / self._mass_factor(), P)             # <<<<<<<<<<<<<<
 * 
 *     property HPX:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1511, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_H, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1511, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_HP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1511, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1507
 *         def __get__(self):
 *             return self.h, self.P
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.HP.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_H);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1515
 *     property HPX:
 *         """Get/Set enthalpy [J/kg or J/kmol], pressure [Pa] and mole fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.h, self.P, self.X
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3HPX_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3HPX_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3HPX___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3HPX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1516
 *         """Get/Set enthalpy [J/kg or J/kmol], pressure [Pa] and mole fractions."""
 *         def __get__(self):
 *             return self.h, self.P, self.X             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1515
 *     property HPX:
 *         """Get/Set enthalpy [J/kg or J/kmol], pressure [Pa] and mole fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.h, self.P, self.X
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.HPX.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1517
 *         def __get__(self):
 *             return self.h, self.P, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3HPX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3HPX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3HPX_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3HPX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_H = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1518
 *             return self.h, self.P, self.X
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             H = values[0] if values[0] is not None else self.h
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1518, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1518, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1518, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1519
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_H = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1520
 *             assert len(values) == 3, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.X = values[2]
 *             self.thermo.setState_HP(H / self._mass_factor(), P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1521
 *             H = values[0] if values[0] is not None else self.h
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_HP(H / self._mass_factor(), P)
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, __pyx_t_3) < 0) __PYX_ERR(0, 1521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1522
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]
 *             self.thermo.setState_HP(H / self._mass_factor(), P)             # <<<<<<<<<<<<<<
 * 
 *     property HPY:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1522, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_H, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1522, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_HP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1522, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1517
 *         def __get__(self):
 *             return self.h, self.P, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.HPX.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_H);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1526
 *     property HPY:
 *         """Get/Set enthalpy [J/kg or J/kmol], pressure [Pa] and mass fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.h, self.P, self.Y
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3HPY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3HPY_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3HPY___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3HPY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1527
 *         """Get/Set enthalpy [J/kg or J/kmol], pressure [Pa] and mass fractions."""
 *         def __get__(self):
 *             return self.h, self.P, self.Y             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1526
 *     property HPY:
 *         """Get/Set enthalpy [J/kg or J/kmol], pressure [Pa] and mass fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.h, self.P, self.Y
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.HPY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1528
 *         def __get__(self):
 *             return self.h, self.P, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3HPY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3HPY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3HPY_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3HPY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_H = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1529
 *             return self.h, self.P, self.Y
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             H = values[0] if values[0] is not None else self.h
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1529, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1529, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1529, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1530
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_H = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1531
 *             assert len(values) == 3, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.Y = values[2]
 *             self.thermo.setState_HP(H / self._mass_factor(), P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1532
 *             H = values[0] if values[0] is not None else self.h
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_HP(H / self._mass_factor(), P)
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, __pyx_t_3) < 0) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1533
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]
 *             self.thermo.setState_HP(H / self._mass_factor(), P)             # <<<<<<<<<<<<<<
 * 
 *     property SP:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1533, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_H, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1533, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_HP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1533, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1528
 *         def __get__(self):
 *             return self.h, self.P, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             H = values[0] if values[0] is not None else self.h
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.HPY.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_H);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1537
 *     property SP:
 *         """Get/Set entropy [J/kg/K or J/kmol/K] and pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.P
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2SP_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2SP_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2SP___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2SP___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1538
 *         """Get/Set entropy [J/kg/K or J/kmol/K] and pressure [Pa]."""
 *         def __get__(self):
 *             return self.s, self.P             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1537
 *     property SP:
 *         """Get/Set entropy [J/kg/K or J/kmol/K] and pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.P
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SP.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1539
 *         def __get__(self):
 *             return self.s, self.P
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2SP_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2SP_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2SP_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2SP_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_S = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1540
 *             return self.s, self.P
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             S = values[0] if values[0] is not None else self.s
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1540, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 2);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1540, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1540, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1541
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.thermo.setState_SP(S / self._mass_factor(), P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_S = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1542
 *             assert len(values) == 2, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.thermo.setState_SP(S / self._mass_factor(), P)
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1543
 *             S = values[0] if values[0] is not None else self.s
 *             P = values[1] if values[1] is not None else self.P
 *             self.thermo.setState_SP(S / self._mass_factor(), P)             # <<<<<<<<<<<<<<
 * 
 *     property SPX:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1543, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_S, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1543, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_SP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1543, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1539
 *         def __get__(self):
 *             return self.s, self.P
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SP.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_S);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1547
 *     property SPX:
 *         """Get/Set entropy [J/kg/K or J/kmol/K], pressure [Pa], and mole fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.P, self.X
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3SPX_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3SPX_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3SPX___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3SPX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1548
 *         """Get/Set entropy [J/kg/K or J/kmol/K], pressure [Pa], and mole fractions."""
 *         def __get__(self):
 *             return self.s, self.P, self.X             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1547
 *     property SPX:
 *         """Get/Set entropy [J/kg/K or J/kmol/K], pressure [Pa], and mole fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.P, self.X
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SPX.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1549
 *         def __get__(self):
 *             return self.s, self.P, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3SPX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3SPX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3SPX_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3SPX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_S = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1550
 *             return self.s, self.P, self.X
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             S = values[0] if values[0] is not None else self.s
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1550, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1550, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1550, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1551
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_S = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1552
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.X = values[2]
 *             self.thermo.setState_SP(S / self._mass_factor(), P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1553
 *             S = values[0] if values[0] is not None else self.s
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_SP(S / self._mass_factor(), P)
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, __pyx_t_3) < 0) __PYX_ERR(0, 1553, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1554
 *             P = values[1] if values[1] is not None else self.P
 *             self.X = values[2]
 *             self.thermo.setState_SP(S / self._mass_factor(), P)             # <<<<<<<<<<<<<<
 * 
 *     property SPY:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1554, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_S, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1554, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_SP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1554, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1549
 *         def __get__(self):
 *             return self.s, self.P, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SPX.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_S);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1558
 *     property SPY:
 *         """Get/Set entropy [J/kg/K or J/kmol/K], pressure [Pa], and mass fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.P, self.Y
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3SPY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3SPY_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3SPY___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3SPY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1559
 *         """Get/Set entropy [J/kg/K or J/kmol/K], pressure [Pa], and mass fractions."""
 *         def __get__(self):
 *             return self.s, self.P, self.Y             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1558
 *     property SPY:
 *         """Get/Set entropy [J/kg/K or J/kmol/K], pressure [Pa], and mass fractions."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.P, self.Y
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SPY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1560
 *         def __get__(self):
 *             return self.s, self.P, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3SPY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3SPY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3SPY_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3SPY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_S = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1561
 *             return self.s, self.P, self.Y
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             S = values[0] if values[0] is not None else self.s
 *             P = values[1] if values[1] is not None else self.P
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1561, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1561, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1561, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1562
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_S = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1563
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.Y = values[2]
 *             self.thermo.setState_SP(S / self._mass_factor(), P)
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_P = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1564
 *             S = values[0] if values[0] is not None else self.s
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_SP(S / self._mass_factor(), P)
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, __pyx_t_3) < 0) __PYX_ERR(0, 1564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1565
 *             P = values[1] if values[1] is not None else self.P
 *             self.Y = values[2]
 *             self.thermo.setState_SP(S / self._mass_factor(), P)             # <<<<<<<<<<<<<<
 * 
 *     property SV:
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1565, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_S, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1565, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.thermo->setState_SP(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1565, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1560
 *         def __get__(self):
 *             return self.s, self.P, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SPY.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_S);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1572
 *         m^3/kmol].
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.v
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2SV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2SV_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2SV___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2SV___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1573
 *         """
 *         def __get__(self):
 *             return self.s, self.v             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1572
 *         m^3/kmol].
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.v
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1574
 *         def __get__(self):
 *             return self.s, self.v
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2SV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2SV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2SV_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2SV_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_S = NULL;
  PyObject *__pyx_v_V = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1575
 *             return self.s, self.v
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             S = values[0] if values[0] is not None else self.s
 *             V = values[1] if values[1] is not None else self.v
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1575, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 2);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1575, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1575, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1576
 *         def __set__(self, values):
 *             assert len(values) == 2, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s             # <<<<<<<<<<<<<<
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_SV(S / self._mass_factor(),
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_S = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1577
 *             assert len(values) == 2, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 *             V = values[1] if values[1] is not None else self.v             # <<<<<<<<<<<<<<
 *             self.thermo.setState_SV(S / self._mass_factor(),
 *                                     V / self._mass_factor())
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_V = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1578
 *             S = values[0] if values[0] is not None else self.s
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_SV(S / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1578, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_S, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1579
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_SV(S / self._mass_factor(),
 *                                     V / self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property SVX:
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1579, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_V, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1578
 *             S = values[0] if values[0] is not None else self.s
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_SV(S / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  try {
    __pyx_v_self->__pyx_base.thermo->setState_SV(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1578, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1574
 *         def __get__(self):
 *             return self.s, self.v
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 2, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SV.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_S);
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1586
 *         m^3/kmol], and mole fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.v, self.X
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3SVX_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3SVX_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3SVX___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3SVX___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1587
 *         """
 *         def __get__(self):
 *             return self.s, self.v, self.X             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1586
 *         m^3/kmol], and mole fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.v, self.X
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SVX.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1588
 *         def __get__(self):
 *             return self.s, self.v, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3SVX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3SVX_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3SVX_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3SVX_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_S = NULL;
  PyObject *__pyx_v_V = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1589
 *             return self.s, self.v, self.X
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             S = values[0] if values[0] is not None else self.s
 *             V = values[1] if values[1] is not None else self.v
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1589, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1589, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1589, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1590
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s             # <<<<<<<<<<<<<<
 *             V = values[1] if values[1] is not None else self.v
 *             self.X = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_S = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1591
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 *             V = values[1] if values[1] is not None else self.v             # <<<<<<<<<<<<<<
 *             self.X = values[2]
 *             self.thermo.setState_SV(S / self._mass_factor(),
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_V = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1592
 *             S = values[0] if values[0] is not None else self.s
 *             V = values[1] if values[1] is not None else self.v
 *             self.X = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_SV(S / self._mass_factor(),
 *                                     V / self._mass_factor())
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_X, __pyx_t_3) < 0) __PYX_ERR(0, 1592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1593
 *             V = values[1] if values[1] is not None else self.v
 *             self.X = values[2]
 *             self.thermo.setState_SV(S / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1593, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_S, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1594
 *             self.X = values[2]
 *             self.thermo.setState_SV(S / self._mass_factor(),
 *                                     V / self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property SVY:
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1594, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_V, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1593
 *             V = values[1] if values[1] is not None else self.v
 *             self.X = values[2]
 *             self.thermo.setState_SV(S / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  try {
    __pyx_v_self->__pyx_base.thermo->setState_SV(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1593, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1588
 *         def __get__(self):
 *             return self.s, self.v, self.X
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SVX.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_S);
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1601
 *         m^3/kmol], and mass fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.v, self.Y
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3SVY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_3SVY_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3SVY___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_3SVY___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1602
 *         """
 *         def __get__(self):
 *             return self.s, self.v, self.Y             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1601
 *         m^3/kmol], and mass fractions.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.v, self.Y
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SVY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1603
 *         def __get__(self):
 *             return self.s, self.v, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3SVY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_3SVY_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_3SVY_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_3SVY_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_S = NULL;
  PyObject *__pyx_v_V = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1604
 *             return self.s, self.v, self.Y
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'             # <<<<<<<<<<<<<<
 *             S = values[0] if values[0] is not None else self.s
 *             V = values[1] if values[1] is not None else self.v
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1604, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_kp_u_incorrect_number_of_values, 0, 0);
      __PYX_ERR(0, 1604, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1604, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":1605
 *         def __set__(self, values):
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s             # <<<<<<<<<<<<<<
 *             V = values[1] if values[1] is not None else self.v
 *             self.Y = values[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_S = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1606
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 *             V = values[1] if values[1] is not None else self.v             # <<<<<<<<<<<<<<
 *             self.Y = values[2]
 *             self.thermo.setState_SV(S / self._mass_factor(),
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = (__pyx_t_4 != Py_None);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_v_V = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1607
 *             S = values[0] if values[0] is not None else self.s
 *             V = values[1] if values[1] is not None else self.v
 *             self.Y = values[2]             # <<<<<<<<<<<<<<
 *             self.thermo.setState_SV(S / self._mass_factor(),
 *                                     V / self._mass_factor())
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Y, __pyx_t_3) < 0) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1608
 *             V = values[1] if values[1] is not None else self.v
 *             self.Y = values[2]
 *             self.thermo.setState_SV(S / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1608, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_v_S, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1609
 *             self.Y = values[2]
 *             self.thermo.setState_SV(S / self._mass_factor(),
 *                                     V / self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     # partial molar / non-dimensional properties
 */
  __pyx_t_6 = ((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_mass_factor(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1609, __pyx_L1_error)
  __pyx_t_4 = PyFloat_FromDouble(__pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_V, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1608
 *             V = values[1] if values[1] is not None else self.v
 *             self.Y = values[2]
 *             self.thermo.setState_SV(S / self._mass_factor(),             # <<<<<<<<<<<<<<
 *                                     V / self._mass_factor())
 * 
 */
  try {
    __pyx_v_self->__pyx_base.thermo->setState_SV(__pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1608, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1603
 *         def __get__(self):
 *             return self.s, self.v, self.Y
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             assert len(values) == 3, 'incorrect number of values'
 *             S = values[0] if values[0] is not None else self.s
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.SVY.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_S);
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1614
 *     property partial_molar_enthalpies:
 *         """Array of species partial molar enthalpies [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getPartialMolarEnthalpies)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_24partial_molar_enthalpies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_24partial_molar_enthalpies_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_24partial_molar_enthalpies___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_24partial_molar_enthalpies___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1615
 *         """Array of species partial molar enthalpies [J/kmol]."""
 *         def __get__(self):
 *             return self._getArray1(thermo_getPartialMolarEnthalpies)             # <<<<<<<<<<<<<<
 * 
 *     property partial_molar_entropies:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getPartialMolarEnthalpies)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1614
 *     property partial_molar_enthalpies:
 *         """Array of species partial molar enthalpies [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getPartialMolarEnthalpies)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.partial_molar_enthalpies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1619
 *     property partial_molar_entropies:
 *         """Array of species partial molar entropies [J/kmol/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getPartialMolarEntropies)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_23partial_molar_entropies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_23partial_molar_entropies_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_23partial_molar_entropies___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_23partial_molar_entropies___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1620
 *         """Array of species partial molar entropies [J/kmol/K]."""
 *         def __get__(self):
 *             return self._getArray1(thermo_getPartialMolarEntropies)             # <<<<<<<<<<<<<<
 * 
 *     property partial_molar_int_energies:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getPartialMolarEntropies)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1619
 *     property partial_molar_entropies:
 *         """Array of species partial molar entropies [J/kmol/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getPartialMolarEntropies)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.partial_molar_entropies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1624
 *     property partial_molar_int_energies:
 *         """Array of species partial molar internal energies [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getPartialMolarIntEnergies)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_26partial_molar_int_energies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_26partial_molar_int_energies_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_26partial_molar_int_energies___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_26partial_molar_int_energies___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1625
 *         """Array of species partial molar internal energies [J/kmol]."""
 *         def __get__(self):
 *             return self._getArray1(thermo_getPartialMolarIntEnergies)             # <<<<<<<<<<<<<<
 * 
 *     property chemical_potentials:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getPartialMolarIntEnergies)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1624
 *     property partial_molar_int_energies:
 *         """Array of species partial molar internal energies [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getPartialMolarIntEnergies)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.partial_molar_int_energies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1629
 *     property chemical_potentials:
 *         """Array of species chemical potentials [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getChemPotentials)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_19chemical_potentials_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_19chemical_potentials_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_19chemical_potentials___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_19chemical_potentials___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1630
 *         """Array of species chemical potentials [J/kmol]."""
 *         def __get__(self):
 *             return self._getArray1(thermo_getChemPotentials)             # <<<<<<<<<<<<<<
 * 
 *     property electrochemical_potentials:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getChemPotentials)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1629
 *     property chemical_potentials:
 *         """Array of species chemical potentials [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getChemPotentials)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.chemical_potentials.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1634
 *     property electrochemical_potentials:
 *         """Array of species electrochemical potentials [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getElectrochemPotentials)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_26electrochemical_potentials_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_26electrochemical_potentials_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_26electrochemical_potentials___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_26electrochemical_potentials___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1635
 *         """Array of species electrochemical potentials [J/kmol]."""
 *         def __get__(self):
 *             return self._getArray1(thermo_getElectrochemPotentials)             # <<<<<<<<<<<<<<
 * 
 *     property partial_molar_cp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getElectrochemPotentials)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1634
 *     property electrochemical_potentials:
 *         """Array of species electrochemical potentials [J/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getElectrochemPotentials)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.electrochemical_potentials.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1642
 *         pressure [J/kmol/K].
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getPartialMolarCp)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_16partial_molar_cp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_16partial_molar_cp_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_16partial_molar_cp___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_16partial_molar_cp___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1643
 *         """
 *         def __get__(self):
 *             return self._getArray1(thermo_getPartialMolarCp)             # <<<<<<<<<<<<<<
 * 
 *     property partial_molar_volumes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getPartialMolarCp)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1642
 *         pressure [J/kmol/K].
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getPartialMolarCp)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.partial_molar_cp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1647
 *     property partial_molar_volumes:
 *         """Array of species partial molar volumes [m^3/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getPartialMolarVolumes)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_21partial_molar_volumes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_21partial_molar_volumes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_21partial_molar_volumes___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_21partial_molar_volumes___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1648
 *         """Array of species partial molar volumes [m^3/kmol]."""
 *         def __get__(self):
 *             return self._getArray1(thermo_getPartialMolarVolumes)             # <<<<<<<<<<<<<<
 * 
 *     property standard_enthalpies_RT:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getPartialMolarVolumes)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1647
 *     property partial_molar_volumes:
 *         """Array of species partial molar volumes [m^3/kmol]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getPartialMolarVolumes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.partial_molar_volumes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1655
 *         current temperature and pressure.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getEnthalpy_RT)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_22standard_enthalpies_RT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_22standard_enthalpies_RT_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_22standard_enthalpies_RT___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_22standard_enthalpies_RT___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1656
 *         """
 *         def __get__(self):
 *             return self._getArray1(thermo_getEnthalpy_RT)             # <<<<<<<<<<<<<<
 * 
 *     property standard_entropies_R:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getEnthalpy_RT)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1655
 *         current temperature and pressure.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getEnthalpy_RT)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.standard_enthalpies_RT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1663
 *         current temperature and pressure.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getEntropy_R)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_20standard_entropies_R_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_20standard_entropies_R_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_20standard_entropies_R___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_20standard_entropies_R___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1664
 *         """
 *         def __get__(self):
 *             return self._getArray1(thermo_getEntropy_R)             # <<<<<<<<<<<<<<
 * 
 *     property standard_int_energies_RT:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getEntropy_R)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1663
 *         current temperature and pressure.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getEntropy_R)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.standard_entropies_R.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1671
 *         current temperature and pressure.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getIntEnergy_RT)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_24standard_int_energies_RT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_24standard_int_energies_RT_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_24standard_int_energies_RT___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_24standard_int_energies_RT___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1672
 *         """
 *         def __get__(self):
 *             return self._getArray1(thermo_getIntEnergy_RT)             # <<<<<<<<<<<<<<
 * 
 *     property standard_gibbs_RT:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getIntEnergy_RT)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1671
 *         current temperature and pressure.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getIntEnergy_RT)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.standard_int_energies_RT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1679
 *         the current temperature and pressure.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getGibbs_RT)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_17standard_gibbs_RT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_17standard_gibbs_RT_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_17standard_gibbs_RT___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_17standard_gibbs_RT___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1680
 *         """
 *         def __get__(self):
 *             return self._getArray1(thermo_getGibbs_RT)             # <<<<<<<<<<<<<<
 * 
 *     property standard_cp_R:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getGibbs_RT)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1679
 *         the current temperature and pressure.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getGibbs_RT)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.standard_gibbs_RT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1687
 *         at constant pressure at the current temperature and pressure.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getCp_R)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13standard_cp_R_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_13standard_cp_R_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_13standard_cp_R___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_13standard_cp_R___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1688
 *         """
 *         def __get__(self):
 *             return self._getArray1(thermo_getCp_R)             # <<<<<<<<<<<<<<
 * 
 *     property activities:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getCp_R)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1687
 *         at constant pressure at the current temperature and pressure.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getCp_R)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.standard_cp_R.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1695
 *         activities depending on the convention of the thermodynamic model.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getActivities)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_10activities_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_10activities_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_10activities___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_10activities___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1696
 *         """
 *         def __get__(self):
 *             return self._getArray1(thermo_getActivities)             # <<<<<<<<<<<<<<
 * 
 *     property activity_coefficients:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getActivities)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1695
 *         activities depending on the convention of the thermodynamic model.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getActivities)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.activities.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1702
 *         Array of nondimensional, molar activity coefficients.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getActivityCoefficients)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_21activity_coefficients_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_21activity_coefficients_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_21activity_coefficients___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_21activity_coefficients___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1703
 *         """
 *         def __get__(self):
 *             return self._getArray1(thermo_getActivityCoefficients)             # <<<<<<<<<<<<<<
 * 
 *     ######## Miscellaneous properties ########
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *)__pyx_v_self->__pyx_vtab)->_getArray1(__pyx_v_self, thermo_getActivityCoefficients)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1702
 *         Array of nondimensional, molar activity coefficients.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._getArray1(thermo_getActivityCoefficients)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.activity_coefficients.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1708
 *     property isothermal_compressibility:
 *         """Isothermal compressibility [1/Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.isothermalCompressibility()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_26isothermal_compressibility_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_26isothermal_compressibility_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_26isothermal_compressibility___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_26isothermal_compressibility___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1709
 *         """Isothermal compressibility [1/Pa]."""
 *         def __get__(self):
 *             return self.thermo.isothermalCompressibility()             # <<<<<<<<<<<<<<
 * 
 *     property thermal_expansion_coeff:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->isothermalCompressibility();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1709, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1708
 *     property isothermal_compressibility:
 *         """Isothermal compressibility [1/Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.isothermalCompressibility()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.isothermal_compressibility.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1713
 *     property thermal_expansion_coeff:
 *         """Thermal expansion coefficient [1/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.thermalExpansionCoeff()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_23thermal_expansion_coeff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_23thermal_expansion_coeff_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_23thermal_expansion_coeff___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_23thermal_expansion_coeff___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1714
 *         """Thermal expansion coefficient [1/K]."""
 *         def __get__(self):
 *             return self.thermo.thermalExpansionCoeff()             # <<<<<<<<<<<<<<
 * 
 *     property sound_speed:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->thermalExpansionCoeff();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1714, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1713
 *     property thermal_expansion_coeff:
 *         """Thermal expansion coefficient [1/K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.thermalExpansionCoeff()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.thermal_expansion_coeff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1718
 *     property sound_speed:
 *         """Speed of sound [m/s]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.soundSpeed()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_11sound_speed_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_11sound_speed_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_11sound_speed___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_11sound_speed___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1719
 *         """Speed of sound [m/s]."""
 *         def __get__(self):
 *             return self.thermo.soundSpeed()             # <<<<<<<<<<<<<<
 * 
 *     property min_temp:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->soundSpeed();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1719, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1718
 *     property sound_speed:
 *         """Speed of sound [m/s]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.soundSpeed()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.sound_speed.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1726
 *         valid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.minTemp()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_8min_temp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_8min_temp_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_8min_temp___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_8min_temp___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1727
 *         """
 *         def __get__(self):
 *             return self.thermo.minTemp()             # <<<<<<<<<<<<<<
 * 
 *     property max_temp:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->minTemp();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1727, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1726
 *         valid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.minTemp()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.min_temp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1734
 *         valid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.maxTemp()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_8max_temp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_8max_temp_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_8max_temp___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_8max_temp___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1735
 *         """
 *         def __get__(self):
 *             return self.thermo.maxTemp()             # <<<<<<<<<<<<<<
 * 
 *     property reference_pressure:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->maxTemp();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1735, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1734
 *         valid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.maxTemp()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.max_temp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1739
 *     property reference_pressure:
 *         """Reference state pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.refPressure()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_18reference_pressure_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_18reference_pressure_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_18reference_pressure___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_18reference_pressure___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1740
 *         """Reference state pressure [Pa]."""
 *         def __get__(self):
 *             return self.thermo.refPressure()             # <<<<<<<<<<<<<<
 * 
 *     property electric_potential:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->refPressure();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1740, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1739
 *     property reference_pressure:
 *         """Reference state pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.refPressure()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.reference_pressure.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1744
 *     property electric_potential:
 *         """Get/Set the electric potential [V] for this phase."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.electricPotential()
 *         def __set__(self, double value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_18electric_potential_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_18electric_potential_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_18electric_potential___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_18electric_potential___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1745
 *         """Get/Set the electric potential [V] for this phase."""
 *         def __get__(self):
 *             return self.thermo.electricPotential()             # <<<<<<<<<<<<<<
 *         def __set__(self, double value):
 *             self.thermo.setElectricPotential(value)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->electricPotential();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1745, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1744
 *     property electric_potential:
 *         """Get/Set the electric potential [V] for this phase."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.electricPotential()
 *         def __set__(self, double value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.electric_potential.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1746
 *         def __get__(self):
 *             return self.thermo.electricPotential()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.thermo.setElectricPotential(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_18electric_potential_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_18electric_potential_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1746, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.electric_potential.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_18electric_potential_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_18electric_potential_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1747
 *             return self.thermo.electricPotential()
 *         def __set__(self, double value):
 *             self.thermo.setElectricPotential(value)             # <<<<<<<<<<<<<<
 * 
 *     property standard_concentration_units:
 */
  try {
    __pyx_v_self->__pyx_base.thermo->setElectricPotential(__pyx_v_value);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1747, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1746
 *         def __get__(self):
 *             return self.thermo.electricPotential()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.thermo.setElectricPotential(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.electric_potential.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1751
 *     property standard_concentration_units:
 *         """Get standard concentration units for this phase."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CxxUnits units = self.thermo.standardConcentrationUnits()
 *             return Units.copy(units)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_28standard_concentration_units_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_28standard_concentration_units_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_28standard_concentration_units___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_28standard_concentration_units___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  Cantera::Units __pyx_v_units;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Cantera::Units __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1752
 *         """Get standard concentration units for this phase."""
 *         def __get__(self):
 *             cdef CxxUnits units = self.thermo.standardConcentrationUnits()             # <<<<<<<<<<<<<<
 *             return Units.copy(units)
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->standardConcentrationUnits();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1752, __pyx_L1_error)
  }
  __pyx_v_units = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "cantera/thermo.pyx":1753
 *         def __get__(self):
 *             cdef CxxUnits units = self.thermo.standardConcentrationUnits()
 *             return Units.copy(units)             # <<<<<<<<<<<<<<
 * 
 *     # methods for plasma
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_7cantera_5units_Units->copy(__pyx_v_units)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1751
 *     property standard_concentration_units:
 *         """Get standard concentration units for this phase."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CxxUnits units = self.thermo.standardConcentrationUnits()
 *             return Units.copy(units)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.standard_concentration_units.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1758
 *     property Te:
 *         """Get/Set electron Temperature [K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *                 return self.thermo.electronTemperature()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2Te_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2Te_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2Te___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2Te___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1759
 *         """Get/Set electron Temperature [K]."""
 *         def __get__(self):
 *                 return self.thermo.electronTemperature()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.thermo->electronTemperature();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1759, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1758
 *     property Te:
 *         """Get/Set electron Temperature [K]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *                 return self.thermo.electronTemperature()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.Te.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1761
 *                 return self.thermo.electronTemperature()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2Te_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_2Te_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2Te_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_2Te_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1762
 * 
 *         def __set__(self, value):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setElectronTemperature(value)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1762, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1763
 *         def __set__(self, value):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             self.plasma.setElectronTemperature(value)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1763, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1763, __pyx_L1_error)

    /* "cantera/thermo.pyx":1762
 * 
 *         def __set__(self, value):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setElectronTemperature(value)
 */
  }

  /* "cantera/thermo.pyx":1764
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setElectronTemperature(value)             # <<<<<<<<<<<<<<
 * 
 *     property Pe:
 */
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1764, __pyx_L1_error)
  try {
    __pyx_v_self->plasma->setElectronTemperature(__pyx_t_8);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1764, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1761
 *                 return self.thermo.electronTemperature()
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.Te.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1768
 *     property Pe:
 *         """Get electron Pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2Pe_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_2Pe_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_2Pe___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_2Pe___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1769
 *         """Get electron Pressure [Pa]."""
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.electronPressure()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1769, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1770
 *         def __get__(self):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             return self.plasma.electronPressure()
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1770, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1770, __pyx_L1_error)

    /* "cantera/thermo.pyx":1769
 *         """Get electron Pressure [Pa]."""
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.electronPressure()
 */
  }

  /* "cantera/thermo.pyx":1771
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.electronPressure()             # <<<<<<<<<<<<<<
 * 
 *     def set_discretized_electron_energy_distribution(self, levels, distribution):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->plasma->electronPressure()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1768
 *     property Pe:
 *         """Get electron Pressure [Pa]."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.Pe.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1773
 *             return self.plasma.electronPressure()
 * 
 *     def set_discretized_electron_energy_distribution(self, levels, distribution):             # <<<<<<<<<<<<<<
 *         """
 *         Set electron energy distribution. When this method is used, electron
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_55set_discretized_electron_energy_distribution(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_11ThermoPhase_54set_discretized_electron_energy_distribution, "\n        Set electron energy distribution. When this method is used, electron\n        temperature is calculated from the distribution.\n\n        :param levels:\n            vector of electron energy levels [eV]\n        :param distribution:\n            vector of distribution\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_55set_discretized_electron_energy_distribution = {"set_discretized_electron_energy_distribution", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_55set_discretized_electron_energy_distribution, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_54set_discretized_electron_energy_distribution};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_55set_discretized_electron_energy_distribution(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_levels = 0;
  PyObject *__pyx_v_distribution = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_discretized_electron_energy_distribution (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_levels,&__pyx_n_s_distribution,0};
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_levels)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1773, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_distribution)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1773, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_discretized_electron_energy_distribution", 1, 2, 2, 1); __PYX_ERR(0, 1773, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_discretized_electron_energy_distribution") < 0)) __PYX_ERR(0, 1773, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_levels = values[0];
    __pyx_v_distribution = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_discretized_electron_energy_distribution", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1773, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.set_discretized_electron_energy_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_54set_discretized_electron_energy_distribution(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v_levels, __pyx_v_distribution);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_54set_discretized_electron_energy_distribution(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_levels, PyObject *__pyx_v_distribution) {
  PyArrayObject *__pyx_v_data_levels = 0;
  PyArrayObject *__pyx_v_data_dist = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data_dist;
  __Pyx_Buffer __pyx_pybuffer_data_dist;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data_levels;
  __Pyx_Buffer __pyx_pybuffer_data_levels;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  PyArrayObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_discretized_electron_energy_distribution", 0);
  __pyx_pybuffer_data_levels.pybuffer.buf = NULL;
  __pyx_pybuffer_data_levels.refcount = 0;
  __pyx_pybuffernd_data_levels.data = NULL;
  __pyx_pybuffernd_data_levels.rcbuffer = &__pyx_pybuffer_data_levels;
  __pyx_pybuffer_data_dist.pybuffer.buf = NULL;
  __pyx_pybuffer_data_dist.refcount = 0;
  __pyx_pybuffernd_data_dist.data = NULL;
  __pyx_pybuffernd_data_dist.rcbuffer = &__pyx_pybuffer_data_dist;

  /* "cantera/thermo.pyx":1783
 *             vector of distribution
 *         """
 *         if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *             raise TypeError('This method is invalid for '
 *                             f'thermo model: {self.thermo_model}.')
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1783, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1784
 *         """
 *         if not self._enable_plasma:
 *             raise TypeError('This method is invalid for '             # <<<<<<<<<<<<<<
 *                             f'thermo model: {self.thermo_model}.')
 *         # check length
 */
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_This_method_is_invalid_for_therm);
    __pyx_t_4 += 41;
    __Pyx_GIVEREF(__pyx_kp_u_This_method_is_invalid_for_therm);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_This_method_is_invalid_for_therm);

    /* "cantera/thermo.pyx":1785
 *         if not self._enable_plasma:
 *             raise TypeError('This method is invalid for '
 *                             f'thermo model: {self.thermo_model}.')             # <<<<<<<<<<<<<<
 *         # check length
 *         if (len(levels) != len(distribution)):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1785, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__3);
    __pyx_t_4 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__3);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__3);

    /* "cantera/thermo.pyx":1784
 *         """
 *         if not self._enable_plasma:
 *             raise TypeError('This method is invalid for '             # <<<<<<<<<<<<<<
 *                             f'thermo model: {self.thermo_model}.')
 *         # check length
 */
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1784, __pyx_L1_error)

    /* "cantera/thermo.pyx":1783
 *             vector of distribution
 *         """
 *         if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *             raise TypeError('This method is invalid for '
 *                             f'thermo model: {self.thermo_model}.')
 */
  }

  /* "cantera/thermo.pyx":1787
 *                             f'thermo model: {self.thermo_model}.')
 *         # check length
 *         if (len(levels) != len(distribution)):             # <<<<<<<<<<<<<<
 *             raise ValueError('Length of levels and distribution are different')
 * 
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_levels); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1787, __pyx_L1_error)
  __pyx_t_8 = PyObject_Length(__pyx_v_distribution); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1787, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_4 != __pyx_t_8);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1788
 *         # check length
 *         if (len(levels) != len(distribution)):
 *             raise ValueError('Length of levels and distribution are different')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] data_levels = \
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1788, __pyx_L1_error)

    /* "cantera/thermo.pyx":1787
 *                             f'thermo model: {self.thermo_model}.')
 *         # check length
 *         if (len(levels) != len(distribution)):             # <<<<<<<<<<<<<<
 *             raise ValueError('Length of levels and distribution are different')
 * 
 */
  }

  /* "cantera/thermo.pyx":1791
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] data_levels = \
 *             np.ascontiguousarray(levels, dtype=np.double)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] data_dist = \
 *             np.ascontiguousarray(distribution, dtype=np.double)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_levels);
  __Pyx_GIVEREF(__pyx_v_levels);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_levels);
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_double); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1791, __pyx_L1_error)
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_10);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data_levels.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_data_levels = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data_levels.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1790, __pyx_L1_error)
    } else {__pyx_pybuffernd_data_levels.diminfo[0].strides = __pyx_pybuffernd_data_levels.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data_levels.diminfo[0].shape = __pyx_pybuffernd_data_levels.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_data_levels = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "cantera/thermo.pyx":1793
 *             np.ascontiguousarray(levels, dtype=np.double)
 *         cdef np.ndarray[np.double_t, ndim=1] data_dist = \
 *             np.ascontiguousarray(distribution, dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *         self.plasma.setDiscretizedElectronEnergyDist(&data_levels[0],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_distribution);
  __Pyx_GIVEREF(__pyx_v_distribution);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_distribution);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_double); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1793, __pyx_L1_error)
  __pyx_t_12 = ((PyArrayObject *)__pyx_t_9);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data_dist.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_data_dist = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data_dist.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1792, __pyx_L1_error)
    } else {__pyx_pybuffernd_data_dist.diminfo[0].strides = __pyx_pybuffernd_data_dist.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data_dist.diminfo[0].shape = __pyx_pybuffernd_data_dist.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_12 = 0;
  __pyx_v_data_dist = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "cantera/thermo.pyx":1795
 *             np.ascontiguousarray(distribution, dtype=np.double)
 * 
 *         self.plasma.setDiscretizedElectronEnergyDist(&data_levels[0],             # <<<<<<<<<<<<<<
 *                                                      &data_dist[0],
 *                                                      len(levels))
 */
  __pyx_t_13 = 0;
  __pyx_t_14 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_data_levels.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_14 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_data_levels.diminfo[0].shape)) __pyx_t_14 = 0;
  if (unlikely(__pyx_t_14 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_14);
    __PYX_ERR(0, 1795, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1796
 * 
 *         self.plasma.setDiscretizedElectronEnergyDist(&data_levels[0],
 *                                                      &data_dist[0],             # <<<<<<<<<<<<<<
 *                                                      len(levels))
 * 
 */
  __pyx_t_15 = 0;
  __pyx_t_14 = -1;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_data_dist.diminfo[0].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_14 = 0;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_data_dist.diminfo[0].shape)) __pyx_t_14 = 0;
  if (unlikely(__pyx_t_14 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_14);
    __PYX_ERR(0, 1796, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1797
 *         self.plasma.setDiscretizedElectronEnergyDist(&data_levels[0],
 *                                                      &data_dist[0],
 *                                                      len(levels))             # <<<<<<<<<<<<<<
 * 
 *     property n_electron_energy_levels:
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_levels); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1797, __pyx_L1_error)

  /* "cantera/thermo.pyx":1795
 *             np.ascontiguousarray(distribution, dtype=np.double)
 * 
 *         self.plasma.setDiscretizedElectronEnergyDist(&data_levels[0],             # <<<<<<<<<<<<<<
 *                                                      &data_dist[0],
 *                                                      len(levels))
 */
  try {
    __pyx_v_self->plasma->setDiscretizedElectronEnergyDist((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data_levels.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_data_levels.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data_dist.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_data_dist.diminfo[0].strides))), __pyx_t_8);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1795, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1773
 *             return self.plasma.electronPressure()
 * 
 *     def set_discretized_electron_energy_distribution(self, levels, distribution):             # <<<<<<<<<<<<<<
 *         """
 *         Set electron energy distribution. When this method is used, electron
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data_dist.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data_levels.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.set_discretized_electron_energy_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data_dist.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data_levels.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data_levels);
  __Pyx_XDECREF((PyObject *)__pyx_v_data_dist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1801
 *     property n_electron_energy_levels:
 *         """ Number of electron energy levels """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_24n_electron_energy_levels_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_24n_electron_energy_levels_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_24n_electron_energy_levels___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_24n_electron_energy_levels___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1802
 *         """ Number of electron energy levels """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.nElectronEnergyLevels()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1802, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1803
 *         def __get__(self):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             return self.plasma.nElectronEnergyLevels()
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1803, __pyx_L1_error)

    /* "cantera/thermo.pyx":1802
 *         """ Number of electron energy levels """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.nElectronEnergyLevels()
 */
  }

  /* "cantera/thermo.pyx":1804
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.nElectronEnergyLevels()             # <<<<<<<<<<<<<<
 * 
 *     property electron_energy_levels:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_v_self->plasma->nElectronEnergyLevels()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1801
 *     property n_electron_energy_levels:
 *         """ Number of electron energy levels """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.n_electron_energy_levels.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1808
 *     property electron_energy_levels:
 *         """ Electron energy levels [eV]"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_22electron_energy_levels_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_22electron_energy_levels_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_22electron_energy_levels___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_22electron_energy_levels___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyArrayObject *__pyx_v_data = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyArrayObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/thermo.pyx":1809
 *         """ Electron energy levels [eV]"""
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1809, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1810
 *         def __get__(self):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(
 *                 self.n_electron_energy_levels)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1810, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1810, __pyx_L1_error)

    /* "cantera/thermo.pyx":1809
 *         """ Electron energy levels [eV]"""
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(
 */
  }

  /* "cantera/thermo.pyx":1811
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(             # <<<<<<<<<<<<<<
 *                 self.n_electron_energy_levels)
 *             self.plasma.getElectronEnergyLevels(&data[0])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1812
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(
 *                 self.n_electron_energy_levels)             # <<<<<<<<<<<<<<
 *             self.plasma.getElectronEnergyLevels(&data[0])
 *             return data
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_electron_energy_levels); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "cantera/thermo.pyx":1811
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(             # <<<<<<<<<<<<<<
 *                 self.n_electron_energy_levels)
 *             self.plasma.getElectronEnergyLevels(&data[0])
 */
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1811, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1811, __pyx_L1_error)
    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_data = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1813
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(
 *                 self.n_electron_energy_levels)
 *             self.plasma.getElectronEnergyLevels(&data[0])             # <<<<<<<<<<<<<<
 *             return data
 *         def __set__(self, levels):
 */
  __pyx_t_9 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 1813, __pyx_L1_error)
  }
  __pyx_v_self->plasma->getElectronEnergyLevels((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_data.diminfo[0].strides))));

  /* "cantera/thermo.pyx":1814
 *                 self.n_electron_energy_levels)
 *             self.plasma.getElectronEnergyLevels(&data[0])
 *             return data             # <<<<<<<<<<<<<<
 *         def __set__(self, levels):
 *             if not self._enable_plasma:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_data);
  __pyx_r = ((PyObject *)__pyx_v_data);
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1808
 *     property electron_energy_levels:
 *         """ Electron energy levels [eV]"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.electron_energy_levels.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1815
 *             self.plasma.getElectronEnergyLevels(&data[0])
 *             return data
 *         def __set__(self, levels):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_22electron_energy_levels_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_levels); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_22electron_energy_levels_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_levels) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_22electron_energy_levels_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_levels));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_22electron_energy_levels_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_levels) {
  PyArrayObject *__pyx_v_data = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/thermo.pyx":1816
 *             return data
 *         def __set__(self, levels):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1816, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1817
 *         def __set__(self, levels):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                 np.ascontiguousarray(levels, dtype=np.double)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1817, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1817, __pyx_L1_error)

    /* "cantera/thermo.pyx":1816
 *             return data
 *         def __set__(self, levels):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 */
  }

  /* "cantera/thermo.pyx":1819
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                 np.ascontiguousarray(levels, dtype=np.double)             # <<<<<<<<<<<<<<
 *             self.plasma.setElectronEnergyLevels(&data[0], len(levels))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_levels);
  __Pyx_GIVEREF(__pyx_v_levels);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_levels);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_double); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1819, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1818, __pyx_L1_error)
    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v_data = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "cantera/thermo.pyx":1820
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                 np.ascontiguousarray(levels, dtype=np.double)
 *             self.plasma.setElectronEnergyLevels(&data[0], len(levels))             # <<<<<<<<<<<<<<
 * 
 *     property electron_energy_distribution:
 */
  __pyx_t_10 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 1820, __pyx_L1_error)
  }
  __pyx_t_11 = PyObject_Length(__pyx_v_levels); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1820, __pyx_L1_error)
  try {
    __pyx_v_self->plasma->setElectronEnergyLevels((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_data.diminfo[0].strides))), __pyx_t_11);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1820, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1815
 *             self.plasma.getElectronEnergyLevels(&data[0])
 *             return data
 *         def __set__(self, levels):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.electron_energy_levels.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1824
 *     property electron_energy_distribution:
 *         """ Electron energy distribution """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_28electron_energy_distribution_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_28electron_energy_distribution_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_28electron_energy_distribution___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_28electron_energy_distribution___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyArrayObject *__pyx_v_data = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyArrayObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/thermo.pyx":1825
 *         """ Electron energy distribution """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1825, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1826
 *         def __get__(self):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(
 *                 self.n_electron_energy_levels)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1826, __pyx_L1_error)

    /* "cantera/thermo.pyx":1825
 *         """ Electron energy distribution """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(
 */
  }

  /* "cantera/thermo.pyx":1827
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(             # <<<<<<<<<<<<<<
 *                 self.n_electron_energy_levels)
 *             self.plasma.getElectronEnergyDistribution(&data[0])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1828
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(
 *                 self.n_electron_energy_levels)             # <<<<<<<<<<<<<<
 *             self.plasma.getElectronEnergyDistribution(&data[0])
 *             return data
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_electron_energy_levels); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "cantera/thermo.pyx":1827
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(             # <<<<<<<<<<<<<<
 *                 self.n_electron_energy_levels)
 *             self.plasma.getElectronEnergyDistribution(&data[0])
 */
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1827, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1827, __pyx_L1_error)
    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_data = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":1829
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(
 *                 self.n_electron_energy_levels)
 *             self.plasma.getElectronEnergyDistribution(&data[0])             # <<<<<<<<<<<<<<
 *             return data
 * 
 */
  __pyx_t_9 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 1829, __pyx_L1_error)
  }
  __pyx_v_self->plasma->getElectronEnergyDistribution((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_data.diminfo[0].strides))));

  /* "cantera/thermo.pyx":1830
 *                 self.n_electron_energy_levels)
 *             self.plasma.getElectronEnergyDistribution(&data[0])
 *             return data             # <<<<<<<<<<<<<<
 * 
 *     property isotropic_shape_factor:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_data);
  __pyx_r = ((PyObject *)__pyx_v_data);
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1824
 *     property electron_energy_distribution:
 *         """ Electron energy distribution """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.electron_energy_distribution.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1834
 *     property isotropic_shape_factor:
 *         """ Shape factor of isotropic-velocity distribution for electron energy """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1835
 *         """ Shape factor of isotropic-velocity distribution for electron energy """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.isotropicShapeFactor()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1835, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1836
 *         def __get__(self):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             return self.plasma.isotropicShapeFactor()
 *         def __set__(self, x):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1836, __pyx_L1_error)

    /* "cantera/thermo.pyx":1835
 *         """ Shape factor of isotropic-velocity distribution for electron energy """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.isotropicShapeFactor()
 */
  }

  /* "cantera/thermo.pyx":1837
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.isotropicShapeFactor()             # <<<<<<<<<<<<<<
 *         def __set__(self, x):
 *             if not self._enable_plasma:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->plasma->isotropicShapeFactor()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1834
 *     property isotropic_shape_factor:
 *         """ Shape factor of isotropic-velocity distribution for electron energy """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.isotropic_shape_factor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1838
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.isotropicShapeFactor()
 *         def __set__(self, x):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_x) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1839
 *             return self.plasma.isotropicShapeFactor()
 *         def __set__(self, x):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setIsotropicShapeFactor(x)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1839, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1840
 *         def __set__(self, x):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             self.plasma.setIsotropicShapeFactor(x)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1840, __pyx_L1_error)

    /* "cantera/thermo.pyx":1839
 *             return self.plasma.isotropicShapeFactor()
 *         def __set__(self, x):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setIsotropicShapeFactor(x)
 */
  }

  /* "cantera/thermo.pyx":1841
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setIsotropicShapeFactor(x)             # <<<<<<<<<<<<<<
 * 
 *     property electron_energy_distribution_type:
 */
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1841, __pyx_L1_error)
  try {
    __pyx_v_self->plasma->setIsotropicShapeFactor(__pyx_t_8);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1841, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1838
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.isotropicShapeFactor()
 *         def __set__(self, x):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.isotropic_shape_factor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1845
 *     property electron_energy_distribution_type:
 *         """ Electron energy distribution type """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1846
 *         """ Electron energy distribution type """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return pystr(self.plasma.electronEnergyDistributionType())
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1846, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1847
 *         def __get__(self):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             return pystr(self.plasma.electronEnergyDistributionType())
 *         def __set__(self, distribution_type):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1847, __pyx_L1_error)

    /* "cantera/thermo.pyx":1846
 *         """ Electron energy distribution type """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return pystr(self.plasma.electronEnergyDistributionType())
 */
  }

  /* "cantera/thermo.pyx":1848
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return pystr(self.plasma.electronEnergyDistributionType())             # <<<<<<<<<<<<<<
 *         def __set__(self, distribution_type):
 *             if not self._enable_plasma:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_7cantera_6_utils_pystr(__pyx_v_self->plasma->electronEnergyDistributionType()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1845
 *     property electron_energy_distribution_type:
 *         """ Electron energy distribution type """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.electron_energy_distribution_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1849
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return pystr(self.plasma.electronEnergyDistributionType())
 *         def __set__(self, distribution_type):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_distribution_type); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_distribution_type) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_distribution_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_distribution_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1850
 *             return pystr(self.plasma.electronEnergyDistributionType())
 *         def __set__(self, distribution_type):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setElectronEnergyDistributionType(distribution_type)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1850, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1851
 *         def __set__(self, distribution_type):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             self.plasma.setElectronEnergyDistributionType(distribution_type)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1851, __pyx_L1_error)

    /* "cantera/thermo.pyx":1850
 *             return pystr(self.plasma.electronEnergyDistributionType())
 *         def __set__(self, distribution_type):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setElectronEnergyDistributionType(distribution_type)
 */
  }

  /* "cantera/thermo.pyx":1852
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setElectronEnergyDistributionType(distribution_type)             # <<<<<<<<<<<<<<
 * 
 *     property mean_electron_energy:
 */
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_distribution_type); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1852, __pyx_L1_error)
  try {
    __pyx_v_self->plasma->setElectronEnergyDistributionType(__pyx_t_8);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1852, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1849
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return pystr(self.plasma.electronEnergyDistributionType())
 *         def __set__(self, distribution_type):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.electron_energy_distribution_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1856
 *     property mean_electron_energy:
 *         """ Mean electron energy [eV] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_20mean_electron_energy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_20mean_electron_energy_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_20mean_electron_energy___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_20mean_electron_energy___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1857
 *         """ Mean electron energy [eV] """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.meanElectronEnergy()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1857, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1858
 *         def __get__(self):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             return self.plasma.meanElectronEnergy()
 *         def __set__(self, double energy):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1858, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1858, __pyx_L1_error)

    /* "cantera/thermo.pyx":1857
 *         """ Mean electron energy [eV] """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.meanElectronEnergy()
 */
  }

  /* "cantera/thermo.pyx":1859
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.meanElectronEnergy()             # <<<<<<<<<<<<<<
 *         def __set__(self, double energy):
 *             if not self._enable_plasma:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->plasma->meanElectronEnergy()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1856
 *     property mean_electron_energy:
 *         """ Mean electron energy [eV] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.mean_electron_energy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1860
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.meanElectronEnergy()
 *         def __set__(self, double energy):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_20mean_electron_energy_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_energy); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_20mean_electron_energy_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_energy) {
  double __pyx_v_energy;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_energy); {
    __pyx_v_energy = __pyx_PyFloat_AsDouble(__pyx_arg_energy); if (unlikely((__pyx_v_energy == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1860, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.mean_electron_energy.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_20mean_electron_energy_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((double)__pyx_v_energy));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_20mean_electron_energy_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, double __pyx_v_energy) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1861
 *             return self.plasma.meanElectronEnergy()
 *         def __set__(self, double energy):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setMeanElectronEnergy(energy)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1861, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1862
 *         def __set__(self, double energy):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             self.plasma.setMeanElectronEnergy(energy)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1862, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1862, __pyx_L1_error)

    /* "cantera/thermo.pyx":1861
 *             return self.plasma.meanElectronEnergy()
 *         def __set__(self, double energy):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setMeanElectronEnergy(energy)
 */
  }

  /* "cantera/thermo.pyx":1863
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setMeanElectronEnergy(energy)             # <<<<<<<<<<<<<<
 * 
 *     property quadrature_method:
 */
  try {
    __pyx_v_self->plasma->setMeanElectronEnergy(__pyx_v_energy);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1863, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1860
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.meanElectronEnergy()
 *         def __set__(self, double energy):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.mean_electron_energy.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1867
 *     property quadrature_method:
 *         """ Quadrature method """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_17quadrature_method_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_17quadrature_method_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_17quadrature_method___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_17quadrature_method___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1868
 *         """ Quadrature method """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return pystr(self.plasma.quadratureMethod())
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1868, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1869
 *         def __get__(self):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             return pystr(self.plasma.quadratureMethod())
 *         def __set__(self, method):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1869, __pyx_L1_error)

    /* "cantera/thermo.pyx":1868
 *         """ Quadrature method """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return pystr(self.plasma.quadratureMethod())
 */
  }

  /* "cantera/thermo.pyx":1870
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return pystr(self.plasma.quadratureMethod())             # <<<<<<<<<<<<<<
 *         def __set__(self, method):
 *             if not self._enable_plasma:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_7cantera_6_utils_pystr(__pyx_v_self->plasma->quadratureMethod()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1867
 *     property quadrature_method:
 *         """ Quadrature method """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.quadrature_method.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1871
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return pystr(self.plasma.quadratureMethod())
 *         def __set__(self, method):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_17quadrature_method_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_method); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_17quadrature_method_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_method) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_17quadrature_method_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_method));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_17quadrature_method_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_method) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1872
 *             return pystr(self.plasma.quadratureMethod())
 *         def __set__(self, method):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setQuadratureMethod(stringify(method))
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1872, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1873
 *         def __set__(self, method):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             self.plasma.setQuadratureMethod(stringify(method))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1873, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1873, __pyx_L1_error)

    /* "cantera/thermo.pyx":1872
 *             return pystr(self.plasma.quadratureMethod())
 *         def __set__(self, method):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setQuadratureMethod(stringify(method))
 */
  }

  /* "cantera/thermo.pyx":1874
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.setQuadratureMethod(stringify(method))             # <<<<<<<<<<<<<<
 * 
 *     property normalize_electron_energy_distribution_enabled:
 */
  __pyx_t_8 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_method); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1874, __pyx_L1_error)
  try {
    __pyx_v_self->plasma->setQuadratureMethod(__pyx_t_8);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1874, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1871
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return pystr(self.plasma.quadratureMethod())
 *         def __set__(self, method):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.quadrature_method.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1878
 *     property normalize_electron_energy_distribution_enabled:
 *         """ Automatically normalize electron energy distribution """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1879
 *         """ Automatically normalize electron energy distribution """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.normalizeElectronEnergyDistEnabled()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1879, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1880
 *         def __get__(self):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             return self.plasma.normalizeElectronEnergyDistEnabled()
 *         def __set__(self, enable):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1880, __pyx_L1_error)

    /* "cantera/thermo.pyx":1879
 *         """ Automatically normalize electron energy distribution """
 *         def __get__(self):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.normalizeElectronEnergyDistEnabled()
 */
  }

  /* "cantera/thermo.pyx":1881
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.normalizeElectronEnergyDistEnabled()             # <<<<<<<<<<<<<<
 *         def __set__(self, enable):
 *             if not self._enable_plasma:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->plasma->normalizeElectronEnergyDistEnabled()); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1878
 *     property normalize_electron_energy_distribution_enabled:
 *         """ Automatically normalize electron energy distribution """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.normalize_electron_energy_distribution_enabled.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1882
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.normalizeElectronEnergyDistEnabled()
 *         def __set__(self, enable):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_enable); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_enable) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_enable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_enable) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  bool __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1883
 *             return self.plasma.normalizeElectronEnergyDistEnabled()
 *         def __set__(self, enable):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.enableNormalizeElectronEnergyDist(enable)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_self->_enable_plasma); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1883, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_1);
  if (unlikely(__pyx_t_2)) {

    /* "cantera/thermo.pyx":1884
 *         def __set__(self, enable):
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)             # <<<<<<<<<<<<<<
 *             self.plasma.enableNormalizeElectronEnergyDist(enable)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ThermoModelMethodError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo_model); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1884, __pyx_L1_error)

    /* "cantera/thermo.pyx":1883
 *             return self.plasma.normalizeElectronEnergyDistEnabled()
 *         def __set__(self, enable):
 *             if not self._enable_plasma:             # <<<<<<<<<<<<<<
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.enableNormalizeElectronEnergyDist(enable)
 */
  }

  /* "cantera/thermo.pyx":1885
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             self.plasma.enableNormalizeElectronEnergyDist(enable)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_enable); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1885, __pyx_L1_error)
  __pyx_v_self->plasma->enableNormalizeElectronEnergyDist(__pyx_t_8);

  /* "cantera/thermo.pyx":1882
 *                 raise ThermoModelMethodError(self.thermo_model)
 *             return self.plasma.normalizeElectronEnergyDistEnabled()
 *         def __set__(self, enable):             # <<<<<<<<<<<<<<
 *             if not self._enable_plasma:
 *                 raise ThermoModelMethodError(self.thermo_model)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.normalize_electron_energy_distribution_enabled.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pxd":274
 *     cdef void _setArray1(self, thermoMethod1d method, values) except *
 *     cdef CxxPlasmaPhase* plasma
 *     cdef public object _enable_plasma             # <<<<<<<<<<<<<<
 * 
 * cdef class InterfacePhase(ThermoPhase):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_14_enable_plasma_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_14_enable_plasma_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_14_enable_plasma___get__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_14_enable_plasma___get__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_enable_plasma);
  __pyx_r = __pyx_v_self->_enable_plasma;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_14_enable_plasma_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_14_enable_plasma_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_14_enable_plasma_2__set__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_14_enable_plasma_2__set__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_enable_plasma);
  __Pyx_DECREF(__pyx_v_self->_enable_plasma);
  __pyx_v_self->_enable_plasma = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_14_enable_plasma_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cantera_6thermo_11ThermoPhase_14_enable_plasma_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_14_enable_plasma_4__del__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_11ThermoPhase_14_enable_plasma_4__del__(struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_enable_plasma);
  __Pyx_DECREF(__pyx_v_self->_enable_plasma);
  __pyx_v_self->_enable_plasma = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_57__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_57__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_57__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_57__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_56__reduce_cython__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_56__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__base_self_base_self_kineti, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_59__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_11ThermoPhase_59__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_59__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_11ThermoPhase_59__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_11ThermoPhase_58__setstate_cython__(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_11ThermoPhase_58__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__base_self_base_self_kineti, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.ThermoPhase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1890
 * cdef class InterfacePhase(ThermoPhase):
 *     """ A class representing a surface, edge phase """
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs.get("init", True):
 *             return
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_14InterfacePhase_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_6thermo_14InterfacePhase_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = __Pyx_KwargsAsDict_VARARGS(__pyx_kwds, __pyx_kwvalues);
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = PyDict_New();
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7cantera_6thermo_14InterfacePhase___cinit__(((struct __pyx_obj_7cantera_6thermo_InterfacePhase *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_14InterfacePhase___cinit__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __pyx_t_7cantera_6thermo_CxxSurfPhasePtr __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cantera/thermo.pyx":1891
 *     """ A class representing a surface, edge phase """
 *     def __cinit__(self, *args, **kwargs):
 *         if not kwargs.get("init", True):             # <<<<<<<<<<<<<<
 *             return
 *         if not dynamic_cast[CxxSurfPhasePtr](self.thermo):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_init_2, Py_True); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (__pyx_t_3) {

    /* "cantera/thermo.pyx":1892
 *     def __cinit__(self, *args, **kwargs):
 *         if not kwargs.get("init", True):
 *             return             # <<<<<<<<<<<<<<
 *         if not dynamic_cast[CxxSurfPhasePtr](self.thermo):
 *             raise TypeError('Underlying ThermoPhase object is of the wrong type.')
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cantera/thermo.pyx":1891
 *     """ A class representing a surface, edge phase """
 *     def __cinit__(self, *args, **kwargs):
 *         if not kwargs.get("init", True):             # <<<<<<<<<<<<<<
 *             return
 *         if not dynamic_cast[CxxSurfPhasePtr](self.thermo):
 */
  }

  /* "cantera/thermo.pyx":1893
 *         if not kwargs.get("init", True):
 *             return
 *         if not dynamic_cast[CxxSurfPhasePtr](self.thermo):             # <<<<<<<<<<<<<<
 *             raise TypeError('Underlying ThermoPhase object is of the wrong type.')
 *         self.surf = <CxxSurfPhase*>(self.thermo)
 */
  try {
    __pyx_t_4 = dynamic_cast<__pyx_t_7cantera_6thermo_CxxSurfPhasePtr>(__pyx_v_self->__pyx_base.__pyx_base.thermo);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1893, __pyx_L1_error)
  }
  __pyx_t_3 = (!(__pyx_t_4 != 0));
  if (unlikely(__pyx_t_3)) {

    /* "cantera/thermo.pyx":1894
 *             return
 *         if not dynamic_cast[CxxSurfPhasePtr](self.thermo):
 *             raise TypeError('Underlying ThermoPhase object is of the wrong type.')             # <<<<<<<<<<<<<<
 *         self.surf = <CxxSurfPhase*>(self.thermo)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1894, __pyx_L1_error)

    /* "cantera/thermo.pyx":1893
 *         if not kwargs.get("init", True):
 *             return
 *         if not dynamic_cast[CxxSurfPhasePtr](self.thermo):             # <<<<<<<<<<<<<<
 *             raise TypeError('Underlying ThermoPhase object is of the wrong type.')
 *         self.surf = <CxxSurfPhase*>(self.thermo)
 */
  }

  /* "cantera/thermo.pyx":1895
 *         if not dynamic_cast[CxxSurfPhasePtr](self.thermo):
 *             raise TypeError('Underlying ThermoPhase object is of the wrong type.')
 *         self.surf = <CxxSurfPhase*>(self.thermo)             # <<<<<<<<<<<<<<
 * 
 *     property adjacent:
 */
  __pyx_v_self->surf = ((Cantera::SurfPhase *)__pyx_v_self->__pyx_base.__pyx_base.thermo);

  /* "cantera/thermo.pyx":1890
 * cdef class InterfacePhase(ThermoPhase):
 *     """ A class representing a surface, edge phase """
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs.get("init", True):
 *             return
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.InterfacePhase.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1902
 *         for example bulk phases adjacent to a surface.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._adjacent
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_8adjacent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_8adjacent_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_14InterfacePhase_8adjacent___get__(((struct __pyx_obj_7cantera_6thermo_InterfacePhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_8adjacent___get__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1903
 *         """
 *         def __get__(self):
 *             return self._adjacent             # <<<<<<<<<<<<<<
 * 
 *     property site_density:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->__pyx_base.__pyx_base._adjacent);
  __pyx_r = __pyx_v_self->__pyx_base.__pyx_base._adjacent;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1902
 *         for example bulk phases adjacent to a surface.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._adjacent
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1910
 *         edge phases.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.surf.siteDensity()
 *         def __set__(self, double value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_12site_density_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_12site_density_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_14InterfacePhase_12site_density___get__(((struct __pyx_obj_7cantera_6thermo_InterfacePhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_12site_density___get__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1911
 *         """
 *         def __get__(self):
 *             return self.surf.siteDensity()             # <<<<<<<<<<<<<<
 *         def __set__(self, double value):
 *             self.surf.setSiteDensity(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->surf->siteDensity()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1910
 *         edge phases.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.surf.siteDensity()
 *         def __set__(self, double value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.InterfacePhase.site_density.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1912
 *         def __get__(self):
 *             return self.surf.siteDensity()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.surf.setSiteDensity(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_14InterfacePhase_12site_density_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7cantera_6thermo_14InterfacePhase_12site_density_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1912, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.InterfacePhase.site_density.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_14InterfacePhase_12site_density_2__set__(((struct __pyx_obj_7cantera_6thermo_InterfacePhase *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_14InterfacePhase_12site_density_2__set__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1913
 *             return self.surf.siteDensity()
 *         def __set__(self, double value):
 *             self.surf.setSiteDensity(value)             # <<<<<<<<<<<<<<
 * 
 *     property coverages:
 */
  try {
    __pyx_v_self->surf->setSiteDensity(__pyx_v_value);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1913, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1912
 *         def __get__(self):
 *             return self.surf.siteDensity()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.surf.setSiteDensity(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.InterfacePhase.site_density.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1917
 *     property coverages:
 *         """Get/Set the fraction of sites covered by each species."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)
 *             self.surf.getCoverages(&data[0])
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_9coverages_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_9coverages_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_14InterfacePhase_9coverages___get__(((struct __pyx_obj_7cantera_6thermo_InterfacePhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_9coverages___get__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self) {
  PyArrayObject *__pyx_v_data = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyArrayObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  npy_intp __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/thermo.pyx":1918
 *         """Get/Set the fraction of sites covered by each species."""
 *         def __get__(self):
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)             # <<<<<<<<<<<<<<
 *             self.surf.getCoverages(&data[0])
 *             if self._selected_species.size:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1918, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1918, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1918, __pyx_L1_error)
    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_data = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":1919
 *         def __get__(self):
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)
 *             self.surf.getCoverages(&data[0])             # <<<<<<<<<<<<<<
 *             if self._selected_species.size:
 *                 return data[self._selected_species]
 */
  __pyx_t_7 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1919, __pyx_L1_error)
  }
  try {
    __pyx_v_self->surf->getCoverages((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_data.diminfo[0].strides))));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1919, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1920
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)
 *             self.surf.getCoverages(&data[0])
 *             if self._selected_species.size:             # <<<<<<<<<<<<<<
 *                 return data[self._selected_species]
 *             else:
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._selected_species);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_8 = __pyx_f_5numpy_7ndarray_4size_size(((PyArrayObject *)__pyx_t_1)); if (unlikely(__pyx_t_8 == ((npy_intp)-1) && PyErr_Occurred())) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = (__pyx_t_8 != 0);
  if (__pyx_t_9) {

    /* "cantera/thermo.pyx":1921
 *             self.surf.getCoverages(&data[0])
 *             if self._selected_species.size:
 *                 return data[self._selected_species]             # <<<<<<<<<<<<<<
 *             else:
 *                 return data
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_data), ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._selected_species)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "cantera/thermo.pyx":1920
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)
 *             self.surf.getCoverages(&data[0])
 *             if self._selected_species.size:             # <<<<<<<<<<<<<<
 *                 return data[self._selected_species]
 *             else:
 */
  }

  /* "cantera/thermo.pyx":1923
 *                 return data[self._selected_species]
 *             else:
 *                 return data             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, theta):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_data);
    __pyx_r = ((PyObject *)__pyx_v_data);
    goto __pyx_L0;
  }

  /* "cantera/thermo.pyx":1917
 *     property coverages:
 *         """Get/Set the fraction of sites covered by each species."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] data = np.empty(self.n_species)
 *             self.surf.getCoverages(&data[0])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.InterfacePhase.coverages.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1925
 *                 return data
 * 
 *         def __set__(self, theta):             # <<<<<<<<<<<<<<
 *             if isinstance(theta, (dict, str, bytes)):
 *                 self.surf.setCoveragesByName(comp_map(theta))
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_14InterfacePhase_9coverages_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_theta); /*proto*/
static int __pyx_pw_7cantera_6thermo_14InterfacePhase_9coverages_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_theta) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_14InterfacePhase_9coverages_2__set__(((struct __pyx_obj_7cantera_6thermo_InterfacePhase *)__pyx_v_self), ((PyObject *)__pyx_v_theta));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_14InterfacePhase_9coverages_2__set__(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self, PyObject *__pyx_v_theta) {
  PyArrayObject *__pyx_v_data = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_7cantera_5ctcxx_Composition __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyArrayObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/thermo.pyx":1926
 * 
 *         def __set__(self, theta):
 *             if isinstance(theta, (dict, str, bytes)):             # <<<<<<<<<<<<<<
 *                 self.surf.setCoveragesByName(comp_map(theta))
 *                 return
 */
  __pyx_t_2 = PyDict_Check(__pyx_v_theta); 
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyUnicode_Check(__pyx_v_theta); 
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyBytes_Check(__pyx_v_theta); 
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":1927
 *         def __set__(self, theta):
 *             if isinstance(theta, (dict, str, bytes)):
 *                 self.surf.setCoveragesByName(comp_map(theta))             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
    __pyx_t_3 = __pyx_f_7cantera_6_utils_comp_map(__pyx_v_theta); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1927, __pyx_L1_error)
    try {
      __pyx_v_self->surf->setCoveragesByName(__pyx_t_3);
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 1927, __pyx_L1_error)
    }

    /* "cantera/thermo.pyx":1928
 *             if isinstance(theta, (dict, str, bytes)):
 *                 self.surf.setCoveragesByName(comp_map(theta))
 *                 return             # <<<<<<<<<<<<<<
 * 
 *             if len(theta) != self.n_species:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cantera/thermo.pyx":1926
 * 
 *         def __set__(self, theta):
 *             if isinstance(theta, (dict, str, bytes)):             # <<<<<<<<<<<<<<
 *                 self.surf.setCoveragesByName(comp_map(theta))
 *                 return
 */
  }

  /* "cantera/thermo.pyx":1930
 *                 return
 * 
 *             if len(theta) != self.n_species:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Array has incorrect length."
 *                     " Got {}, expected {}".format(len(theta), self.n_species))
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_theta); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1930, __pyx_L1_error)
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1930, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1930, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "cantera/thermo.pyx":1932
 *             if len(theta) != self.n_species:
 *                 raise ValueError("Array has incorrect length."
 *                     " Got {}, expected {}".format(len(theta), self.n_species))             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                 np.ascontiguousarray(theta, dtype=np.double)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Array_has_incorrect_length_Got_e_2, __pyx_n_s_format); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyObject_Length(__pyx_v_theta); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1932, __pyx_L1_error)
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_t_5, __pyx_t_8};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_10, 2+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1932, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }

    /* "cantera/thermo.pyx":1931
 * 
 *             if len(theta) != self.n_species:
 *                 raise ValueError("Array has incorrect length."             # <<<<<<<<<<<<<<
 *                     " Got {}, expected {}".format(len(theta), self.n_species))
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 */
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1931, __pyx_L1_error)

    /* "cantera/thermo.pyx":1930
 *                 return
 * 
 *             if len(theta) != self.n_species:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Array has incorrect length."
 *                     " Got {}, expected {}".format(len(theta), self.n_species))
 */
  }

  /* "cantera/thermo.pyx":1934
 *                     " Got {}, expected {}".format(len(theta), self.n_species))
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                 np.ascontiguousarray(theta, dtype=np.double)             # <<<<<<<<<<<<<<
 *             self.surf.setCoverages(&data[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_theta);
  __Pyx_GIVEREF(__pyx_v_theta);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_theta);
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 1934, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1934, __pyx_L1_error)
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_9);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1933, __pyx_L1_error)
    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_data = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "cantera/thermo.pyx":1935
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                 np.ascontiguousarray(theta, dtype=np.double)
 *             self.surf.setCoverages(&data[0])             # <<<<<<<<<<<<<<
 * 
 *     def set_unnormalized_coverages(self, cov):
 */
  __pyx_t_12 = 0;
  __pyx_t_10 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(0, 1935, __pyx_L1_error)
  }
  try {
    __pyx_v_self->surf->setCoverages((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_data.diminfo[0].strides))));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1935, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1925
 *                 return data
 * 
 *         def __set__(self, theta):             # <<<<<<<<<<<<<<
 *             if isinstance(theta, (dict, str, bytes)):
 *                 self.surf.setCoveragesByName(comp_map(theta))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.InterfacePhase.coverages.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1937
 *             self.surf.setCoverages(&data[0])
 * 
 *     def set_unnormalized_coverages(self, cov):             # <<<<<<<<<<<<<<
 *         """
 *         Set the surface coverages without normalizing to force sum(cov) == 1.0.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_3set_unnormalized_coverages(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_14InterfacePhase_2set_unnormalized_coverages, "\n        Set the surface coverages without normalizing to force sum(cov) == 1.0.\n        Useful primarily when calculating derivatives with respect to cov[k] by\n        finite difference.\n        ");
static PyMethodDef __pyx_mdef_7cantera_6thermo_14InterfacePhase_3set_unnormalized_coverages = {"set_unnormalized_coverages", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_14InterfacePhase_3set_unnormalized_coverages, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_14InterfacePhase_2set_unnormalized_coverages};
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_3set_unnormalized_coverages(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_cov = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_unnormalized_coverages (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cov,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_cov)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1937, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_unnormalized_coverages") < 0)) __PYX_ERR(0, 1937, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_cov = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_unnormalized_coverages", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1937, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.InterfacePhase.set_unnormalized_coverages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_14InterfacePhase_2set_unnormalized_coverages(((struct __pyx_obj_7cantera_6thermo_InterfacePhase *)__pyx_v_self), __pyx_v_cov);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_2set_unnormalized_coverages(struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self, PyObject *__pyx_v_cov) {
  PyArrayObject *__pyx_v_data = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_unnormalized_coverages", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/thermo.pyx":1944
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] data
 *         if len(cov) == self.n_species:             # <<<<<<<<<<<<<<
 *             data = np.ascontiguousarray(cov, dtype=np.double)
 *         else:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_cov); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1944, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1944, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1944, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(__pyx_t_5)) {

    /* "cantera/thermo.pyx":1945
 *         cdef np.ndarray[np.double_t, ndim=1] data
 *         if len(cov) == self.n_species:
 *             data = np.ascontiguousarray(cov, dtype=np.double)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Array has incorrect length."
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_cov);
    __Pyx_GIVEREF(__pyx_v_cov);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_cov);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_double); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 1945, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1945, __pyx_L1_error)
    __pyx_t_8 = ((PyArrayObject *)__pyx_t_7);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_v_data, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
        __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
      }
      __pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1945, __pyx_L1_error)
    }
    __pyx_t_8 = 0;
    __pyx_v_data = ((PyArrayObject *)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "cantera/thermo.pyx":1944
 *         """
 *         cdef np.ndarray[np.double_t, ndim=1] data
 *         if len(cov) == self.n_species:             # <<<<<<<<<<<<<<
 *             data = np.ascontiguousarray(cov, dtype=np.double)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":1947
 *             data = np.ascontiguousarray(cov, dtype=np.double)
 *         else:
 *             raise ValueError("Array has incorrect length."             # <<<<<<<<<<<<<<
 *                  " Got {}, expected {}.".format(len(cov), self.n_species))
 *         self.surf.setCoveragesNoNorm(&data[0])
 */
  /*else*/ {

    /* "cantera/thermo.pyx":1948
 *         else:
 *             raise ValueError("Array has incorrect length."
 *                  " Got {}, expected {}.".format(len(cov), self.n_species))             # <<<<<<<<<<<<<<
 *         self.surf.setCoveragesNoNorm(&data[0])
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Array_has_incorrect_length_Got_e, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_Length(__pyx_v_cov); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1948, __pyx_L1_error)
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1948, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }

    /* "cantera/thermo.pyx":1947
 *             data = np.ascontiguousarray(cov, dtype=np.double)
 *         else:
 *             raise ValueError("Array has incorrect length."             # <<<<<<<<<<<<<<
 *                  " Got {}, expected {}.".format(len(cov), self.n_species))
 *         self.surf.setCoveragesNoNorm(&data[0])
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1947, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":1949
 *             raise ValueError("Array has incorrect length."
 *                  " Got {}, expected {}.".format(len(cov), self.n_species))
 *         self.surf.setCoveragesNoNorm(&data[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_13 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1949, __pyx_L1_error)
  }
  try {
    __pyx_v_self->surf->setCoveragesNoNorm((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_data.diminfo[0].strides))));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1949, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1937
 *             self.surf.setCoverages(&data[0])
 * 
 *     def set_unnormalized_coverages(self, cov):             # <<<<<<<<<<<<<<
 *         """
 *         Set the surface coverages without normalizing to force sum(cov) == 1.0.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.thermo.InterfacePhase.set_unnormalized_coverages", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_14InterfacePhase_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_14InterfacePhase_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_6thermo_14InterfacePhase_4__reduce_cython__(((struct __pyx_obj_7cantera_6thermo_InterfacePhase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.InterfacePhase.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_14InterfacePhase_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_14InterfacePhase_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_14InterfacePhase_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.InterfacePhase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_14InterfacePhase_6__setstate_cython__(((struct __pyx_obj_7cantera_6thermo_InterfacePhase *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_14InterfacePhase_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_InterfacePhase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.InterfacePhase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1963
 *         region.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.vaporFraction()
 *         def __set__(self, Q):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_1Q_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_1Q_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_1Q___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_1Q___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1964
 *         """
 *         def __get__(self):
 *             return self.thermo.vaporFraction()             # <<<<<<<<<<<<<<
 *         def __set__(self, Q):
 *             if (self.P >= self.critical_pressure or
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.__pyx_base.thermo->vaporFraction();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1964, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1963
 *         region.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.vaporFraction()
 *         def __set__(self, Q):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.Q.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1965
 *         def __get__(self):
 *             return self.thermo.vaporFraction()
 *         def __set__(self, Q):             # <<<<<<<<<<<<<<
 *             if (self.P >= self.critical_pressure or
 *                 abs(self.P-self.P_sat)/self.P > 1e-4):
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_9PureFluid_1Q_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_Q); /*proto*/
static int __pyx_pw_7cantera_6thermo_9PureFluid_1Q_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_Q) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_1Q_2__set__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), ((PyObject *)__pyx_v_Q));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_9PureFluid_1Q_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_Q) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1966
 *             return self.thermo.vaporFraction()
 *         def __set__(self, Q):
 *             if (self.P >= self.critical_pressure or             # <<<<<<<<<<<<<<
 *                 abs(self.P-self.P_sat)/self.P > 1e-4):
 *                 raise ValueError('Cannot set vapor quality outside the '
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_critical_pressure); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1966, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1966, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }

  /* "cantera/thermo.pyx":1967
 *         def __set__(self, Q):
 *             if (self.P >= self.critical_pressure or
 *                 abs(self.P-self.P_sat)/self.P > 1e-4):             # <<<<<<<<<<<<<<
 *                 raise ValueError('Cannot set vapor quality outside the '
 *                                  'two-phase region')
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P_sat); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Absolute(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_float_1eneg_4, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;

  /* "cantera/thermo.pyx":1966
 *             return self.thermo.vaporFraction()
 *         def __set__(self, Q):
 *             if (self.P >= self.critical_pressure or             # <<<<<<<<<<<<<<
 *                 abs(self.P-self.P_sat)/self.P > 1e-4):
 *                 raise ValueError('Cannot set vapor quality outside the '
 */
  if (unlikely(__pyx_t_1)) {

    /* "cantera/thermo.pyx":1968
 *             if (self.P >= self.critical_pressure or
 *                 abs(self.P-self.P_sat)/self.P > 1e-4):
 *                 raise ValueError('Cannot set vapor quality outside the '             # <<<<<<<<<<<<<<
 *                                  'two-phase region')
 *             self.thermo.setState_Psat(self.P, Q)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1968, __pyx_L1_error)

    /* "cantera/thermo.pyx":1966
 *             return self.thermo.vaporFraction()
 *         def __set__(self, Q):
 *             if (self.P >= self.critical_pressure or             # <<<<<<<<<<<<<<
 *                 abs(self.P-self.P_sat)/self.P > 1e-4):
 *                 raise ValueError('Cannot set vapor quality outside the '
 */
  }

  /* "cantera/thermo.pyx":1970
 *                 raise ValueError('Cannot set vapor quality outside the '
 *                                  'two-phase region')
 *             self.thermo.setState_Psat(self.P, Q)             # <<<<<<<<<<<<<<
 * 
 *     property TQ:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1970, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_Q); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1970, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.__pyx_base.thermo->setState_Psat(__pyx_t_6, __pyx_t_7);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1970, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1965
 *         def __get__(self):
 *             return self.thermo.vaporFraction()
 *         def __set__(self, Q):             # <<<<<<<<<<<<<<
 *             if (self.P >= self.critical_pressure or
 *                 abs(self.P-self.P_sat)/self.P > 1e-4):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.Q.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1974
 *     property TQ:
 *         """Get/Set the temperature [K] and vapor fraction of a two-phase state."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.Q
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2TQ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2TQ_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2TQ___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2TQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1975
 *         """Get/Set the temperature [K] and vapor fraction of a two-phase state."""
 *         def __get__(self):
 *             return self.T, self.Q             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1974
 *     property TQ:
 *         """Get/Set the temperature [K] and vapor fraction of a two-phase state."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.Q
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.TQ.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1976
 *         def __get__(self):
 *             return self.T, self.Q
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             Q = values[1] if values[1] is not None else self.Q
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_9PureFluid_2TQ_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_9PureFluid_2TQ_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2TQ_2__set__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_9PureFluid_2TQ_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_Q = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1977
 *             return self.T, self.Q
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T             # <<<<<<<<<<<<<<
 *             Q = values[1] if values[1] is not None else self.Q
 *             self.thermo.setState_Tsat(T, Q)
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_T = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":1978
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T
 *             Q = values[1] if values[1] is not None else self.Q             # <<<<<<<<<<<<<<
 *             self.thermo.setState_Tsat(T, Q)
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_Q = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":1979
 *             T = values[0] if values[0] is not None else self.T
 *             Q = values[1] if values[1] is not None else self.Q
 *             self.thermo.setState_Tsat(T, Q)             # <<<<<<<<<<<<<<
 * 
 *     property PQ:
 */
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_T); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1979, __pyx_L1_error)
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_Q); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1979, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.__pyx_base.thermo->setState_Tsat(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1979, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1976
 *         def __get__(self):
 *             return self.T, self.Q
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             Q = values[1] if values[1] is not None else self.Q
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.TQ.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_Q);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1983
 *     property PQ:
 *         """Get/Set the pressure [Pa] and vapor fraction of a two-phase state."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.P, self.Q
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2PQ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2PQ_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2PQ___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2PQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1984
 *         """Get/Set the pressure [Pa] and vapor fraction of a two-phase state."""
 *         def __get__(self):
 *             return self.P, self.Q             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             P = values[0] if values[0] is not None else self.P
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1983
 *     property PQ:
 *         """Get/Set the pressure [Pa] and vapor fraction of a two-phase state."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.P, self.Q
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.PQ.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1985
 *         def __get__(self):
 *             return self.P, self.Q
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             P = values[0] if values[0] is not None else self.P
 *             Q = values[1] if values[1] is not None else self.Q
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_9PureFluid_2PQ_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_9PureFluid_2PQ_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2PQ_2__set__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_9PureFluid_2PQ_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_P = NULL;
  PyObject *__pyx_v_Q = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1986
 *             return self.P, self.Q
 *         def __set__(self, values):
 *             P = values[0] if values[0] is not None else self.P             # <<<<<<<<<<<<<<
 *             Q = values[1] if values[1] is not None else self.Q
 *             self.thermo.setState_Psat(P, Q)
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_P = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":1987
 *         def __set__(self, values):
 *             P = values[0] if values[0] is not None else self.P
 *             Q = values[1] if values[1] is not None else self.Q             # <<<<<<<<<<<<<<
 *             self.thermo.setState_Psat(P, Q)
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1987, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_Q = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":1988
 *             P = values[0] if values[0] is not None else self.P
 *             Q = values[1] if values[1] is not None else self.Q
 *             self.thermo.setState_Psat(P, Q)             # <<<<<<<<<<<<<<
 * 
 *     property ST:
 */
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1988, __pyx_L1_error)
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_Q); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1988, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.__pyx_base.thermo->setState_Psat(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1988, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1985
 *         def __get__(self):
 *             return self.P, self.Q
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             P = values[0] if values[0] is not None else self.P
 *             Q = values[1] if values[1] is not None else self.Q
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.PQ.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_XDECREF(__pyx_v_Q);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1992
 *     property ST:
 *         """Get/Set the entropy [J/kg/K] and temperature [K] of a PureFluid."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.T
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2ST_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2ST_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2ST___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2ST___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":1993
 *         """Get/Set the entropy [J/kg/K] and temperature [K] of a PureFluid."""
 *         def __get__(self):
 *             return self.s, self.T             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             S = values[0] if values[0] is not None else self.s
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":1992
 *     property ST:
 *         """Get/Set the entropy [J/kg/K] and temperature [K] of a PureFluid."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.T
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.ST.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":1994
 *         def __get__(self):
 *             return self.s, self.T
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             S = values[0] if values[0] is not None else self.s
 *             T = values[1] if values[1] is not None else self.T
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_9PureFluid_2ST_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_9PureFluid_2ST_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2ST_2__set__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_9PureFluid_2ST_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_S = NULL;
  PyObject *__pyx_v_T = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":1995
 *             return self.s, self.T
 *         def __set__(self, values):
 *             S = values[0] if values[0] is not None else self.s             # <<<<<<<<<<<<<<
 *             T = values[1] if values[1] is not None else self.T
 *             self.thermo.setState_ST(S / self._mass_factor(), T)
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_S = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":1996
 *         def __set__(self, values):
 *             S = values[0] if values[0] is not None else self.s
 *             T = values[1] if values[1] is not None else self.T             # <<<<<<<<<<<<<<
 *             self.thermo.setState_ST(S / self._mass_factor(), T)
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_T = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":1997
 *             S = values[0] if values[0] is not None else self.s
 *             T = values[1] if values[1] is not None else self.T
 *             self.thermo.setState_ST(S / self._mass_factor(), T)             # <<<<<<<<<<<<<<
 * 
 *     property TV:
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_7cantera_6thermo_PureFluid *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._mass_factor(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1997, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_S, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_T); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1997, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.__pyx_base.thermo->setState_ST(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1997, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":1994
 *         def __get__(self):
 *             return self.s, self.T
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             S = values[0] if values[0] is not None else self.s
 *             T = values[1] if values[1] is not None else self.T
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.ST.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_S);
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2004
 *         a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.v
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2TV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2TV_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2TV___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2TV___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2005
 *         """
 *         def __get__(self):
 *             return self.T, self.v             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2004
 *         a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.v
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.TV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2006
 *         def __get__(self):
 *             return self.T, self.v
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             V = values[1] if values[1] is not None else self.v
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_9PureFluid_2TV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_9PureFluid_2TV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2TV_2__set__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_9PureFluid_2TV_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_V = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":2007
 *             return self.T, self.v
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T             # <<<<<<<<<<<<<<
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_TV(T, V / self._mass_factor())
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_T = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2008
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T
 *             V = values[1] if values[1] is not None else self.v             # <<<<<<<<<<<<<<
 *             self.thermo.setState_TV(T, V / self._mass_factor())
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2008, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2008, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_V = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2009
 *             T = values[0] if values[0] is not None else self.T
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_TV(T, V / self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property PV:
 */
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_T); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2009, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_PureFluid *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._mass_factor(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2009, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_V, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2009, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  try {
    __pyx_v_self->__pyx_base.__pyx_base.thermo->setState_TV(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 2009, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":2006
 *         def __get__(self):
 *             return self.T, self.v
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             V = values[1] if values[1] is not None else self.v
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.TV.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2016
 *         a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.P, self.v
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2PV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2PV_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2PV___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2PV___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2017
 *         """
 *         def __get__(self):
 *             return self.P, self.v             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             P = values[0] if values[0] is not None else self.P
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2016
 *         a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.P, self.v
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.PV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2018
 *         def __get__(self):
 *             return self.P, self.v
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             P = values[0] if values[0] is not None else self.P
 *             V = values[1] if values[1] is not None else self.v
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_9PureFluid_2PV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_9PureFluid_2PV_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2PV_2__set__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_9PureFluid_2PV_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_P = NULL;
  PyObject *__pyx_v_V = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":2019
 *             return self.P, self.v
 *         def __set__(self, values):
 *             P = values[0] if values[0] is not None else self.P             # <<<<<<<<<<<<<<
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_PV(P, V / self._mass_factor())
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_P = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2020
 *         def __set__(self, values):
 *             P = values[0] if values[0] is not None else self.P
 *             V = values[1] if values[1] is not None else self.v             # <<<<<<<<<<<<<<
 *             self.thermo.setState_PV(P, V / self._mass_factor())
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2020, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2020, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_V = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2021
 *             P = values[0] if values[0] is not None else self.P
 *             V = values[1] if values[1] is not None else self.v
 *             self.thermo.setState_PV(P, V / self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property UP:
 */
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2021, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_PureFluid *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._mass_factor(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2021, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_V, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  try {
    __pyx_v_self->__pyx_base.__pyx_base.thermo->setState_PV(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 2021, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":2018
 *         def __get__(self):
 *             return self.P, self.v
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             P = values[0] if values[0] is not None else self.P
 *             V = values[1] if values[1] is not None else self.v
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.PV.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2028
 *         pressure [Pa] of a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.u, self.P
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2UP_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2UP_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2UP___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2UP___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2029
 *         """
 *         def __get__(self):
 *             return self.u, self.P             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             U = values[0] if values[0] is not None else self.u
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2028
 *         pressure [Pa] of a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.u, self.P
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.UP.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2030
 *         def __get__(self):
 *             return self.u, self.P
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             U = values[0] if values[0] is not None else self.u
 *             P = values[1] if values[1] is not None else self.P
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_9PureFluid_2UP_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_9PureFluid_2UP_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2UP_2__set__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_9PureFluid_2UP_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_U = NULL;
  PyObject *__pyx_v_P = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":2031
 *             return self.u, self.P
 *         def __set__(self, values):
 *             U = values[0] if values[0] is not None else self.u             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             self.thermo.setState_UP(U / self._mass_factor(), P)
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_U = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2032
 *         def __set__(self, values):
 *             U = values[0] if values[0] is not None else self.u
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             self.thermo.setState_UP(U / self._mass_factor(), P)
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_P = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2033
 *             U = values[0] if values[0] is not None else self.u
 *             P = values[1] if values[1] is not None else self.P
 *             self.thermo.setState_UP(U / self._mass_factor(), P)             # <<<<<<<<<<<<<<
 * 
 *     property VH:
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_7cantera_6thermo_PureFluid *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._mass_factor(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2033, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_U, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2033, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2033, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.__pyx_base.thermo->setState_UP(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 2033, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":2030
 *         def __get__(self):
 *             return self.u, self.P
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             U = values[0] if values[0] is not None else self.u
 *             P = values[1] if values[1] is not None else self.P
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.UP.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_U);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2040
 *         enthalpy [J/kg] of a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.v, self.h
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2VH_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2VH_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2VH___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2VH___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2041
 *         """
 *         def __get__(self):
 *             return self.v, self.h             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             V = values[0] if values[0] is not None else self.v
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2040
 *         enthalpy [J/kg] of a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.v, self.h
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.VH.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2042
 *         def __get__(self):
 *             return self.v, self.h
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             V = values[0] if values[0] is not None else self.v
 *             H = values[1] if values[1] is not None else self.h
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_9PureFluid_2VH_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_9PureFluid_2VH_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2VH_2__set__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_9PureFluid_2VH_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_V = NULL;
  PyObject *__pyx_v_H = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":2043
 *             return self.v, self.h
 *         def __set__(self, values):
 *             V = values[0] if values[0] is not None else self.v             # <<<<<<<<<<<<<<
 *             H = values[1] if values[1] is not None else self.h
 *             self.thermo.setState_VH(V/self._mass_factor(), H/self._mass_factor())
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_V = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2044
 *         def __set__(self, values):
 *             V = values[0] if values[0] is not None else self.v
 *             H = values[1] if values[1] is not None else self.h             # <<<<<<<<<<<<<<
 *             self.thermo.setState_VH(V/self._mass_factor(), H/self._mass_factor())
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_H = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2045
 *             V = values[0] if values[0] is not None else self.v
 *             H = values[1] if values[1] is not None else self.h
 *             self.thermo.setState_VH(V/self._mass_factor(), H/self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property TH:
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_7cantera_6thermo_PureFluid *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._mass_factor(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2045, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_V, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2045, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_PureFluid *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._mass_factor(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2045, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_H, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2045, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.__pyx_base.thermo->setState_VH(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 2045, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":2042
 *         def __get__(self):
 *             return self.v, self.h
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             V = values[0] if values[0] is not None else self.v
 *             H = values[1] if values[1] is not None else self.h
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.VH.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_V);
  __Pyx_XDECREF(__pyx_v_H);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2052
 *         of a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.h
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2TH_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2TH_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2TH___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2TH___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2053
 *         """
 *         def __get__(self):
 *             return self.T, self.h             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2052
 *         of a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.h
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.TH.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2054
 *         def __get__(self):
 *             return self.T, self.h
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             H = values[1] if values[1] is not None else self.h
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_9PureFluid_2TH_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_9PureFluid_2TH_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2TH_2__set__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_9PureFluid_2TH_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_H = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":2055
 *             return self.T, self.h
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T             # <<<<<<<<<<<<<<
 *             H = values[1] if values[1] is not None else self.h
 *             self.thermo.setState_TH(T, H / self._mass_factor())
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2055, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2055, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_T = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2056
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T
 *             H = values[1] if values[1] is not None else self.h             # <<<<<<<<<<<<<<
 *             self.thermo.setState_TH(T, H / self._mass_factor())
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2056, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2056, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_H = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2057
 *             T = values[0] if values[0] is not None else self.T
 *             H = values[1] if values[1] is not None else self.h
 *             self.thermo.setState_TH(T, H / self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property SH:
 */
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_T); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2057, __pyx_L1_error)
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_PureFluid *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._mass_factor(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2057, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_H, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2057, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  try {
    __pyx_v_self->__pyx_base.__pyx_base.thermo->setState_TH(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 2057, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":2054
 *         def __get__(self):
 *             return self.T, self.h
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             H = values[1] if values[1] is not None else self.h
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.TH.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_H);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2064
 *         enthalpy [J/kg] of a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.h
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2SH_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_2SH_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2SH___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2SH___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2065
 *         """
 *         def __get__(self):
 *             return self.s, self.h             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             S = values[0] if values[0] is not None else self.s
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2064
 *         enthalpy [J/kg] of a PureFluid.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.h
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.SH.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2066
 *         def __get__(self):
 *             return self.s, self.h
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             S = values[0] if values[0] is not None else self.s
 *             H = values[1] if values[1] is not None else self.h
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_9PureFluid_2SH_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_9PureFluid_2SH_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2SH_2__set__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_9PureFluid_2SH_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_S = NULL;
  PyObject *__pyx_v_H = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":2067
 *             return self.s, self.h
 *         def __set__(self, values):
 *             S = values[0] if values[0] is not None else self.s             # <<<<<<<<<<<<<<
 *             H = values[1] if values[1] is not None else self.h
 *             self.thermo.setState_SH(S/self._mass_factor(), H/self._mass_factor())
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_S = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2068
 *         def __set__(self, values):
 *             S = values[0] if values[0] is not None else self.s
 *             H = values[1] if values[1] is not None else self.h             # <<<<<<<<<<<<<<
 *             self.thermo.setState_SH(S/self._mass_factor(), H/self._mass_factor())
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_H = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2069
 *             S = values[0] if values[0] is not None else self.s
 *             H = values[1] if values[1] is not None else self.h
 *             self.thermo.setState_SH(S/self._mass_factor(), H/self._mass_factor())             # <<<<<<<<<<<<<<
 * 
 *     property TDQ:
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_7cantera_6thermo_PureFluid *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._mass_factor(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2069, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_S, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = ((struct __pyx_vtabstruct_7cantera_6thermo_PureFluid *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._mass_factor(((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)__pyx_v_self)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2069, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_H, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->__pyx_base.__pyx_base.thermo->setState_SH(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 2069, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":2066
 *         def __get__(self):
 *             return self.s, self.h
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             S = values[0] if values[0] is not None else self.s
 *             H = values[1] if values[1] is not None else self.h
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.SH.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_S);
  __Pyx_XDECREF(__pyx_v_H);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2076
 *         fraction.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.density, self.Q
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3TDQ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3TDQ_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_3TDQ___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3TDQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2077
 *         """
 *         def __get__(self):
 *             return self.T, self.density, self.Q             # <<<<<<<<<<<<<<
 * 
 *     property TPQ:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2076
 *         fraction.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.density, self.Q
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.TDQ.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2086
 *         An Exception is raised if the thermodynamic state is not consistent.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.P, self.Q
 *         def __set__(self, values):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3TPQ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3TPQ_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_3TPQ___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3TPQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2087
 *         """
 *         def __get__(self):
 *             return self.T, self.P, self.Q             # <<<<<<<<<<<<<<
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2086
 *         An Exception is raised if the thermodynamic state is not consistent.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.T, self.P, self.Q
 *         def __set__(self, values):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.TPQ.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2088
 *         def __get__(self):
 *             return self.T, self.P, self.Q
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P
 */

/* Python wrapper */
static int __pyx_pw_7cantera_6thermo_9PureFluid_3TPQ_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_7cantera_6thermo_9PureFluid_3TPQ_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_values) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_3TPQ_2__set__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_6thermo_9PureFluid_3TPQ_2__set__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_T = NULL;
  PyObject *__pyx_v_P = NULL;
  PyObject *__pyx_v_Q = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/thermo.pyx":2089
 *             return self.T, self.P, self.Q
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T             # <<<<<<<<<<<<<<
 *             P = values[1] if values[1] is not None else self.P
 *             Q = values[2] if values[2] is not None else self.Q
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2089, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2089, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_T = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2090
 *         def __set__(self, values):
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P             # <<<<<<<<<<<<<<
 *             Q = values[2] if values[2] is not None else self.Q
 *             self.thermo.setState_TPQ(T, P, Q)
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_P = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2091
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P
 *             Q = values[2] if values[2] is not None else self.Q             # <<<<<<<<<<<<<<
 *             self.thermo.setState_TPQ(T, P, Q)
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = (__pyx_t_2 != Py_None);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2091, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2091, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_v_Q = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/thermo.pyx":2092
 *             P = values[1] if values[1] is not None else self.P
 *             Q = values[2] if values[2] is not None else self.Q
 *             self.thermo.setState_TPQ(T, P, Q)             # <<<<<<<<<<<<<<
 * 
 *     property UVQ:
 */
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_T); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2092, __pyx_L1_error)
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_P); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2092, __pyx_L1_error)
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_Q); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2092, __pyx_L1_error)
  try {
    __pyx_v_self->__pyx_base.__pyx_base.thermo->setState_TPQ(__pyx_t_4, __pyx_t_5, __pyx_t_6);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 2092, __pyx_L1_error)
  }

  /* "cantera/thermo.pyx":2088
 *         def __get__(self):
 *             return self.T, self.P, self.Q
 *         def __set__(self, values):             # <<<<<<<<<<<<<<
 *             T = values[0] if values[0] is not None else self.T
 *             P = values[1] if values[1] is not None else self.P
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.TPQ.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_T);
  __Pyx_XDECREF(__pyx_v_P);
  __Pyx_XDECREF(__pyx_v_Q);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2099
 *         [m^3/kg or m^3/kmol], and vapor fraction.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.u, self.v, self.Q
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3UVQ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3UVQ_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_3UVQ___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3UVQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2100
 *         """
 *         def __get__(self):
 *             return self.u, self.v, self.Q             # <<<<<<<<<<<<<<
 * 
 *     property DPQ:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_u); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2099
 *         [m^3/kg or m^3/kmol], and vapor fraction.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.u, self.v, self.Q
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.UVQ.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2104
 *     property DPQ:
 *         """Get the density [kg/m^3], pressure [Pa], and vapor fraction."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.density, self.P, self.Q
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3DPQ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3DPQ_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_3DPQ___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3DPQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2105
 *         """Get the density [kg/m^3], pressure [Pa], and vapor fraction."""
 *         def __get__(self):
 *             return self.density, self.P, self.Q             # <<<<<<<<<<<<<<
 * 
 *     property HPQ:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_density); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2104
 *     property DPQ:
 *         """Get the density [kg/m^3], pressure [Pa], and vapor fraction."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.density, self.P, self.Q
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.DPQ.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2111
 *         Get the enthalpy [J/kg or J/kmol], pressure [Pa] and vapor fraction.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.h, self.P, self.Q
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3HPQ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3HPQ_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_3HPQ___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3HPQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2112
 *         """
 *         def __get__(self):
 *             return self.h, self.P, self.Q             # <<<<<<<<<<<<<<
 * 
 *     property SPQ:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2111
 *         Get the enthalpy [J/kg or J/kmol], pressure [Pa] and vapor fraction.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.h, self.P, self.Q
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.HPQ.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2118
 *         Get the entropy [J/kg/K or J/kmol/K], pressure [Pa], and vapor fraction.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.P, self.Q
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3SPQ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3SPQ_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_3SPQ___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3SPQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2119
 *         """
 *         def __get__(self):
 *             return self.s, self.P, self.Q             # <<<<<<<<<<<<<<
 * 
 *     property SVQ:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2118
 *         Get the entropy [J/kg/K or J/kmol/K], pressure [Pa], and vapor fraction.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.P, self.Q
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.SPQ.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2126
 *         m^3/kmol], and vapor fraction.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.v, self.Q
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3SVQ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3SVQ_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_3SVQ___get__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_3SVQ___get__(struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/thermo.pyx":2127
 *         """
 *         def __get__(self):
 *             return self.s, self.v, self.Q             # <<<<<<<<<<<<<<
 * 
 * # TODO: Remove these helper methods when support for Python 3.8 is dropped. Python 3.9
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Q); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2126
 *         m^3/kmol], and vapor fraction.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.s, self.v, self.Q
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.thermo.PureFluid.SVQ.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_9PureFluid_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_9PureFluid_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid___reduce_cython__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid___reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__base_self_base_self_kineti, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.PureFluid.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_9PureFluid_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_9PureFluid_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_9PureFluid_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.PureFluid.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_9PureFluid_2__setstate_cython__(((struct __pyx_obj_7cantera_6thermo_PureFluid *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_9PureFluid_2__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_6thermo_PureFluid *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__base_self_base_self_kineti, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo.PureFluid.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2132
 * # allows the classmethod and property decorators to be chained, so these can be
 * # implemented as properties in the Element class.
 * def _element_symbols():             # <<<<<<<<<<<<<<
 *     syms = elementSymbols()
 *     return tuple(pystr(s) for s in syms)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_1_element_symbols(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_1_element_symbols = {"_element_symbols", (PyCFunction)__pyx_pw_7cantera_6thermo_1_element_symbols, METH_NOARGS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_1_element_symbols(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_element_symbols (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo__element_symbols(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7cantera_6thermo_16_element_symbols_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cantera/thermo.pyx":2134
 * def _element_symbols():
 *     syms = elementSymbols()
 *     return tuple(pystr(s) for s in syms)             # <<<<<<<<<<<<<<
 * 
 * 
 */

static PyObject *__pyx_pf_7cantera_6thermo_16_element_symbols_genexpr(CYTHON_UNUSED PyObject *__pyx_self, std::vector<std::string>  __pyx_genexpr_arg_0) {
  struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr *)__pyx_tp_new_7cantera_6thermo___pyx_scope_struct__genexpr(__pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2134, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7cantera_6thermo_16_element_symbols_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_element_symbols_locals_genexpr, __pyx_n_s_cantera_thermo); if (unlikely(!gen)) __PYX_ERR(0, 2134, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo._element_symbols.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7cantera_6thermo_16_element_symbols_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr *__pyx_cur_scope = ((struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<std::string> ::iterator __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0.begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_cur_scope->__pyx_genexpr_arg_0.end())) break;
    __pyx_t_2 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_cur_scope->__pyx_v_s = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
    __pyx_t_3 = __pyx_f_7cantera_6_utils_pystr(__pyx_cur_scope->__pyx_v_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_t_0 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_cur_scope->__pyx_t_0);
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2134, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2132
 * # allows the classmethod and property decorators to be chained, so these can be
 * # implemented as properties in the Element class.
 * def _element_symbols():             # <<<<<<<<<<<<<<
 *     syms = elementSymbols()
 *     return tuple(pystr(s) for s in syms)
 */

static PyObject *__pyx_pf_7cantera_6thermo__element_symbols(CYTHON_UNUSED PyObject *__pyx_self) {
  std::vector<std::string>  __pyx_v_syms;
  PyObject *__pyx_gb_7cantera_6thermo_16_element_symbols_2generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_element_symbols", 0);

  /* "cantera/thermo.pyx":2133
 * # implemented as properties in the Element class.
 * def _element_symbols():
 *     syms = elementSymbols()             # <<<<<<<<<<<<<<
 *     return tuple(pystr(s) for s in syms)
 * 
 */
  __pyx_v_syms = Cantera::elementSymbols();

  /* "cantera/thermo.pyx":2134
 * def _element_symbols():
 *     syms = elementSymbols()
 *     return tuple(pystr(s) for s in syms)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_7cantera_6thermo_16_element_symbols_genexpr(NULL, __pyx_v_syms); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2132
 * # allows the classmethod and property decorators to be chained, so these can be
 * # implemented as properties in the Element class.
 * def _element_symbols():             # <<<<<<<<<<<<<<
 *     syms = elementSymbols()
 *     return tuple(pystr(s) for s in syms)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo._element_symbols", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_7cantera_6thermo_16_element_symbols_2generator);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2137
 * 
 * 
 * def _element_names():             # <<<<<<<<<<<<<<
 *     names = elementNames()
 *     return tuple(pystr(n) for n in names)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_3_element_names(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_3_element_names = {"_element_names", (PyCFunction)__pyx_pw_7cantera_6thermo_3_element_names, METH_NOARGS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_3_element_names(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_element_names (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_6thermo_2_element_names(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_7cantera_6thermo_14_element_names_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "cantera/thermo.pyx":2139
 * def _element_names():
 *     names = elementNames()
 *     return tuple(pystr(n) for n in names)             # <<<<<<<<<<<<<<
 * 
 * 
 */

static PyObject *__pyx_pf_7cantera_6thermo_14_element_names_genexpr(CYTHON_UNUSED PyObject *__pyx_self, std::vector<std::string>  __pyx_genexpr_arg_0) {
  struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr *)__pyx_tp_new_7cantera_6thermo___pyx_scope_struct_1_genexpr(__pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2139, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_7cantera_6thermo_14_element_names_2generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_element_names_locals_genexpr, __pyx_n_s_cantera_thermo); if (unlikely(!gen)) __PYX_ERR(0, 2139, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.thermo._element_names.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_7cantera_6thermo_14_element_names_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<std::string> ::iterator __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2139, __pyx_L1_error)
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0.begin();
  for (;;) {
    if (!(__pyx_t_1 != __pyx_cur_scope->__pyx_genexpr_arg_0.end())) break;
    __pyx_t_2 = *__pyx_t_1;
    ++__pyx_t_1;
    __pyx_cur_scope->__pyx_v_n = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);
    __pyx_t_3 = __pyx_f_7cantera_6_utils_pystr(__pyx_cur_scope->__pyx_v_n); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_t_0 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_cur_scope->__pyx_t_0);
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2139, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2137
 * 
 * 
 * def _element_names():             # <<<<<<<<<<<<<<
 *     names = elementNames()
 *     return tuple(pystr(n) for n in names)
 */

static PyObject *__pyx_pf_7cantera_6thermo_2_element_names(CYTHON_UNUSED PyObject *__pyx_self) {
  std::vector<std::string>  __pyx_v_names;
  PyObject *__pyx_gb_7cantera_6thermo_14_element_names_2generator1 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_element_names", 0);

  /* "cantera/thermo.pyx":2138
 * 
 * def _element_names():
 *     names = elementNames()             # <<<<<<<<<<<<<<
 *     return tuple(pystr(n) for n in names)
 * 
 */
  __pyx_v_names = Cantera::elementNames();

  /* "cantera/thermo.pyx":2139
 * def _element_names():
 *     names = elementNames()
 *     return tuple(pystr(n) for n in names)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_pf_7cantera_6thermo_14_element_names_genexpr(NULL, __pyx_v_names); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2137
 * 
 * 
 * def _element_names():             # <<<<<<<<<<<<<<
 *     names = elementNames()
 *     return tuple(pystr(n) for n in names)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.thermo._element_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_7cantera_6thermo_14_element_names_2generator1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2194
 *     element_names = _element_names()
 * 
 *     def __init__(self, arg):             # <<<<<<<<<<<<<<
 *         if isinstance(arg, (str, bytes)):
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Element_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Element_1__init__ = {"__init__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Element_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_6thermo_7Element_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_arg = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_arg,0};
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2194, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_arg)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2194, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 2194, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 2194, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_arg = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 2194, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.Element.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Element___init__(__pyx_self, __pyx_v_self, __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Element___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  std::string __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  double __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/thermo.pyx":2195
 * 
 *     def __init__(self, arg):
 *         if isinstance(arg, (str, bytes)):             # <<<<<<<<<<<<<<
 *             try:
 *                 # Assume the argument is the element symbol and try to get the name
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_arg); 
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyBytes_Check(__pyx_v_arg); 
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cantera/thermo.pyx":2196
 *     def __init__(self, arg):
 *         if isinstance(arg, (str, bytes)):
 *             try:             # <<<<<<<<<<<<<<
 *                 # Assume the argument is the element symbol and try to get the name
 *                 self._name = pystr(getElementName(stringify(arg)))
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "cantera/thermo.pyx":2198
 *             try:
 *                 # Assume the argument is the element symbol and try to get the name
 *                 self._name = pystr(getElementName(stringify(arg)))             # <<<<<<<<<<<<<<
 *             except CanteraError:
 *                 # If getting the name failed, the argument must be the name
 */
        __pyx_t_6 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_arg); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2198, __pyx_L6_error)
        try {
          __pyx_t_7 = Cantera::getElementName(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6));
        } catch(...) {
          translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
          __PYX_ERR(0, 2198, __pyx_L6_error)
        }
        __pyx_t_8 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2198, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name_2, __pyx_t_8) < 0) __PYX_ERR(0, 2198, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "cantera/thermo.pyx":2196
 *     def __init__(self, arg):
 *         if isinstance(arg, (str, bytes)):
 *             try:             # <<<<<<<<<<<<<<
 *                 # Assume the argument is the element symbol and try to get the name
 *                 self._name = pystr(getElementName(stringify(arg)))
 */
      }

      /* "cantera/thermo.pyx":2204
 *                 self._name = arg.lower()
 *             else:
 *                 self._symbol = arg             # <<<<<<<<<<<<<<
 * 
 *             self._atomic_number = getAtomicNumber(stringify(arg))
 */
      /*else:*/ {
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_symbol, __pyx_v_arg) < 0) __PYX_ERR(0, 2204, __pyx_L8_except_error)
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L11_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "cantera/thermo.pyx":2199
 *                 # Assume the argument is the element symbol and try to get the name
 *                 self._name = pystr(getElementName(stringify(arg)))
 *             except CanteraError:             # <<<<<<<<<<<<<<
 *                 # If getting the name failed, the argument must be the name
 *                 self._symbol = pystr(getElementSymbol(stringify(arg)))
 */
      __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_CanteraError); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2199, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_8, __pyx_t_11);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0;
      if (__pyx_t_12) {
        __Pyx_AddTraceback("cantera.thermo.Element.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 2199, __pyx_L8_except_error)
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_8);

        /* "cantera/thermo.pyx":2201
 *             except CanteraError:
 *                 # If getting the name failed, the argument must be the name
 *                 self._symbol = pystr(getElementSymbol(stringify(arg)))             # <<<<<<<<<<<<<<
 *                 self._name = arg.lower()
 *             else:
 */
        __pyx_t_7 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_arg); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2201, __pyx_L8_except_error)
        try {
          __pyx_t_6 = Cantera::getElementSymbol(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7));
        } catch(...) {
          translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
          __PYX_ERR(0, 2201, __pyx_L8_except_error)
        }
        __pyx_t_11 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2201, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_symbol, __pyx_t_11) < 0) __PYX_ERR(0, 2201, __pyx_L8_except_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "cantera/thermo.pyx":2202
 *                 # If getting the name failed, the argument must be the name
 *                 self._symbol = pystr(getElementSymbol(stringify(arg)))
 *                 self._name = arg.lower()             # <<<<<<<<<<<<<<
 *             else:
 *                 self._symbol = arg
 */
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_lower); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2202, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_14, };
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_12, 0+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2202, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name_2, __pyx_t_11) < 0) __PYX_ERR(0, 2202, __pyx_L8_except_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_exception_handled;
      }
      goto __pyx_L8_except_error;

      /* "cantera/thermo.pyx":2196
 *     def __init__(self, arg):
 *         if isinstance(arg, (str, bytes)):
 *             try:             # <<<<<<<<<<<<<<
 *                 # Assume the argument is the element symbol and try to get the name
 *                 self._name = pystr(getElementName(stringify(arg)))
 */
      __pyx_L8_except_error:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      __pyx_L11_try_end:;
    }

    /* "cantera/thermo.pyx":2206
 *                 self._symbol = arg
 * 
 *             self._atomic_number = getAtomicNumber(stringify(arg))             # <<<<<<<<<<<<<<
 *             self._weight = getElementWeight(stringify(arg))
 *         elif isinstance(arg, int):
 */
    __pyx_t_6 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_arg); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2206, __pyx_L1_error)
    try {
      __pyx_t_12 = Cantera::getAtomicNumber(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 2206, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_atomic_number, __pyx_t_8) < 0) __PYX_ERR(0, 2206, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "cantera/thermo.pyx":2207
 * 
 *             self._atomic_number = getAtomicNumber(stringify(arg))
 *             self._weight = getElementWeight(stringify(arg))             # <<<<<<<<<<<<<<
 *         elif isinstance(arg, int):
 *             self._atomic_number = arg
 */
    __pyx_t_6 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_arg); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2207, __pyx_L1_error)
    try {
      __pyx_t_15 = Cantera::getElementWeight(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 2207, __pyx_L1_error)
    }
    __pyx_t_8 = PyFloat_FromDouble(__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_weight, __pyx_t_8) < 0) __PYX_ERR(0, 2207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "cantera/thermo.pyx":2195
 * 
 *     def __init__(self, arg):
 *         if isinstance(arg, (str, bytes)):             # <<<<<<<<<<<<<<
 *             try:
 *                 # Assume the argument is the element symbol and try to get the name
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":2208
 *             self._atomic_number = getAtomicNumber(stringify(arg))
 *             self._weight = getElementWeight(stringify(arg))
 *         elif isinstance(arg, int):             # <<<<<<<<<<<<<<
 *             self._atomic_number = arg
 *             self._name = pystr(getElementName(<int>arg))
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_arg); 
  if (likely(__pyx_t_1)) {

    /* "cantera/thermo.pyx":2209
 *             self._weight = getElementWeight(stringify(arg))
 *         elif isinstance(arg, int):
 *             self._atomic_number = arg             # <<<<<<<<<<<<<<
 *             self._name = pystr(getElementName(<int>arg))
 *             self._symbol = pystr(getElementSymbol(<int>arg))
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_atomic_number, __pyx_v_arg) < 0) __PYX_ERR(0, 2209, __pyx_L1_error)

    /* "cantera/thermo.pyx":2210
 *         elif isinstance(arg, int):
 *             self._atomic_number = arg
 *             self._name = pystr(getElementName(<int>arg))             # <<<<<<<<<<<<<<
 *             self._symbol = pystr(getElementSymbol(<int>arg))
 *             self._weight = getElementWeight(<int>arg)
 */
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_arg); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2210, __pyx_L1_error)
    try {
      __pyx_t_6 = Cantera::getElementName(((int)__pyx_t_12));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 2210, __pyx_L1_error)
    }
    __pyx_t_8 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_name_2, __pyx_t_8) < 0) __PYX_ERR(0, 2210, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "cantera/thermo.pyx":2211
 *             self._atomic_number = arg
 *             self._name = pystr(getElementName(<int>arg))
 *             self._symbol = pystr(getElementSymbol(<int>arg))             # <<<<<<<<<<<<<<
 *             self._weight = getElementWeight(<int>arg)
 *         else:
 */
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_arg); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2211, __pyx_L1_error)
    try {
      __pyx_t_6 = Cantera::getElementSymbol(((int)__pyx_t_12));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 2211, __pyx_L1_error)
    }
    __pyx_t_8 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_symbol, __pyx_t_8) < 0) __PYX_ERR(0, 2211, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "cantera/thermo.pyx":2212
 *             self._name = pystr(getElementName(<int>arg))
 *             self._symbol = pystr(getElementSymbol(<int>arg))
 *             self._weight = getElementWeight(<int>arg)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError('The input argument to Element must be a string '
 */
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_arg); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2212, __pyx_L1_error)
    try {
      __pyx_t_15 = Cantera::getElementWeight(((int)__pyx_t_12));
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 2212, __pyx_L1_error)
    }
    __pyx_t_8 = PyFloat_FromDouble(__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_weight, __pyx_t_8) < 0) __PYX_ERR(0, 2212, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "cantera/thermo.pyx":2208
 *             self._atomic_number = getAtomicNumber(stringify(arg))
 *             self._weight = getElementWeight(stringify(arg))
 *         elif isinstance(arg, int):             # <<<<<<<<<<<<<<
 *             self._atomic_number = arg
 *             self._name = pystr(getElementName(<int>arg))
 */
    goto __pyx_L3;
  }

  /* "cantera/thermo.pyx":2214
 *             self._weight = getElementWeight(<int>arg)
 *         else:
 *             raise TypeError('The input argument to Element must be a string '             # <<<<<<<<<<<<<<
 *                             'or an integer')
 * 
 */
  /*else*/ {
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 2214, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/thermo.pyx":2194
 *     element_names = _element_names()
 * 
 *     def __init__(self, arg):             # <<<<<<<<<<<<<<
 *         if isinstance(arg, (str, bytes)):
 *             try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("cantera.thermo.Element.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2217
 *                             'or an integer')
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self):
 *         """The name of the element or isotope."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Element_3name(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_7Element_2name, "The name of the element or isotope.");
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Element_3name = {"name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Element_3name, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Element_2name};
static PyObject *__pyx_pw_7cantera_6thermo_7Element_3name(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("name (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2217, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "name") < 0)) __PYX_ERR(0, 2217, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("name", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2217, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.Element.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Element_2name(__pyx_self, __pyx_v_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Element_2name(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("name", 0);

  /* "cantera/thermo.pyx":2220
 *     def name(self):
 *         """The name of the element or isotope."""
 *         return self._name             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2217
 *                             'or an integer')
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self):
 *         """The name of the element or isotope."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.Element.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2222
 *         return self._name
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def atomic_number(self):
 *         """The atomic number of the element or isotope."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Element_5atomic_number(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_7Element_4atomic_number, "The atomic number of the element or isotope.");
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Element_5atomic_number = {"atomic_number", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Element_5atomic_number, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Element_4atomic_number};
static PyObject *__pyx_pw_7cantera_6thermo_7Element_5atomic_number(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("atomic_number (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2222, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "atomic_number") < 0)) __PYX_ERR(0, 2222, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("atomic_number", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2222, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.Element.atomic_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Element_4atomic_number(__pyx_self, __pyx_v_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Element_4atomic_number(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("atomic_number", 0);

  /* "cantera/thermo.pyx":2225
 *     def atomic_number(self):
 *         """The atomic number of the element or isotope."""
 *         return self._atomic_number             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_atomic_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2222
 *         return self._name
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def atomic_number(self):
 *         """The atomic number of the element or isotope."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.Element.atomic_number", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2227
 *         return self._atomic_number
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def symbol(self):
 *         """The symbol of the element or isotope."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Element_7symbol(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_7Element_6symbol, "The symbol of the element or isotope.");
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Element_7symbol = {"symbol", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Element_7symbol, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Element_6symbol};
static PyObject *__pyx_pw_7cantera_6thermo_7Element_7symbol(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("symbol (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2227, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "symbol") < 0)) __PYX_ERR(0, 2227, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("symbol", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2227, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.Element.symbol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Element_6symbol(__pyx_self, __pyx_v_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Element_6symbol(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("symbol", 0);

  /* "cantera/thermo.pyx":2230
 *     def symbol(self):
 *         """The symbol of the element or isotope."""
 *         return self._symbol             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_symbol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2227
 *         return self._atomic_number
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def symbol(self):
 *         """The symbol of the element or isotope."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.Element.symbol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/thermo.pyx":2232
 *         return self._symbol
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def weight(self):
 *         """The atomic weight of the element or isotope."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_6thermo_7Element_9weight(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_6thermo_7Element_8weight, "The atomic weight of the element or isotope.");
static PyMethodDef __pyx_mdef_7cantera_6thermo_7Element_9weight = {"weight", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Element_9weight, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Element_8weight};
static PyObject *__pyx_pw_7cantera_6thermo_7Element_9weight(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("weight (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2232, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "weight") < 0)) __PYX_ERR(0, 2232, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("weight", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2232, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.thermo.Element.weight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_6thermo_7Element_8weight(__pyx_self, __pyx_v_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_6thermo_7Element_8weight(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("weight", 0);

  /* "cantera/thermo.pyx":2235
 *     def weight(self):
 *         """The atomic weight of the element or isotope."""
 *         return self._weight             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_weight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/thermo.pyx":2232
 *         return self._symbol
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def weight(self):
 *         """The atomic weight of the element or isotope."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.thermo.Element.weight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7cantera_6thermo_Species __pyx_vtable_7cantera_6thermo_Species;

static PyObject *__pyx_tp_new_7cantera_6thermo_Species(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cantera_6thermo_Species *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7cantera_6thermo_Species *)o);
  p->__pyx_vtab = __pyx_vtabptr_7cantera_6thermo_Species;
  new((void*)&(p->_species)) std::shared_ptr<Cantera::Species> ();
  p->_phase = ((struct __pyx_obj_7cantera_12solutionbase__SolutionBase *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cantera_6thermo_7Species_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cantera_6thermo_Species(PyObject *o) {
  struct __pyx_obj_7cantera_6thermo_Species *p = (struct __pyx_obj_7cantera_6thermo_Species *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7cantera_6thermo_Species) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_species);
  Py_CLEAR(p->_phase);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cantera_6thermo_Species(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cantera_6thermo_Species *p = (struct __pyx_obj_7cantera_6thermo_Species *)o;
  if (p->_phase) {
    e = (*v)(((PyObject *)p->_phase), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cantera_6thermo_Species(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cantera_6thermo_Species *p = (struct __pyx_obj_7cantera_6thermo_Species *)o;
  tmp = ((PyObject*)p->_phase);
  p->_phase = ((struct __pyx_obj_7cantera_12solutionbase__SolutionBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cantera_6thermo_7Species_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_7Species_4name_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_7Species_composition(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_7Species_11composition_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_7Species_charge(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_7Species_6charge_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_7Species_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_7Species_4size_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_7Species_molecular_weight(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_7Species_16molecular_weight_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_7Species_thermo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_7Species_6thermo_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_7Species_thermo(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_7Species_6thermo_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_7Species_transport(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_7Species_9transport_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_7Species_transport(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_7Species_9transport_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_7Species_input_data(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_7Species_10input_data_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_7cantera_6thermo_7Species_17__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_7cantera_6thermo_7Species_17__repr__(self);
}

static PyMethodDef __pyx_methods_7cantera_6thermo_Species[] = {
  {"from_yaml", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_5from_yaml, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_4from_yaml},
  {"from_dict", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_7from_dict, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_6from_dict},
  {"list_from_file", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_9list_from_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_8list_from_file},
  {"list_from_yaml", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_11list_from_yaml, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_10list_from_yaml},
  {"update_user_data", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_13update_user_data, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_12update_user_data},
  {"clear_user_data", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_15clear_user_data, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_7Species_14clear_user_data},
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_7cantera_6thermo_7Species_17__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_7Species_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_6thermo_Species[] = {
  {(char *)"name", __pyx_getprop_7cantera_6thermo_7Species_name, 0, (char *)PyDoc_STR(" The name of the species. "), 0},
  {(char *)"composition", __pyx_getprop_7cantera_6thermo_7Species_composition, 0, (char *)PyDoc_STR("\n        A dict containing the elemental composition of the species. Keys are\n        element names; values are the corresponding atomicities.\n        "), 0},
  {(char *)"charge", __pyx_getprop_7cantera_6thermo_7Species_charge, 0, (char *)PyDoc_STR("\n        The electrical charge on the species, in units of the elementary charge.\n        "), 0},
  {(char *)"size", __pyx_getprop_7cantera_6thermo_7Species_size, 0, (char *)PyDoc_STR(" The effective size [m] of the species. "), 0},
  {(char *)"molecular_weight", __pyx_getprop_7cantera_6thermo_7Species_molecular_weight, 0, (char *)PyDoc_STR("The molecular weight [amu] of the species.\n\n        .. versionadded:: 3.0\n        "), 0},
  {(char *)"thermo", __pyx_getprop_7cantera_6thermo_7Species_thermo, __pyx_setprop_7cantera_6thermo_7Species_thermo, (char *)PyDoc_STR("\n        Get/Set the species reference-state thermodynamic data, as an instance\n        of class `SpeciesThermo`.\n        "), 0},
  {(char *)"transport", __pyx_getprop_7cantera_6thermo_7Species_transport, __pyx_setprop_7cantera_6thermo_7Species_transport, (char *)PyDoc_STR("\n        Get/Set the species transport parameters, as an instance of class\n        `GasTransportData`.\n        "), 0},
  {(char *)"input_data", __pyx_getprop_7cantera_6thermo_7Species_input_data, 0, (char *)PyDoc_STR("\n        Get input data defining this Species, along with any user-specified data\n        provided with its input (YAML) definition.\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_6thermo_Species_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7cantera_6thermo_Species},
  {Py_tp_repr, (void *)__pyx_pw_7cantera_6thermo_7Species_17__repr__},
  {Py_tp_doc, (void *)PyDoc_STR("\n    A class which stores data about a single chemical species that may be\n    needed to add it to a `Solution` or `Interface` object (and to the\n    underlying `ThermoPhase` and `Transport` objects).\n\n    :param name:\n        A string giving the name of the species, such as ``'CH4'``\n    :param composition:\n        The elemental composition of the species, given either as a dict or a\n        composition string, such as ``{'C':1, 'H':4}`` or ``'C:1, H:4'``.\n    :param charge:\n        The electrical charge, in units of the elementary charge. Default 0.0.\n    :param size:\n        The effective size [m] of the species. Default 1.0.\n    :param init:\n        Used internally when wrapping :ct:`Species` objects returned from C++\n\n    Example: creating an ideal gas phase with a single species::\n\n        ch4 = ct.Species('CH4', 'C:1, H:4')\n        ch4.thermo = ct.ConstantCp(300, 1000, 101325,\n                                   (300, -7.453347e7, 1.865912e5, 3.576053e4))\n        tran = ct.GasTransportData()\n        tran.set_customary_units('nonlinear', 3.75, 141.40, 0.0, 2.60, 13.00)\n        ch4.transport = tran\n        gas = ct.Solution(thermo='ideal-gas', species=[ch4])\n\n    The static methods `list_from_file` and `list_from_yaml` can be used to create\n    `Species` objects from existing definitions in the YAML format. Either of the\n    following will produce a list of 53 `Species` objects containing the species defined\n    in the GRI 3.0 mechanism::\n\n        S = ct.Species.list_from_file(\"gri30.yaml\")\n\n        import pathlib\n        S = ct.Species.list_from_yaml(\n            pathlib.Path('path/to/gri30.yaml').read_text(),\n            section='species')\n\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_6thermo_Species},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_6thermo_Species},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_6thermo_Species},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_6thermo_Species},
  {Py_tp_init, (void *)__pyx_pw_7cantera_6thermo_7Species_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_6thermo_Species},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_6thermo_Species_spec = {
  "cantera.thermo.Species",
  sizeof(struct __pyx_obj_7cantera_6thermo_Species),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_6thermo_Species_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_6thermo_Species = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.thermo.""Species", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_6thermo_Species), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_6thermo_Species, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_7cantera_6thermo_7Species_17__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A class which stores data about a single chemical species that may be\n    needed to add it to a `Solution` or `Interface` object (and to the\n    underlying `ThermoPhase` and `Transport` objects).\n\n    :param name:\n        A string giving the name of the species, such as ``'CH4'``\n    :param composition:\n        The elemental composition of the species, given either as a dict or a\n        composition string, such as ``{'C':1, 'H':4}`` or ``'C:1, H:4'``.\n    :param charge:\n        The electrical charge, in units of the elementary charge. Default 0.0.\n    :param size:\n        The effective size [m] of the species. Default 1.0.\n    :param init:\n        Used internally when wrapping :ct:`Species` objects returned from C++\n\n    Example: creating an ideal gas phase with a single species::\n\n        ch4 = ct.Species('CH4', 'C:1, H:4')\n        ch4.thermo = ct.ConstantCp(300, 1000, 101325,\n                                   (300, -7.453347e7, 1.865912e5, 3.576053e4))\n        tran = ct.GasTransportData()\n        tran.set_customary_units('nonlinear', 3.75, 141.40, 0.0, 2.60, 13.00)\n        ch4.transport = tran\n        gas = ct.Solution(thermo='ideal-gas', species=[ch4])\n\n    The static methods `list_from_file` and `list_from_yaml` can be used to create\n    `Species` objects from existing definitions in the YAML format. Either of the\n    following will produce a list of 53 `Species` objects containing the species defined\n    in the GRI 3.0 mechanism::\n\n        S = ct.Species.list_from_file(\"gri30.yaml\")\n\n        import pathlib\n        S = ct.Species.list_from_yaml(\n            pathlib.Path('path/to/gri30.yaml').read_text(),\n            section='species')\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_6thermo_Species, /*tp_traverse*/
  __pyx_tp_clear_7cantera_6thermo_Species, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_6thermo_Species, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_6thermo_Species, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_6thermo_7Species_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_6thermo_Species, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase __pyx_vtable_7cantera_6thermo_ThermoPhase;

static PyObject *__pyx_tp_new_7cantera_6thermo_ThermoPhase(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cantera_6thermo_ThermoPhase *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_ptype_7cantera_12solutionbase__SolutionBase, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)o);
  p->__pyx_vtab = __pyx_vtabptr_7cantera_6thermo_ThermoPhase;
  p->_enable_plasma = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7cantera_6thermo_ThermoPhase(PyObject *o) {
  struct __pyx_obj_7cantera_6thermo_ThermoPhase *p = (struct __pyx_obj_7cantera_6thermo_ThermoPhase *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7cantera_6thermo_ThermoPhase) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_enable_plasma);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_7cantera_12solutionbase__SolutionBase)) __Pyx_PyType_GetSlot(__pyx_ptype_7cantera_12solutionbase__SolutionBase, tp_dealloc, destructor)(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_7cantera_6thermo_ThermoPhase);
}

static int __pyx_tp_traverse_7cantera_6thermo_ThermoPhase(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cantera_6thermo_ThermoPhase *p = (struct __pyx_obj_7cantera_6thermo_ThermoPhase *)o;
  e = ((likely(__pyx_ptype_7cantera_12solutionbase__SolutionBase)) ? ((__pyx_ptype_7cantera_12solutionbase__SolutionBase->tp_traverse) ? __pyx_ptype_7cantera_12solutionbase__SolutionBase->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_7cantera_6thermo_ThermoPhase)); if (e) return e;
  if (p->_enable_plasma) {
    e = (*v)(p->_enable_plasma, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cantera_6thermo_ThermoPhase(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cantera_6thermo_ThermoPhase *p = (struct __pyx_obj_7cantera_6thermo_ThermoPhase *)o;
  if (likely(__pyx_ptype_7cantera_12solutionbase__SolutionBase)) { if (__pyx_ptype_7cantera_12solutionbase__SolutionBase->tp_clear) __pyx_ptype_7cantera_12solutionbase__SolutionBase->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_7cantera_6thermo_ThermoPhase);
  tmp = ((PyObject*)p->_enable_plasma);
  p->_enable_plasma = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_thermo_model(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_12thermo_model_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_phase_of_matter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_15phase_of_matter_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_is_pure(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_7is_pure_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_has_phase_transition(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_20has_phase_transition_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_is_compressible(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_15is_compressible_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase__native_mode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_12_native_mode_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase__native_state(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_13_native_state_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase__full_states(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_12_full_states_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase__partial_states(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_15_partial_states_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_basis(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_5basis_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_basis(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_5basis_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_n_elements(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_10n_elements_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_element_names(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_13element_names_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_atomic_weights(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_14atomic_weights_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_n_species(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_9n_species_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_n_selected_species(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_18n_selected_species_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_species_names(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_13species_names_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_case_sensitive_species_names(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_case_sensitive_species_names(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_28case_sensitive_species_names_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_molecular_weights(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_17molecular_weights_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_charges(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_7charges_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_mean_molecular_weight(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_21mean_molecular_weight_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_Y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_1Y_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_Y(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_1Y_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_X(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_1X_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_X(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_1X_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_concentrations(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_14concentrations_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_concentrations(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_14concentrations_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_P(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_1P_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_1T_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_density(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_7density_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_density_mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_12density_mass_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_density_mole(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_12density_mole_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_v(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_1v_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_volume_mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_11volume_mass_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_volume_mole(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_11volume_mole_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_u(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_1u_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_int_energy_mole(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_15int_energy_mole_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_int_energy_mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_15int_energy_mass_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_h(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_1h_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_enthalpy_mole(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_13enthalpy_mole_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_enthalpy_mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_13enthalpy_mass_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_s(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_1s_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_entropy_mole(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_12entropy_mole_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_entropy_mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_12entropy_mass_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_g(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_1g_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_gibbs_mole(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_10gibbs_mole_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_gibbs_mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_10gibbs_mass_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_cv(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_2cv_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_cv_mole(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_7cv_mole_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_cv_mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_7cv_mass_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_cp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_2cp_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_cp_mole(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_7cp_mole_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_cp_mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_7cp_mass_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_critical_temperature(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_20critical_temperature_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_critical_pressure(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_17critical_pressure_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_critical_density(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_16critical_density_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_P_sat(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_5P_sat_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_T_sat(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_5T_sat_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_state_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_10state_size_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_state(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_5state_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_state(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_5state_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_TD(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_2TD_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_TD(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_2TD_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_TDX(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3TDX_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_TDX(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3TDX_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_TDY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3TDY_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_TDY(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3TDY_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_TP(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_2TP_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_TP(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_2TP_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_TPX(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3TPX_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_TPX(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3TPX_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_TPY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3TPY_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_TPY(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3TPY_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_UV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_2UV_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_UV(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_2UV_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_UVX(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3UVX_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_UVX(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3UVX_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_UVY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3UVY_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_UVY(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3UVY_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_DP(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_2DP_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_DP(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_2DP_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_DPX(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3DPX_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_DPX(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3DPX_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_DPY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3DPY_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_DPY(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3DPY_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_HP(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_2HP_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_HP(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_2HP_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_HPX(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3HPX_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_HPX(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3HPX_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_HPY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3HPY_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_HPY(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3HPY_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_SP(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_2SP_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_SP(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_2SP_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_SPX(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3SPX_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_SPX(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3SPX_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_SPY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3SPY_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_SPY(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3SPY_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_SV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_2SV_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_SV(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_2SV_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_SVX(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3SVX_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_SVX(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3SVX_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_SVY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_3SVY_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_SVY(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_3SVY_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_partial_molar_enthalpies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_24partial_molar_enthalpies_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_partial_molar_entropies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_23partial_molar_entropies_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_partial_molar_int_energies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_26partial_molar_int_energies_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_chemical_potentials(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_19chemical_potentials_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_electrochemical_potentials(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_26electrochemical_potentials_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_partial_molar_cp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_16partial_molar_cp_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_partial_molar_volumes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_21partial_molar_volumes_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_enthalpies_RT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_22standard_enthalpies_RT_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_entropies_R(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_20standard_entropies_R_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_int_energies_RT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_24standard_int_energies_RT_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_gibbs_RT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_17standard_gibbs_RT_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_cp_R(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_13standard_cp_R_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_activities(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_10activities_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_activity_coefficients(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_21activity_coefficients_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_isothermal_compressibility(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_26isothermal_compressibility_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_thermal_expansion_coeff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_23thermal_expansion_coeff_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_sound_speed(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_11sound_speed_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_min_temp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_8min_temp_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_max_temp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_8max_temp_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_reference_pressure(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_18reference_pressure_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_electric_potential(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_18electric_potential_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_electric_potential(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_18electric_potential_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_concentration_units(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_28standard_concentration_units_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_Te(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_2Te_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_Te(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_2Te_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_Pe(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_2Pe_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_n_electron_energy_levels(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_24n_electron_energy_levels_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_electron_energy_levels(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_22electron_energy_levels_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_electron_energy_levels(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_22electron_energy_levels_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_electron_energy_distribution(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_28electron_energy_distribution_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_isotropic_shape_factor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_isotropic_shape_factor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_22isotropic_shape_factor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_electron_energy_distribution_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_electron_energy_distribution_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_33electron_energy_distribution_type_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_mean_electron_energy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_20mean_electron_energy_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_mean_electron_energy(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_20mean_electron_energy_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_quadrature_method(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_17quadrature_method_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_quadrature_method(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_17quadrature_method_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase_normalize_electron_energy_distribution_enabled(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase_normalize_electron_energy_distribution_enabled(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_46normalize_electron_energy_distribution_enabled_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_11ThermoPhase__enable_plasma(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_11ThermoPhase_14_enable_plasma_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_11ThermoPhase__enable_plasma(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_14_enable_plasma_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cantera_6thermo_11ThermoPhase_14_enable_plasma_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_7cantera_6thermo_ThermoPhase[] = {
  {"report", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_3report, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_2report},
  {"equilibrate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_7equilibrate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_6equilibrate},
  {"element_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_11element_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_10element_name},
  {"atomic_weight", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_13atomic_weight, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_12atomic_weight},
  {"species_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_15species_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_14species_name},
  {"species", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_19species, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_18species},
  {"modify_species", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_21modify_species, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_20modify_species},
  {"add_species", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_23add_species, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_22add_species},
  {"add_species_alias", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_25add_species_alias, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_24add_species_alias},
  {"find_isomers", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_27find_isomers, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_26find_isomers},
  {"n_atoms", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_29n_atoms, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_28n_atoms},
  {"_ThermoPhase__composition_to_array", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_31_ThermoPhase__composition_to_array, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_30__composition_to_array},
  {"set_equivalence_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_33set_equivalence_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_32set_equivalence_ratio},
  {"set_mixture_fraction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_35set_mixture_fraction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_34set_mixture_fraction},
  {"equivalence_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_37equivalence_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_36equivalence_ratio},
  {"mixture_fraction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_39mixture_fraction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_38mixture_fraction},
  {"stoich_air_fuel_ratio", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_41stoich_air_fuel_ratio, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_40stoich_air_fuel_ratio},
  {"elemental_mass_fraction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_43elemental_mass_fraction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_42elemental_mass_fraction},
  {"elemental_mole_fraction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_45elemental_mole_fraction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_44elemental_mole_fraction},
  {"set_unnormalized_mass_fractions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_47set_unnormalized_mass_fractions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_46set_unnormalized_mass_fractions},
  {"set_unnormalized_mole_fractions", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_49set_unnormalized_mole_fractions, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_48set_unnormalized_mole_fractions},
  {"mass_fraction_dict", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_51mass_fraction_dict, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_50mass_fraction_dict},
  {"mole_fraction_dict", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_53mole_fraction_dict, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_52mole_fraction_dict},
  {"set_discretized_electron_energy_distribution", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_55set_discretized_electron_energy_distribution, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_11ThermoPhase_54set_discretized_electron_energy_distribution},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_57__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_11ThermoPhase_59__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_6thermo_ThermoPhase[] = {
  {(char *)"thermo_model", __pyx_getprop_7cantera_6thermo_11ThermoPhase_thermo_model, 0, (char *)PyDoc_STR("\n        Return thermodynamic model describing phase.\n        "), 0},
  {(char *)"phase_of_matter", __pyx_getprop_7cantera_6thermo_11ThermoPhase_phase_of_matter, 0, (char *)PyDoc_STR("\n        Get the thermodynamic phase (gas, liquid, etc.) at the current conditions.\n        "), 0},
  {(char *)"is_pure", __pyx_getprop_7cantera_6thermo_11ThermoPhase_is_pure, 0, (char *)PyDoc_STR("\n        Returns true if the phase represents a pure (fixed composition) substance\n        "), 0},
  {(char *)"has_phase_transition", __pyx_getprop_7cantera_6thermo_11ThermoPhase_has_phase_transition, 0, (char *)PyDoc_STR("\n        Returns true if the phase represents a substance with phase transitions\n        "), 0},
  {(char *)"is_compressible", __pyx_getprop_7cantera_6thermo_11ThermoPhase_is_compressible, 0, (char *)PyDoc_STR("\n        Returns true if the density of the phase is an independent variable defining\n        the thermodynamic state of a substance\n        "), 0},
  {(char *)"_native_mode", __pyx_getprop_7cantera_6thermo_11ThermoPhase__native_mode, 0, (char *)PyDoc_STR("  Return string acronym representing native state "), 0},
  {(char *)"_native_state", __pyx_getprop_7cantera_6thermo_11ThermoPhase__native_state, 0, (char *)PyDoc_STR("\n        Default properties defining a state\n        "), 0},
  {(char *)"_full_states", __pyx_getprop_7cantera_6thermo_11ThermoPhase__full_states, 0, (char *)PyDoc_STR("\n        Sets of parameters which set the full thermodynamic state\n        "), 0},
  {(char *)"_partial_states", __pyx_getprop_7cantera_6thermo_11ThermoPhase__partial_states, 0, (char *)PyDoc_STR("\n        Sets of parameters which set a valid partial thermodynamic state\n        "), 0},
  {(char *)"basis", __pyx_getprop_7cantera_6thermo_11ThermoPhase_basis, __pyx_setprop_7cantera_6thermo_11ThermoPhase_basis, (char *)PyDoc_STR("\n        Determines whether intensive thermodynamic properties are treated on a\n        ``mass`` (per kg) or ``molar`` (per kmol) basis. This affects the values\n        returned by the properties `h`, `u`, `s`, `g`, `v`, `density`, `cv`,\n        and `cp`, as well as the values used with the state-setting properties\n        such as `HPX` and `UV`.\n        "), 0},
  {(char *)"n_elements", __pyx_getprop_7cantera_6thermo_11ThermoPhase_n_elements, 0, (char *)PyDoc_STR("Number of elements."), 0},
  {(char *)"element_names", __pyx_getprop_7cantera_6thermo_11ThermoPhase_element_names, 0, (char *)PyDoc_STR("A list of all the element names."), 0},
  {(char *)"atomic_weights", __pyx_getprop_7cantera_6thermo_11ThermoPhase_atomic_weights, 0, (char *)PyDoc_STR("Array of atomic weight [kg/kmol] for each element in the mixture."), 0},
  {(char *)"n_species", __pyx_getprop_7cantera_6thermo_11ThermoPhase_n_species, 0, (char *)PyDoc_STR("Number of species."), 0},
  {(char *)"n_selected_species", __pyx_getprop_7cantera_6thermo_11ThermoPhase_n_selected_species, 0, (char *)PyDoc_STR("\n        Number of species selected for output (by slicing of Solution object)\n        "), 0},
  {(char *)"species_names", __pyx_getprop_7cantera_6thermo_11ThermoPhase_species_names, 0, (char *)PyDoc_STR("A list of all the species names."), 0},
  {(char *)"case_sensitive_species_names", __pyx_getprop_7cantera_6thermo_11ThermoPhase_case_sensitive_species_names, __pyx_setprop_7cantera_6thermo_11ThermoPhase_case_sensitive_species_names, (char *)PyDoc_STR("Enforce case-sensitivity for look up of species names"), 0},
  {(char *)"molecular_weights", __pyx_getprop_7cantera_6thermo_11ThermoPhase_molecular_weights, 0, (char *)PyDoc_STR("Array of species molecular weights (molar masses) [kg/kmol]."), 0},
  {(char *)"charges", __pyx_getprop_7cantera_6thermo_11ThermoPhase_charges, 0, (char *)PyDoc_STR("Array of species charges [elem. charge]."), 0},
  {(char *)"mean_molecular_weight", __pyx_getprop_7cantera_6thermo_11ThermoPhase_mean_molecular_weight, 0, (char *)PyDoc_STR("The mean molecular weight (molar mass) [kg/kmol]."), 0},
  {(char *)"Y", __pyx_getprop_7cantera_6thermo_11ThermoPhase_Y, __pyx_setprop_7cantera_6thermo_11ThermoPhase_Y, (char *)PyDoc_STR("\n        Get/Set the species mass fractions. Can be set as an array, as a dictionary,\n        or as a string. Always returns an array::\n\n            >>> phase.Y = [0.1, 0, 0, 0.4, 0, 0, 0, 0, 0.5]\n            >>> phase.Y = {'H2':0.1, 'O2':0.4, 'AR':0.5}\n            >>> phase.Y = 'H2:0.1, O2:0.4, AR:0.5'\n            >>> phase.Y\n            array([0.1, 0, 0, 0.4, 0, 0, 0, 0, 0.5])\n        "), 0},
  {(char *)"X", __pyx_getprop_7cantera_6thermo_11ThermoPhase_X, __pyx_setprop_7cantera_6thermo_11ThermoPhase_X, (char *)PyDoc_STR("\n        Get/Set the species mole fractions. Can be set as an array, as a dictionary,\n        or as a string. Always returns an array::\n\n            >>> phase.X = [0.1, 0, 0, 0.4, 0, 0, 0, 0, 0.5]\n            >>> phase.X = {'H2':0.1, 'O2':0.4, 'AR':0.5}\n            >>> phase.X = 'H2:0.1, O2:0.4, AR:0.5'\n            >>> phase.X\n            array([0.1, 0, 0, 0.4, 0, 0, 0, 0, 0.5])\n        "), 0},
  {(char *)"concentrations", __pyx_getprop_7cantera_6thermo_11ThermoPhase_concentrations, __pyx_setprop_7cantera_6thermo_11ThermoPhase_concentrations, (char *)PyDoc_STR("\n        Get/Set the species concentrations. Units are kmol/m^3 for bulk phases, kmol/m^2\n        for surface phases, and kmol/m for edge phases.\n        "), 0},
  {(char *)"P", __pyx_getprop_7cantera_6thermo_11ThermoPhase_P, 0, (char *)PyDoc_STR("Pressure [Pa]."), 0},
  {(char *)"T", __pyx_getprop_7cantera_6thermo_11ThermoPhase_T, 0, (char *)PyDoc_STR("Temperature [K]."), 0},
  {(char *)"density", __pyx_getprop_7cantera_6thermo_11ThermoPhase_density, 0, (char *)PyDoc_STR("Density [kg/m^3 or kmol/m^3] depending on `basis`."), 0},
  {(char *)"density_mass", __pyx_getprop_7cantera_6thermo_11ThermoPhase_density_mass, 0, (char *)PyDoc_STR("(Mass) density [kg/m^3]."), 0},
  {(char *)"density_mole", __pyx_getprop_7cantera_6thermo_11ThermoPhase_density_mole, 0, (char *)PyDoc_STR("Molar density [kmol/m^3]."), 0},
  {(char *)"v", __pyx_getprop_7cantera_6thermo_11ThermoPhase_v, 0, (char *)PyDoc_STR("Specific volume [m^3/kg or m^3/kmol] depending on `basis`."), 0},
  {(char *)"volume_mass", __pyx_getprop_7cantera_6thermo_11ThermoPhase_volume_mass, 0, (char *)PyDoc_STR("Specific volume [m^3/kg]."), 0},
  {(char *)"volume_mole", __pyx_getprop_7cantera_6thermo_11ThermoPhase_volume_mole, 0, (char *)PyDoc_STR("Molar volume [m^3/kmol]."), 0},
  {(char *)"u", __pyx_getprop_7cantera_6thermo_11ThermoPhase_u, 0, (char *)PyDoc_STR("Internal energy in [J/kg or J/kmol]."), 0},
  {(char *)"int_energy_mole", __pyx_getprop_7cantera_6thermo_11ThermoPhase_int_energy_mole, 0, (char *)PyDoc_STR("Molar internal energy [J/kmol]."), 0},
  {(char *)"int_energy_mass", __pyx_getprop_7cantera_6thermo_11ThermoPhase_int_energy_mass, 0, (char *)PyDoc_STR("Specific internal energy [J/kg]."), 0},
  {(char *)"h", __pyx_getprop_7cantera_6thermo_11ThermoPhase_h, 0, (char *)PyDoc_STR("Enthalpy [J/kg or J/kmol] depending on `basis`."), 0},
  {(char *)"enthalpy_mole", __pyx_getprop_7cantera_6thermo_11ThermoPhase_enthalpy_mole, 0, (char *)PyDoc_STR("Molar enthalpy [J/kmol]."), 0},
  {(char *)"enthalpy_mass", __pyx_getprop_7cantera_6thermo_11ThermoPhase_enthalpy_mass, 0, (char *)PyDoc_STR("Specific enthalpy [J/kg]."), 0},
  {(char *)"s", __pyx_getprop_7cantera_6thermo_11ThermoPhase_s, 0, (char *)PyDoc_STR("Entropy [J/kg/K or J/kmol/K] depending on `basis`."), 0},
  {(char *)"entropy_mole", __pyx_getprop_7cantera_6thermo_11ThermoPhase_entropy_mole, 0, (char *)PyDoc_STR("Molar entropy [J/kmol/K]."), 0},
  {(char *)"entropy_mass", __pyx_getprop_7cantera_6thermo_11ThermoPhase_entropy_mass, 0, (char *)PyDoc_STR("Specific entropy [J/kg/K]."), 0},
  {(char *)"g", __pyx_getprop_7cantera_6thermo_11ThermoPhase_g, 0, (char *)PyDoc_STR("Gibbs free energy [J/kg or J/kmol] depending on `basis`."), 0},
  {(char *)"gibbs_mole", __pyx_getprop_7cantera_6thermo_11ThermoPhase_gibbs_mole, 0, (char *)PyDoc_STR("Molar Gibbs free energy [J/kmol]."), 0},
  {(char *)"gibbs_mass", __pyx_getprop_7cantera_6thermo_11ThermoPhase_gibbs_mass, 0, (char *)PyDoc_STR("Specific Gibbs free energy [J/kg]."), 0},
  {(char *)"cv", __pyx_getprop_7cantera_6thermo_11ThermoPhase_cv, 0, (char *)PyDoc_STR("\n        Heat capacity at constant volume [J/kg/K or J/kmol/K] depending on\n        `basis`.\n        "), 0},
  {(char *)"cv_mole", __pyx_getprop_7cantera_6thermo_11ThermoPhase_cv_mole, 0, (char *)PyDoc_STR("Molar heat capacity at constant volume [J/kmol/K]."), 0},
  {(char *)"cv_mass", __pyx_getprop_7cantera_6thermo_11ThermoPhase_cv_mass, 0, (char *)PyDoc_STR("Specific heat capacity at constant volume [J/kg/K]."), 0},
  {(char *)"cp", __pyx_getprop_7cantera_6thermo_11ThermoPhase_cp, 0, (char *)PyDoc_STR("\n        Heat capacity at constant pressure [J/kg/K or J/kmol/K] depending\n        on `basis`.\n        "), 0},
  {(char *)"cp_mole", __pyx_getprop_7cantera_6thermo_11ThermoPhase_cp_mole, 0, (char *)PyDoc_STR("Molar heat capacity at constant pressure [J/kmol/K]."), 0},
  {(char *)"cp_mass", __pyx_getprop_7cantera_6thermo_11ThermoPhase_cp_mass, 0, (char *)PyDoc_STR("Specific heat capacity at constant pressure [J/kg/K]."), 0},
  {(char *)"critical_temperature", __pyx_getprop_7cantera_6thermo_11ThermoPhase_critical_temperature, 0, (char *)PyDoc_STR("Critical temperature [K]."), 0},
  {(char *)"critical_pressure", __pyx_getprop_7cantera_6thermo_11ThermoPhase_critical_pressure, 0, (char *)PyDoc_STR("Critical pressure [Pa]."), 0},
  {(char *)"critical_density", __pyx_getprop_7cantera_6thermo_11ThermoPhase_critical_density, 0, (char *)PyDoc_STR("Critical density [kg/m^3 or kmol/m^3] depending on `basis`."), 0},
  {(char *)"P_sat", __pyx_getprop_7cantera_6thermo_11ThermoPhase_P_sat, 0, (char *)PyDoc_STR("Saturation pressure [Pa] at the current temperature."), 0},
  {(char *)"T_sat", __pyx_getprop_7cantera_6thermo_11ThermoPhase_T_sat, 0, (char *)PyDoc_STR("Saturation temperature [K] at the current pressure."), 0},
  {(char *)"state_size", __pyx_getprop_7cantera_6thermo_11ThermoPhase_state_size, 0, (char *)PyDoc_STR("\n        Return size of vector defining internal state of the phase.\n        "), 0},
  {(char *)"state", __pyx_getprop_7cantera_6thermo_11ThermoPhase_state, __pyx_setprop_7cantera_6thermo_11ThermoPhase_state, (char *)PyDoc_STR("\n        Get/Set the full thermodynamic state as a single array, arranged as\n        [temperature, density, mass fractions] for most phases. Useful mainly\n        in cases where it is desired to store many states in a multidimensional\n        array.\n        "), 0},
  {(char *)"TD", __pyx_getprop_7cantera_6thermo_11ThermoPhase_TD, __pyx_setprop_7cantera_6thermo_11ThermoPhase_TD, (char *)PyDoc_STR("Get/Set temperature [K] and density [kg/m^3 or kmol/m^3]."), 0},
  {(char *)"TDX", __pyx_getprop_7cantera_6thermo_11ThermoPhase_TDX, __pyx_setprop_7cantera_6thermo_11ThermoPhase_TDX, (char *)PyDoc_STR("\n        Get/Set temperature [K], density [kg/m^3 or kmol/m^3], and mole\n        fractions.\n        "), 0},
  {(char *)"TDY", __pyx_getprop_7cantera_6thermo_11ThermoPhase_TDY, __pyx_setprop_7cantera_6thermo_11ThermoPhase_TDY, (char *)PyDoc_STR("\n        Get/Set temperature [K] and density [kg/m^3 or kmol/m^3], and mass\n        fractions.\n        "), 0},
  {(char *)"TP", __pyx_getprop_7cantera_6thermo_11ThermoPhase_TP, __pyx_setprop_7cantera_6thermo_11ThermoPhase_TP, (char *)PyDoc_STR("Get/Set temperature [K] and pressure [Pa]."), 0},
  {(char *)"TPX", __pyx_getprop_7cantera_6thermo_11ThermoPhase_TPX, __pyx_setprop_7cantera_6thermo_11ThermoPhase_TPX, (char *)PyDoc_STR("Get/Set temperature [K], pressure [Pa], and mole fractions."), 0},
  {(char *)"TPY", __pyx_getprop_7cantera_6thermo_11ThermoPhase_TPY, __pyx_setprop_7cantera_6thermo_11ThermoPhase_TPY, (char *)PyDoc_STR("Get/Set temperature [K], pressure [Pa], and mass fractions."), 0},
  {(char *)"UV", __pyx_getprop_7cantera_6thermo_11ThermoPhase_UV, __pyx_setprop_7cantera_6thermo_11ThermoPhase_UV, (char *)PyDoc_STR("\n        Get/Set internal energy [J/kg or J/kmol] and specific volume\n        [m^3/kg or m^3/kmol].\n        "), 0},
  {(char *)"UVX", __pyx_getprop_7cantera_6thermo_11ThermoPhase_UVX, __pyx_setprop_7cantera_6thermo_11ThermoPhase_UVX, (char *)PyDoc_STR("\n        Get/Set internal energy [J/kg or J/kmol], specific volume\n        [m^3/kg or m^3/kmol], and mole fractions.\n        "), 0},
  {(char *)"UVY", __pyx_getprop_7cantera_6thermo_11ThermoPhase_UVY, __pyx_setprop_7cantera_6thermo_11ThermoPhase_UVY, (char *)PyDoc_STR("\n        Get/Set internal energy [J/kg or J/kmol], specific volume\n        [m^3/kg or m^3/kmol], and mass fractions.\n        "), 0},
  {(char *)"DP", __pyx_getprop_7cantera_6thermo_11ThermoPhase_DP, __pyx_setprop_7cantera_6thermo_11ThermoPhase_DP, (char *)PyDoc_STR("Get/Set density [kg/m^3] and pressure [Pa]."), 0},
  {(char *)"DPX", __pyx_getprop_7cantera_6thermo_11ThermoPhase_DPX, __pyx_setprop_7cantera_6thermo_11ThermoPhase_DPX, (char *)PyDoc_STR("Get/Set density [kg/m^3], pressure [Pa], and mole fractions."), 0},
  {(char *)"DPY", __pyx_getprop_7cantera_6thermo_11ThermoPhase_DPY, __pyx_setprop_7cantera_6thermo_11ThermoPhase_DPY, (char *)PyDoc_STR("Get/Set density [kg/m^3], pressure [Pa], and mass fractions."), 0},
  {(char *)"HP", __pyx_getprop_7cantera_6thermo_11ThermoPhase_HP, __pyx_setprop_7cantera_6thermo_11ThermoPhase_HP, (char *)PyDoc_STR("Get/Set enthalpy [J/kg or J/kmol] and pressure [Pa]."), 0},
  {(char *)"HPX", __pyx_getprop_7cantera_6thermo_11ThermoPhase_HPX, __pyx_setprop_7cantera_6thermo_11ThermoPhase_HPX, (char *)PyDoc_STR("Get/Set enthalpy [J/kg or J/kmol], pressure [Pa] and mole fractions."), 0},
  {(char *)"HPY", __pyx_getprop_7cantera_6thermo_11ThermoPhase_HPY, __pyx_setprop_7cantera_6thermo_11ThermoPhase_HPY, (char *)PyDoc_STR("Get/Set enthalpy [J/kg or J/kmol], pressure [Pa] and mass fractions."), 0},
  {(char *)"SP", __pyx_getprop_7cantera_6thermo_11ThermoPhase_SP, __pyx_setprop_7cantera_6thermo_11ThermoPhase_SP, (char *)PyDoc_STR("Get/Set entropy [J/kg/K or J/kmol/K] and pressure [Pa]."), 0},
  {(char *)"SPX", __pyx_getprop_7cantera_6thermo_11ThermoPhase_SPX, __pyx_setprop_7cantera_6thermo_11ThermoPhase_SPX, (char *)PyDoc_STR("Get/Set entropy [J/kg/K or J/kmol/K], pressure [Pa], and mole fractions."), 0},
  {(char *)"SPY", __pyx_getprop_7cantera_6thermo_11ThermoPhase_SPY, __pyx_setprop_7cantera_6thermo_11ThermoPhase_SPY, (char *)PyDoc_STR("Get/Set entropy [J/kg/K or J/kmol/K], pressure [Pa], and mass fractions."), 0},
  {(char *)"SV", __pyx_getprop_7cantera_6thermo_11ThermoPhase_SV, __pyx_setprop_7cantera_6thermo_11ThermoPhase_SV, (char *)PyDoc_STR("\n        Get/Set entropy [J/kg/K or J/kmol/K] and specific volume [m^3/kg or\n        m^3/kmol].\n        "), 0},
  {(char *)"SVX", __pyx_getprop_7cantera_6thermo_11ThermoPhase_SVX, __pyx_setprop_7cantera_6thermo_11ThermoPhase_SVX, (char *)PyDoc_STR("\n        Get/Set entropy [J/kg/K or J/kmol/K], specific volume [m^3/kg or\n        m^3/kmol], and mole fractions.\n        "), 0},
  {(char *)"SVY", __pyx_getprop_7cantera_6thermo_11ThermoPhase_SVY, __pyx_setprop_7cantera_6thermo_11ThermoPhase_SVY, (char *)PyDoc_STR("\n        Get/Set entropy [J/kg/K or J/kmol/K], specific volume [m^3/kg or\n        m^3/kmol], and mass fractions.\n        "), 0},
  {(char *)"partial_molar_enthalpies", __pyx_getprop_7cantera_6thermo_11ThermoPhase_partial_molar_enthalpies, 0, (char *)PyDoc_STR("Array of species partial molar enthalpies [J/kmol]."), 0},
  {(char *)"partial_molar_entropies", __pyx_getprop_7cantera_6thermo_11ThermoPhase_partial_molar_entropies, 0, (char *)PyDoc_STR("Array of species partial molar entropies [J/kmol/K]."), 0},
  {(char *)"partial_molar_int_energies", __pyx_getprop_7cantera_6thermo_11ThermoPhase_partial_molar_int_energies, 0, (char *)PyDoc_STR("Array of species partial molar internal energies [J/kmol]."), 0},
  {(char *)"chemical_potentials", __pyx_getprop_7cantera_6thermo_11ThermoPhase_chemical_potentials, 0, (char *)PyDoc_STR("Array of species chemical potentials [J/kmol]."), 0},
  {(char *)"electrochemical_potentials", __pyx_getprop_7cantera_6thermo_11ThermoPhase_electrochemical_potentials, 0, (char *)PyDoc_STR("Array of species electrochemical potentials [J/kmol]."), 0},
  {(char *)"partial_molar_cp", __pyx_getprop_7cantera_6thermo_11ThermoPhase_partial_molar_cp, 0, (char *)PyDoc_STR("\n        Array of species partial molar specific heat capacities at constant\n        pressure [J/kmol/K].\n        "), 0},
  {(char *)"partial_molar_volumes", __pyx_getprop_7cantera_6thermo_11ThermoPhase_partial_molar_volumes, 0, (char *)PyDoc_STR("Array of species partial molar volumes [m^3/kmol]."), 0},
  {(char *)"standard_enthalpies_RT", __pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_enthalpies_RT, 0, (char *)PyDoc_STR("\n        Array of nondimensional species standard-state enthalpies at the\n        current temperature and pressure.\n        "), 0},
  {(char *)"standard_entropies_R", __pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_entropies_R, 0, (char *)PyDoc_STR("\n        Array of nondimensional species standard-state entropies at the\n        current temperature and pressure.\n        "), 0},
  {(char *)"standard_int_energies_RT", __pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_int_energies_RT, 0, (char *)PyDoc_STR("\n        Array of nondimensional species standard-state internal energies at the\n        current temperature and pressure.\n        "), 0},
  {(char *)"standard_gibbs_RT", __pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_gibbs_RT, 0, (char *)PyDoc_STR("\n        Array of nondimensional species standard-state Gibbs free energies at\n        the current temperature and pressure.\n        "), 0},
  {(char *)"standard_cp_R", __pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_cp_R, 0, (char *)PyDoc_STR("\n        Array of nondimensional species standard-state specific heat capacities\n        at constant pressure at the current temperature and pressure.\n        "), 0},
  {(char *)"activities", __pyx_getprop_7cantera_6thermo_11ThermoPhase_activities, 0, (char *)PyDoc_STR("\n        Array of nondimensional activities. Returns either molar or molal\n        activities depending on the convention of the thermodynamic model.\n        "), 0},
  {(char *)"activity_coefficients", __pyx_getprop_7cantera_6thermo_11ThermoPhase_activity_coefficients, 0, (char *)PyDoc_STR("\n        Array of nondimensional, molar activity coefficients.\n        "), 0},
  {(char *)"isothermal_compressibility", __pyx_getprop_7cantera_6thermo_11ThermoPhase_isothermal_compressibility, 0, (char *)PyDoc_STR("Isothermal compressibility [1/Pa]."), 0},
  {(char *)"thermal_expansion_coeff", __pyx_getprop_7cantera_6thermo_11ThermoPhase_thermal_expansion_coeff, 0, (char *)PyDoc_STR("Thermal expansion coefficient [1/K]."), 0},
  {(char *)"sound_speed", __pyx_getprop_7cantera_6thermo_11ThermoPhase_sound_speed, 0, (char *)PyDoc_STR("Speed of sound [m/s]."), 0},
  {(char *)"min_temp", __pyx_getprop_7cantera_6thermo_11ThermoPhase_min_temp, 0, (char *)PyDoc_STR("\n        Minimum temperature for which the thermodynamic data for the phase are\n        valid.\n        "), 0},
  {(char *)"max_temp", __pyx_getprop_7cantera_6thermo_11ThermoPhase_max_temp, 0, (char *)PyDoc_STR("\n        Maximum temperature for which the thermodynamic data for the phase are\n        valid.\n        "), 0},
  {(char *)"reference_pressure", __pyx_getprop_7cantera_6thermo_11ThermoPhase_reference_pressure, 0, (char *)PyDoc_STR("Reference state pressure [Pa]."), 0},
  {(char *)"electric_potential", __pyx_getprop_7cantera_6thermo_11ThermoPhase_electric_potential, __pyx_setprop_7cantera_6thermo_11ThermoPhase_electric_potential, (char *)PyDoc_STR("Get/Set the electric potential [V] for this phase."), 0},
  {(char *)"standard_concentration_units", __pyx_getprop_7cantera_6thermo_11ThermoPhase_standard_concentration_units, 0, (char *)PyDoc_STR("Get standard concentration units for this phase."), 0},
  {(char *)"Te", __pyx_getprop_7cantera_6thermo_11ThermoPhase_Te, __pyx_setprop_7cantera_6thermo_11ThermoPhase_Te, (char *)PyDoc_STR("Get/Set electron Temperature [K]."), 0},
  {(char *)"Pe", __pyx_getprop_7cantera_6thermo_11ThermoPhase_Pe, 0, (char *)PyDoc_STR("Get electron Pressure [Pa]."), 0},
  {(char *)"n_electron_energy_levels", __pyx_getprop_7cantera_6thermo_11ThermoPhase_n_electron_energy_levels, 0, (char *)PyDoc_STR(" Number of electron energy levels "), 0},
  {(char *)"electron_energy_levels", __pyx_getprop_7cantera_6thermo_11ThermoPhase_electron_energy_levels, __pyx_setprop_7cantera_6thermo_11ThermoPhase_electron_energy_levels, (char *)PyDoc_STR(" Electron energy levels [eV]"), 0},
  {(char *)"electron_energy_distribution", __pyx_getprop_7cantera_6thermo_11ThermoPhase_electron_energy_distribution, 0, (char *)PyDoc_STR(" Electron energy distribution "), 0},
  {(char *)"isotropic_shape_factor", __pyx_getprop_7cantera_6thermo_11ThermoPhase_isotropic_shape_factor, __pyx_setprop_7cantera_6thermo_11ThermoPhase_isotropic_shape_factor, (char *)PyDoc_STR(" Shape factor of isotropic-velocity distribution for electron energy "), 0},
  {(char *)"electron_energy_distribution_type", __pyx_getprop_7cantera_6thermo_11ThermoPhase_electron_energy_distribution_type, __pyx_setprop_7cantera_6thermo_11ThermoPhase_electron_energy_distribution_type, (char *)PyDoc_STR(" Electron energy distribution type "), 0},
  {(char *)"mean_electron_energy", __pyx_getprop_7cantera_6thermo_11ThermoPhase_mean_electron_energy, __pyx_setprop_7cantera_6thermo_11ThermoPhase_mean_electron_energy, (char *)PyDoc_STR(" Mean electron energy [eV] "), 0},
  {(char *)"quadrature_method", __pyx_getprop_7cantera_6thermo_11ThermoPhase_quadrature_method, __pyx_setprop_7cantera_6thermo_11ThermoPhase_quadrature_method, (char *)PyDoc_STR(" Quadrature method "), 0},
  {(char *)"normalize_electron_energy_distribution_enabled", __pyx_getprop_7cantera_6thermo_11ThermoPhase_normalize_electron_energy_distribution_enabled, __pyx_setprop_7cantera_6thermo_11ThermoPhase_normalize_electron_energy_distribution_enabled, (char *)PyDoc_STR(" Automatically normalize electron energy distribution "), 0},
  {(char *)"_enable_plasma", __pyx_getprop_7cantera_6thermo_11ThermoPhase__enable_plasma, __pyx_setprop_7cantera_6thermo_11ThermoPhase__enable_plasma, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_6thermo_ThermoPhase_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7cantera_6thermo_ThermoPhase},
  {Py_tp_call, (void *)__pyx_pw_7cantera_6thermo_11ThermoPhase_5__call__},
  {Py_tp_doc, (void *)PyDoc_STR("\n    A phase with an equation of state.\n\n    Class `ThermoPhase` may be used to represent the intensive thermodynamic\n    state of a phase of matter, which might be a gas, liquid, or solid.\n\n    Class `ThermoPhase` is not usually instantiated directly. It is used\n    as a base class for classes `Solution` and `Interface`.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_6thermo_ThermoPhase},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_6thermo_ThermoPhase},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_6thermo_ThermoPhase},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_6thermo_ThermoPhase},
  {Py_tp_init, (void *)__pyx_pw_7cantera_6thermo_11ThermoPhase_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_6thermo_ThermoPhase},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_6thermo_ThermoPhase_spec = {
  "cantera.thermo.ThermoPhase",
  sizeof(struct __pyx_obj_7cantera_6thermo_ThermoPhase),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_7cantera_6thermo_ThermoPhase_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_6thermo_ThermoPhase = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.thermo.""ThermoPhase", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_6thermo_ThermoPhase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_6thermo_ThermoPhase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_7cantera_6thermo_11ThermoPhase_5__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n    A phase with an equation of state.\n\n    Class `ThermoPhase` may be used to represent the intensive thermodynamic\n    state of a phase of matter, which might be a gas, liquid, or solid.\n\n    Class `ThermoPhase` is not usually instantiated directly. It is used\n    as a base class for classes `Solution` and `Interface`.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_6thermo_ThermoPhase, /*tp_traverse*/
  __pyx_tp_clear_7cantera_6thermo_ThermoPhase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_6thermo_ThermoPhase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_6thermo_ThermoPhase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_6thermo_11ThermoPhase_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_6thermo_ThermoPhase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7cantera_6thermo_InterfacePhase __pyx_vtable_7cantera_6thermo_InterfacePhase;

static PyObject *__pyx_tp_new_7cantera_6thermo_InterfacePhase(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cantera_6thermo_InterfacePhase *p;
  PyObject *o = __pyx_tp_new_7cantera_6thermo_ThermoPhase(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cantera_6thermo_InterfacePhase *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase*)__pyx_vtabptr_7cantera_6thermo_InterfacePhase;
  if (unlikely(__pyx_pw_7cantera_6thermo_14InterfacePhase_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_7cantera_6thermo_14InterfacePhase_adjacent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_14InterfacePhase_8adjacent_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_14InterfacePhase_site_density(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_14InterfacePhase_12site_density_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_14InterfacePhase_site_density(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_14InterfacePhase_12site_density_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_14InterfacePhase_coverages(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_14InterfacePhase_9coverages_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_14InterfacePhase_coverages(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_14InterfacePhase_9coverages_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cantera_6thermo_InterfacePhase[] = {
  {"set_unnormalized_coverages", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_14InterfacePhase_3set_unnormalized_coverages, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_6thermo_14InterfacePhase_2set_unnormalized_coverages},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_14InterfacePhase_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_14InterfacePhase_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_6thermo_InterfacePhase[] = {
  {(char *)"adjacent", __pyx_getprop_7cantera_6thermo_14InterfacePhase_adjacent, 0, (char *)PyDoc_STR("\n        A dictionary containing higher-dimensional phases adjacent to this interface,\n        for example bulk phases adjacent to a surface.\n        "), 0},
  {(char *)"site_density", __pyx_getprop_7cantera_6thermo_14InterfacePhase_site_density, __pyx_setprop_7cantera_6thermo_14InterfacePhase_site_density, (char *)PyDoc_STR("\n        Get/Set the site density. [kmol/m^2] for surface phases; [kmol/m] for\n        edge phases.\n        "), 0},
  {(char *)"coverages", __pyx_getprop_7cantera_6thermo_14InterfacePhase_coverages, __pyx_setprop_7cantera_6thermo_14InterfacePhase_coverages, (char *)PyDoc_STR("Get/Set the fraction of sites covered by each species."), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_6thermo_InterfacePhase_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" A class representing a surface, edge phase ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_6thermo_ThermoPhase},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_6thermo_ThermoPhase},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_6thermo_InterfacePhase},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_6thermo_InterfacePhase},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_6thermo_InterfacePhase},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_6thermo_InterfacePhase_spec = {
  "cantera.thermo.InterfacePhase",
  sizeof(struct __pyx_obj_7cantera_6thermo_InterfacePhase),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_7cantera_6thermo_InterfacePhase_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_6thermo_InterfacePhase = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.thermo.""InterfacePhase", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_6thermo_InterfacePhase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_6thermo_ThermoPhase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_6thermo_11ThermoPhase_5__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR(" A class representing a surface, edge phase "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_6thermo_ThermoPhase, /*tp_traverse*/
  __pyx_tp_clear_7cantera_6thermo_ThermoPhase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_6thermo_InterfacePhase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_6thermo_InterfacePhase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_6thermo_11ThermoPhase_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_6thermo_InterfacePhase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_7cantera_6thermo_PureFluid __pyx_vtable_7cantera_6thermo_PureFluid;

static PyObject *__pyx_tp_new_7cantera_6thermo_PureFluid(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cantera_6thermo_PureFluid *p;
  PyObject *o = __pyx_tp_new_7cantera_6thermo_ThermoPhase(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cantera_6thermo_PureFluid *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase*)__pyx_vtabptr_7cantera_6thermo_PureFluid;
  return o;
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_Q(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_1Q_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_9PureFluid_Q(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_9PureFluid_1Q_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_TQ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_2TQ_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_9PureFluid_TQ(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_9PureFluid_2TQ_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_PQ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_2PQ_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_9PureFluid_PQ(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_9PureFluid_2PQ_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_ST(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_2ST_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_9PureFluid_ST(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_9PureFluid_2ST_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_TV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_2TV_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_9PureFluid_TV(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_9PureFluid_2TV_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_PV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_2PV_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_9PureFluid_PV(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_9PureFluid_2PV_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_UP(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_2UP_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_9PureFluid_UP(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_9PureFluid_2UP_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_VH(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_2VH_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_9PureFluid_VH(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_9PureFluid_2VH_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_TH(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_2TH_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_9PureFluid_TH(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_9PureFluid_2TH_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_SH(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_2SH_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_9PureFluid_SH(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_9PureFluid_2SH_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_TDQ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_3TDQ_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_TPQ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_3TPQ_1__get__(o);
}

static int __pyx_setprop_7cantera_6thermo_9PureFluid_TPQ(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_6thermo_9PureFluid_3TPQ_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_UVQ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_3UVQ_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_DPQ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_3DPQ_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_HPQ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_3HPQ_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_SPQ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_3SPQ_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_6thermo_9PureFluid_SVQ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_6thermo_9PureFluid_3SVQ_1__get__(o);
}

static PyMethodDef __pyx_methods_7cantera_6thermo_PureFluid[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_9PureFluid_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_6thermo_9PureFluid_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_6thermo_PureFluid[] = {
  {(char *)"Q", __pyx_getprop_7cantera_6thermo_9PureFluid_Q, __pyx_setprop_7cantera_6thermo_9PureFluid_Q, (char *)PyDoc_STR("\n        Get/Set vapor fraction (quality). Can be set only when in the two-phase\n        region.\n        "), 0},
  {(char *)"TQ", __pyx_getprop_7cantera_6thermo_9PureFluid_TQ, __pyx_setprop_7cantera_6thermo_9PureFluid_TQ, (char *)PyDoc_STR("Get/Set the temperature [K] and vapor fraction of a two-phase state."), 0},
  {(char *)"PQ", __pyx_getprop_7cantera_6thermo_9PureFluid_PQ, __pyx_setprop_7cantera_6thermo_9PureFluid_PQ, (char *)PyDoc_STR("Get/Set the pressure [Pa] and vapor fraction of a two-phase state."), 0},
  {(char *)"ST", __pyx_getprop_7cantera_6thermo_9PureFluid_ST, __pyx_setprop_7cantera_6thermo_9PureFluid_ST, (char *)PyDoc_STR("Get/Set the entropy [J/kg/K] and temperature [K] of a PureFluid."), 0},
  {(char *)"TV", __pyx_getprop_7cantera_6thermo_9PureFluid_TV, __pyx_setprop_7cantera_6thermo_9PureFluid_TV, (char *)PyDoc_STR("\n        Get/Set the temperature [K] and specific volume [m^3/kg] of\n        a PureFluid.\n        "), 0},
  {(char *)"PV", __pyx_getprop_7cantera_6thermo_9PureFluid_PV, __pyx_setprop_7cantera_6thermo_9PureFluid_PV, (char *)PyDoc_STR("\n        Get/Set the pressure [Pa] and specific volume [m^3/kg] of\n        a PureFluid.\n        "), 0},
  {(char *)"UP", __pyx_getprop_7cantera_6thermo_9PureFluid_UP, __pyx_setprop_7cantera_6thermo_9PureFluid_UP, (char *)PyDoc_STR("\n        Get/Set the specific internal energy [J/kg] and the\n        pressure [Pa] of a PureFluid.\n        "), 0},
  {(char *)"VH", __pyx_getprop_7cantera_6thermo_9PureFluid_VH, __pyx_setprop_7cantera_6thermo_9PureFluid_VH, (char *)PyDoc_STR("\n        Get/Set the specific volume [m^3/kg] and the specific\n        enthalpy [J/kg] of a PureFluid.\n        "), 0},
  {(char *)"TH", __pyx_getprop_7cantera_6thermo_9PureFluid_TH, __pyx_setprop_7cantera_6thermo_9PureFluid_TH, (char *)PyDoc_STR("\n        Get/Set the temperature [K] and the specific enthalpy [J/kg]\n        of a PureFluid.\n        "), 0},
  {(char *)"SH", __pyx_getprop_7cantera_6thermo_9PureFluid_SH, __pyx_setprop_7cantera_6thermo_9PureFluid_SH, (char *)PyDoc_STR("\n        Get/Set the specific entropy [J/kg/K] and the specific\n        enthalpy [J/kg] of a PureFluid.\n        "), 0},
  {(char *)"TDQ", __pyx_getprop_7cantera_6thermo_9PureFluid_TDQ, 0, (char *)PyDoc_STR("\n        Get the temperature [K], density [kg/m^3 or kmol/m^3], and vapor\n        fraction.\n        "), 0},
  {(char *)"TPQ", __pyx_getprop_7cantera_6thermo_9PureFluid_TPQ, __pyx_setprop_7cantera_6thermo_9PureFluid_TPQ, (char *)PyDoc_STR("\n        Get/Set the temperature [K], pressure [Pa], and vapor fraction of a\n        PureFluid.\n\n        An Exception is raised if the thermodynamic state is not consistent.\n        "), 0},
  {(char *)"UVQ", __pyx_getprop_7cantera_6thermo_9PureFluid_UVQ, 0, (char *)PyDoc_STR("\n        Get the internal energy [J/kg or J/kmol], specific volume\n        [m^3/kg or m^3/kmol], and vapor fraction.\n        "), 0},
  {(char *)"DPQ", __pyx_getprop_7cantera_6thermo_9PureFluid_DPQ, 0, (char *)PyDoc_STR("Get the density [kg/m^3], pressure [Pa], and vapor fraction."), 0},
  {(char *)"HPQ", __pyx_getprop_7cantera_6thermo_9PureFluid_HPQ, 0, (char *)PyDoc_STR("\n        Get the enthalpy [J/kg or J/kmol], pressure [Pa] and vapor fraction.\n        "), 0},
  {(char *)"SPQ", __pyx_getprop_7cantera_6thermo_9PureFluid_SPQ, 0, (char *)PyDoc_STR("\n        Get the entropy [J/kg/K or J/kmol/K], pressure [Pa], and vapor fraction.\n        "), 0},
  {(char *)"SVQ", __pyx_getprop_7cantera_6thermo_9PureFluid_SVQ, 0, (char *)PyDoc_STR("\n        Get the entropy [J/kg/K or J/kmol/K], specific volume [m^3/kg or\n        m^3/kmol], and vapor fraction.\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_6thermo_PureFluid_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A pure substance that can  be a gas, a liquid, a mixed gas-liquid fluid,\n    or a fluid beyond its critical point.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_6thermo_ThermoPhase},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_6thermo_ThermoPhase},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_6thermo_PureFluid},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_6thermo_PureFluid},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_6thermo_PureFluid},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_6thermo_PureFluid_spec = {
  "cantera.thermo.PureFluid",
  sizeof(struct __pyx_obj_7cantera_6thermo_PureFluid),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_7cantera_6thermo_PureFluid_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_6thermo_PureFluid = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.thermo.""PureFluid", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_6thermo_PureFluid), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_6thermo_ThermoPhase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_6thermo_11ThermoPhase_5__call__, /*tp_call*/
  #else
  0, /*tp_call*/
  #endif
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  PyDoc_STR("\n    A pure substance that can  be a gas, a liquid, a mixed gas-liquid fluid,\n    or a fluid beyond its critical point.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_6thermo_ThermoPhase, /*tp_traverse*/
  __pyx_tp_clear_7cantera_6thermo_ThermoPhase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_6thermo_PureFluid, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_6thermo_PureFluid, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_6thermo_11ThermoPhase_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_6thermo_PureFluid, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr *__pyx_freelist_7cantera_6thermo___pyx_scope_struct__genexpr[8];
static int __pyx_freecount_7cantera_6thermo___pyx_scope_struct__genexpr = 0;

static PyObject *__pyx_tp_new_7cantera_6thermo___pyx_scope_struct__genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((int)(__pyx_freecount_7cantera_6thermo___pyx_scope_struct__genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr)))) {
    o = (PyObject*)__pyx_freelist_7cantera_6thermo___pyx_scope_struct__genexpr[--__pyx_freecount_7cantera_6thermo___pyx_scope_struct__genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr));
    (void) PyObject_INIT(o, t);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  p = ((struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr *)o);
  new((void*)&(p->__pyx_genexpr_arg_0)) std::vector<std::string> ();
  new((void*)&(p->__pyx_v_s)) std::string();
  new((void*)&(p->__pyx_t_0)) std::vector<std::string> ::iterator();
  return o;
}

static void __pyx_tp_dealloc_7cantera_6thermo___pyx_scope_struct__genexpr(PyObject *o) {
  struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr *p = (struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7cantera_6thermo___pyx_scope_struct__genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->__pyx_genexpr_arg_0);
  __Pyx_call_destructor(p->__pyx_v_s);
  __Pyx_call_destructor(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((int)(__pyx_freecount_7cantera_6thermo___pyx_scope_struct__genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr)))) {
    __pyx_freelist_7cantera_6thermo___pyx_scope_struct__genexpr[__pyx_freecount_7cantera_6thermo___pyx_scope_struct__genexpr++] = ((struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7cantera_6thermo___pyx_scope_struct__genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_6thermo___pyx_scope_struct__genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr_spec = {
  "cantera.thermo.__pyx_scope_struct__genexpr",
  sizeof(struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.thermo.""__pyx_scope_struct__genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_6thermo___pyx_scope_struct__genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_6thermo___pyx_scope_struct__genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_6thermo___pyx_scope_struct__genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr *__pyx_freelist_7cantera_6thermo___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_7cantera_6thermo___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_7cantera_6thermo___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((int)(__pyx_freecount_7cantera_6thermo___pyx_scope_struct_1_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_7cantera_6thermo___pyx_scope_struct_1_genexpr[--__pyx_freecount_7cantera_6thermo___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  p = ((struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr *)o);
  new((void*)&(p->__pyx_genexpr_arg_0)) std::vector<std::string> ();
  new((void*)&(p->__pyx_v_n)) std::string();
  new((void*)&(p->__pyx_t_0)) std::vector<std::string> ::iterator();
  return o;
}

static void __pyx_tp_dealloc_7cantera_6thermo___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7cantera_6thermo___pyx_scope_struct_1_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->__pyx_genexpr_arg_0);
  __Pyx_call_destructor(p->__pyx_v_n);
  __Pyx_call_destructor(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((int)(__pyx_freecount_7cantera_6thermo___pyx_scope_struct_1_genexpr < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_7cantera_6thermo___pyx_scope_struct_1_genexpr[__pyx_freecount_7cantera_6thermo___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7cantera_6thermo___pyx_scope_struct_1_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_6thermo___pyx_scope_struct_1_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr_spec = {
  "cantera.thermo.__pyx_scope_struct_1_genexpr",
  sizeof(struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.thermo.""__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_6thermo___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_6thermo___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_6thermo___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_1_0, __pyx_k_1_0, sizeof(__pyx_k_1_0), 0, 1, 0, 0},
    {&__pyx_kp_s_An_element_or_a_named_isotope_d, __pyx_k_An_element_or_a_named_isotope_d, sizeof(__pyx_k_An_element_or_a_named_isotope_d), 0, 0, 1, 0},
    {&__pyx_kp_u_Argument_must_be_a_string_or_a_n, __pyx_k_Argument_must_be_a_string_or_a_n, sizeof(__pyx_k_Argument_must_be_a_string_or_a_n), 0, 1, 0, 0},
    {&__pyx_kp_u_Array_has_incorrect_length, __pyx_k_Array_has_incorrect_length, sizeof(__pyx_k_Array_has_incorrect_length), 0, 1, 0, 0},
    {&__pyx_kp_u_Array_has_incorrect_length_Got_e, __pyx_k_Array_has_incorrect_length_Got_e, sizeof(__pyx_k_Array_has_incorrect_length_Got_e), 0, 1, 0, 0},
    {&__pyx_kp_u_Array_has_incorrect_length_Got_e_2, __pyx_k_Array_has_incorrect_length_Got_e_2, sizeof(__pyx_k_Array_has_incorrect_length_Got_e_2), 0, 1, 0, 0},
    {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
    {&__pyx_n_u_Bilger, __pyx_k_Bilger, sizeof(__pyx_k_Bilger), 0, 1, 0, 1},
    {&__pyx_kp_u_Cannot_add_species_to_ThermoPhas, __pyx_k_Cannot_add_species_to_ThermoPhas, sizeof(__pyx_k_Cannot_add_species_to_ThermoPhas), 0, 1, 0, 0},
    {&__pyx_kp_u_Cannot_set_vapor_quality_outside, __pyx_k_Cannot_set_vapor_quality_outside, sizeof(__pyx_k_Cannot_set_vapor_quality_outside), 0, 1, 0, 0},
    {&__pyx_n_s_CanteraError, __pyx_k_CanteraError, sizeof(__pyx_k_CanteraError), 0, 0, 1, 1},
    {&__pyx_n_s_Element, __pyx_k_Element, sizeof(__pyx_k_Element), 0, 0, 1, 1},
    {&__pyx_n_s_Element___init, __pyx_k_Element___init, sizeof(__pyx_k_Element___init), 0, 0, 1, 1},
    {&__pyx_n_s_Element_atomic_number, __pyx_k_Element_atomic_number, sizeof(__pyx_k_Element_atomic_number), 0, 0, 1, 1},
    {&__pyx_n_s_Element_name, __pyx_k_Element_name, sizeof(__pyx_k_Element_name), 0, 0, 1, 1},
    {&__pyx_n_s_Element_symbol, __pyx_k_Element_symbol, sizeof(__pyx_k_Element_symbol), 0, 0, 1, 1},
    {&__pyx_n_s_Element_weight, __pyx_k_Element_weight, sizeof(__pyx_k_Element_weight), 0, 0, 1, 1},
    {&__pyx_kp_s_Exception_raised_for_an_invalid, __pyx_k_Exception_raised_for_an_invalid, sizeof(__pyx_k_Exception_raised_for_an_invalid), 0, 0, 1, 0},
    {&__pyx_kp_u_Generate_a_report_describing_th, __pyx_k_Generate_a_report_describing_th, sizeof(__pyx_k_Generate_a_report_describing_th), 0, 1, 0, 0},
    {&__pyx_kp_u_Get_the_elemental_mass_fraction, __pyx_k_Get_the_elemental_mass_fraction, sizeof(__pyx_k_Get_the_elemental_mass_fraction), 0, 1, 0, 0},
    {&__pyx_kp_u_Get_the_elemental_mole_fraction, __pyx_k_Get_the_elemental_mole_fraction, sizeof(__pyx_k_Get_the_elemental_mole_fraction), 0, 1, 0, 0},
    {&__pyx_kp_u_Get_the_equivalence_ratio_math, __pyx_k_Get_the_equivalence_ratio_math, sizeof(__pyx_k_Get_the_equivalence_ratio_math), 0, 1, 0, 0},
    {&__pyx_kp_u_Get_the_mixture_fraction_of_the, __pyx_k_Get_the_mixture_fraction_of_the, sizeof(__pyx_k_Get_the_mixture_fraction_of_the), 0, 1, 0, 0},
    {&__pyx_kp_u_Get_the_stoichiometric_air_to_f, __pyx_k_Get_the_stoichiometric_air_to_f, sizeof(__pyx_k_Get_the_stoichiometric_air_to_f), 0, 1, 0, 0},
    {&__pyx_kp_u_Got_Expected, __pyx_k_Got_Expected, sizeof(__pyx_k_Got_Expected), 0, 1, 0, 0},
    {&__pyx_kp_u_If_dilution_is_used_both_fractio, __pyx_k_If_dilution_is_used_both_fractio, sizeof(__pyx_k_If_dilution_is_used_both_fractio), 0, 1, 0, 0},
    {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
    {&__pyx_n_s_InterfacePhase, __pyx_k_InterfacePhase, sizeof(__pyx_k_InterfacePhase), 0, 0, 1, 1},
    {&__pyx_n_s_InterfacePhase___reduce_cython, __pyx_k_InterfacePhase___reduce_cython, sizeof(__pyx_k_InterfacePhase___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_InterfacePhase___setstate_cython, __pyx_k_InterfacePhase___setstate_cython, sizeof(__pyx_k_InterfacePhase___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_InterfacePhase_set_unnormalized, __pyx_k_InterfacePhase_set_unnormalized, sizeof(__pyx_k_InterfacePhase_set_unnormalized), 0, 0, 1, 1},
    {&__pyx_kp_u_Invalid_composition, __pyx_k_Invalid_composition, sizeof(__pyx_k_Invalid_composition), 0, 1, 0, 0},
    {&__pyx_kp_u_Invalid_format_for_the_fraction, __pyx_k_Invalid_format_for_the_fraction, sizeof(__pyx_k_Invalid_format_for_the_fraction), 0, 1, 0, 0},
    {&__pyx_kp_u_Length_of_levels_and_distributio, __pyx_k_Length_of_levels_and_distributio, sizeof(__pyx_k_Length_of_levels_and_distributio), 0, 1, 0, 0},
    {&__pyx_n_s_M_fuel, __pyx_k_M_fuel, sizeof(__pyx_k_M_fuel), 0, 0, 1, 1},
    {&__pyx_n_s_M_mix, __pyx_k_M_mix, sizeof(__pyx_k_M_mix), 0, 0, 1, 1},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_kp_u_No_fuel_in_the_fuel_oxidizer_mix, __pyx_k_No_fuel_in_the_fuel_oxidizer_mix, sizeof(__pyx_k_No_fuel_in_the_fuel_oxidizer_mix), 0, 1, 0, 0},
    {&__pyx_kp_u_No_oxidizer_in_the_fuel_oxidizer, __pyx_k_No_oxidizer_in_the_fuel_oxidizer, sizeof(__pyx_k_No_oxidizer_in_the_fuel_oxidizer), 0, 1, 0, 0},
    {&__pyx_kp_u_No_such_element_r, __pyx_k_No_such_element_r, sizeof(__pyx_k_No_such_element_r), 0, 1, 0, 0},
    {&__pyx_kp_u_No_such_species_r, __pyx_k_No_such_species_r, sizeof(__pyx_k_No_such_species_r), 0, 1, 0, 0},
    {&__pyx_kp_u_Number_of_atoms_of_element_elem, __pyx_k_Number_of_atoms_of_element_elem, sizeof(__pyx_k_Number_of_atoms_of_element_elem), 0, 1, 0, 0},
    {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},
    {&__pyx_n_s_P_orig, __pyx_k_P_orig, sizeof(__pyx_k_P_orig), 0, 0, 1, 1},
    {&__pyx_n_s_P_sat, __pyx_k_P_sat, sizeof(__pyx_k_P_sat), 0, 0, 1, 1},
    {&__pyx_n_s_PureFluid, __pyx_k_PureFluid, sizeof(__pyx_k_PureFluid), 0, 0, 1, 1},
    {&__pyx_n_s_PureFluid___reduce_cython, __pyx_k_PureFluid___reduce_cython, sizeof(__pyx_k_PureFluid___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_PureFluid___setstate_cython, __pyx_k_PureFluid___setstate_cython, sizeof(__pyx_k_PureFluid___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Q, __pyx_k_Q, sizeof(__pyx_k_Q), 0, 0, 1, 1},
    {&__pyx_kp_u_Set_the_composition_to_a_mixtur, __pyx_k_Set_the_composition_to_a_mixtur, sizeof(__pyx_k_Set_the_composition_to_a_mixtur), 0, 1, 0, 0},
    {&__pyx_kp_u_Set_the_composition_to_a_mixtur_2, __pyx_k_Set_the_composition_to_a_mixtur_2, sizeof(__pyx_k_Set_the_composition_to_a_mixtur_2), 0, 1, 0, 0},
    {&__pyx_kp_u_Species, __pyx_k_Species, sizeof(__pyx_k_Species), 0, 1, 0, 0},
    {&__pyx_n_s_Species_2, __pyx_k_Species_2, sizeof(__pyx_k_Species_2), 0, 0, 1, 1},
    {&__pyx_n_s_Species___reduce_cython, __pyx_k_Species___reduce_cython, sizeof(__pyx_k_Species___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Species___setstate_cython, __pyx_k_Species___setstate_cython, sizeof(__pyx_k_Species___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Species_clear_user_data, __pyx_k_Species_clear_user_data, sizeof(__pyx_k_Species_clear_user_data), 0, 0, 1, 1},
    {&__pyx_n_s_Species_from_dict, __pyx_k_Species_from_dict, sizeof(__pyx_k_Species_from_dict), 0, 0, 1, 1},
    {&__pyx_n_s_Species_from_yaml, __pyx_k_Species_from_yaml, sizeof(__pyx_k_Species_from_yaml), 0, 0, 1, 1},
    {&__pyx_n_s_Species_list_from_file, __pyx_k_Species_list_from_file, sizeof(__pyx_k_Species_list_from_file), 0, 0, 1, 1},
    {&__pyx_n_s_Species_list_from_yaml, __pyx_k_Species_list_from_yaml, sizeof(__pyx_k_Species_list_from_yaml), 0, 0, 1, 1},
    {&__pyx_n_s_Species_update_user_data, __pyx_k_Species_update_user_data, sizeof(__pyx_k_Species_update_user_data), 0, 0, 1, 1},
    {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
    {&__pyx_n_s_TP, __pyx_k_TP, sizeof(__pyx_k_TP), 0, 0, 1, 1},
    {&__pyx_n_s_TPX, __pyx_k_TPX, sizeof(__pyx_k_TPX), 0, 0, 1, 1},
    {&__pyx_n_s_TPY, __pyx_k_TPY, sizeof(__pyx_k_TPY), 0, 0, 1, 1},
    {&__pyx_n_s_T_orig, __pyx_k_T_orig, sizeof(__pyx_k_T_orig), 0, 0, 1, 1},
    {&__pyx_kp_u_The, __pyx_k_The, sizeof(__pyx_k_The), 0, 1, 0, 0},
    {&__pyx_kp_u_The_fraction_argument_must_be_gi, __pyx_k_The_fraction_argument_must_be_gi, sizeof(__pyx_k_The_fraction_argument_must_be_gi), 0, 1, 0, 0},
    {&__pyx_kp_u_The_fraction_must_be_between_0_a, __pyx_k_The_fraction_must_be_between_0_a, sizeof(__pyx_k_The_fraction_must_be_between_0_a), 0, 1, 0, 0},
    {&__pyx_kp_u_The_fraction_must_specify_fuel_o, __pyx_k_The_fraction_must_specify_fuel_o, sizeof(__pyx_k_The_fraction_must_specify_fuel_o), 0, 1, 0, 0},
    {&__pyx_kp_u_The_input_argument_to_Element_mu, __pyx_k_The_input_argument_to_Element_mu, sizeof(__pyx_k_The_input_argument_to_Element_mu), 0, 1, 0, 0},
    {&__pyx_n_s_ThermoModelMethodError, __pyx_k_ThermoModelMethodError, sizeof(__pyx_k_ThermoModelMethodError), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoModelMethodError___init, __pyx_k_ThermoModelMethodError___init, sizeof(__pyx_k_ThermoModelMethodError___init), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase, __pyx_k_ThermoPhase, sizeof(__pyx_k_ThermoPhase), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase___composition_to_arr, __pyx_k_ThermoPhase___composition_to_arr, sizeof(__pyx_k_ThermoPhase___composition_to_arr), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase___get___locals_lambd, __pyx_k_ThermoPhase___get___locals_lambd, sizeof(__pyx_k_ThermoPhase___get___locals_lambd), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase___reduce_cython, __pyx_k_ThermoPhase___reduce_cython, sizeof(__pyx_k_ThermoPhase___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase___setstate_cython, __pyx_k_ThermoPhase___setstate_cython, sizeof(__pyx_k_ThermoPhase___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase__composition_to_arr, __pyx_k_ThermoPhase__composition_to_arr, sizeof(__pyx_k_ThermoPhase__composition_to_arr), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_add_species, __pyx_k_ThermoPhase_add_species, sizeof(__pyx_k_ThermoPhase_add_species), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_add_species_alias, __pyx_k_ThermoPhase_add_species_alias, sizeof(__pyx_k_ThermoPhase_add_species_alias), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_atomic_weight, __pyx_k_ThermoPhase_atomic_weight, sizeof(__pyx_k_ThermoPhase_atomic_weight), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_element_index, __pyx_k_ThermoPhase_element_index, sizeof(__pyx_k_ThermoPhase_element_index), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_element_name, __pyx_k_ThermoPhase_element_name, sizeof(__pyx_k_ThermoPhase_element_name), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_elemental_mass_fract, __pyx_k_ThermoPhase_elemental_mass_fract, sizeof(__pyx_k_ThermoPhase_elemental_mass_fract), 0, 0, 1, 1},
    {&__pyx_kp_u_ThermoPhase_elemental_mass_fract_2, __pyx_k_ThermoPhase_elemental_mass_fract_2, sizeof(__pyx_k_ThermoPhase_elemental_mass_fract_2), 0, 1, 0, 0},
    {&__pyx_n_s_ThermoPhase_elemental_mole_fract, __pyx_k_ThermoPhase_elemental_mole_fract, sizeof(__pyx_k_ThermoPhase_elemental_mole_fract), 0, 0, 1, 1},
    {&__pyx_kp_u_ThermoPhase_elemental_mole_fract_2, __pyx_k_ThermoPhase_elemental_mole_fract_2, sizeof(__pyx_k_ThermoPhase_elemental_mole_fract_2), 0, 1, 0, 0},
    {&__pyx_n_s_ThermoPhase_equilibrate, __pyx_k_ThermoPhase_equilibrate, sizeof(__pyx_k_ThermoPhase_equilibrate), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_equivalence_ratio, __pyx_k_ThermoPhase_equivalence_ratio, sizeof(__pyx_k_ThermoPhase_equivalence_ratio), 0, 0, 1, 1},
    {&__pyx_kp_u_ThermoPhase_equivalence_ratio_li, __pyx_k_ThermoPhase_equivalence_ratio_li, sizeof(__pyx_k_ThermoPhase_equivalence_ratio_li), 0, 1, 0, 0},
    {&__pyx_n_s_ThermoPhase_find_isomers, __pyx_k_ThermoPhase_find_isomers, sizeof(__pyx_k_ThermoPhase_find_isomers), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_mass_fraction_dict, __pyx_k_ThermoPhase_mass_fraction_dict, sizeof(__pyx_k_ThermoPhase_mass_fraction_dict), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_mixture_fraction, __pyx_k_ThermoPhase_mixture_fraction, sizeof(__pyx_k_ThermoPhase_mixture_fraction), 0, 0, 1, 1},
    {&__pyx_kp_u_ThermoPhase_mixture_fraction_lin, __pyx_k_ThermoPhase_mixture_fraction_lin, sizeof(__pyx_k_ThermoPhase_mixture_fraction_lin), 0, 1, 0, 0},
    {&__pyx_n_s_ThermoPhase_modify_species, __pyx_k_ThermoPhase_modify_species, sizeof(__pyx_k_ThermoPhase_modify_species), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_mole_fraction_dict, __pyx_k_ThermoPhase_mole_fraction_dict, sizeof(__pyx_k_ThermoPhase_mole_fraction_dict), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_n_atoms, __pyx_k_ThermoPhase_n_atoms, sizeof(__pyx_k_ThermoPhase_n_atoms), 0, 0, 1, 1},
    {&__pyx_kp_u_ThermoPhase_n_atoms_line_608, __pyx_k_ThermoPhase_n_atoms_line_608, sizeof(__pyx_k_ThermoPhase_n_atoms_line_608), 0, 1, 0, 0},
    {&__pyx_n_s_ThermoPhase_report, __pyx_k_ThermoPhase_report, sizeof(__pyx_k_ThermoPhase_report), 0, 0, 1, 1},
    {&__pyx_kp_u_ThermoPhase_report_line_298, __pyx_k_ThermoPhase_report_line_298, sizeof(__pyx_k_ThermoPhase_report_line_298), 0, 1, 0, 0},
    {&__pyx_n_s_ThermoPhase_set_discretized_elec, __pyx_k_ThermoPhase_set_discretized_elec, sizeof(__pyx_k_ThermoPhase_set_discretized_elec), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_set_equivalence_rati, __pyx_k_ThermoPhase_set_equivalence_rati, sizeof(__pyx_k_ThermoPhase_set_equivalence_rati), 0, 0, 1, 1},
    {&__pyx_kp_u_ThermoPhase_set_equivalence_rati_2, __pyx_k_ThermoPhase_set_equivalence_rati_2, sizeof(__pyx_k_ThermoPhase_set_equivalence_rati_2), 0, 1, 0, 0},
    {&__pyx_n_s_ThermoPhase_set_mixture_fraction, __pyx_k_ThermoPhase_set_mixture_fraction, sizeof(__pyx_k_ThermoPhase_set_mixture_fraction), 0, 0, 1, 1},
    {&__pyx_kp_u_ThermoPhase_set_mixture_fraction_2, __pyx_k_ThermoPhase_set_mixture_fraction_2, sizeof(__pyx_k_ThermoPhase_set_mixture_fraction_2), 0, 1, 0, 0},
    {&__pyx_n_s_ThermoPhase_set_unnormalized_mas, __pyx_k_ThermoPhase_set_unnormalized_mas, sizeof(__pyx_k_ThermoPhase_set_unnormalized_mas), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_set_unnormalized_mol, __pyx_k_ThermoPhase_set_unnormalized_mol, sizeof(__pyx_k_ThermoPhase_set_unnormalized_mol), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_species, __pyx_k_ThermoPhase_species, sizeof(__pyx_k_ThermoPhase_species), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_species_index, __pyx_k_ThermoPhase_species_index, sizeof(__pyx_k_ThermoPhase_species_index), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_species_name, __pyx_k_ThermoPhase_species_name, sizeof(__pyx_k_ThermoPhase_species_name), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoPhase_stoich_air_fuel_rati, __pyx_k_ThermoPhase_stoich_air_fuel_rati, sizeof(__pyx_k_ThermoPhase_stoich_air_fuel_rati), 0, 0, 1, 1},
    {&__pyx_kp_u_ThermoPhase_stoich_air_fuel_rati_2, __pyx_k_ThermoPhase_stoich_air_fuel_rati_2, sizeof(__pyx_k_ThermoPhase_stoich_air_fuel_rati_2), 0, 1, 0, 0},
    {&__pyx_kp_u_This_method_is_invalid_for, __pyx_k_This_method_is_invalid_for, sizeof(__pyx_k_This_method_is_invalid_for), 0, 1, 0, 0},
    {&__pyx_kp_u_This_method_is_invalid_for_therm, __pyx_k_This_method_is_invalid_for_therm, sizeof(__pyx_k_This_method_is_invalid_for_therm), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_kp_u_Underlying_ThermoPhase_object_is, __pyx_k_Underlying_ThermoPhase_object_is, sizeof(__pyx_k_Underlying_ThermoPhase_object_is), 0, 1, 0, 0},
    {&__pyx_kp_u_Valid_choices_are_mass_or_molar, __pyx_k_Valid_choices_are_mass_or_molar, sizeof(__pyx_k_Valid_choices_are_mass_or_molar), 0, 1, 0, 0},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_WeakKeyDictionary, __pyx_k_WeakKeyDictionary, sizeof(__pyx_k_WeakKeyDictionary), 0, 0, 1, 1},
    {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
    {&__pyx_n_s_XY, __pyx_k_XY, sizeof(__pyx_k_XY), 0, 0, 1, 1},
    {&__pyx_n_s_X_fuelox, __pyx_k_X_fuelox, sizeof(__pyx_k_X_fuelox), 0, 0, 1, 1},
    {&__pyx_n_s_X_mix, __pyx_k_X_mix, sizeof(__pyx_k_X_mix), 0, 0, 1, 1},
    {&__pyx_n_s_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 0, 1, 1},
    {&__pyx_n_s_Y_fuelox, __pyx_k_Y_fuelox, sizeof(__pyx_k_Y_fuelox), 0, 0, 1, 1},
    {&__pyx_n_s_Y_mix, __pyx_k_Y_mix, sizeof(__pyx_k_Y_mix), 0, 0, 1, 1},
    {&__pyx_n_s_Y_orig, __pyx_k_Y_orig, sizeof(__pyx_k_Y_orig), 0, 0, 1, 1},
    {&__pyx_n_s_Z, __pyx_k_Z, sizeof(__pyx_k_Z), 0, 0, 1, 1},
    {&__pyx_n_s_Z_fuel, __pyx_k_Z_fuel, sizeof(__pyx_k_Z_fuel), 0, 0, 1, 1},
    {&__pyx_n_s_Z_fuel_mole, __pyx_k_Z_fuel_mole, sizeof(__pyx_k_Z_fuel_mole), 0, 0, 1, 1},
    {&__pyx_n_s__109, __pyx_k__109, sizeof(__pyx_k__109), 0, 0, 1, 1},
    {&__pyx_n_s__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 1, 1},
    {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
    {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
    {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
    {&__pyx_n_s_add_species, __pyx_k_add_species, sizeof(__pyx_k_add_species), 0, 0, 1, 1},
    {&__pyx_n_s_add_species_alias, __pyx_k_add_species_alias, sizeof(__pyx_k_add_species_alias), 0, 0, 1, 1},
    {&__pyx_n_s_alias, __pyx_k_alias, sizeof(__pyx_k_alias), 0, 0, 1, 1},
    {&__pyx_n_s_any_map, __pyx_k_any_map, sizeof(__pyx_k_any_map), 0, 0, 1, 1},
    {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
    {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_n_s_arr, __pyx_k_arr, sizeof(__pyx_k_arr), 0, 0, 1, 1},
    {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
    {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
    {&__pyx_n_s_ascontiguousarray, __pyx_k_ascontiguousarray, sizeof(__pyx_k_ascontiguousarray), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_atomic_number, __pyx_k_atomic_number, sizeof(__pyx_k_atomic_number), 0, 0, 1, 1},
    {&__pyx_n_s_atomic_number_2, __pyx_k_atomic_number_2, sizeof(__pyx_k_atomic_number_2), 0, 0, 1, 1},
    {&__pyx_n_s_atomic_weight, __pyx_k_atomic_weight, sizeof(__pyx_k_atomic_weight), 0, 0, 1, 1},
    {&__pyx_n_u_auto, __pyx_k_auto, sizeof(__pyx_k_auto), 0, 1, 0, 1},
    {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
    {&__pyx_n_s_basis, __pyx_k_basis, sizeof(__pyx_k_basis), 0, 0, 1, 1},
    {&__pyx_kp_u_basis_must_either_be_mass_or_mol, __pyx_k_basis_must_either_be_mass_or_mol, sizeof(__pyx_k_basis_must_either_be_mass_or_mol), 0, 1, 0, 0},
    {&__pyx_n_s_cantera_thermo, __pyx_k_cantera_thermo, sizeof(__pyx_k_cantera_thermo), 0, 0, 1, 1},
    {&__pyx_kp_s_cantera_thermo_pyx, __pyx_k_cantera_thermo_pyx, sizeof(__pyx_k_cantera_thermo_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_charge, __pyx_k_charge, sizeof(__pyx_k_charge), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_clear_user_data, __pyx_k_clear_user_data, sizeof(__pyx_k_clear_user_data), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
    {&__pyx_n_s_comp, __pyx_k_comp, sizeof(__pyx_k_comp), 0, 0, 1, 1},
    {&__pyx_n_s_composition, __pyx_k_composition, sizeof(__pyx_k_composition), 0, 0, 1, 1},
    {&__pyx_n_s_composition_to_array, __pyx_k_composition_to_array, sizeof(__pyx_k_composition_to_array), 0, 0, 1, 1},
    {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
    {&__pyx_n_s_cov, __pyx_k_cov, sizeof(__pyx_k_cov), 0, 0, 1, 1},
    {&__pyx_n_s_critical_pressure, __pyx_k_critical_pressure, sizeof(__pyx_k_critical_pressure), 0, 0, 1, 1},
    {&__pyx_n_s_cxx_species, __pyx_k_cxx_species, sizeof(__pyx_k_cxx_species), 0, 0, 1, 1},
    {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
    {&__pyx_n_s_data_dist, __pyx_k_data_dist, sizeof(__pyx_k_data_dist), 0, 0, 1, 1},
    {&__pyx_n_s_data_levels, __pyx_k_data_levels, sizeof(__pyx_k_data_levels), 0, 0, 1, 1},
    {&__pyx_n_s_density, __pyx_k_density, sizeof(__pyx_k_density), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_diluent, __pyx_k_diluent, sizeof(__pyx_k_diluent), 0, 0, 1, 1},
    {&__pyx_n_u_diluent, __pyx_k_diluent, sizeof(__pyx_k_diluent), 0, 1, 0, 1},
    {&__pyx_n_s_diluent_comp, __pyx_k_diluent_comp, sizeof(__pyx_k_diluent_comp), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_distribution, __pyx_k_distribution, sizeof(__pyx_k_distribution), 0, 0, 1, 1},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
    {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
    {&__pyx_n_s_e_name, __pyx_k_e_name, sizeof(__pyx_k_e_name), 0, 0, 1, 1},
    {&__pyx_n_s_element, __pyx_k_element, sizeof(__pyx_k_element), 0, 0, 1, 1},
    {&__pyx_n_s_element_index, __pyx_k_element_index, sizeof(__pyx_k_element_index), 0, 0, 1, 1},
    {&__pyx_kp_u_element_must_be_a_string_or_a_n, __pyx_k_element_must_be_a_string_or_a_n, sizeof(__pyx_k_element_must_be_a_string_or_a_n), 0, 1, 0, 0},
    {&__pyx_n_s_element_name, __pyx_k_element_name, sizeof(__pyx_k_element_name), 0, 0, 1, 1},
    {&__pyx_n_s_element_names, __pyx_k_element_names, sizeof(__pyx_k_element_names), 0, 0, 1, 1},
    {&__pyx_n_s_element_names_2, __pyx_k_element_names_2, sizeof(__pyx_k_element_names_2), 0, 0, 1, 1},
    {&__pyx_n_s_element_names_locals_genexpr, __pyx_k_element_names_locals_genexpr, sizeof(__pyx_k_element_names_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_element_symbols, __pyx_k_element_symbols, sizeof(__pyx_k_element_symbols), 0, 0, 1, 1},
    {&__pyx_n_s_element_symbols_2, __pyx_k_element_symbols_2, sizeof(__pyx_k_element_symbols_2), 0, 0, 1, 1},
    {&__pyx_n_s_element_symbols_locals_genexpr, __pyx_k_element_symbols_locals_genexpr, sizeof(__pyx_k_element_symbols_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_elemental_mass_fraction, __pyx_k_elemental_mass_fraction, sizeof(__pyx_k_elemental_mass_fraction), 0, 0, 1, 1},
    {&__pyx_n_s_elemental_mole_fraction, __pyx_k_elemental_mole_fraction, sizeof(__pyx_k_elemental_mole_fraction), 0, 0, 1, 1},
    {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
    {&__pyx_n_s_equilibrate, __pyx_k_equilibrate, sizeof(__pyx_k_equilibrate), 0, 0, 1, 1},
    {&__pyx_n_s_equivalence_ratio, __pyx_k_equivalence_ratio, sizeof(__pyx_k_equivalence_ratio), 0, 0, 1, 1},
    {&__pyx_n_s_estimate_equil, __pyx_k_estimate_equil, sizeof(__pyx_k_estimate_equil), 0, 0, 1, 1},
    {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
    {&__pyx_n_s_factor, __pyx_k_factor, sizeof(__pyx_k_factor), 0, 0, 1, 1},
    {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
    {&__pyx_n_s_find_isomers, __pyx_k_find_isomers, sizeof(__pyx_k_find_isomers), 0, 0, 1, 1},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_n_s_fraction, __pyx_k_fraction, sizeof(__pyx_k_fraction), 0, 0, 1, 1},
    {&__pyx_kp_u_fraction_after_dilution_cannot, __pyx_k_fraction_after_dilution_cannot, sizeof(__pyx_k_fraction_after_dilution_cannot), 0, 1, 0, 0},
    {&__pyx_n_s_fraction_dict, __pyx_k_fraction_dict, sizeof(__pyx_k_fraction_dict), 0, 0, 1, 1},
    {&__pyx_n_s_fraction_type, __pyx_k_fraction_type, sizeof(__pyx_k_fraction_type), 0, 0, 1, 1},
    {&__pyx_n_s_fraction_value, __pyx_k_fraction_value, sizeof(__pyx_k_fraction_value), 0, 0, 1, 1},
    {&__pyx_n_s_from_dict, __pyx_k_from_dict, sizeof(__pyx_k_from_dict), 0, 0, 1, 1},
    {&__pyx_n_s_from_yaml, __pyx_k_from_yaml, sizeof(__pyx_k_from_yaml), 0, 0, 1, 1},
    {&__pyx_n_s_fuel, __pyx_k_fuel, sizeof(__pyx_k_fuel), 0, 0, 1, 1},
    {&__pyx_n_u_fuel, __pyx_k_fuel, sizeof(__pyx_k_fuel), 0, 1, 0, 1},
    {&__pyx_n_s_fuel_comp, __pyx_k_fuel_comp, sizeof(__pyx_k_fuel_comp), 0, 0, 1, 1},
    {&__pyx_kp_u_fuel_or_oxidizer_fraction_after, __pyx_k_fuel_or_oxidizer_fraction_after, sizeof(__pyx_k_fuel_or_oxidizer_fraction_after), 0, 1, 0, 0},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
    {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_include_species, __pyx_k_include_species, sizeof(__pyx_k_include_species), 0, 0, 1, 1},
    {&__pyx_kp_u_incorrect_number_of_values, __pyx_k_incorrect_number_of_values, sizeof(__pyx_k_incorrect_number_of_values), 0, 1, 0, 0},
    {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_n_s_init_2, __pyx_k_init_2, sizeof(__pyx_k_init_2), 0, 0, 1, 1},
    {&__pyx_n_u_init_2, __pyx_k_init_2, sizeof(__pyx_k_init_2), 0, 1, 0, 1},
    {&__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_iso, __pyx_k_iso, sizeof(__pyx_k_iso), 0, 0, 1, 1},
    {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
    {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
    {&__pyx_n_u_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 1, 0, 1},
    {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
    {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
    {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
    {&__pyx_n_s_kv, __pyx_k_kv, sizeof(__pyx_k_kv), 0, 0, 1, 1},
    {&__pyx_n_s_levels, __pyx_k_levels, sizeof(__pyx_k_levels), 0, 0, 1, 1},
    {&__pyx_n_s_list_from_file, __pyx_k_list_from_file, sizeof(__pyx_k_list_from_file), 0, 0, 1, 1},
    {&__pyx_n_s_list_from_yaml, __pyx_k_list_from_yaml, sizeof(__pyx_k_list_from_yaml), 0, 0, 1, 1},
    {&__pyx_n_s_log_level, __pyx_k_log_level, sizeof(__pyx_k_log_level), 0, 0, 1, 1},
    {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
    {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_u_mass, __pyx_k_mass, sizeof(__pyx_k_mass), 0, 1, 0, 1},
    {&__pyx_n_s_mass_fraction_dict, __pyx_k_mass_fraction_dict, sizeof(__pyx_k_mass_fraction_dict), 0, 0, 1, 1},
    {&__pyx_n_s_max_iter, __pyx_k_max_iter, sizeof(__pyx_k_max_iter), 0, 0, 1, 1},
    {&__pyx_n_s_max_steps, __pyx_k_max_steps, sizeof(__pyx_k_max_steps), 0, 0, 1, 1},
    {&__pyx_n_s_mean_molecular_weight, __pyx_k_mean_molecular_weight, sizeof(__pyx_k_mean_molecular_weight), 0, 0, 1, 1},
    {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
    {&__pyx_n_s_mixture_fraction, __pyx_k_mixture_fraction, sizeof(__pyx_k_mixture_fraction), 0, 0, 1, 1},
    {&__pyx_n_s_modify_species, __pyx_k_modify_species, sizeof(__pyx_k_modify_species), 0, 0, 1, 1},
    {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
    {&__pyx_n_u_molar, __pyx_k_molar, sizeof(__pyx_k_molar), 0, 1, 0, 1},
    {&__pyx_n_u_mole, __pyx_k_mole, sizeof(__pyx_k_mole), 0, 1, 0, 1},
    {&__pyx_n_s_mole_fraction_dict, __pyx_k_mole_fraction_dict, sizeof(__pyx_k_mole_fraction_dict), 0, 0, 1, 1},
    {&__pyx_n_s_mro_entries, __pyx_k_mro_entries, sizeof(__pyx_k_mro_entries), 0, 0, 1, 1},
    {&__pyx_n_s_n_atoms, __pyx_k_n_atoms, sizeof(__pyx_k_n_atoms), 0, 0, 1, 1},
    {&__pyx_n_s_n_electron_energy_levels, __pyx_k_n_electron_energy_levels, sizeof(__pyx_k_n_electron_energy_levels), 0, 0, 1, 1},
    {&__pyx_n_s_n_elements, __pyx_k_n_elements, sizeof(__pyx_k_n_elements), 0, 0, 1, 1},
    {&__pyx_n_s_n_species, __pyx_k_n_species, sizeof(__pyx_k_n_species), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_n_s_name_3, __pyx_k_name_3, sizeof(__pyx_k_name_3), 0, 0, 1, 1},
    {&__pyx_n_s_names, __pyx_k_names, sizeof(__pyx_k_names), 0, 0, 1, 1},
    {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
    {&__pyx_n_s_newaxis, __pyx_k_newaxis, sizeof(__pyx_k_newaxis), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
    {&__pyx_n_s_num_elements_defined, __pyx_k_num_elements_defined, sizeof(__pyx_k_num_elements_defined), 0, 0, 1, 1},
    {&__pyx_n_s_numbers, __pyx_k_numbers, sizeof(__pyx_k_numbers), 0, 0, 1, 1},
    {&__pyx_n_s_numbers_2, __pyx_k_numbers_2, sizeof(__pyx_k_numbers_2), 0, 0, 1, 1},
    {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
    {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
    {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
    {&__pyx_n_s_o, __pyx_k_o, sizeof(__pyx_k_o), 0, 0, 1, 1},
    {&__pyx_kp_u_or, __pyx_k_or, sizeof(__pyx_k_or), 0, 1, 0, 0},
    {&__pyx_n_s_original_state, __pyx_k_original_state, sizeof(__pyx_k_original_state), 0, 0, 1, 1},
    {&__pyx_n_s_ox_comp, __pyx_k_ox_comp, sizeof(__pyx_k_ox_comp), 0, 0, 1, 1},
    {&__pyx_n_s_oxidizer, __pyx_k_oxidizer, sizeof(__pyx_k_oxidizer), 0, 0, 1, 1},
    {&__pyx_n_u_oxidizer, __pyx_k_oxidizer, sizeof(__pyx_k_oxidizer), 0, 1, 0, 1},
    {&__pyx_n_s_phi, __pyx_k_phi, sizeof(__pyx_k_phi), 0, 0, 1, 1},
    {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
    {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
    {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_report, __pyx_k_report, sizeof(__pyx_k_report), 0, 0, 1, 1},
    {&__pyx_n_s_root, __pyx_k_root, sizeof(__pyx_k_root), 0, 0, 1, 1},
    {&__pyx_n_s_rtol, __pyx_k_rtol, sizeof(__pyx_k_rtol), 0, 0, 1, 1},
    {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
    {&__pyx_n_s_section, __pyx_k_section, sizeof(__pyx_k_section), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_kp_s_self__base_self_base_self_kineti, __pyx_k_self__base_self_base_self_kineti, sizeof(__pyx_k_self__base_self_base_self_kineti), 0, 0, 1, 0},
    {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
    {&__pyx_n_s_set_discretized_electron_energy, __pyx_k_set_discretized_electron_energy, sizeof(__pyx_k_set_discretized_electron_energy), 0, 0, 1, 1},
    {&__pyx_n_s_set_equivalence_ratio, __pyx_k_set_equivalence_ratio, sizeof(__pyx_k_set_equivalence_ratio), 0, 0, 1, 1},
    {&__pyx_n_s_set_mixture_fraction, __pyx_k_set_mixture_fraction, sizeof(__pyx_k_set_mixture_fraction), 0, 0, 1, 1},
    {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
    {&__pyx_n_s_set_unnormalized_coverages, __pyx_k_set_unnormalized_coverages, sizeof(__pyx_k_set_unnormalized_coverages), 0, 0, 1, 1},
    {&__pyx_n_s_set_unnormalized_mass_fractions, __pyx_k_set_unnormalized_mass_fractions, sizeof(__pyx_k_set_unnormalized_mass_fractions), 0, 0, 1, 1},
    {&__pyx_n_s_set_unnormalized_mole_fractions, __pyx_k_set_unnormalized_mole_fractions, sizeof(__pyx_k_set_unnormalized_mole_fractions), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_show_thermo, __pyx_k_show_thermo, sizeof(__pyx_k_show_thermo), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_n_s_solver, __pyx_k_solver, sizeof(__pyx_k_solver), 0, 0, 1, 1},
    {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
    {&__pyx_n_u_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 1, 0, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_species, __pyx_k_species, sizeof(__pyx_k_species), 0, 0, 1, 1},
    {&__pyx_n_u_species, __pyx_k_species, sizeof(__pyx_k_species), 0, 1, 0, 1},
    {&__pyx_n_s_species_index, __pyx_k_species_index, sizeof(__pyx_k_species_index), 0, 0, 1, 1},
    {&__pyx_kp_u_species_must_be_a_string_or_a_n, __pyx_k_species_must_be_a_string_or_a_n, sizeof(__pyx_k_species_must_be_a_string_or_a_n), 0, 1, 0, 0},
    {&__pyx_n_s_species_name, __pyx_k_species_name, sizeof(__pyx_k_species_name), 0, 0, 1, 1},
    {&__pyx_n_s_species_names, __pyx_k_species_names, sizeof(__pyx_k_species_names), 0, 0, 1, 1},
    {&__pyx_n_s_squeeze, __pyx_k_squeeze, sizeof(__pyx_k_squeeze), 0, 0, 1, 1},
    {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
    {&__pyx_n_s_state_size, __pyx_k_state_size, sizeof(__pyx_k_state_size), 0, 0, 1, 1},
    {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
    {&__pyx_n_s_stoich_air_fuel_ratio, __pyx_k_stoich_air_fuel_ratio, sizeof(__pyx_k_stoich_air_fuel_ratio), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_symbol, __pyx_k_symbol, sizeof(__pyx_k_symbol), 0, 0, 1, 1},
    {&__pyx_n_s_symbol_2, __pyx_k_symbol_2, sizeof(__pyx_k_symbol_2), 0, 0, 1, 1},
    {&__pyx_n_s_syms, __pyx_k_syms, sizeof(__pyx_k_syms), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
    {&__pyx_n_s_thermo_model, __pyx_k_thermo_model, sizeof(__pyx_k_thermo_model), 0, 0, 1, 1},
    {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
    {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
    {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
    {&__pyx_n_s_update_user_data, __pyx_k_update_user_data, sizeof(__pyx_k_update_user_data), 0, 0, 1, 1},
    {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
    {&__pyx_n_s_utils, __pyx_k_utils, sizeof(__pyx_k_utils), 0, 0, 1, 1},
    {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
    {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
    {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
    {&__pyx_n_s_weakref, __pyx_k_weakref, sizeof(__pyx_k_weakref), 0, 0, 1, 1},
    {&__pyx_n_s_weight, __pyx_k_weight, sizeof(__pyx_k_weight), 0, 0, 1, 1},
    {&__pyx_n_s_weight_2, __pyx_k_weight_2, sizeof(__pyx_k_weight_2), 0, 0, 1, 1},
    {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) __PYX_ERR(0, 2217, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 34, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 310, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 386, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 479, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 638, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 1362, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 68, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 987, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":987
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(3, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":993
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(3, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "cantera/thermo.pyx":730
 *             arr = np.copy(self.Y)
 *         else:
 *             raise ValueError("basis must either be 'mass' or mole'.")             # <<<<<<<<<<<<<<
 * 
 *         self.state = original_state
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_basis_must_either_be_mass_or_mol); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "cantera/thermo.pyx":793
 * 
 *         if (fraction is None) != (diluent is None):
 *             raise ValueError("If dilution is used, both 'fraction' and 'diluent' "             # <<<<<<<<<<<<<<
 *                              "parameters are required.")
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_If_dilution_is_used_both_fractio); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "cantera/thermo.pyx":804
 *             fraction_dict = fraction
 *         else:
 *             raise ValueError("The fraction argument must be given as string or "             # <<<<<<<<<<<<<<
 *                              "dictionary.")
 * 
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_The_fraction_argument_must_be_gi); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "cantera/thermo.pyx":808
 * 
 *         if len(fraction_dict) != 1:
 *             raise ValueError("Invalid format for the fraction. Must be provided for "             # <<<<<<<<<<<<<<
 *                              "example as fraction='fuel:0.1'")
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Invalid_format_for_the_fraction); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "cantera/thermo.pyx":815
 * 
 *         if fraction_value < 0 or fraction_value > 1:
 *             raise ValueError("The fraction must be between 0 and 1")             # <<<<<<<<<<<<<<
 * 
 *         if fraction_type not in ["fuel", "oxidizer", "diluent"]:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_The_fraction_must_be_between_0_a); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "cantera/thermo.pyx":818
 * 
 *         if fraction_type not in ["fuel", "oxidizer", "diluent"]:
 *             raise ValueError("The fraction must specify 'fuel', 'oxidizer' or "             # <<<<<<<<<<<<<<
 *                              "'diluent'")
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_The_fraction_must_specify_fuel_o); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "cantera/thermo.pyx":844
 * 
 *         if Z_fuel == 0.0 and fraction_type == "fuel":
 *             raise ValueError("No fuel in the fuel/oxidizer mixture")             # <<<<<<<<<<<<<<
 * 
 *         if Z_fuel == 1.0 and fraction_type == "oxidizer":
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_No_fuel_in_the_fuel_oxidizer_mix); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "cantera/thermo.pyx":847
 * 
 *         if Z_fuel == 1.0 and fraction_type == "oxidizer":
 *             raise ValueError("No oxidizer in the fuel/oxidizer mixture")             # <<<<<<<<<<<<<<
 * 
 *         if basis == "mass": # for mass basis, it is straight forward
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_No_oxidizer_in_the_fuel_oxidizer); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "cantera/thermo.pyx":1788
 *         # check length
 *         if (len(levels) != len(distribution)):
 *             raise ValueError('Length of levels and distribution are different')             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.double_t, ndim=1] data_levels = \
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Length_of_levels_and_distributio); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "cantera/thermo.pyx":1894
 *             return
 *         if not dynamic_cast[CxxSurfPhasePtr](self.thermo):
 *             raise TypeError('Underlying ThermoPhase object is of the wrong type.')             # <<<<<<<<<<<<<<
 *         self.surf = <CxxSurfPhase*>(self.thermo)
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_Underlying_ThermoPhase_object_is); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "cantera/thermo.pyx":1968
 *             if (self.P >= self.critical_pressure or
 *                 abs(self.P-self.P_sat)/self.P > 1e-4):
 *                 raise ValueError('Cannot set vapor quality outside the '             # <<<<<<<<<<<<<<
 *                                  'two-phase region')
 *             self.thermo.setState_Psat(self.P, Q)
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_Cannot_set_vapor_quality_outside); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 1968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "cantera/thermo.pyx":2214
 *             self._weight = getElementWeight(<int>arg)
 *         else:
 *             raise TypeError('The input argument to Element must be a string '             # <<<<<<<<<<<<<<
 *                             'or an integer')
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_The_input_argument_to_Element_mu); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 2214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "cantera/thermo.pyx":32
 *     """
 * 
 *     def __init__(self, thermo_model):             # <<<<<<<<<<<<<<
 *         self.thermo_model = thermo_model
 *         super().__init__(f"This method is invalid for {self.thermo_model}")
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_thermo_model); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_init, 32, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 32, __pyx_L1_error)

  /* "cantera/thermo.pyx":104
 *         self.species = self._species.get()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_yaml(text):
 *         """
 */
  __pyx_tuple__20 = PyTuple_Pack(3, __pyx_n_s_text, __pyx_n_s_cxx_species, __pyx_n_s_species); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_from_yaml, 104, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 104, __pyx_L1_error)

  /* "cantera/thermo.pyx":114
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_dict(data):
 *         """
 */
  __pyx_tuple__22 = PyTuple_Pack(4, __pyx_n_s_data, __pyx_n_s_any_map, __pyx_n_s_cxx_species, __pyx_n_s_species); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_from_dict, 114, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 114, __pyx_L1_error)

  /* "cantera/thermo.pyx":129
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def list_from_file(filename, section="species"):
 *         """
 */
  __pyx_tuple__24 = PyTuple_Pack(6, __pyx_n_s_filename, __pyx_n_s_section, __pyx_n_s_root, __pyx_n_s_species, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_list_from_file, 129, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_n_u_species); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "cantera/thermo.pyx":144
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def list_from_yaml(text, section=None):
 *         """
 */
  __pyx_tuple__27 = PyTuple_Pack(7, __pyx_n_s_text, __pyx_n_s_section, __pyx_n_s_root, __pyx_n_s_cxx_species, __pyx_n_s_species, __pyx_n_s_a, __pyx_n_s_b); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_list_from_yaml, 144, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 144, __pyx_L1_error)
  __pyx_tuple__29 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "cantera/thermo.pyx":235
 *             return anymap_to_py(self.species.parameters(phase))
 * 
 *     def update_user_data(self, data):             # <<<<<<<<<<<<<<
 *         """
 *         Add the contents of the provided `dict` as additional fields when generating
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_data); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_update_user_data, 235, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 235, __pyx_L1_error)

  /* "cantera/thermo.pyx":243
 *         self.species.input.update(py_to_anymap(data), False)
 * 
 *     def clear_user_data(self):             # <<<<<<<<<<<<<<
 *         """
 *         Clear all saved input data, so that the data given by `input_data` or
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_clear_user_data, 243, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 243, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cantera/thermo.pyx":298
 *             return pystr(self.thermo.phaseOfMatter())
 * 
 *     def report(self, show_thermo=True, float threshold=1e-14):             # <<<<<<<<<<<<<<
 *         """
 *         Generate a report describing the thermodynamic state of this phase. To
 */
  __pyx_tuple__37 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_show_thermo, __pyx_n_s_threshold); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_report, 298, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_tuple__39 = PyTuple_Pack(2, Py_True, __pyx_float_1eneg_14); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "cantera/thermo.pyx":403
 *             return 1.0
 * 
 *     def equilibrate(self, XY, solver='auto', double rtol=1e-9,             # <<<<<<<<<<<<<<
 *                     int max_steps=1000, int max_iter=100, int estimate_equil=0,
 *                     int log_level=0):
 */
  __pyx_tuple__40 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_XY, __pyx_n_s_solver, __pyx_n_s_rtol, __pyx_n_s_max_steps, __pyx_n_s_max_iter, __pyx_n_s_estimate_equil, __pyx_n_s_log_level); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(8, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_equilibrate, 403, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 403, __pyx_L1_error)
  __pyx_tuple__42 = PyTuple_Pack(6, __pyx_n_u_auto, __pyx_float_1eneg_9, __pyx_int_1000, __pyx_int_100, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "cantera/thermo.pyx":453
 *             return self.thermo.nElements()
 * 
 *     cpdef int element_index(self, element) except *:             # <<<<<<<<<<<<<<
 *         """
 *         The index of element ``element``, which may be specified as a string or
 */
  __pyx_tuple__43 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_element); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_element_index, 453, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 453, __pyx_L1_error)

  /* "cantera/thermo.pyx":472
 *         return index
 * 
 *     def element_name(self, m):             # <<<<<<<<<<<<<<
 *         """Name of the element with index ``m``."""
 *         return pystr(self.thermo.elementName(m))
 */
  __pyx_tuple__45 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_m); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_element_name, 472, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 472, __pyx_L1_error)

  /* "cantera/thermo.pyx":481
 *             return [self.element_name(m) for m in range(self.n_elements)]
 * 
 *     def atomic_weight(self, m):             # <<<<<<<<<<<<<<
 *         """Atomic weight [kg/kmol] of element ``m``"""
 *         return self.thermo.atomicWeight(self.element_index(m))
 */
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_atomic_weight, 481, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 481, __pyx_L1_error)

  /* "cantera/thermo.pyx":502
 *             return self._selected_species.size or self.n_species
 * 
 *     def species_name(self, k):             # <<<<<<<<<<<<<<
 *         """Name of the species with index ``k``."""
 *         return pystr(self.thermo.speciesName(k))
 */
  __pyx_tuple__48 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_k); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_species_name, 502, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 502, __pyx_L1_error)

  /* "cantera/thermo.pyx":515
 *             return [self.species_name(k) for k in indices]
 * 
 *     cpdef int species_index(self, species) except *:             # <<<<<<<<<<<<<<
 *         """
 *         The index of species ``species``, which may be specified as a string or
 */
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_species); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_species_index, 515, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 515, __pyx_L1_error)

  /* "cantera/thermo.pyx":541
 *             self.thermo.setCaseSensitiveSpecies(bool(val))
 * 
 *     def species(self, k=None):             # <<<<<<<<<<<<<<
 *         """
 *         Return the `Species` object for species ``k``, where ``k`` is either the
 */
  __pyx_tuple__52 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_k, __pyx_n_s_s, __pyx_n_s_i); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_species, 541, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 541, __pyx_L1_error)

  /* "cantera/thermo.pyx":563
 *         return s
 * 
 *     def modify_species(self, k, Species species):             # <<<<<<<<<<<<<<
 *         """
 *         Modify the thermodynamic data associated with a species. The species name,
 */
  __pyx_tuple__54 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_k, __pyx_n_s_species); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_modify_species, 563, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 563, __pyx_L1_error)

  /* "cantera/thermo.pyx":572
 *             self.kinetics.invalidateCache()
 * 
 *     def add_species(self, Species species):             # <<<<<<<<<<<<<<
 *         """
 *         Add a new species to this phase. Missing elements will be added
 */
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_add_species, 572, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 572, __pyx_L1_error)

  /* "cantera/thermo.pyx":588
 *             self.kinetics.invalidateCache()
 * 
 *     def add_species_alias(self, name, alias):             # <<<<<<<<<<<<<<
 *         """
 *         Add the alternate species name ``alias`` for an original species ``name``.
 */
  __pyx_tuple__57 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_alias); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_add_species_alias, 588, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 588, __pyx_L1_error)

  /* "cantera/thermo.pyx":594
 *         self.thermo.addSpeciesAlias(stringify(name), stringify(alias))
 * 
 *     def find_isomers(self, comp):             # <<<<<<<<<<<<<<
 *         """
 *         Find species/isomers matching a composition specified by ``comp``.
 */
  __pyx_tuple__59 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_comp, __pyx_n_s_iso, __pyx_n_s_b); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_find_isomers, 594, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 594, __pyx_L1_error)

  /* "cantera/thermo.pyx":608
 *         return [pystr(b) for b in iso]
 * 
 *     def n_atoms(self, species, element):             # <<<<<<<<<<<<<<
 *         """
 *         Number of atoms of element ``element`` in species ``species``. The element
 */
  __pyx_tuple__61 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_species, __pyx_n_s_element); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_n_atoms, 608, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 608, __pyx_L1_error)

  /* "cantera/thermo.pyx":714
 *             self._setArray1(thermo_setConcentrations, C)
 * 
 *     def __composition_to_array(self, comp, basis):             # <<<<<<<<<<<<<<
 *         """take a mixture composition in mole or mass fraction as string,
 *         dict or array and return array (for internal use)"""
 */
  __pyx_tuple__63 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_comp, __pyx_n_s_basis, __pyx_n_s_original_state, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_composition_to_array, 714, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 714, __pyx_L1_error)

  /* "cantera/thermo.pyx":735
 *         return arr
 * 
 *     def set_equivalence_ratio(self, phi, fuel, oxidizer, basis="mole", *, diluent=None,             # <<<<<<<<<<<<<<
 *                               fraction=None):
 *         """
 */
  __pyx_tuple__65 = PyTuple_Pack(25, __pyx_n_s_self, __pyx_n_s_phi, __pyx_n_s_fuel, __pyx_n_s_oxidizer, __pyx_n_s_basis, __pyx_n_s_diluent, __pyx_n_s_fraction, __pyx_n_s_fuel_comp, __pyx_n_s_ox_comp, __pyx_n_s_fraction_dict, __pyx_n_s_fraction_type, __pyx_n_s_fraction_value, __pyx_n_s_diluent_comp, __pyx_n_s_T, __pyx_n_s_P, __pyx_n_s_X_fuelox, __pyx_n_s_Y_fuelox, __pyx_n_s_Z_fuel, __pyx_n_s_Z, __pyx_n_s_Y_mix, __pyx_n_s_factor, __pyx_n_s_X_mix, __pyx_n_s_M_mix, __pyx_n_s_M_fuel, __pyx_n_s_Z_fuel_mole); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(5, 0, 2, 25, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_set_equivalence_ratio, 735, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 735, __pyx_L1_error)
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_n_u_mole); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "cantera/thermo.pyx":882
 *         self.TP = T, P
 * 
 *     def set_mixture_fraction(self, mixture_fraction, fuel, oxidizer, basis='mole'):             # <<<<<<<<<<<<<<
 *         """
 *         Set the composition to a mixture of ``fuel`` and ``oxidizer`` at the
 */
  __pyx_tuple__68 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_mixture_fraction, __pyx_n_s_fuel, __pyx_n_s_oxidizer, __pyx_n_s_basis, __pyx_n_s_f, __pyx_n_s_o); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_set_mixture_fraction, 882, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 882, __pyx_L1_error)

  /* "cantera/thermo.pyx":918
 *         self.thermo.setMixtureFraction(mixture_fraction, &f[0], &o[0], ThermoBasis.mass if basis == 'mass' else ThermoBasis.molar)
 * 
 *     def equivalence_ratio(self, fuel=None, oxidizer=None, basis="mole",             # <<<<<<<<<<<<<<
 *                           include_species=None):
 *         r"""
 */
  __pyx_tuple__70 = PyTuple_Pack(15, __pyx_n_s_self, __pyx_n_s_fuel, __pyx_n_s_oxidizer, __pyx_n_s_basis, __pyx_n_s_include_species, __pyx_n_s_Y, __pyx_n_s_indices, __pyx_n_s_k, __pyx_n_s_T_orig, __pyx_n_s_P_orig, __pyx_n_s_Y_orig, __pyx_n_s_phi, __pyx_n_s_f, __pyx_n_s_o, __pyx_n_s_s); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_equivalence_ratio, 918, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 918, __pyx_L1_error)
  __pyx_tuple__72 = PyTuple_Pack(4, Py_None, Py_None, __pyx_n_u_mole, Py_None); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "cantera/thermo.pyx":990
 *         return phi
 * 
 *     def mixture_fraction(self, fuel, oxidizer, basis='mole', element="Bilger"):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the mixture fraction of the current mixture in
 */
  __pyx_tuple__73 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_fuel, __pyx_n_s_oxidizer, __pyx_n_s_basis, __pyx_n_s_element, __pyx_n_s_f, __pyx_n_s_o, __pyx_n_s_e_name); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_mixture_fraction, 990, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 990, __pyx_L1_error)
  __pyx_tuple__75 = PyTuple_Pack(2, __pyx_n_u_mole, __pyx_n_u_Bilger); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "cantera/thermo.pyx":1053
 *         return self.thermo.mixtureFraction(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar, stringify(e_name))
 * 
 *     def stoich_air_fuel_ratio(self, fuel, oxidizer, basis='mole'):             # <<<<<<<<<<<<<<
 *         """
 *         Get the stoichiometric air to fuel ratio (kg oxidizer / kg fuel). Considers the
 */
  __pyx_tuple__76 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_fuel, __pyx_n_s_oxidizer, __pyx_n_s_basis, __pyx_n_s_f, __pyx_n_s_o); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_stoich_air_fuel_ratio, 1053, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 1053, __pyx_L1_error)

  /* "cantera/thermo.pyx":1082
 *         return self.thermo.stoichAirFuelRatio(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar)
 * 
 *     def elemental_mass_fraction(self, m):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the elemental mass fraction :math:`Z_{\mathrm{mass},m}` of element
 */
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_elemental_mass_fraction, 1082, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 1082, __pyx_L1_error)

  /* "cantera/thermo.pyx":1102
 *         return self.thermo.elementalMassFraction(self.element_index(m))
 * 
 *     def elemental_mole_fraction(self, m):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the elemental mole fraction :math:`Z_{\mathrm{mole},m}` of element
 */
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_elemental_mole_fraction, 1102, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 1102, __pyx_L1_error)

  /* "cantera/thermo.pyx":1123
 *         return self.thermo.elementalMoleFraction(self.element_index(m))
 * 
 *     def set_unnormalized_mass_fractions(self, Y):             # <<<<<<<<<<<<<<
 *         """
 *         Set the mass fractions without normalizing to force ``sum(Y) == 1.0``.
 */
  __pyx_tuple__80 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_Y, __pyx_n_s_data); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_set_unnormalized_mass_fractions, 1123, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 1123, __pyx_L1_error)

  /* "cantera/thermo.pyx":1137
 *         self.thermo.setMassFractions_NoNorm(&data[0])
 * 
 *     def set_unnormalized_mole_fractions(self, X):             # <<<<<<<<<<<<<<
 *         """
 *         Set the mole fractions without normalizing to force ``sum(X) == 1.0``.
 */
  __pyx_tuple__82 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_X, __pyx_n_s_data); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_set_unnormalized_mole_fractions, 1137, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 1137, __pyx_L1_error)

  /* "cantera/thermo.pyx":1151
 *         self.thermo.setMoleFractions_NoNorm(&data[0])
 * 
 *     def mass_fraction_dict(self, double threshold=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         Return a dictionary giving the mass fraction for each species by name where the
 */
  __pyx_tuple__84 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_threshold, __pyx_n_s_item, __pyx_n_s_Y, __pyx_n_s_item); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_mass_fraction_dict, 1151, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_float_0_0); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "cantera/thermo.pyx":1160
 *         return {pystr(item.first):item.second for item in Y}
 * 
 *     def mole_fraction_dict(self, double threshold=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         Return a dictionary giving the mole fraction for each species by name where the
 */
  __pyx_tuple__87 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_threshold, __pyx_n_s_item, __pyx_n_s_X, __pyx_n_s_item); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_mole_fraction_dict, 1160, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 1160, __pyx_L1_error)

  /* "cantera/thermo.pyx":1773
 *             return self.plasma.electronPressure()
 * 
 *     def set_discretized_electron_energy_distribution(self, levels, distribution):             # <<<<<<<<<<<<<<
 *         """
 *         Set electron energy distribution. When this method is used, electron
 */
  __pyx_tuple__89 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_levels, __pyx_n_s_distribution, __pyx_n_s_data_levels, __pyx_n_s_data_dist); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_set_discretized_electron_energy, 1773, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 1773, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cantera/thermo.pyx":1937
 *             self.surf.setCoverages(&data[0])
 * 
 *     def set_unnormalized_coverages(self, cov):             # <<<<<<<<<<<<<<
 *         """
 *         Set the surface coverages without normalizing to force sum(cov) == 1.0.
 */
  __pyx_tuple__93 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_cov, __pyx_n_s_data); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_set_unnormalized_coverages, 1937, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 1937, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 */
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cantera/thermo.pyx":2132
 * # allows the classmethod and property decorators to be chained, so these can be
 * # implemented as properties in the Element class.
 * def _element_symbols():             # <<<<<<<<<<<<<<
 *     syms = elementSymbols()
 *     return tuple(pystr(s) for s in syms)
 */
  __pyx_tuple__99 = PyTuple_Pack(3, __pyx_n_s_syms, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(0, 2132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__99, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_element_symbols, 2132, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(0, 2132, __pyx_L1_error)

  /* "cantera/thermo.pyx":2137
 * 
 * 
 * def _element_names():             # <<<<<<<<<<<<<<
 *     names = elementNames()
 *     return tuple(pystr(n) for n in names)
 */
  __pyx_tuple__101 = PyTuple_Pack(3, __pyx_n_s_names, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 2137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__101, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_element_names, 2137, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(0, 2137, __pyx_L1_error)

  /* "cantera/thermo.pyx":2194
 *     element_names = _element_names()
 * 
 *     def __init__(self, arg):             # <<<<<<<<<<<<<<
 *         if isinstance(arg, (str, bytes)):
 *             try:
 */
  __pyx_tuple__103 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_arg); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 2194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__103, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_init, 2194, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(0, 2194, __pyx_L1_error)

  /* "cantera/thermo.pyx":2217
 *                             'or an integer')
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self):
 *         """The name of the element or isotope."""
 */
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_name, 2217, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 2217, __pyx_L1_error)

  /* "cantera/thermo.pyx":2222
 *         return self._name
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def atomic_number(self):
 *         """The atomic number of the element or isotope."""
 */
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_atomic_number_2, 2222, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 2222, __pyx_L1_error)

  /* "cantera/thermo.pyx":2227
 *         return self._atomic_number
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def symbol(self):
 *         """The symbol of the element or isotope."""
 */
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_symbol_2, 2227, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 2227, __pyx_L1_error)

  /* "cantera/thermo.pyx":2232
 *         return self._symbol
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def weight(self):
 *         """The atomic weight of the element or isotope."""
 */
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_thermo_pyx, __pyx_n_s_weight_2, 2232, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_get.method_name = &__pyx_n_s_get;
  __pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_items.method_name = &__pyx_n_s_items;
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_4 = PyFloat_FromDouble(1e-4); if (unlikely(!__pyx_float_1eneg_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_9 = PyFloat_FromDouble(1e-9); if (unlikely(!__pyx_float_1eneg_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_14 = PyFloat_FromDouble(1e-14); if (unlikely(!__pyx_float_1eneg_14)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* AssertionsEnabled.init */
  __Pyx_init_assertions_enabled();

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* NumpyImportArray.init */
  /*
 * Cython has automatically inserted a call to _import_array since
 * you didn't include one when you cimported numpy. To disable this
 * add the line
 *   <void>numpy._import_array
 */
#ifdef NPY_FEATURE_VERSION
#if !NO_IMPORT_ARRAY
if (unlikely(_import_array() == -1)) {
    PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import "
    "(auto-generated because you didn't call 'numpy.import_array()' after cimporting numpy; "
    "use '<void>numpy._import_array' to disable if you are certain you don't need it).");
}
#endif
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7cantera_6thermo_Species = &__pyx_vtable_7cantera_6thermo_Species;
  __pyx_vtable_7cantera_6thermo_Species._assign = (PyObject *(*)(struct __pyx_obj_7cantera_6thermo_Species *, std::shared_ptr<Cantera::Species> ))__pyx_f_7cantera_6thermo_7Species__assign;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7cantera_6thermo_Species = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_6thermo_Species_spec, NULL); if (unlikely(!__pyx_ptype_7cantera_6thermo_Species)) __PYX_ERR(0, 37, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_6thermo_Species_spec, __pyx_ptype_7cantera_6thermo_Species) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_6thermo_Species = &__pyx_type_7cantera_6thermo_Species;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_6thermo_Species) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_6thermo_Species->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_6thermo_Species->tp_dictoffset && __pyx_ptype_7cantera_6thermo_Species->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_6thermo_Species->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7cantera_6thermo_Species, __pyx_vtabptr_7cantera_6thermo_Species) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7cantera_6thermo_Species) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Species_2, (PyObject *) __pyx_ptype_7cantera_6thermo_Species) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7cantera_6thermo_Species) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  #endif
  __pyx_t_1 = PyImport_ImportModule("cantera.solutionbase"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_12solutionbase__SolutionBase = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.solutionbase", "_SolutionBase", sizeof(struct __pyx_obj_7cantera_12solutionbase__SolutionBase), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_12solutionbase__SolutionBase),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_12solutionbase__SolutionBase) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_7cantera_6thermo_ThermoPhase = &__pyx_vtable_7cantera_6thermo_ThermoPhase;
  __pyx_vtable_7cantera_6thermo_ThermoPhase._mass_factor = (double (*)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *))__pyx_f_7cantera_6thermo_11ThermoPhase__mass_factor;
  __pyx_vtable_7cantera_6thermo_ThermoPhase._mole_factor = (double (*)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *))__pyx_f_7cantera_6thermo_11ThermoPhase__mole_factor;
  __pyx_vtable_7cantera_6thermo_ThermoPhase.element_index = (int (*)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7cantera_6thermo_11ThermoPhase_element_index;
  __pyx_vtable_7cantera_6thermo_ThermoPhase.species_index = (int (*)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, PyObject *, int __pyx_skip_dispatch))__pyx_f_7cantera_6thermo_11ThermoPhase_species_index;
  __pyx_vtable_7cantera_6thermo_ThermoPhase._getArray1 = (PyArrayObject *(*)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, __pyx_t_7cantera_6thermo_thermoMethod1d))__pyx_f_7cantera_6thermo_11ThermoPhase__getArray1;
  __pyx_vtable_7cantera_6thermo_ThermoPhase._setArray1 = (void (*)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, __pyx_t_7cantera_6thermo_thermoMethod1d, PyObject *))__pyx_f_7cantera_6thermo_11ThermoPhase__setArray1;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_12solutionbase__SolutionBase); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_7cantera_6thermo_ThermoPhase = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_6thermo_ThermoPhase_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_7cantera_6thermo_ThermoPhase)) __PYX_ERR(0, 255, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_6thermo_ThermoPhase_spec, __pyx_ptype_7cantera_6thermo_ThermoPhase) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_6thermo_ThermoPhase = &__pyx_type_7cantera_6thermo_ThermoPhase;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_6thermo_ThermoPhase->tp_base = __pyx_ptype_7cantera_12solutionbase__SolutionBase;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_6thermo_ThermoPhase) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_6thermo_ThermoPhase->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dictoffset && __pyx_ptype_7cantera_6thermo_ThermoPhase->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_6thermo_ThermoPhase->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7cantera_6thermo_ThermoPhase, __pyx_vtabptr_7cantera_6thermo_ThermoPhase) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7cantera_6thermo_ThermoPhase) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ThermoPhase, (PyObject *) __pyx_ptype_7cantera_6thermo_ThermoPhase) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7cantera_6thermo_ThermoPhase) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7cantera_6thermo_InterfacePhase = &__pyx_vtable_7cantera_6thermo_InterfacePhase;
  __pyx_vtable_7cantera_6thermo_InterfacePhase.__pyx_base = *__pyx_vtabptr_7cantera_6thermo_ThermoPhase;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_7cantera_6thermo_InterfacePhase = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_6thermo_InterfacePhase_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_7cantera_6thermo_InterfacePhase)) __PYX_ERR(0, 1888, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_6thermo_InterfacePhase_spec, __pyx_ptype_7cantera_6thermo_InterfacePhase) < 0) __PYX_ERR(0, 1888, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_6thermo_InterfacePhase = &__pyx_type_7cantera_6thermo_InterfacePhase;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_6thermo_InterfacePhase->tp_base = __pyx_ptype_7cantera_6thermo_ThermoPhase;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_6thermo_InterfacePhase) < 0) __PYX_ERR(0, 1888, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_6thermo_InterfacePhase->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_6thermo_InterfacePhase->tp_dictoffset && __pyx_ptype_7cantera_6thermo_InterfacePhase->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_6thermo_InterfacePhase->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7cantera_6thermo_InterfacePhase, __pyx_vtabptr_7cantera_6thermo_InterfacePhase) < 0) __PYX_ERR(0, 1888, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7cantera_6thermo_InterfacePhase) < 0) __PYX_ERR(0, 1888, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_InterfacePhase, (PyObject *) __pyx_ptype_7cantera_6thermo_InterfacePhase) < 0) __PYX_ERR(0, 1888, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7cantera_6thermo_InterfacePhase) < 0) __PYX_ERR(0, 1888, __pyx_L1_error)
  #endif
  __pyx_vtabptr_7cantera_6thermo_PureFluid = &__pyx_vtable_7cantera_6thermo_PureFluid;
  __pyx_vtable_7cantera_6thermo_PureFluid.__pyx_base = *__pyx_vtabptr_7cantera_6thermo_ThermoPhase;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_7cantera_6thermo_PureFluid = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_6thermo_PureFluid_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_ptype_7cantera_6thermo_PureFluid)) __PYX_ERR(0, 1952, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_6thermo_PureFluid_spec, __pyx_ptype_7cantera_6thermo_PureFluid) < 0) __PYX_ERR(0, 1952, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_6thermo_PureFluid = &__pyx_type_7cantera_6thermo_PureFluid;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_6thermo_PureFluid->tp_base = __pyx_ptype_7cantera_6thermo_ThermoPhase;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_6thermo_PureFluid) < 0) __PYX_ERR(0, 1952, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_6thermo_PureFluid->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_6thermo_PureFluid->tp_dictoffset && __pyx_ptype_7cantera_6thermo_PureFluid->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_6thermo_PureFluid->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_7cantera_6thermo_PureFluid, __pyx_vtabptr_7cantera_6thermo_PureFluid) < 0) __PYX_ERR(0, 1952, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_7cantera_6thermo_PureFluid) < 0) __PYX_ERR(0, 1952, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PureFluid, (PyObject *) __pyx_ptype_7cantera_6thermo_PureFluid) < 0) __PYX_ERR(0, 1952, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7cantera_6thermo_PureFluid) < 0) __PYX_ERR(0, 1952, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr_spec, NULL); if (unlikely(!__pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr)) __PYX_ERR(0, 2134, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr_spec, __pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr) < 0) __PYX_ERR(0, 2134, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr = &__pyx_type_7cantera_6thermo___pyx_scope_struct__genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr) < 0) __PYX_ERR(0, 2134, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr->tp_dictoffset && __pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_6thermo___pyx_scope_struct__genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr_spec, NULL); if (unlikely(!__pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr)) __PYX_ERR(0, 2139, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr_spec, __pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 2139, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr = &__pyx_type_7cantera_6thermo___pyx_scope_struct_1_genexpr;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 2139, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr->tp_dictoffset && __pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_6thermo___pyx_scope_struct_1_genexpr->tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_0(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_3_0_0(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyBoolObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_3_0_0(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyComplexObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_3_0_0); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 203, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_0); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_0); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 230, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_3_0_0); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(3, 813, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_number) __PYX_ERR(3, 815, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(3, 817, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(3, 819, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(3, 821, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(3, 823, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(3, 825, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(3, 827, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(3, 829, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_character) __PYX_ERR(3, 831, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_3_0_0); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.func1"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_5func1_Func1 = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.func1", "Func1", sizeof(struct __pyx_obj_7cantera_5func1_Func1), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_5func1_Func1),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_5func1_Func1) __PYX_ERR(7, 46, __pyx_L1_error)
  __pyx_vtabptr_7cantera_5func1_Func1 = (struct __pyx_vtabstruct_7cantera_5func1_Func1*)__Pyx_GetVtable(__pyx_ptype_7cantera_5func1_Func1); if (unlikely(!__pyx_vtabptr_7cantera_5func1_Func1)) __PYX_ERR(7, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.units"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_5units_Units = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.units", "Units", sizeof(struct __pyx_obj_7cantera_5units_Units), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_5units_Units),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_5units_Units) __PYX_ERR(8, 42, __pyx_L1_error)
  __pyx_vtabptr_7cantera_5units_Units = (struct __pyx_vtabstruct_7cantera_5units_Units*)__Pyx_GetVtable(__pyx_ptype_7cantera_5units_Units); if (unlikely(!__pyx_vtabptr_7cantera_5units_Units)) __PYX_ERR(8, 42, __pyx_L1_error)
  __pyx_ptype_7cantera_5units_UnitStack = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.units", "UnitStack", sizeof(struct __pyx_obj_7cantera_5units_UnitStack), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_5units_UnitStack),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_5units_UnitStack) __PYX_ERR(8, 47, __pyx_L1_error)
  __pyx_vtabptr_7cantera_5units_UnitStack = (struct __pyx_vtabstruct_7cantera_5units_UnitStack*)__Pyx_GetVtable(__pyx_ptype_7cantera_5units_UnitStack); if (unlikely(!__pyx_vtabptr_7cantera_5units_UnitStack)) __PYX_ERR(8, 47, __pyx_L1_error)
  __pyx_ptype_7cantera_5units_UnitSystem = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.units", "UnitSystem", sizeof(struct __pyx_obj_7cantera_5units_UnitSystem), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_5units_UnitSystem),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_5units_UnitSystem) __PYX_ERR(8, 53, __pyx_L1_error)
  __pyx_vtabptr_7cantera_5units_UnitSystem = (struct __pyx_vtabstruct_7cantera_5units_UnitSystem*)__Pyx_GetVtable(__pyx_ptype_7cantera_5units_UnitSystem); if (unlikely(!__pyx_vtabptr_7cantera_5units_UnitSystem)) __PYX_ERR(8, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.solutionbase"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_12solutionbase_SolutionArrayBase = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.solutionbase", "SolutionArrayBase", sizeof(struct __pyx_obj_7cantera_12solutionbase_SolutionArrayBase), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_12solutionbase_SolutionArrayBase),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_12solutionbase_SolutionArrayBase) __PYX_ERR(9, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.speciesthermo"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_13speciesthermo_SpeciesThermo = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.speciesthermo", "SpeciesThermo", sizeof(struct __pyx_obj_7cantera_13speciesthermo_SpeciesThermo), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_13speciesthermo_SpeciesThermo),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_13speciesthermo_SpeciesThermo) __PYX_ERR(10, 28, __pyx_L1_error)
  __pyx_vtabptr_7cantera_13speciesthermo_SpeciesThermo = (struct __pyx_vtabstruct_7cantera_13speciesthermo_SpeciesThermo*)__Pyx_GetVtable(__pyx_ptype_7cantera_13speciesthermo_SpeciesThermo); if (unlikely(!__pyx_vtabptr_7cantera_13speciesthermo_SpeciesThermo)) __PYX_ERR(10, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.kinetics"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_8kinetics_Kinetics = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.kinetics", "Kinetics", sizeof(struct __pyx_obj_7cantera_8kinetics_Kinetics), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_8kinetics_Kinetics),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_8kinetics_Kinetics) __PYX_ERR(11, 143, __pyx_L1_error)
  __pyx_ptype_7cantera_8kinetics_InterfaceKinetics = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.kinetics", "InterfaceKinetics", sizeof(struct __pyx_obj_7cantera_8kinetics_InterfaceKinetics), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_8kinetics_InterfaceKinetics),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_8kinetics_InterfaceKinetics) __PYX_ERR(11, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.transport"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_9transport_GasTransportData = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.transport", "GasTransportData", sizeof(struct __pyx_obj_7cantera_9transport_GasTransportData), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_9transport_GasTransportData),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_9transport_GasTransportData) __PYX_ERR(12, 76, __pyx_L1_error)
  __pyx_vtabptr_7cantera_9transport_GasTransportData = (struct __pyx_vtabstruct_7cantera_9transport_GasTransportData*)__Pyx_GetVtable(__pyx_ptype_7cantera_9transport_GasTransportData); if (unlikely(!__pyx_vtabptr_7cantera_9transport_GasTransportData)) __PYX_ERR(12, 76, __pyx_L1_error)
  __pyx_ptype_7cantera_9transport_Transport = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.transport", "Transport", sizeof(struct __pyx_obj_7cantera_9transport_Transport), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_9transport_Transport),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_9transport_Transport) __PYX_ERR(12, 81, __pyx_L1_error)
  __pyx_ptype_7cantera_9transport_DustyGasTransport = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.transport", "DustyGasTransport", sizeof(struct __pyx_obj_7cantera_9transport_DustyGasTransport), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_9transport_DustyGasTransport),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_9transport_DustyGasTransport) __PYX_ERR(12, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera._utils"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_6_utils_AnyMap = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera._utils", "AnyMap", sizeof(struct __pyx_obj_7cantera_6_utils_AnyMap), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_6_utils_AnyMap),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_6_utils_AnyMap) __PYX_ERR(13, 96, __pyx_L1_error)
  __pyx_vtabptr_7cantera_6_utils_AnyMap = (struct __pyx_vtabstruct_7cantera_6_utils_AnyMap*)__Pyx_GetVtable(__pyx_ptype_7cantera_6_utils_AnyMap); if (unlikely(!__pyx_vtabptr_7cantera_6_utils_AnyMap)) __PYX_ERR(13, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cantera.speciesthermo"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "wrapSpeciesThermo", (void (**)(void))&__pyx_f_7cantera_13speciesthermo_wrapSpeciesThermo, "PyObject *(std::shared_ptr<Cantera::SpeciesThermoInterpType> )") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera._utils"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "stringify", (void (**)(void))&__pyx_f_7cantera_6_utils_stringify, "std::string (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "pystr", (void (**)(void))&__pyx_f_7cantera_6_utils_pystr, "PyObject *(std::string)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "comp_map_to_dict", (void (**)(void))&__pyx_f_7cantera_6_utils_comp_map_to_dict, "PyObject *(__pyx_t_7cantera_5ctcxx_Composition)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "comp_map", (void (**)(void))&__pyx_f_7cantera_6_utils_comp_map, "__pyx_t_7cantera_5ctcxx_Composition (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "py_to_anymap", (void (**)(void))&__pyx_f_7cantera_6_utils_py_to_anymap, "Cantera::AnyMap (PyObject *, struct __pyx_opt_args_7cantera_6_utils_py_to_anymap *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "anymap_to_py", (void (**)(void))&__pyx_f_7cantera_6_utils_anymap_to_py, "PyObject *(Cantera::AnyMap &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_thermo(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_thermo},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "thermo",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initthermo(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initthermo(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_thermo(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_thermo(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_thermo(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'thermo' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("thermo", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to thermo pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_thermo(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cantera__thermo) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_3, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cantera.thermo")) {
      if (unlikely((PyDict_SetItemString(modules, "cantera.thermo", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely((__Pyx_modinit_function_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cantera/thermo.pyx":4
 * # at https://cantera.org/license.txt for license and copyright information.
 * 
 * import warnings             # <<<<<<<<<<<<<<
 * import weakref
 * import numbers as _numbers
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_warnings, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":5
 * 
 * import warnings
 * import weakref             # <<<<<<<<<<<<<<
 * import numbers as _numbers
 * import numpy as np
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_weakref, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weakref, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":6
 * import warnings
 * import weakref
 * import numbers as _numbers             # <<<<<<<<<<<<<<
 * import numpy as np
 * cimport numpy as np
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numbers, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numbers_2, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":7
 * import weakref
 * import numbers as _numbers
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":14
 * from .transport cimport *
 * from ._utils cimport *
 * from ._utils import CanteraError             # <<<<<<<<<<<<<<
 * from .units cimport *
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_CanteraError);
  __Pyx_GIVEREF(__pyx_n_s_CanteraError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_CanteraError);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_utils, __pyx_t_2, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_CanteraError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CanteraError, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/thermo.pyx":24
 * ctypedef CxxSurfPhase* CxxSurfPhasePtr
 * 
 * class ThermoModelMethodError(Exception):             # <<<<<<<<<<<<<<
 *     """Exception raised for an invalid method used by a thermo model
 * 
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0]));
  __Pyx_GIVEREF((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0]));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_2 = __Pyx_PEP560_update_bases(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_4, __pyx_t_2, __pyx_n_s_ThermoModelMethodError, __pyx_n_s_ThermoModelMethodError, (PyObject *) NULL, __pyx_n_s_cantera_thermo, __pyx_kp_s_Exception_raised_for_an_invalid); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_2 != __pyx_t_3) {
    if (unlikely((PyDict_SetItemString(__pyx_t_5, "__orig_bases__", __pyx_t_3) < 0))) __PYX_ERR(0, 24, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "cantera/thermo.pyx":32
 *     """
 * 
 *     def __init__(self, thermo_model):             # <<<<<<<<<<<<<<
 *         self.thermo_model = thermo_model
 *         super().__init__(f"This method is invalid for {self.thermo_model}")
 */
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_22ThermoModelMethodError_1__init__, 0, __pyx_n_s_ThermoModelMethodError___init, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_t_6);
  PyList_Append(__pyx_t_3, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_SetNameInClass(__pyx_t_5, __pyx_n_s_init, __pyx_t_6) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cantera/thermo.pyx":24
 * ctypedef CxxSurfPhase* CxxSurfPhasePtr
 * 
 * class ThermoModelMethodError(Exception):             # <<<<<<<<<<<<<<
 *     """Exception raised for an invalid method used by a thermo model
 * 
 */
  __pyx_t_6 = __Pyx_Py3ClassCreate(__pyx_t_4, __pyx_n_s_ThermoModelMethodError, __pyx_t_2, __pyx_t_5, NULL, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_CyFunction_InitClassCell(__pyx_t_3, __pyx_t_6) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ThermoModelMethodError, __pyx_t_6) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":104
 *         self.species = self._species.get()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_yaml(text):
 *         """
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Species_5from_yaml, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Species_from_yaml, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__21)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_Species->tp_dict, __pyx_n_s_from_yaml, __pyx_t_2) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_Species);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7cantera_6thermo_Species, __pyx_n_s_from_yaml); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_Species->tp_dict, __pyx_n_s_from_yaml, __pyx_t_4) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_Species);

  /* "cantera/thermo.pyx":114
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_dict(data):
 *         """
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Species_7from_dict, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Species_from_dict, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__23)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_Species->tp_dict, __pyx_n_s_from_dict, __pyx_t_4) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_Species);
  __Pyx_GetNameInClass(__pyx_t_4, (PyObject *)__pyx_ptype_7cantera_6thermo_Species, __pyx_n_s_from_dict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_Species->tp_dict, __pyx_n_s_from_dict, __pyx_t_2) < 0) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_Species);

  /* "cantera/thermo.pyx":129
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def list_from_file(filename, section="species"):
 *         """
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Species_9list_from_file, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Species_list_from_file, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__26);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_Species->tp_dict, __pyx_n_s_list_from_file, __pyx_t_2) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_Species);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_7cantera_6thermo_Species, __pyx_n_s_list_from_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_Species->tp_dict, __pyx_n_s_list_from_file, __pyx_t_4) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_Species);

  /* "cantera/thermo.pyx":144
 *         return species
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def list_from_yaml(text, section=None):
 *         """
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Species_11list_from_yaml, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Species_list_from_yaml, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__29);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_Species->tp_dict, __pyx_n_s_list_from_yaml, __pyx_t_4) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_Species);
  __Pyx_GetNameInClass(__pyx_t_4, (PyObject *)__pyx_ptype_7cantera_6thermo_Species, __pyx_n_s_list_from_yaml); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_Species->tp_dict, __pyx_n_s_list_from_yaml, __pyx_t_2) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_Species);

  /* "cantera/thermo.pyx":235
 *             return anymap_to_py(self.species.parameters(phase))
 * 
 *     def update_user_data(self, data):             # <<<<<<<<<<<<<<
 *         """
 *         Add the contents of the provided `dict` as additional fields when generating
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Species_13update_user_data, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Species_update_user_data, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_Species->tp_dict, __pyx_n_s_update_user_data, __pyx_t_2) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_Species);

  /* "cantera/thermo.pyx":243
 *         self.species.input.update(py_to_anymap(data), False)
 * 
 *     def clear_user_data(self):             # <<<<<<<<<<<<<<
 *         """
 *         Clear all saved input data, so that the data given by `input_data` or
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Species_15clear_user_data, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Species_clear_user_data, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_Species->tp_dict, __pyx_n_s_clear_user_data, __pyx_t_2) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_Species);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Species_19__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Species___reduce_cython, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Species_21__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Species___setstate_cython, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":298
 *             return pystr(self.thermo.phaseOfMatter())
 * 
 *     def report(self, show_thermo=True, float threshold=1e-14):             # <<<<<<<<<<<<<<
 *         """
 *         Generate a report describing the thermodynamic state of this phase. To
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_3report, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_report, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__39);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_report, __pyx_t_2) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":403
 *             return 1.0
 * 
 *     def equilibrate(self, XY, solver='auto', double rtol=1e-9,             # <<<<<<<<<<<<<<
 *                     int max_steps=1000, int max_iter=100, int estimate_equil=0,
 *                     int log_level=0):
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_7equilibrate, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_equilibrate, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__42);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_equilibrate, __pyx_t_2) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":453
 *             return self.thermo.nElements()
 * 
 *     cpdef int element_index(self, element) except *:             # <<<<<<<<<<<<<<
 *         """
 *         The index of element ``element``, which may be specified as a string or
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_9element_index, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_element_index, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_element_index, __pyx_t_2) < 0) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":472
 *         return index
 * 
 *     def element_name(self, m):             # <<<<<<<<<<<<<<
 *         """Name of the element with index ``m``."""
 *         return pystr(self.thermo.elementName(m))
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_11element_name, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_element_name, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_element_name, __pyx_t_2) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":481
 *             return [self.element_name(m) for m in range(self.n_elements)]
 * 
 *     def atomic_weight(self, m):             # <<<<<<<<<<<<<<
 *         """Atomic weight [kg/kmol] of element ``m``"""
 *         return self.thermo.atomicWeight(self.element_index(m))
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_13atomic_weight, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_atomic_weight, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_atomic_weight, __pyx_t_2) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":502
 *             return self._selected_species.size or self.n_species
 * 
 *     def species_name(self, k):             # <<<<<<<<<<<<<<
 *         """Name of the species with index ``k``."""
 *         return pystr(self.thermo.speciesName(k))
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_15species_name, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_species_name, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_species_name, __pyx_t_2) < 0) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":515
 *             return [self.species_name(k) for k in indices]
 * 
 *     cpdef int species_index(self, species) except *:             # <<<<<<<<<<<<<<
 *         """
 *         The index of species ``species``, which may be specified as a string or
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_17species_index, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_species_index, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_species_index, __pyx_t_2) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":541
 *             self.thermo.setCaseSensitiveSpecies(bool(val))
 * 
 *     def species(self, k=None):             # <<<<<<<<<<<<<<
 *         """
 *         Return the `Species` object for species ``k``, where ``k`` is either the
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_19species, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_species, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_tuple__29);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_species, __pyx_t_2) < 0) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":563
 *         return s
 * 
 *     def modify_species(self, k, Species species):             # <<<<<<<<<<<<<<
 *         """
 *         Modify the thermodynamic data associated with a species. The species name,
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_21modify_species, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_modify_species, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_modify_species, __pyx_t_2) < 0) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":572
 *             self.kinetics.invalidateCache()
 * 
 *     def add_species(self, Species species):             # <<<<<<<<<<<<<<
 *         """
 *         Add a new species to this phase. Missing elements will be added
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_23add_species, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_add_species, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_add_species, __pyx_t_2) < 0) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":588
 *             self.kinetics.invalidateCache()
 * 
 *     def add_species_alias(self, name, alias):             # <<<<<<<<<<<<<<
 *         """
 *         Add the alternate species name ``alias`` for an original species ``name``.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_25add_species_alias, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_add_species_alias, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_add_species_alias, __pyx_t_2) < 0) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":594
 *         self.thermo.addSpeciesAlias(stringify(name), stringify(alias))
 * 
 *     def find_isomers(self, comp):             # <<<<<<<<<<<<<<
 *         """
 *         Find species/isomers matching a composition specified by ``comp``.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_27find_isomers, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_find_isomers, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_find_isomers, __pyx_t_2) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":608
 *         return [pystr(b) for b in iso]
 * 
 *     def n_atoms(self, species, element):             # <<<<<<<<<<<<<<
 *         """
 *         Number of atoms of element ``element`` in species ``species``. The element
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_29n_atoms, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_n_atoms, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__62)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_n_atoms, __pyx_t_2) < 0) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":714
 *             self._setArray1(thermo_setConcentrations, C)
 * 
 *     def __composition_to_array(self, comp, basis):             # <<<<<<<<<<<<<<
 *         """take a mixture composition in mole or mass fraction as string,
 *         dict or array and return array (for internal use)"""
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_31_ThermoPhase__composition_to_array, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase___composition_to_arr, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__64)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_ThermoPhase__composition_to_arr, __pyx_t_2) < 0) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":735
 *         return arr
 * 
 *     def set_equivalence_ratio(self, phi, fuel, oxidizer, basis="mole", *, diluent=None,             # <<<<<<<<<<<<<<
 *                               fraction=None):
 *         """
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_diluent, Py_None) < 0) __PYX_ERR(0, 735, __pyx_L1_error)

  /* "cantera/thermo.pyx":736
 * 
 *     def set_equivalence_ratio(self, phi, fuel, oxidizer, basis="mole", *, diluent=None,
 *                               fraction=None):             # <<<<<<<<<<<<<<
 *         """
 *         Set the composition to a mixture of ``fuel`` and ``oxidizer`` at the
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_fraction, Py_None) < 0) __PYX_ERR(0, 735, __pyx_L1_error)

  /* "cantera/thermo.pyx":735
 *         return arr
 * 
 *     def set_equivalence_ratio(self, phi, fuel, oxidizer, basis="mole", *, diluent=None,             # <<<<<<<<<<<<<<
 *                               fraction=None):
 *         """
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_33set_equivalence_ratio, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_set_equivalence_rati, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__67);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_set_equivalence_ratio, __pyx_t_4) < 0) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":882
 *         self.TP = T, P
 * 
 *     def set_mixture_fraction(self, mixture_fraction, fuel, oxidizer, basis='mole'):             # <<<<<<<<<<<<<<
 *         """
 *         Set the composition to a mixture of ``fuel`` and ``oxidizer`` at the
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_35set_mixture_fraction, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_set_mixture_fraction, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__67);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_set_mixture_fraction, __pyx_t_4) < 0) __PYX_ERR(0, 882, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":918
 *         self.thermo.setMixtureFraction(mixture_fraction, &f[0], &o[0], ThermoBasis.mass if basis == 'mass' else ThermoBasis.molar)
 * 
 *     def equivalence_ratio(self, fuel=None, oxidizer=None, basis="mole",             # <<<<<<<<<<<<<<
 *                           include_species=None):
 *         r"""
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_37equivalence_ratio, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_equivalence_ratio, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__72);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_equivalence_ratio, __pyx_t_4) < 0) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":990
 *         return phi
 * 
 *     def mixture_fraction(self, fuel, oxidizer, basis='mole', element="Bilger"):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the mixture fraction of the current mixture in
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_39mixture_fraction, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_mixture_fraction, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__75);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_mixture_fraction, __pyx_t_4) < 0) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":1053
 *         return self.thermo.mixtureFraction(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar, stringify(e_name))
 * 
 *     def stoich_air_fuel_ratio(self, fuel, oxidizer, basis='mole'):             # <<<<<<<<<<<<<<
 *         """
 *         Get the stoichiometric air to fuel ratio (kg oxidizer / kg fuel). Considers the
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_41stoich_air_fuel_ratio, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_stoich_air_fuel_rati, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__67);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_stoich_air_fuel_ratio, __pyx_t_4) < 0) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":1082
 *         return self.thermo.stoichAirFuelRatio(&f[0], &o[0], ThermoBasis.mass if basis=='mass' else ThermoBasis.molar)
 * 
 *     def elemental_mass_fraction(self, m):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the elemental mass fraction :math:`Z_{\mathrm{mass},m}` of element
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_43elemental_mass_fraction, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_elemental_mass_fract, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_elemental_mass_fraction, __pyx_t_4) < 0) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":1102
 *         return self.thermo.elementalMassFraction(self.element_index(m))
 * 
 *     def elemental_mole_fraction(self, m):             # <<<<<<<<<<<<<<
 *         r"""
 *         Get the elemental mole fraction :math:`Z_{\mathrm{mole},m}` of element
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_45elemental_mole_fraction, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_elemental_mole_fract, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_elemental_mole_fraction, __pyx_t_4) < 0) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":1123
 *         return self.thermo.elementalMoleFraction(self.element_index(m))
 * 
 *     def set_unnormalized_mass_fractions(self, Y):             # <<<<<<<<<<<<<<
 *         """
 *         Set the mass fractions without normalizing to force ``sum(Y) == 1.0``.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_47set_unnormalized_mass_fractions, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_set_unnormalized_mas, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_set_unnormalized_mass_fractions, __pyx_t_4) < 0) __PYX_ERR(0, 1123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":1137
 *         self.thermo.setMassFractions_NoNorm(&data[0])
 * 
 *     def set_unnormalized_mole_fractions(self, X):             # <<<<<<<<<<<<<<
 *         """
 *         Set the mole fractions without normalizing to force ``sum(X) == 1.0``.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_49set_unnormalized_mole_fractions, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_set_unnormalized_mol, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_set_unnormalized_mole_fractions, __pyx_t_4) < 0) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":1151
 *         self.thermo.setMoleFractions_NoNorm(&data[0])
 * 
 *     def mass_fraction_dict(self, double threshold=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         Return a dictionary giving the mass fraction for each species by name where the
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_51mass_fraction_dict, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_mass_fraction_dict, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__86);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_mass_fraction_dict, __pyx_t_4) < 0) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":1160
 *         return {pystr(item.first):item.second for item in Y}
 * 
 *     def mole_fraction_dict(self, double threshold=0.0):             # <<<<<<<<<<<<<<
 *         """
 *         Return a dictionary giving the mole fraction for each species by name where the
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_53mole_fraction_dict, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_mole_fraction_dict, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__86);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_mole_fraction_dict, __pyx_t_4) < 0) __PYX_ERR(0, 1160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "cantera/thermo.pyx":1773
 *             return self.plasma.electronPressure()
 * 
 *     def set_discretized_electron_energy_distribution(self, levels, distribution):             # <<<<<<<<<<<<<<
 *         """
 *         Set electron energy distribution. When this method is used, electron
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_55set_discretized_electron_energy_distribution, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase_set_discretized_elec, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_ThermoPhase->tp_dict, __pyx_n_s_set_discretized_electron_energy, __pyx_t_4) < 0) __PYX_ERR(0, 1773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_ThermoPhase);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_57__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase___reduce_cython, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_11ThermoPhase_59__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ThermoPhase___setstate_cython, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1937
 *             self.surf.setCoverages(&data[0])
 * 
 *     def set_unnormalized_coverages(self, cov):             # <<<<<<<<<<<<<<
 *         """
 *         Set the surface coverages without normalizing to force sum(cov) == 1.0.
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_14InterfacePhase_3set_unnormalized_coverages, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_InterfacePhase_set_unnormalized, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_6thermo_InterfacePhase->tp_dict, __pyx_n_s_set_unnormalized_coverages, __pyx_t_4) < 0) __PYX_ERR(0, 1937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_7cantera_6thermo_InterfacePhase);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_14InterfacePhase_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_InterfacePhase___reduce_cython, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_14InterfacePhase_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_InterfacePhase___setstate_cython, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_9PureFluid_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PureFluid___reduce_cython, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._base,self.base,self.kinetics,self.plasma,self.thermo,self.transport,self.weak_base cannot be converted to a Python object for pickling"
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_9PureFluid_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PureFluid___setstate_cython, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":2132
 * # allows the classmethod and property decorators to be chained, so these can be
 * # implemented as properties in the Element class.
 * def _element_symbols():             # <<<<<<<<<<<<<<
 *     syms = elementSymbols()
 *     return tuple(pystr(s) for s in syms)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_1_element_symbols, 0, __pyx_n_s_element_symbols, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_element_symbols, __pyx_t_4) < 0) __PYX_ERR(0, 2132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":2137
 * 
 * 
 * def _element_names():             # <<<<<<<<<<<<<<
 *     names = elementNames()
 *     return tuple(pystr(n) for n in names)
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_3_element_names, 0, __pyx_n_s_element_names, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_element_names, __pyx_t_4) < 0) __PYX_ERR(0, 2137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":2142
 * 
 * 
 * class Element:             # <<<<<<<<<<<<<<
 *     """
 *     An element or a named isotope defined in Cantera.
 */
  __pyx_t_4 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_Element, __pyx_n_s_Element, (PyObject *) NULL, __pyx_n_s_cantera_thermo, __pyx_kp_s_An_element_or_a_named_isotope_d); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "cantera/thermo.pyx":2184
 * 
 *     #: The number of named elements (not isotopes) defined in Cantera
 *     num_elements_defined = numElementsDefined()             # <<<<<<<<<<<<<<
 * 
 *     #: A list of the symbols of all the elements (not isotopes) defined
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(Cantera::numElementsDefined()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_num_elements_defined, __pyx_t_2) < 0) __PYX_ERR(0, 2184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":2188
 *     #: A list of the symbols of all the elements (not isotopes) defined
 *     #: in Cantera
 *     element_symbols = _element_symbols()             # <<<<<<<<<<<<<<
 * 
 *     #: A list of the names of all the elements (not isotopes) defined
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_element_symbols); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_6, };
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_element_symbols_2, __pyx_t_2) < 0) __PYX_ERR(0, 2188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":2192
 *     #: A list of the names of all the elements (not isotopes) defined
 *     #: in Cantera
 *     element_names = _element_names()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, arg):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_element_names); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_6, };
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_element_names_2, __pyx_t_2) < 0) __PYX_ERR(0, 2192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":2194
 *     element_names = _element_names()
 * 
 *     def __init__(self, arg):             # <<<<<<<<<<<<<<
 *         if isinstance(arg, (str, bytes)):
 *             try:
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Element_1__init__, 0, __pyx_n_s_Element___init, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_init, __pyx_t_2) < 0) __PYX_ERR(0, 2194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":2217
 *                             'or an integer')
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self):
 *         """The name of the element or isotope."""
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Element_3name, 0, __pyx_n_s_Element_name, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_name, __pyx_t_5) < 0) __PYX_ERR(0, 2217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cantera/thermo.pyx":2222
 *         return self._name
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def atomic_number(self):
 *         """The atomic number of the element or isotope."""
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Element_5atomic_number, 0, __pyx_n_s_Element_atomic_number, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_atomic_number_2, __pyx_t_2) < 0) __PYX_ERR(0, 2222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":2227
 *         return self._atomic_number
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def symbol(self):
 *         """The symbol of the element or isotope."""
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Element_7symbol, 0, __pyx_n_s_Element_symbol, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_symbol_2, __pyx_t_5) < 0) __PYX_ERR(0, 2227, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cantera/thermo.pyx":2232
 *         return self._symbol
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def weight(self):
 *         """The atomic weight of the element or isotope."""
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_6thermo_7Element_9weight, 0, __pyx_n_s_Element_weight, NULL, __pyx_n_s_cantera_thermo, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_4, __pyx_n_s_weight_2, __pyx_t_2) < 0) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/thermo.pyx":2142
 * 
 * 
 * class Element:             # <<<<<<<<<<<<<<
 *     """
 *     An element or a named isotope defined in Cantera.
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&PyType_Type), __pyx_n_s_Element, __pyx_empty_tuple, __pyx_t_4, NULL, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Element, __pyx_t_2) < 0) __PYX_ERR(0, 2142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/thermo.pyx":1
 * # This file is part of Cantera. See License.txt in the top-level directory or             # <<<<<<<<<<<<<<
 * # at https://cantera.org/license.txt for license and copyright information.
 * 
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ThermoPhase_report_line_298, __pyx_kp_u_Generate_a_report_describing_th) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ThermoPhase_n_atoms_line_608, __pyx_kp_u_Number_of_atoms_of_element_elem) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ThermoPhase_set_equivalence_rati_2, __pyx_kp_u_Set_the_composition_to_a_mixtur) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ThermoPhase_set_mixture_fraction_2, __pyx_kp_u_Set_the_composition_to_a_mixtur_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ThermoPhase_equivalence_ratio_li, __pyx_kp_u_Get_the_equivalence_ratio_math) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ThermoPhase_mixture_fraction_lin, __pyx_kp_u_Get_the_mixture_fraction_of_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ThermoPhase_stoich_air_fuel_rati_2, __pyx_kp_u_Get_the_stoichiometric_air_to_f) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ThermoPhase_elemental_mass_fract_2, __pyx_kp_u_Get_the_elemental_mass_fraction) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_kp_u_ThermoPhase_elemental_mole_fract_2, __pyx_kp_u_Get_the_elemental_mole_fraction) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init cantera.thermo", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cantera.thermo");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* UnpackUnboundCMethod */
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    PyObject *result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
     METH_VARARGS | METH_KEYWORDS,
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #else
    if (likely(!PyCFunction_Check(method)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if defined(CYTHON_COMPILING_IN_PYPY)
#elif PY_VERSION_HEX >= 0x03090000
    if (PyCFunction_CheckExact(method))
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            target->method = unbound_method;
        }
    }
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_items */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return PyDict_Items(d);
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (unlikely(!abi_module)) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    cf->m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    PyObject* exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparsable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferIndexError */
  static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (meth) {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* PyIntCompare */
  static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* BufferFallbackError */
  static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + (unsigned long)b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* pybytes_as_double */
  static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value;
#if PY_MAJOR_VERSION >= 3
    float_value = PyFloat_FromString(obj);
#else
    float_value = PyFloat_FromString(obj, 0);
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
CYTHON_UNUSED static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* pyobject_as_double */
  static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    if (PyUnicode_CheckExact(obj)) {
        return __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        return __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        return __Pyx_PyByteArray_AsDouble(obj);
    } else {
        PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
        float_value = PyNumber_Float(obj);  if ((0)) goto bad;
        (void)__Pyx_PyObject_CallOneArg;
#else
        PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
        if (likely(nb) && likely(nb->nb_float)) {
            float_value = nb->nb_float(obj);
            if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
                __Pyx_TypeName float_value_type_name = __Pyx_PyType_GetName(Py_TYPE(float_value));
                PyErr_Format(PyExc_TypeError,
                    "__float__ returned non-float (type " __Pyx_FMT_TYPENAME ")",
                    float_value_type_name);
                __Pyx_DECREF_TypeName(float_value_type_name);
                Py_DECREF(float_value);
                goto bad;
            }
        } else {
            float_value = __Pyx_PyObject_CallOneArg((PyObject*)&PyFloat_Type, obj);
        }
#endif
        if (likely(float_value)) {
            double value = PyFloat_AS_DOUBLE(float_value);
            Py_DECREF(float_value);
            return value;
        }
    }
bad:
    return (double)-1;
}

/* PyFloatBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static int __Pyx_PyFloat_BoolEqObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a;
    CYTHON_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    if (op1 == op2) {
        return 1;
    }
    if (likely(PyFloat_CheckExact(op1))) {
#if CYTHON_COMPILING_IN_LIMITED_API
        a = __pyx_PyFloat_AsDouble(op1);
#else
        a = PyFloat_AS_DOUBLE(op1);
#endif
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsZero(op1)) {
            a = 0.0;
            
        } else if (__Pyx_PyLong_IsCompact(op1)) {
            a = (double) __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                case 2:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                        a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -2)
                                a = -a;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                case 3:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                        a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -3)
                                a = -a;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                case 4:
                    if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                        a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -4)
                                a = -a;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                default:
        #endif
                    return __Pyx_PyObject_IsTrueAndDecref(
                        PyFloat_Type.tp_richcompare(op2, op1, Py_EQ));
        #if CYTHON_USE_PYLONG_INTERNALS
            }
        }
        #endif
    } else {
        return __Pyx_PyObject_IsTrueAndDecref(
            PyObject_RichCompare(op1, op2, Py_EQ));
    }
        if (a == b) {
            return 1;
        } else {
            return 0;
        }
}
#endif

/* PyFloatBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double a = floatval;
    double b, result;
    CYTHON_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    if (likely(PyFloat_CheckExact(op2))) {
#if CYTHON_COMPILING_IN_LIMITED_API
        b = __pyx_PyFloat_AsDouble(op2);
#else
        b = PyFloat_AS_DOUBLE(op2);
#endif
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        b = (double) PyInt_AS_LONG(op2);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsZero(op2)) {
            b = 0.0;
            
        } else if (__Pyx_PyLong_IsCompact(op2)) {
            b = (double) __Pyx_PyLong_CompactValue(op2);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op2);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
            switch (size) {
                case -2:
                case 2:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                        b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -2)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                case 3:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                        b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -3)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                case 4:
                    if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                        b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -4)
                                b = -b;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                default:
        #endif
                    b = PyLong_AsDouble(op2);
                    if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
        #if CYTHON_USE_PYLONG_INTERNALS
            }
        }
        #endif
    } else {
        return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
    }
        PyFPE_START_PROTECT("subtract", return NULL)
        result = a - b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* JoinPyUnicode */
  static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* RaiseUnboundLocalError */
  static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* CallUnboundCMethod1 */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            #else
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            #endif
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
  static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* py_abs */
  #if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
#if PY_VERSION_HEX >= 0x030C00A7
    if (likely(__Pyx_PyLong_IsCompact(n))) {
        return PyLong_FromSize_t(__Pyx_PyLong_CompactValueUnsigned(n));
    }
#else
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromUnsignedLong(__Pyx_PyLong_Digits(n)[0]);
    }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            #if PY_VERSION_HEX >= 0x030C00A7
            ((PyLongObject*)copy)->long_value.lv_tag = ((PyLongObject*)copy)->long_value.lv_tag & ~_PyLong_SIGN_MASK;
            #else
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
            #endif
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* pep479 */
  static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc;
    __Pyx_PyThreadState_declare
    #ifdef __Pyx_StopAsyncIteration_USED
    int is_async_stopiteration = 0;
    #endif
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    cur_exc = PyErr_Occurred();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        #ifdef __Pyx_StopAsyncIteration_USED
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, __Pyx_PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else
        #endif
            return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(val);
    Py_XDECREF(tb);
    PyErr_SetString(PyExc_RuntimeError,
        #ifdef __Pyx_StopAsyncIteration_USED
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        #endif
        "generator raised StopIteration");
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CallNextTpDealloc */
  static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    destructor tp_dealloc = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_dealloc, destructor) != current_tp_dealloc)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_dealloc = __Pyx_PyType_GetSlot(type, tp_dealloc, destructor)) == current_tp_dealloc)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type)
        tp_dealloc(obj);
}

/* CallNextTpTraverse */
  static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    traverseproc tp_traverse = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc) != current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_traverse = __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc)) == current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_traverse)
        return tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
  static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    inquiry tp_clear = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_clear, inquiry) != current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_clear = __Pyx_PyType_GetSlot(type, tp_clear, inquiry)) == current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_clear)
        tp_clear(obj);
}

/* PyObjectCallNoArg */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
  static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
  static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
  #if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n = PyTuple_GET_SIZE(bases);
    for (i = 1; i < n; i++)
    {
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
        if (dictoffset == 0 && b->tp_dictoffset)
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "extension type '%.200s' has no __dict__ slot, "
                "but base type '" __Pyx_FMT_TYPENAME "' has: "
                "either add 'cdef dict __dict__' to the extension type "
                "or add '__slots__ = [...]' to the base type",
                type_name, b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
    }
    return 0;
}
#endif

/* PyType_Ready */
  static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
  static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
  static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name_3);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType_3_0_0
#define __PYX_HAVE_RT_ImportType_3_0_0
static PyTypeObject *__Pyx_ImportType_3_0_0(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_0 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_0 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_0 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
  #if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__17;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__3);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* Py3UpdateBases */
  static PyObject*
__Pyx_PEP560_update_bases(PyObject *bases)
{
    Py_ssize_t i, j, size_bases;
    PyObject *base, *meth, *new_base, *result, *new_bases = NULL;
    size_bases = PyTuple_GET_SIZE(bases);
    for (i = 0; i < size_bases; i++) {
        base  = PyTuple_GET_ITEM(bases, i);
        if (PyType_Check(base)) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        meth = __Pyx_PyObject_GetAttrStrNoError(base, __pyx_n_s_mro_entries);
        if (!meth && PyErr_Occurred()) {
            goto error;
        }
        if (!meth) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        new_base = __Pyx_PyObject_CallOneArg(meth, bases);
        Py_DECREF(meth);
        if (!new_base) {
            goto error;
        }
        if (!PyTuple_Check(new_base)) {
            PyErr_SetString(PyExc_TypeError,
                            "__mro_entries__ must return a tuple");
            Py_DECREF(new_base);
            goto error;
        }
        if (!new_bases) {
            if (!(new_bases = PyList_New(i))) {
                goto error;
            }
            for (j = 0; j < i; j++) {
                base = PyTuple_GET_ITEM(bases, j);
                PyList_SET_ITEM(new_bases, j, base);
                Py_INCREF(base);
            }
        }
        j = PyList_GET_SIZE(new_bases);
        if (PyList_SetSlice(new_bases, j, j, new_base) < 0) {
            goto error;
        }
        Py_DECREF(new_base);
    }
    if (!new_bases) {
        Py_INCREF(bases);
        return bases;
    }
    result = PyList_AsTuple(new_bases);
    Py_DECREF(new_bases);
    return result;
error:
    Py_XDECREF(new_bases);
    return NULL;
}

/* CalculateMetaclass */
  static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* PyObjectCall2Args */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectLookupSpecial */
  #if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* Py3ClassCreate */
  static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
#if PY_VERSION_HEX >= 0x03030000
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
#else
    CYTHON_MAYBE_UNUSED_VAR(qualname);
#endif
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
static int __Pyx_SetNamesPEP487(PyObject *type_obj) {
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *names_to_set, *key, *value, *set_name, *tmp;
    Py_ssize_t i = 0;
#if CYTHON_USE_TYPE_SLOTS
    names_to_set = PyDict_Copy(type->tp_dict);
#else
    {
        PyObject *d = PyObject_GetAttr(type_obj, __pyx_n_s_dict);
        names_to_set = NULL;
        if (likely(d)) {
            PyObject *names_to_set = PyDict_New();
            int ret = likely(names_to_set) ? PyDict_Update(names_to_set, d) : -1;
            Py_DECREF(d);
            if (unlikely(ret < 0))
                Py_CLEAR(names_to_set);
        }
    }
#endif
    if (unlikely(names_to_set == NULL))
        goto bad;
    while (PyDict_Next(names_to_set, &i, &key, &value)) {
        set_name = __Pyx_PyObject_LookupSpecialNoError(value, __pyx_n_s_set_name);
        if (unlikely(set_name != NULL)) {
            tmp = __Pyx_PyObject_Call2Args(set_name, type_obj, key);
            Py_DECREF(set_name);
            if (unlikely(tmp == NULL)) {
                __Pyx_TypeName value_type_name =
                    __Pyx_PyType_GetName(Py_TYPE(value));
                __Pyx_TypeName type_name = __Pyx_PyType_GetName(type);
                PyErr_Format(PyExc_RuntimeError,
#if PY_MAJOR_VERSION >= 3
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %R " "in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name, key, type_name);
#else
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %.100s in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name,
                    PyString_Check(key) ? PyString_AS_STRING(key) : "?",
                    type_name);
#endif
                goto bad;
            } else {
                Py_DECREF(tmp);
            }
        }
        else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
    Py_DECREF(names_to_set);
    return 0;
bad:
    Py_XDECREF(names_to_set);
    return -1;
}
static PyObject *__Pyx_InitSubclassPEP487(PyObject *type_obj, PyObject *mkw) {
#if CYTHON_USE_TYPE_SLOTS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *mro = type->tp_mro;
    Py_ssize_t i, nbases;
    if (unlikely(!mro)) goto done;
    (void) &__Pyx_GetBuiltinName;
    Py_INCREF(mro);
    nbases = PyTuple_GET_SIZE(mro);
    assert(PyTuple_GET_ITEM(mro, 0) == type_obj);
    for (i = 1; i < nbases-1; i++) {
        PyObject *base, *dict, *meth;
        base = PyTuple_GET_ITEM(mro, i);
        dict = ((PyTypeObject *)base)->tp_dict;
        meth = __Pyx_PyDict_GetItemStrWithError(dict, __pyx_n_s_init_subclass);
        if (unlikely(meth)) {
            descrgetfunc f = Py_TYPE(meth)->tp_descr_get;
            PyObject *res;
            Py_INCREF(meth);
            if (likely(f)) {
                res = f(meth, NULL, type_obj);
                Py_DECREF(meth);
                if (unlikely(!res)) goto bad;
                meth = res;
            }
            res = __Pyx_PyObject_FastCallDict(meth, NULL, 0, mkw);
            Py_DECREF(meth);
            if (unlikely(!res)) goto bad;
            Py_DECREF(res);
            goto done;
        } else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
done:
    Py_XDECREF(mro);
    return type_obj;
bad:
    Py_XDECREF(mro);
    Py_DECREF(type_obj);
    return NULL;
#else
    PyObject *super_type, *super, *func, *res;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    super_type = __Pyx_GetBuiltinName(__pyx_n_s_super);
#else
    super_type = (PyObject*) &PySuper_Type;
    (void) &__Pyx_GetBuiltinName;
#endif
    super = likely(super_type) ? __Pyx_PyObject_Call2Args(super_type, type_obj, type_obj) : NULL;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    Py_XDECREF(super_type);
#endif
    if (unlikely(!super)) {
        Py_CLEAR(type_obj);
        goto done;
    }
    func = __Pyx_PyObject_GetAttrStrNoError(super, __pyx_n_s_init_subclass);
    Py_DECREF(super);
    if (likely(!func)) {
        if (unlikely(PyErr_Occurred()))
            Py_CLEAR(type_obj);
        goto done;
    }
    res = __Pyx_PyObject_FastCallDict(func, NULL, 0, mkw);
    Py_DECREF(func);
    if (unlikely(!res))
        Py_CLEAR(type_obj);
    Py_XDECREF(res);
done:
    return type_obj;
#endif
}
#endif
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET,
#if PY_VERSION_HEX < 0x030600A4
        (metaclass == (PyObject*)&PyType_Type) ? NULL : mkw
#else
        mkw
#endif
    );
    Py_XDECREF(owned_metaclass);
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
    if (likely(result) && likely(PyType_Check(result))) {
        if (unlikely(__Pyx_SetNamesPEP487(result) < 0)) {
            Py_CLEAR(result);
        } else {
            result = __Pyx_InitSubclassPEP487(result, mkw);
        }
    }
#else
    (void) &__Pyx_GetBuiltinName;
#endif
    return result;
}

/* CyFunctionClassCell */
  static int __Pyx_CyFunction_InitClassCell(PyObject *cyfunctions, PyObject *classobj) {
    Py_ssize_t i, count = PyList_GET_SIZE(cyfunctions);
    for (i = 0; i < count; i++) {
        __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *)
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyList_GET_ITEM(cyfunctions, i);
#else
            PySequence_ITEM(cyfunctions, i);
        if (unlikely(!m))
            return -1;
#endif
        __Pyx_CyFunction_SetClassObj(m, classobj);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF((PyObject*)m);
#endif
    }
    return 0;
}

/* GetNameInClass */
  static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    __Pyx_TypeName obj_type_name;
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
                 "'" __Pyx_FMT_TYPENAME "' does not have the buffer interface",
                 obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name_3);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__109));
    }
    return name;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* SwapException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
  static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
  #include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_CLEAR(exc_state->exc_value);
#else
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
#endif
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(PyObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_value) {
        #if CYTHON_COMPILING_IN_PYPY
        #else
        PyObject *exc_tb;
        #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
        exc_tb = PyException_GetTraceback(exc_state->exc_value);
        #elif PY_VERSION_HEX >= 0x030B00a4
        exc_tb = ((PyBaseExceptionObject*) exc_state->exc_value)->traceback;
        #else
        exc_tb = exc_state->exc_traceback;
        #endif
        if (exc_tb) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
            #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
            Py_DECREF(exc_tb);
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body(self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
#if CYTHON_COMPILING_IN_PYPY
    CYTHON_UNUSED_VAR(exc_state);
#else
    PyObject *exc_tb;
    #if PY_VERSION_HEX >= 0x030B00a4
    if (!exc_state->exc_value) return;
    exc_tb = PyException_GetTraceback(exc_state->exc_value);
    #else
    exc_tb = exc_state->exc_traceback;
    #endif
    if (likely(exc_tb)) {
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
        #if PY_VERSION_HEX >= 0x030B00a4
        Py_DECREF(exc_tb);
        #endif
    }
#endif
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject* gen, PyObject *retval) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval))
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    gen->is_running = 0;
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_VISIT(exc_state->exc_value);
#else
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
#endif
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        Py_TYPE(gen)->tp_del(self);
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    __Pyx_PyHeapTypeObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (likely(--self->ob_refcnt == 0)) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context)
{
    PyObject *frame = self->gi_frame;
    CYTHON_UNUSED_VAR(context);
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    #if PY_VERSION_HEX >= 0x030B00a4
    gen->gi_exc_state.exc_value = NULL;
    #else
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
    #endif
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
  static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
  #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (unlikely(!module)) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CoroutineObject, gi_weakreflist), READONLY, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_GeneratorType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_Coroutine_dealloc},
    {Py_tp_traverse, (void *)__Pyx_Coroutine_traverse},
    {Py_tp_iter, (void *)PyObject_SelfIter},
    {Py_tp_iternext, (void *)__Pyx_Generator_Next},
    {Py_tp_methods, (void *)__pyx_Generator_methods},
    {Py_tp_members, (void *)__pyx_Generator_memberlist},
    {Py_tp_getset, (void *)__pyx_Generator_getsets},
    {Py_tp_getattro, (void *) __Pyx_PyObject_GenericGetAttrNoDict},
#if CYTHON_USE_TP_FINALIZE
    {Py_tp_finalize, (void *)__Pyx_Coroutine_del},
#endif
    {0, 0},
};
static PyType_Spec __pyx_GeneratorType_spec = {
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    __pyx_GeneratorType_slots
};
#else
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_Generator_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_GeneratorType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_GeneratorType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
#endif
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compile time version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
  #ifndef __PYX_HAVE_RT_ImportFunction_3_0_0
#define __PYX_HAVE_RT_ImportFunction_3_0_0
static int __Pyx_ImportFunction_3_0_0(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
