/* Generated by Cython 3.0.0 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include/numpy/arrayobject.h",
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include/numpy/arrayscalars.h",
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include/numpy/ndarrayobject.h",
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include/numpy/ndarraytypes.h",
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include/numpy/ufuncobject.h",
            "include/cantera/base/AnyMap.h",
            "include/cantera/base/Delegator.h",
            "include/cantera/base/ExtensionManager.h",
            "include/cantera/base/ExtensionManagerFactory.h",
            "include/cantera/base/Interface.h",
            "include/cantera/base/Solution.h",
            "include/cantera/base/SolutionArray.h",
            "include/cantera/base/Units.h",
            "include/cantera/base/global.h",
            "include/cantera/base/stringUtils.h",
            "include/cantera/cython/funcWrapper.h",
            "include/cantera/cython/kinetics_utils.h",
            "include/cantera/cython/thermo_utils.h",
            "include/cantera/cython/transport_utils.h",
            "include/cantera/cython/utils_utils.h",
            "include/cantera/extensions/PythonExtensionManager.h",
            "include/cantera/extensions/PythonHandle.h",
            "include/cantera/kinetics/InterfaceKinetics.h",
            "include/cantera/kinetics/Kinetics.h",
            "include/cantera/kinetics/KineticsFactory.h",
            "include/cantera/numerics/Func1.h",
            "include/cantera/numerics/Func1Factory.h",
            "include/cantera/numerics/eigen_sparse.h",
            "include/cantera/thermo/Elements.h",
            "include/cantera/thermo/PlasmaPhase.h",
            "include/cantera/thermo/Species.h",
            "include/cantera/thermo/SpeciesThermoFactory.h",
            "include/cantera/thermo/SpeciesThermoInterpType.h",
            "include/cantera/thermo/SurfPhase.h",
            "include/cantera/thermo/ThermoFactory.h",
            "include/cantera/thermo/ThermoPhase.h",
            "include/cantera/transport/DustyGasTransport.h",
            "include/cantera/transport/Transport.h",
            "include/cantera/transport/TransportData.h",
            "include/cantera/transport/TransportFactory.h"
        ],
        "include_dirs": [
            "include",
            "include/cantera/ext",
            "src",
            "cantera",
            "/tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/core/include"
        ],
        "language": "c++",
        "name": "cantera._cantera",
        "sources": [
            "cantera/thermo.pyx",
            "cantera/_utils.pyx",
            "cantera/solutionbase.pyx",
            "cantera/kinetics.pyx",
            "cantera/reactor.pyx",
            "cantera/units.pyx",
            "cantera/_onedim.pyx",
            "cantera/transport.pyx",
            "cantera/delegator.pyx",
            "cantera/mixture.pyx",
            "cantera/speciesthermo.pyx",
            "cantera/func1.pyx",
            "cantera/_cantera.pyx",
            "cantera/constants.pyx",
            "cantera/reaction.pyx",
            "cantera/reactionpath.pyx",
            "cantera/preconditioners.pyx",
            "cantera/yamlwriter.pyx",
            "src/equil/MultiPhase.cpp",
            "src/equil/vcs_solve_TP.cpp",
            "src/equil/vcs_VolPhase.cpp",
            "src/equil/BasisOptimize.cpp",
            "src/equil/vcs_solve.cpp",
            "src/equil/vcs_MultiPhaseEquil.cpp",
            "src/equil/ChemEquil.cpp",
            "src/equil/vcs_util.cpp",
            "src/equil/MultiPhaseEquil.cpp",
            "src/oneD/MultiJac.cpp",
            "src/oneD/MultiNewton.cpp",
            "src/oneD/DomainFactory.cpp",
            "src/oneD/StFlow.cpp",
            "src/oneD/OneDim.cpp",
            "src/oneD/Domain1D.cpp",
            "src/oneD/refine.cpp",
            "src/oneD/Boundary1D.cpp",
            "src/oneD/Sim1D.cpp",
            "src/oneD/IonFlow.cpp",
            "src/transport/DustyGasTransport.cpp",
            "src/transport/HighPressureGasTransport.cpp",
            "src/transport/WaterTransport.cpp",
            "src/transport/MMCollisionInt.cpp",
            "src/transport/MultiTransport.cpp",
            "src/transport/GasTransport.cpp",
            "src/transport/IonGasTransport.cpp",
            "src/transport/TransportData.cpp",
            "src/transport/MixTransport.cpp",
            "src/transport/Transport.cpp",
            "src/transport/TransportFactory.cpp",
            "src/kinetics/ImplicitSurfChem.cpp",
            "src/kinetics/Falloff.cpp",
            "src/kinetics/Reaction.cpp",
            "src/kinetics/BulkKinetics.cpp",
            "src/kinetics/Kinetics.cpp",
            "src/kinetics/Arrhenius.cpp",
            "src/kinetics/TwoTempPlasmaRate.cpp",
            "src/kinetics/Group.cpp",
            "src/kinetics/InterfaceKinetics.cpp",
            "src/kinetics/ReactionRateDelegator.cpp",
            "src/kinetics/InterfaceRate.cpp",
            "src/kinetics/ChebyshevRate.cpp",
            "src/kinetics/ReactionPath.cpp",
            "src/kinetics/ReactionRateFactory.cpp",
            "src/kinetics/solveSP.cpp",
            "src/kinetics/PlogRate.cpp",
            "src/kinetics/Custom.cpp",
            "src/kinetics/KineticsFactory.cpp",
            "src/kinetics/BlowersMaselRate.cpp",
            "src/pch/system.cpp",
            "src/numerics/FuncEval.cpp",
            "src/numerics/Func1.cpp",
            "src/numerics/BandMatrix.cpp",
            "src/numerics/DenseMatrix.cpp",
            "src/numerics/Integrators.cpp",
            "src/numerics/PreconditionerFactory.cpp",
            "src/numerics/CVodesIntegrator.cpp",
            "src/numerics/IdasIntegrator.cpp",
            "src/numerics/polyfit.cpp",
            "src/numerics/funcs.cpp",
            "src/numerics/AdaptivePreconditioner.cpp",
            "src/numerics/Func1Factory.cpp",
            "src/numerics/ResidJacEval.cpp",
            "src/thermo/HMWSoln.cpp",
            "src/thermo/MargulesVPSSTP.cpp",
            "src/thermo/Nasa9PolyMultiTempRegion.cpp",
            "src/thermo/PengRobinson.cpp",
            "src/thermo/RedlichKwongMFTP.cpp",
            "src/thermo/WaterSSTP.cpp",
            "src/thermo/Phase.cpp",
            "src/thermo/StoichSubstance.cpp",
            "src/thermo/PDSS_SSVol.cpp",
            "src/thermo/VPStandardStateTP.cpp",
            "src/thermo/Mu0Poly.cpp",
            "src/thermo/MaskellSolidSolnPhase.cpp",
            "src/thermo/SurfPhase.cpp",
            "src/thermo/WaterProps.cpp",
            "src/thermo/IdealGasPhase.cpp",
            "src/thermo/RedlichKisterVPSSTP.cpp",
            "src/thermo/IdealMolalSoln.cpp",
            "src/thermo/SpeciesThermoFactory.cpp",
            "src/thermo/CoverageDependentSurfPhase.cpp",
            "src/thermo/PDSSFactory.cpp",
            "src/thermo/IonsFromNeutralVPSSTP.cpp",
            "src/thermo/PureFluidPhase.cpp",
            "src/thermo/PDSS_Water.cpp",
            "src/thermo/MolalityVPSSTP.cpp",
            "src/thermo/PDSS_IonsFromNeutral.cpp",
            "src/thermo/ThermoPhase.cpp",
            "src/thermo/PDSS_HKFT.cpp",
            "src/thermo/Elements.cpp",
            "src/thermo/MixtureFugacityTP.cpp",
            "src/thermo/PDSS_IdealGas.cpp",
            "src/thermo/SpeciesThermoInterpType.cpp",
            "src/thermo/Nasa9Poly1.cpp",
            "src/thermo/Species.cpp",
            "src/thermo/PDSS_ConstVol.cpp",
            "src/thermo/DebyeHuckel.cpp",
            "src/thermo/ConstCpPoly.cpp",
            "src/thermo/LatticePhase.cpp",
            "src/thermo/NasaPoly2.cpp",
            "src/thermo/PDSS.cpp",
            "src/thermo/LatticeSolidPhase.cpp",
            "src/thermo/WaterPropsIAPWS.cpp",
            "src/thermo/IdealSolidSolnPhase.cpp",
            "src/thermo/MultiSpeciesThermo.cpp",
            "src/thermo/ThermoFactory.cpp",
            "src/thermo/SingleSpeciesTP.cpp",
            "src/thermo/IdealSolnGasVPSS.cpp",
            "src/thermo/GibbsExcessVPSSTP.cpp",
            "src/thermo/BinarySolutionTabulatedThermo.cpp",
            "src/thermo/WaterPropsIAPWSphi.cpp",
            "src/thermo/PlasmaPhase.cpp",
            "src/zeroD/IdealGasConstPressureReactor.cpp",
            "src/zeroD/ConstPressureReactor.cpp",
            "src/zeroD/flowControllers.cpp",
            "src/zeroD/MoleReactor.cpp",
            "src/zeroD/FlowReactor.cpp",
            "src/zeroD/FlowDevice.cpp",
            "src/zeroD/Wall.cpp",
            "src/zeroD/Reactor.cpp",
            "src/zeroD/ReactorSurface.cpp",
            "src/zeroD/FlowDeviceFactory.cpp",
            "src/zeroD/IdealGasMoleReactor.cpp",
            "src/zeroD/WallFactory.cpp",
            "src/zeroD/ReactorNet.cpp",
            "src/zeroD/ReactorBase.cpp",
            "src/zeroD/IdealGasReactor.cpp",
            "src/zeroD/ReactorFactory.cpp",
            "src/zeroD/ConstPressureMoleReactor.cpp",
            "src/zeroD/IdealGasConstPressureMoleReactor.cpp",
            "src/base/Array.cpp",
            "src/base/Storage.cpp",
            "src/base/ctexceptions.cpp",
            "src/base/ExtensionManagerFactory.cpp",
            "src/base/AnyMap.cpp",
            "src/base/checkFinite.cpp",
            "src/base/application.cpp",
            "src/base/Solution.cpp",
            "src/base/YamlWriter.cpp",
            "src/base/clockWC.cpp",
            "src/base/ExtensionManager.cpp",
            "src/base/Units.cpp",
            "src/base/ValueCache.cpp",
            "src/base/stringUtils.cpp",
            "src/base/SolutionArray.cpp",
            "src/base/Interface.cpp",
            "src/base/global.cpp",
            "src/extensions/PythonExtensionManager.cpp",
            "src/extensions/canteraShared.cpp",
            "src/extensions/pythonShim.cpp",
            "src/tpx/Water.cpp",
            "src/tpx/CarbonDioxide.cpp",
            "src/tpx/Sub.cpp",
            "src/tpx/Methane.cpp",
            "src/tpx/HFC134a.cpp",
            "src/tpx/Hydrogen.cpp",
            "src/tpx/Oxygen.cpp",
            "src/tpx/utils.cpp",
            "src/tpx/Heptane.cpp",
            "src/tpx/Nitrogen.cpp"
        ]
    },
    "module_name": "cantera._cantera"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if (PY_VERSION_HEX < 0x030700b1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600)) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0_0"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject *co=NULL, *result=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(p))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto end;
        if (!(empty = PyTuple_New(0))) goto end;
        result = (PyCodeObject*) PyObject_Call(replace, empty, kwds);
    end:
        Py_XDECREF((PyObject*) co);
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE(obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__cantera__reactor
#define __PYX_HAVE_API__cantera__reactor
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <string>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <functional>
#include <memory>
#include <stdio.h>
#include "pythread.h"

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include "cantera/cython/funcWrapper.h"
#include "cantera/numerics/Func1.h"
#include "cantera/numerics/Func1Factory.h"
#include "cantera/base/Units.h"
#include <array>
#include "cantera/extensions/PythonHandle.h"
#include "cantera/base/Delegator.h"
#include "cantera/base/ExtensionManager.h"
#include "cantera/base/ExtensionManagerFactory.h"
#include "cantera/extensions/PythonExtensionManager.h"
#include "cantera/thermo/ThermoFactory.h"
#include "cantera/kinetics/KineticsFactory.h"
#include "cantera/transport/TransportFactory.h"
#include "cantera/base/Interface.h"
#include "cantera/base/Solution.h"
#include "cantera/base/SolutionArray.h"
#include "cantera/numerics/eigen_sparse.h"
#include "cantera/kinetics/Kinetics.h"
#include "cantera/kinetics/InterfaceKinetics.h"
#include "cantera/cython/kinetics_utils.h"
#include "cantera/numerics/PreconditionerBase.h"
#include "cantera/numerics/AdaptivePreconditioner.h"
#include "cantera/numerics/PreconditionerFactory.h"
#include "cantera/numerics/Integrator.h"
#include "cantera/zerodim.h"
#include "cantera/zeroD/ReactorDelegator.h"
#include "cantera/thermo/Species.h"
#include "cantera/thermo/ThermoPhase.h"
#include "cantera/thermo/SurfPhase.h"
#include "cantera/thermo/PlasmaPhase.h"
#include "cantera/cython/thermo_utils.h"
#include "cantera/thermo/Elements.h"
#include <unordered_map>
#include "cantera/base/AnyMap.h"
#include "cantera/base/stringUtils.h"
#include "cantera/base/global.h"
#include "cantera/cython/utils_utils.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else  // Py < 3.12
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "cantera/reactor.pyx",
  "<stringsource>",
  "contextvars.pxd",
  "__init__.cython-30.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "cantera/func1.pxd",
  "cantera/units.pxd",
  "cantera/solutionbase.pxd",
  "cantera/kinetics.pxd",
  "cantera/preconditioners.pxd",
  "cantera/thermo.pxd",
  "cantera/_utils.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* BufferFormatStructs.proto */
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* #### Code section: numeric_typedefs ### */

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":732
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":733
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":734
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":735
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":739
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":740
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":741
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":742
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":746
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":747
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":756
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":757
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":758
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":760
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":761
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":762
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":764
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":765
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":767
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":768
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":769
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_7cantera_5func1_Func1;
struct __pyx_obj_7cantera_5units_Units;
struct __pyx_obj_7cantera_5units_UnitStack;
struct __pyx_obj_7cantera_5units_UnitSystem;
struct __pyx_obj_7cantera_12solutionbase__SolutionBase;
struct __pyx_obj_7cantera_12solutionbase_SolutionArrayBase;
struct __pyx_obj_7cantera_8kinetics_Kinetics;
struct __pyx_obj_7cantera_8kinetics_InterfaceKinetics;
struct __pyx_obj_7cantera_15preconditioners_PreconditionerBase;
struct __pyx_obj_7cantera_15preconditioners_AdaptivePreconditioner;
struct __pyx_obj_7cantera_6thermo_Species;
struct __pyx_obj_7cantera_6thermo_ThermoPhase;
struct __pyx_obj_7cantera_6thermo_InterfacePhase;
struct __pyx_obj_7cantera_6_utils_AnyMap;
struct __pyx_obj_7cantera_7reactor_ReactorBase;
struct __pyx_obj_7cantera_7reactor_Reactor;
struct __pyx_obj_7cantera_7reactor_MoleReactor;
struct __pyx_obj_7cantera_7reactor_Reservoir;
struct __pyx_obj_7cantera_7reactor_ConstPressureReactor;
struct __pyx_obj_7cantera_7reactor_ConstPressureMoleReactor;
struct __pyx_obj_7cantera_7reactor_IdealGasReactor;
struct __pyx_obj_7cantera_7reactor_IdealGasConstPressureReactor;
struct __pyx_obj_7cantera_7reactor_FlowReactor;
struct __pyx_obj_7cantera_7reactor_ExtensibleReactor;
struct __pyx_obj_7cantera_7reactor_ReactorSurface;
struct __pyx_obj_7cantera_7reactor_WallBase;
struct __pyx_obj_7cantera_7reactor_Wall;
struct __pyx_obj_7cantera_7reactor_FlowDevice;
struct __pyx_obj_7cantera_7reactor_MassFlowController;
struct __pyx_obj_7cantera_7reactor_Valve;
struct __pyx_obj_7cantera_7reactor_PressureController;
struct __pyx_obj_7cantera_7reactor_ReactorNet;
struct __pyx_obj_7cantera_7reactor_IdealGasMoleReactor;
struct __pyx_obj_7cantera_7reactor_IdealGasConstPressureMoleReactor;
struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasReactor;
struct __pyx_obj_7cantera_7reactor_ExtensibleConstPressureReactor;
struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor;
struct __pyx_obj_7cantera_7reactor_ExtensibleMoleReactor;
struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasMoleReactor;
struct __pyx_obj_7cantera_7reactor_ExtensibleConstPressureMoleReactor;
struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor;
struct __pyx_opt_args_7cpython_11contextvars_get_value;
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value {
  int __pyx_n;
  PyObject *default_value;
};

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {
  int __pyx_n;
  PyObject *default_value;
};

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":771
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":772
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":775
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "ctcxx.pxd":19
 * from cython.operator cimport dereference as deref, preincrement as inc
 * 
 * ctypedef stdmap[string,double] Composition             # <<<<<<<<<<<<<<
 * 
 * import numpy as np
 */
typedef std::map<std::string,double>  __pyx_t_7cantera_5ctcxx_Composition;

/* "delegator.pxd":107
 * 
 * 
 * ctypedef CxxDelegator* CxxDelegatorPtr             # <<<<<<<<<<<<<<
 * 
 * cdef int assign_delegates(object, CxxDelegator*) except -1
 */
typedef Cantera::Delegator *__pyx_t_7cantera_9delegator_CxxDelegatorPtr;
struct __pyx_opt_args_7cantera_12solutionbase__assign_Solution;

/* "solutionbase.pxd":99
 * 
 * 
 * ctypedef void (*transportMethod1d)(CxxTransport*, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * ctypedef void (*transportMethod2d)(CxxTransport*, size_t, double*) except +translate_exception
 * ctypedef void (*transportPolyMethod1i)(CxxTransport*, size_t, double*) except +translate_exception
 */
typedef void (*__pyx_t_7cantera_12solutionbase_transportMethod1d)(Cantera::Transport *, double *);

/* "solutionbase.pxd":100
 * 
 * ctypedef void (*transportMethod1d)(CxxTransport*, double*) except +translate_exception
 * ctypedef void (*transportMethod2d)(CxxTransport*, size_t, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * ctypedef void (*transportPolyMethod1i)(CxxTransport*, size_t, double*) except +translate_exception
 * ctypedef void (*transportPolyMethod2i)(CxxTransport*, size_t, size_t, double*) except +translate_exception
 */
typedef void (*__pyx_t_7cantera_12solutionbase_transportMethod2d)(Cantera::Transport *, size_t, double *);

/* "solutionbase.pxd":101
 * ctypedef void (*transportMethod1d)(CxxTransport*, double*) except +translate_exception
 * ctypedef void (*transportMethod2d)(CxxTransport*, size_t, double*) except +translate_exception
 * ctypedef void (*transportPolyMethod1i)(CxxTransport*, size_t, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * ctypedef void (*transportPolyMethod2i)(CxxTransport*, size_t, size_t, double*) except +translate_exception
 * 
 */
typedef void (*__pyx_t_7cantera_12solutionbase_transportPolyMethod1i)(Cantera::Transport *, size_t, double *);

/* "solutionbase.pxd":102
 * ctypedef void (*transportMethod2d)(CxxTransport*, size_t, double*) except +translate_exception
 * ctypedef void (*transportPolyMethod1i)(CxxTransport*, size_t, double*) except +translate_exception
 * ctypedef void (*transportPolyMethod2i)(CxxTransport*, size_t, size_t, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * 
 * cdef _assign_Solution(_SolutionBase soln, shared_ptr[CxxSolution] cxx_soln,
 */
typedef void (*__pyx_t_7cantera_12solutionbase_transportPolyMethod2i)(Cantera::Transport *, size_t, size_t, double *);

/* "solutionbase.pxd":104
 * ctypedef void (*transportPolyMethod2i)(CxxTransport*, size_t, size_t, double*) except +translate_exception
 * 
 * cdef _assign_Solution(_SolutionBase soln, shared_ptr[CxxSolution] cxx_soln,             # <<<<<<<<<<<<<<
 *                       pybool reset_adjacent, pybool weak=?)
 * cdef object _wrap_Solution(shared_ptr[CxxSolution] cxx_soln)
 */
struct __pyx_opt_args_7cantera_12solutionbase__assign_Solution {
  int __pyx_n;
  PyBoolObject *weak;
};

/* "kinetics.pxd":140
 * 
 * 
 * ctypedef void (*kineticsMethod1d)(CxxKinetics*, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * ctypedef CxxSparseMatrix (*kineticsMethodSparse)(CxxKinetics*) except +translate_exception
 * 
 */
typedef void (*__pyx_t_7cantera_8kinetics_kineticsMethod1d)(Cantera::Kinetics *, double *);

/* "kinetics.pxd":141
 * 
 * ctypedef void (*kineticsMethod1d)(CxxKinetics*, double*) except +translate_exception
 * ctypedef CxxSparseMatrix (*kineticsMethodSparse)(CxxKinetics*) except +translate_exception             # <<<<<<<<<<<<<<
 * 
 * cdef class Kinetics(_SolutionBase):
 */
typedef Eigen::SparseMatrix<double> (*__pyx_t_7cantera_8kinetics_kineticsMethodSparse)(Cantera::Kinetics *);

/* "thermo.pxd":244
 * 
 * 
 * ctypedef void (*thermoMethod1d)(CxxThermoPhase*, double*) except +translate_exception             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "cantera/thermo/Elements.h" namespace "Cantera":
 */
typedef void (*__pyx_t_7cantera_6thermo_thermoMethod1d)(Cantera::ThermoPhase *, double *);
struct __pyx_opt_args_7cantera_6_utils_py_to_anymap;
struct __pyx_opt_args_7cantera_6_utils_python_to_anyvalue;

/* "_utils.pxd":106
 * cdef Composition comp_map(X) except *
 * 
 * cdef CxxAnyMap py_to_anymap(data, cbool hyphenize=*) except *             # <<<<<<<<<<<<<<
 * cdef anymap_to_py(CxxAnyMap& m)
 * 
 */
struct __pyx_opt_args_7cantera_6_utils_py_to_anymap {
  int __pyx_n;
  bool hyphenize;
};

/* "_utils.pxd":109
 * cdef anymap_to_py(CxxAnyMap& m)
 * 
 * cdef CxxAnyValue python_to_anyvalue(item, name=*) except *             # <<<<<<<<<<<<<<
 * cdef anyvalue_to_python(string name, CxxAnyValue& v)
 */
struct __pyx_opt_args_7cantera_6_utils_python_to_anyvalue {
  int __pyx_n;
  PyObject *name;
};

/* "cantera/reactor.pxd":217
 * 
 * 
 * ctypedef CxxReactorAccessor* CxxReactorAccessorPtr             # <<<<<<<<<<<<<<
 * 
 * cdef class ReactorBase:
 */
typedef Cantera::ReactorAccessor *__pyx_t_7cantera_7reactor_CxxReactorAccessorPtr;

/* "func1.pxd":46
 * 
 * 
 * cdef class Func1:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxFunc1] _func
 *     cdef CxxFunc1* func
 */
struct __pyx_obj_7cantera_5func1_Func1 {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_5func1_Func1 *__pyx_vtab;
  std::shared_ptr<Cantera::Func1>  _func;
  Cantera::Func1 *func;
  PyObject *callable;
  PyObject *exception;
};


/* "units.pxd":42
 * 
 * 
 * cdef class Units:             # <<<<<<<<<<<<<<
 *     cdef CxxUnits units
 *     @staticmethod
 */
struct __pyx_obj_7cantera_5units_Units {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_5units_Units *__pyx_vtab;
  Cantera::Units units;
};


/* "units.pxd":47
 *     cdef Units copy(CxxUnits)
 * 
 * cdef class UnitStack:             # <<<<<<<<<<<<<<
 *     cdef CxxUnitStack stack
 *     @staticmethod
 */
struct __pyx_obj_7cantera_5units_UnitStack {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_5units_UnitStack *__pyx_vtab;
  Cantera::UnitStack stack;
};


/* "units.pxd":53
 * 
 * 
 * cdef class UnitSystem:             # <<<<<<<<<<<<<<
 *     cdef _set_unitSystem(self, shared_ptr[CxxUnitSystem] units)
 *     cdef shared_ptr[CxxUnitSystem] _unitsystem
 */
struct __pyx_obj_7cantera_5units_UnitSystem {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_5units_UnitSystem *__pyx_vtab;
  std::shared_ptr<Cantera::UnitSystem>  _unitsystem;
  Cantera::UnitSystem *unitsystem;
};


/* "solutionbase.pxd":108
 * cdef object _wrap_Solution(shared_ptr[CxxSolution] cxx_soln)
 * 
 * cdef class _SolutionBase:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxSolution] _base
 *     cdef weak_ptr[CxxSolution] weak_base
 */
struct __pyx_obj_7cantera_12solutionbase__SolutionBase {
  PyObject_HEAD
  std::shared_ptr<Cantera::Solution>  _base;
  std::weak_ptr<Cantera::Solution>  weak_base;
  Cantera::Solution *base;
  Cantera::ThermoPhase *thermo;
  Cantera::Kinetics *kinetics;
  Cantera::Transport *transport;
  int thermo_basis;
  PyArrayObject *_selected_species;
  PyObject *parent;
  PyObject *_adjacent;
  PyObject *_soln_changed_callback;
  PyObject *_references;
};


/* "solutionbase.pxd":122
 *     cdef public object _references
 * 
 * cdef class SolutionArrayBase:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxSolutionArray] _base
 *     cdef CxxSolutionArray* base
 */
struct __pyx_obj_7cantera_12solutionbase_SolutionArrayBase {
  PyObject_HEAD
  std::shared_ptr<Cantera::SolutionArray>  _base;
  Cantera::SolutionArray *base;
  PyObject *_weakref_proxy;
};


/* "kinetics.pxd":143
 * ctypedef CxxSparseMatrix (*kineticsMethodSparse)(CxxKinetics*) except +translate_exception
 * 
 * cdef class Kinetics(_SolutionBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_8kinetics_Kinetics {
  struct __pyx_obj_7cantera_12solutionbase__SolutionBase __pyx_base;
};


/* "kinetics.pxd":146
 *     pass
 * 
 * cdef class InterfaceKinetics(Kinetics):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_8kinetics_InterfaceKinetics {
  struct __pyx_obj_7cantera_8kinetics_Kinetics __pyx_base;
};


/* "preconditioners.pxd":33
 *          +translate_exception
 * 
 * cdef class PreconditionerBase:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxPreconditionerBase] pbase
 * 
 */
struct __pyx_obj_7cantera_15preconditioners_PreconditionerBase {
  PyObject_HEAD
  std::shared_ptr<Cantera::PreconditionerBase>  pbase;
};


/* "preconditioners.pxd":36
 *     cdef shared_ptr[CxxPreconditionerBase] pbase
 * 
 * cdef class AdaptivePreconditioner(PreconditionerBase):             # <<<<<<<<<<<<<<
 *     cdef CxxAdaptivePreconditioner* preconditioner
 */
struct __pyx_obj_7cantera_15preconditioners_AdaptivePreconditioner {
  struct __pyx_obj_7cantera_15preconditioners_PreconditionerBase __pyx_base;
  Cantera::AdaptivePreconditioner *preconditioner;
};


/* "thermo.pxd":259
 * 
 * 
 * cdef class Species:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxSpecies] _species
 *     cdef CxxSpecies* species
 */
struct __pyx_obj_7cantera_6thermo_Species {
  PyObject_HEAD
  struct __pyx_vtabstruct_7cantera_6thermo_Species *__pyx_vtab;
  std::shared_ptr<Cantera::Species>  _species;
  Cantera::Species *species;
  struct __pyx_obj_7cantera_12solutionbase__SolutionBase *_phase;
};


/* "thermo.pxd":266
 *     cdef _assign(self, shared_ptr[CxxSpecies] other)
 * 
 * cdef class ThermoPhase(_SolutionBase):             # <<<<<<<<<<<<<<
 *     cdef double _mass_factor(self)
 *     cdef double _mole_factor(self)
 */
struct __pyx_obj_7cantera_6thermo_ThermoPhase {
  struct __pyx_obj_7cantera_12solutionbase__SolutionBase __pyx_base;
  struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *__pyx_vtab;
  Cantera::PlasmaPhase *plasma;
  PyObject *_enable_plasma;
};


/* "thermo.pxd":276
 *     cdef public object _enable_plasma
 * 
 * cdef class InterfacePhase(ThermoPhase):             # <<<<<<<<<<<<<<
 *     cdef CxxSurfPhase* surf
 */
struct __pyx_obj_7cantera_6thermo_InterfacePhase {
  struct __pyx_obj_7cantera_6thermo_ThermoPhase __pyx_base;
  Cantera::SurfPhase *surf;
};


/* "_utils.pxd":96
 *     cdef void CxxSetLogger "setLogger" (CxxPythonLogger*)
 * 
 * cdef class AnyMap(dict):             # <<<<<<<<<<<<<<
 *     cdef _set_CxxUnitSystem(self, shared_ptr[CxxUnitSystem] units)
 *     cdef UnitSystem unitsystem
 */
struct __pyx_obj_7cantera_6_utils_AnyMap {
  PyDictObject __pyx_base;
  struct __pyx_vtabstruct_7cantera_6_utils_AnyMap *__pyx_vtab;
  struct __pyx_obj_7cantera_5units_UnitSystem *unitsystem;
};


/* "cantera/reactor.pxd":219
 * ctypedef CxxReactorAccessor* CxxReactorAccessorPtr
 * 
 * cdef class ReactorBase:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxReactorBase] _reactor
 *     cdef CxxReactorBase* rbase
 */
struct __pyx_obj_7cantera_7reactor_ReactorBase {
  PyObject_HEAD
  std::shared_ptr<Cantera::ReactorBase>  _reactor;
  Cantera::ReactorBase *rbase;
  PyObject *_thermo;
  PyObject *_inlets;
  PyObject *_outlets;
  PyObject *_walls;
  PyObject *_surfaces;
  PyObject *_weakref_proxy;
};


/* "cantera/reactor.pxd":229
 *     cdef object _weakref_proxy
 * 
 * cdef class Reactor(ReactorBase):             # <<<<<<<<<<<<<<
 *     cdef CxxReactor* reactor
 *     cdef object _kinetics
 */
struct __pyx_obj_7cantera_7reactor_Reactor {
  struct __pyx_obj_7cantera_7reactor_ReactorBase __pyx_base;
  Cantera::Reactor *reactor;
  PyObject *_kinetics;
};


/* "cantera/reactor.pxd":233
 *     cdef object _kinetics
 * 
 * cdef class MoleReactor(Reactor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_7reactor_MoleReactor {
  struct __pyx_obj_7cantera_7reactor_Reactor __pyx_base;
};


/* "cantera/reactor.pxd":236
 *     pass
 * 
 * cdef class Reservoir(ReactorBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_7reactor_Reservoir {
  struct __pyx_obj_7cantera_7reactor_ReactorBase __pyx_base;
};


/* "cantera/reactor.pxd":239
 *     pass
 * 
 * cdef class ConstPressureReactor(Reactor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_7reactor_ConstPressureReactor {
  struct __pyx_obj_7cantera_7reactor_Reactor __pyx_base;
};


/* "cantera/reactor.pxd":242
 *     pass
 * 
 * cdef class ConstPressureMoleReactor(Reactor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_7reactor_ConstPressureMoleReactor {
  struct __pyx_obj_7cantera_7reactor_Reactor __pyx_base;
};


/* "cantera/reactor.pxd":245
 *     pass
 * 
 * cdef class IdealGasReactor(Reactor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_7reactor_IdealGasReactor {
  struct __pyx_obj_7cantera_7reactor_Reactor __pyx_base;
};


/* "cantera/reactor.pxd":248
 *     pass
 * 
 * cdef class IdealGasConstPressureReactor(Reactor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_7reactor_IdealGasConstPressureReactor {
  struct __pyx_obj_7cantera_7reactor_Reactor __pyx_base;
};


/* "cantera/reactor.pxd":251
 *     pass
 * 
 * cdef class FlowReactor(Reactor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_7reactor_FlowReactor {
  struct __pyx_obj_7cantera_7reactor_Reactor __pyx_base;
};


/* "cantera/reactor.pxd":254
 *     pass
 * 
 * cdef class ExtensibleReactor(Reactor):             # <<<<<<<<<<<<<<
 *     cdef public _delegates
 *     cdef CxxReactorAccessor* accessor
 */
struct __pyx_obj_7cantera_7reactor_ExtensibleReactor {
  struct __pyx_obj_7cantera_7reactor_Reactor __pyx_base;
  PyObject *_delegates;
  Cantera::ReactorAccessor *accessor;
};


/* "cantera/reactor.pxd":258
 *     cdef CxxReactorAccessor* accessor
 * 
 * cdef class ReactorSurface:             # <<<<<<<<<<<<<<
 *     cdef CxxReactorSurface* surface
 *     cdef Kinetics _kinetics
 */
struct __pyx_obj_7cantera_7reactor_ReactorSurface {
  PyObject_HEAD
  Cantera::ReactorSurface *surface;
  struct __pyx_obj_7cantera_8kinetics_Kinetics *_kinetics;
};


/* "cantera/reactor.pxd":262
 *     cdef Kinetics _kinetics
 * 
 * cdef class WallBase:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxWallBase] _wall
 *     cdef CxxWallBase* wall
 */
struct __pyx_obj_7cantera_7reactor_WallBase {
  PyObject_HEAD
  std::shared_ptr<Cantera::WallBase>  _wall;
  Cantera::WallBase *wall;
  PyObject *_velocity_func;
  PyObject *_heat_flux_func;
  struct __pyx_obj_7cantera_7reactor_ReactorBase *_left_reactor;
  struct __pyx_obj_7cantera_7reactor_ReactorBase *_right_reactor;
  PyObject *name;
};


/* "cantera/reactor.pxd":271
 *     cdef str name
 * 
 * cdef class Wall(WallBase):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_7reactor_Wall {
  struct __pyx_obj_7cantera_7reactor_WallBase __pyx_base;
};


/* "cantera/reactor.pxd":274
 *     pass
 * 
 * cdef class FlowDevice:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxFlowDevice] _dev
 *     cdef CxxFlowDevice* dev
 */
struct __pyx_obj_7cantera_7reactor_FlowDevice {
  PyObject_HEAD
  std::shared_ptr<Cantera::FlowDevice>  _dev;
  Cantera::FlowDevice *dev;
  struct __pyx_obj_7cantera_5func1_Func1 *_rate_func;
  struct __pyx_obj_7cantera_5func1_Func1 *_time_func;
  PyObject *name;
  struct __pyx_obj_7cantera_7reactor_ReactorBase *_upstream;
  struct __pyx_obj_7cantera_7reactor_ReactorBase *_downstream;
};


/* "cantera/reactor.pxd":283
 *     cdef ReactorBase _downstream
 * 
 * cdef class MassFlowController(FlowDevice):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_7reactor_MassFlowController {
  struct __pyx_obj_7cantera_7reactor_FlowDevice __pyx_base;
};


/* "cantera/reactor.pxd":286
 *     pass
 * 
 * cdef class Valve(FlowDevice):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_7reactor_Valve {
  struct __pyx_obj_7cantera_7reactor_FlowDevice __pyx_base;
};


/* "cantera/reactor.pxd":289
 *     pass
 * 
 * cdef class PressureController(FlowDevice):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7cantera_7reactor_PressureController {
  struct __pyx_obj_7cantera_7reactor_FlowDevice __pyx_base;
};


/* "cantera/reactor.pxd":292
 *     pass
 * 
 * cdef class ReactorNet:             # <<<<<<<<<<<<<<
 *     cdef CxxReactorNet net
 *     cdef list _reactors
 */
struct __pyx_obj_7cantera_7reactor_ReactorNet {
  PyObject_HEAD
  Cantera::ReactorNet net;
  PyObject *_reactors;
};


/* "cantera/reactor.pyx":419
 * 
 * 
 * cdef class IdealGasMoleReactor(Reactor):             # <<<<<<<<<<<<<<
 *     """
 *     A constant volume, zero-dimensional reactor for ideal gas mixtures with a mole
 */
struct __pyx_obj_7cantera_7reactor_IdealGasMoleReactor {
  struct __pyx_obj_7cantera_7reactor_Reactor __pyx_base;
};


/* "cantera/reactor.pyx":435
 *     reactor_type = "IdealGasConstPressureReactor"
 * 
 * cdef class IdealGasConstPressureMoleReactor(Reactor):             # <<<<<<<<<<<<<<
 *     """
 *     A homogeneous, constant pressure, zero-dimensional reactor for ideal gas
 */
struct __pyx_obj_7cantera_7reactor_IdealGasConstPressureMoleReactor {
  struct __pyx_obj_7cantera_7reactor_Reactor __pyx_base;
};


/* "cantera/reactor.pyx":739
 * 
 * 
 * cdef class ExtensibleIdealGasReactor(ExtensibleReactor):             # <<<<<<<<<<<<<<
 *     """
 *     A variant of `ExtensibleReactor` where the base behavior corresponds to the
 */
struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasReactor {
  struct __pyx_obj_7cantera_7reactor_ExtensibleReactor __pyx_base;
};


/* "cantera/reactor.pyx":747
 * 
 * 
 * cdef class ExtensibleConstPressureReactor(ExtensibleReactor):             # <<<<<<<<<<<<<<
 *     """
 *     A variant of `ExtensibleReactor` where the base behavior corresponds to the
 */
struct __pyx_obj_7cantera_7reactor_ExtensibleConstPressureReactor {
  struct __pyx_obj_7cantera_7reactor_ExtensibleReactor __pyx_base;
};


/* "cantera/reactor.pyx":755
 * 
 * 
 * cdef class ExtensibleIdealGasConstPressureReactor(ExtensibleReactor):             # <<<<<<<<<<<<<<
 *     """
 *     A variant of `ExtensibleReactor` where the base behavior corresponds to the
 */
struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor {
  struct __pyx_obj_7cantera_7reactor_ExtensibleReactor __pyx_base;
};


/* "cantera/reactor.pyx":763
 * 
 * 
 * cdef class ExtensibleMoleReactor(ExtensibleReactor):             # <<<<<<<<<<<<<<
 *     """
 *     A variant of `ExtensibleReactor` where the base behavior corresponds to the
 */
struct __pyx_obj_7cantera_7reactor_ExtensibleMoleReactor {
  struct __pyx_obj_7cantera_7reactor_ExtensibleReactor __pyx_base;
};


/* "cantera/reactor.pyx":773
 * 
 * 
 * cdef class ExtensibleIdealGasMoleReactor(ExtensibleReactor):             # <<<<<<<<<<<<<<
 *     """
 *     A variant of `ExtensibleReactor` where the base behavior corresponds to the
 */
struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasMoleReactor {
  struct __pyx_obj_7cantera_7reactor_ExtensibleReactor __pyx_base;
};


/* "cantera/reactor.pyx":783
 * 
 * 
 * cdef class ExtensibleConstPressureMoleReactor(ExtensibleReactor):             # <<<<<<<<<<<<<<
 *     """
 *     A variant of `ExtensibleReactor` where the base behavior corresponds to the
 */
struct __pyx_obj_7cantera_7reactor_ExtensibleConstPressureMoleReactor {
  struct __pyx_obj_7cantera_7reactor_ExtensibleReactor __pyx_base;
};


/* "cantera/reactor.pyx":793
 * 
 * 
 * cdef class ExtensibleIdealGasConstPressureMoleReactor(ExtensibleReactor):             # <<<<<<<<<<<<<<
 *     """
 *     A variant of `ExtensibleReactor` where the base behavior corresponds to the
 */
struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor {
  struct __pyx_obj_7cantera_7reactor_ExtensibleReactor __pyx_base;
};



/* "func1.pxd":46
 * 
 * 
 * cdef class Func1:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxFunc1] _func
 *     cdef CxxFunc1* func
 */

struct __pyx_vtabstruct_7cantera_5func1_Func1 {
  void (*_set_callback)(struct __pyx_obj_7cantera_5func1_Func1 *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_7cantera_5func1_Func1 *__pyx_vtabptr_7cantera_5func1_Func1;


/* "units.pxd":42
 * 
 * 
 * cdef class Units:             # <<<<<<<<<<<<<<
 *     cdef CxxUnits units
 *     @staticmethod
 */

struct __pyx_vtabstruct_7cantera_5units_Units {
  struct __pyx_obj_7cantera_5units_Units *(*copy)(Cantera::Units);
};
static struct __pyx_vtabstruct_7cantera_5units_Units *__pyx_vtabptr_7cantera_5units_Units;


/* "units.pxd":47
 *     cdef Units copy(CxxUnits)
 * 
 * cdef class UnitStack:             # <<<<<<<<<<<<<<
 *     cdef CxxUnitStack stack
 *     @staticmethod
 */

struct __pyx_vtabstruct_7cantera_5units_UnitStack {
  struct __pyx_obj_7cantera_5units_UnitStack *(*copy)(Cantera::UnitStack const &);
};
static struct __pyx_vtabstruct_7cantera_5units_UnitStack *__pyx_vtabptr_7cantera_5units_UnitStack;


/* "units.pxd":53
 * 
 * 
 * cdef class UnitSystem:             # <<<<<<<<<<<<<<
 *     cdef _set_unitSystem(self, shared_ptr[CxxUnitSystem] units)
 *     cdef shared_ptr[CxxUnitSystem] _unitsystem
 */

struct __pyx_vtabstruct_7cantera_5units_UnitSystem {
  PyObject *(*_set_unitSystem)(struct __pyx_obj_7cantera_5units_UnitSystem *, std::shared_ptr<Cantera::UnitSystem> );
};
static struct __pyx_vtabstruct_7cantera_5units_UnitSystem *__pyx_vtabptr_7cantera_5units_UnitSystem;


/* "thermo.pxd":259
 * 
 * 
 * cdef class Species:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[CxxSpecies] _species
 *     cdef CxxSpecies* species
 */

struct __pyx_vtabstruct_7cantera_6thermo_Species {
  PyObject *(*_assign)(struct __pyx_obj_7cantera_6thermo_Species *, std::shared_ptr<Cantera::Species> );
};
static struct __pyx_vtabstruct_7cantera_6thermo_Species *__pyx_vtabptr_7cantera_6thermo_Species;


/* "thermo.pxd":266
 *     cdef _assign(self, shared_ptr[CxxSpecies] other)
 * 
 * cdef class ThermoPhase(_SolutionBase):             # <<<<<<<<<<<<<<
 *     cdef double _mass_factor(self)
 *     cdef double _mole_factor(self)
 */

struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase {
  double (*_mass_factor)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *);
  double (*_mole_factor)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *);
  int (*element_index)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, PyObject *, int __pyx_skip_dispatch);
  int (*species_index)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, PyObject *, int __pyx_skip_dispatch);
  PyArrayObject *(*_getArray1)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, __pyx_t_7cantera_6thermo_thermoMethod1d);
  void (*_setArray1)(struct __pyx_obj_7cantera_6thermo_ThermoPhase *, __pyx_t_7cantera_6thermo_thermoMethod1d, PyObject *);
};
static struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase *__pyx_vtabptr_7cantera_6thermo_ThermoPhase;


/* "thermo.pxd":276
 *     cdef public object _enable_plasma
 * 
 * cdef class InterfacePhase(ThermoPhase):             # <<<<<<<<<<<<<<
 *     cdef CxxSurfPhase* surf
 */

struct __pyx_vtabstruct_7cantera_6thermo_InterfacePhase {
  struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase __pyx_base;
};
static struct __pyx_vtabstruct_7cantera_6thermo_InterfacePhase *__pyx_vtabptr_7cantera_6thermo_InterfacePhase;


/* "_utils.pxd":96
 *     cdef void CxxSetLogger "setLogger" (CxxPythonLogger*)
 * 
 * cdef class AnyMap(dict):             # <<<<<<<<<<<<<<
 *     cdef _set_CxxUnitSystem(self, shared_ptr[CxxUnitSystem] units)
 *     cdef UnitSystem unitsystem
 */

struct __pyx_vtabstruct_7cantera_6_utils_AnyMap {
  PyObject *(*_set_CxxUnitSystem)(struct __pyx_obj_7cantera_6_utils_AnyMap *, std::shared_ptr<Cantera::UnitSystem> );
};
static struct __pyx_vtabstruct_7cantera_6_utils_AnyMap *__pyx_vtabptr_7cantera_6_utils_AnyMap;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* MoveIfSupported.proto */
#if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* AssertionsEnabled.proto */
#define __Pyx_init_assertions_enabled()
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __pyx_assertions_enabled() (1)
#elif PY_VERSION_HEX < 0x03080000  ||  CYTHON_COMPILING_IN_PYPY  ||  defined(Py_LIMITED_API)
  #define __pyx_assertions_enabled() (!Py_OptimizeFlag)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030900A6
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  #undef __Pyx_init_assertions_enabled
  static void __Pyx_init_assertions_enabled(void) {
    __pyx_assertions_enabled_flag = ! _PyInterpreterState_GetConfig(__Pyx_PyThreadState_Current->interp)->optimization_level;
  }
#else
  #define __pyx_assertions_enabled() (!Py_OptimizeFlag)
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_0
#define __PYX_HAVE_RT_ImportType_proto_3_0_0
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_0(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_0(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_0 {
   __Pyx_ImportType_CheckSize_Error_3_0_0 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_0 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_0 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_0(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_0 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CStringEquals.proto */
static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_0_0(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/

/* Module declarations from "libcpp.vector" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.map" */

/* Module declarations from "libcpp.cast" */

/* Module declarations from "libcpp.pair" */

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.functional" */

/* Module declarations from "libcpp.memory" */

/* Module declarations from "cpython.version" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "cpython.module" */

/* Module declarations from "cpython.mem" */

/* Module declarations from "cpython.tuple" */

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.sequence" */

/* Module declarations from "cpython.mapping" */

/* Module declarations from "cpython.iterator" */

/* Module declarations from "cpython.number" */

/* Module declarations from "cpython.int" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.bool" */

/* Module declarations from "cpython.long" */

/* Module declarations from "cpython.float" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.complex" */

/* Module declarations from "cpython.string" */

/* Module declarations from "cpython.unicode" */

/* Module declarations from "cpython.pyport" */

/* Module declarations from "cpython.dict" */

/* Module declarations from "cpython.instance" */

/* Module declarations from "cpython.function" */

/* Module declarations from "cpython.method" */

/* Module declarations from "cpython.weakref" */

/* Module declarations from "cpython.getargs" */

/* Module declarations from "cpython.pythread" */

/* Module declarations from "cpython.pystate" */

/* Module declarations from "cpython.cobject" */

/* Module declarations from "cpython.oldbuffer" */

/* Module declarations from "cpython.set" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "cpython.bytes" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "cpython.contextvars" */

/* Module declarations from "cpython" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "cantera.ctcxx" */

/* Module declarations from "cantera.func1" */

/* Module declarations from "cantera.units" */

/* Module declarations from "cantera.delegator" */
static int (*__pyx_f_7cantera_9delegator_assign_delegates)(PyObject *, Cantera::Delegator *); /*proto*/

/* Module declarations from "cantera.solutionbase" */

/* Module declarations from "cantera.kinetics" */
static PyObject *(*__pyx_f_7cantera_8kinetics_get_from_sparse)(Eigen::SparseMatrix<double> &, int, int); /*proto*/

/* Module declarations from "cantera.preconditioners" */

/* Module declarations from "cantera.thermo" */

/* Module declarations from "libcpp.unordered_map" */

/* Module declarations from "cantera._utils" */
static std::string (*__pyx_f_7cantera_6_utils_stringify)(PyObject *); /*proto*/
static PyObject *(*__pyx_f_7cantera_6_utils_pystr)(std::string); /*proto*/
static __pyx_t_7cantera_5ctcxx_Composition (*__pyx_f_7cantera_6_utils_comp_map)(PyObject *); /*proto*/
static Cantera::AnyMap (*__pyx_f_7cantera_6_utils_py_to_anymap)(PyObject *, struct __pyx_opt_args_7cantera_6_utils_py_to_anymap *__pyx_optional_args); /*proto*/
static PyObject *(*__pyx_f_7cantera_6_utils_anymap_to_py)(Cantera::AnyMap &); /*proto*/

/* Module declarations from "cantera.reactor" */
/* #### Code section: typeinfo ### */
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_double_t = { "double_t", NULL, sizeof(__pyx_t_5numpy_double_t), { 0 }, 0, 'R', 0, 0 };
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "cantera.reactor"
extern int __pyx_module_is_main_cantera__reactor;
int __pyx_module_is_main_cantera__reactor = 0;

/* Implementation of "cantera.reactor" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_DeprecationWarning;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_A[] = "A";
static const char __pyx_k_K[] = "K";
static const char __pyx_k_Q[] = "Q";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_U[] = "U";
static const char __pyx_k_Y[] = "Y";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_n1[] = "n1";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_on[] = "on";
static const char __pyx_k__20[] = ")";
static const char __pyx_k__23[] = "*";
static const char __pyx_k__24[] = ".";
static const char __pyx_k_dky[] = "dky";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_kin[] = "kin";
static const char __pyx_k_off[] = "off";
static const char __pyx_k_Real[] = "Real";
static const char __pyx_k_Wall[] = "Wall";
static const char __pyx_k__125[] = "?";
static const char __pyx_k_area[] = "area";
static const char __pyx_k_atol[] = "atol";
static const char __pyx_k_copy[] = "__copy__";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_eval[] = "eval";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_left[] = "left";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mdot[] = "mdot";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_ones[] = "ones";
static const char __pyx_k_qdot[] = "qdot";
static const char __pyx_k_rtol[] = "rtol";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_vdot[] = "vdot";
static const char __pyx_k_void[] = "void()";
static const char __pyx_k_wall[] = "wall";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_0___1[] = "{0}_{1}";
static const char __pyx_k_Valve[] = "Valve";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_inlet[] = "inlet";
static const char __pyx_k_limit[] = "limit";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_right[] = "right";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_utils[] = "_utils";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_energy[] = "energy";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_insert[] = "insert";
static const char __pyx_k_linalg[] = "linalg";
static const char __pyx_k_master[] = "master";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_n_vars[] = "n_vars";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_outlet[] = "outlet";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_thermo[] = "thermo";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_Reactor[] = "Reactor";
static const char __pyx_k_Wall__0[] = "Wall_{0}";
static const char __pyx_k_advance[] = "advance";
static const char __pyx_k_density[] = "density";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_install[] = "install";
static const char __pyx_k_maximum[] = "maximum";
static const char __pyx_k_numbers[] = "_numbers";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_primary[] = "primary";
static const char __pyx_k_reactor[] = "reactor";
static const char __pyx_k_WallBase[] = "WallBase";
static const char __pyx_k_add_wall[] = "_add_wall";
static const char __pyx_k_contents[] = "contents";
static const char __pyx_k_getState[] = "getState";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_kinetics[] = "kinetics";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_reactors[] = "reactors";
static const char __pyx_k_residual[] = "residual";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_solution[] = "solution";
static const char __pyx_k_upstream[] = "upstream";
static const char __pyx_k_velocity[] = "velocity";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_Reservoir[] = "Reservoir";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_add_inlet[] = "_add_inlet";
static const char __pyx_k_component[] = "component";
static const char __pyx_k_coverages[] = "coverages";
static const char __pyx_k_evalWalls[] = "evalWalls";
static const char __pyx_k_get_state[] = "get_state";
static const char __pyx_k_heat_flux[] = "heat_flux";
static const char __pyx_k_install_2[] = "_install";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_max_steps[] = "max_steps";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_n_species[] = "n_species";
static const char __pyx_k_numbers_2[] = "numbers";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_residuals[] = "residuals";
static const char __pyx_k_syncState[] = "syncState";
static const char __pyx_k_void_bool[] = "void(bool)";
static const char __pyx_k_wall_type[] = "wall_type";
static const char __pyx_k_FlowDevice[] = "FlowDevice";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ReactorNet[] = "ReactorNet";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_add_outlet[] = "_add_outlet";
static const char __pyx_k_downstream[] = "downstream";
static const char __pyx_k_eval_walls[] = "eval_walls";
static const char __pyx_k_initialize[] = "initialize";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_references[] = "_references";
static const char __pyx_k_set_master[] = "set_master";
static const char __pyx_k_sync_state[] = "sync_state";
static const char __pyx_k_FlowReactor[] = "FlowReactor";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MoleReactor[] = "MoleReactor";
static const char __pyx_k_ReactorBase[] = "ReactorBase";
static const char __pyx_k_add_reactor[] = "add_reactor";
static const char __pyx_k_apply_limit[] = "apply_limit";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_defaultdict[] = "defaultdict";
static const char __pyx_k_sensitivity[] = "sensitivity";
static const char __pyx_k_updateState[] = "updateState";
static const char __pyx_k_valve_coeff[] = "valve_coeff";
static const char __pyx_k_void_double[] = "void(double)";
static const char __pyx_k_CanteraError[] = "CanteraError";
static const char __pyx_k_WeakrefProxy[] = "_WeakrefProxy";
static const char __pyx_k_density_mass[] = "density_mass";
static const char __pyx_k_evalSurfaces[] = "evalSurfaces";
static const char __pyx_k_initial_time[] = "initial_time";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_reactor_type[] = "reactor_type";
static const char __pyx_k_reinitialize[] = "reinitialize";
static const char __pyx_k_set_velocity[] = "set_velocity";
static const char __pyx_k_speciesIndex[] = "speciesIndex";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_update_state[] = "update_state";
static const char __pyx_k_WallBase_qdot[] = "WallBase.qdot";
static const char __pyx_k_WallBase_vdot[] = "WallBase.vdot";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_componentName[] = "componentName";
static const char __pyx_k_defaultdict_2[] = "_defaultdict";
static const char __pyx_k_eval_surfaces[] = "eval_surfaces";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_sensitivities[] = "sensitivities";
static const char __pyx_k_set_heat_flux[] = "set_heat_flux";
static const char __pyx_k_size_t_string[] = "size_t(string)";
static const char __pyx_k_species_index[] = "species_index";
static const char __pyx_k_string_size_t[] = "string(size_t)";
static const char __pyx_k_time_function[] = "time_function";
static const char __pyx_k_void_double_2[] = "void(double*)";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_ReactorSurface[] = "ReactorSurface";
static const char __pyx_k_Reactor_insert[] = "Reactor.insert";
static const char __pyx_k_componentIndex[] = "componentIndex";
static const char __pyx_k_component_name[] = "component_name";
static const char __pyx_k_energy_enabled[] = "energy_enabled";
static const char __pyx_k_get_derivative[] = "get_derivative";
static const char __pyx_k_mass_flow_rate[] = "mass_flow_rate";
static const char __pyx_k_pressure_coeff[] = "pressure_coeff";
static const char __pyx_k_previous_state[] = "previous_state";
static const char __pyx_k_reactor_counts[] = "_reactor_counts";
static const char __pyx_k_IdealGasReactor[] = "IdealGasReactor";
static const char __pyx_k_ReactorNet_step[] = "ReactorNet.step";
static const char __pyx_k_cantera_reactor[] = "cantera.reactor";
static const char __pyx_k_component_index[] = "component_index";
static const char __pyx_k_flowdevice_type[] = "flowdevice_type";
static const char __pyx_k_mass_flow_coeff[] = "mass_flow_coeff";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_updateConnected[] = "updateConnected";
static const char __pyx_k_max_state_values[] = "max_state_values";
static const char __pyx_k_return_residuals[] = "return_residuals";
static const char __pyx_k_set_initial_time[] = "set_initial_time";
static const char __pyx_k_update_connected[] = "update_connected";
static const char __pyx_k_ExtensibleReactor[] = "ExtensibleReactor";
static const char __pyx_k_ReactorNet___copy[] = "ReactorNet.__copy__";
static const char __pyx_k_Reactor_get_state[] = "Reactor.get_state";
static const char __pyx_k_WallBase__install[] = "WallBase._install";
static const char __pyx_k_Wall_set_velocity[] = "Wall.set_velocity";
static const char __pyx_k_ascontiguousarray[] = "ascontiguousarray";
static const char __pyx_k_pressure_function[] = "pressure_function";
static const char __pyx_k_set_advance_limit[] = "set_advance_limit";
static const char __pyx_k_set_time_function[] = "set_time_function";
static const char __pyx_k_DeprecationWarning[] = "DeprecationWarning";
static const char __pyx_k_MassFlowController[] = "MassFlowController";
static const char __pyx_k_PressureController[] = "PressureController";
static const char __pyx_k_ReactorBase___copy[] = "ReactorBase.__copy__";
static const char __pyx_k_ReactorBase_insert[] = "ReactorBase.insert";
static const char __pyx_k_ReactorNet_advance[] = "ReactorNet.advance";
static const char __pyx_k_Residual_threshold[] = "Residual threshold (";
static const char __pyx_k_Wall_set_heat_flux[] = "Wall.set_heat_flux";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_linear_solver_type[] = "linear_solver_type";
static const char __pyx_k_residual_threshold[] = "residual_threshold";
static const char __pyx_k_updateSurfaceState[] = "updateSurfaceState";
static const char __pyx_k_FlowDevice__install[] = "FlowDevice._install";
static const char __pyx_k_IdealGasMoleReactor[] = "IdealGasMoleReactor";
static const char __pyx_k_No_such_component_r[] = "No such component: {!r}";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_ReactorNet___reduce[] = "ReactorNet.__reduce__";
static const char __pyx_k_cantera_reactor_pyx[] = "cantera/reactor.pyx";
static const char __pyx_k_delegatable_methods[] = "delegatable_methods";
static const char __pyx_k_heat_transfer_coeff[] = "heat_transfer_coeff";
static const char __pyx_k_ConstPressureReactor[] = "ConstPressureReactor";
static const char __pyx_k_ReactorBase___reduce[] = "ReactorBase.__reduce__";
static const char __pyx_k_ReactorNet_get_state[] = "ReactorNet.get_state";
static const char __pyx_k_Wall___reduce_cython[] = "Wall.__reduce_cython__";
static const char __pyx_k_expansion_rate_coeff[] = "expansion_rate_coeff";
static const char __pyx_k_n_sensitivity_params[] = "n_sensitivity_params";
static const char __pyx_k_restore_thermo_state[] = "restore_thermo_state";
static const char __pyx_k_update_surface_state[] = "update_surface_state";
static const char __pyx_k_ExtensibleMoleReactor[] = "ExtensibleMoleReactor";
static const char __pyx_k_ReactorBase__add_wall[] = "ReactorBase._add_wall";
static const char __pyx_k_ReactorBase_syncState[] = "ReactorBase.syncState";
static const char __pyx_k_ReactorNet_initialize[] = "ReactorNet.initialize";
static const char __pyx_k_Valve___reduce_cython[] = "Valve.__reduce_cython__";
static const char __pyx_k_restore_surface_state[] = "restore_surface_state";
static const char __pyx_k_set_pressure_function[] = "set_pressure_function";
static const char __pyx_k_ReactorBase__add_inlet[] = "ReactorBase._add_inlet";
static const char __pyx_k_ReactorNet_add_reactor[] = "ReactorNet.add_reactor";
static const char __pyx_k_ReactorNet_sensitivity[] = "ReactorNet.sensitivity";
static const char __pyx_k_ReactorSurface_install[] = "ReactorSurface.install";
static const char __pyx_k_Reactor_component_name[] = "Reactor.component_name";
static const char __pyx_k_Wall___setstate_cython[] = "Wall.__setstate_cython__";
static const char __pyx_k_global_component_index[] = "global_component_index";
static const char __pyx_k_ReactorBase__add_outlet[] = "ReactorBase._add_outlet";
static const char __pyx_k_ReactorNet_reinitialize[] = "ReactorNet.reinitialize";
static const char __pyx_k_Reactor_component_index[] = "Reactor.component_index";
static const char __pyx_k_Valve___setstate_cython[] = "Valve.__setstate_cython__";
static const char __pyx_k_advance_to_steady_state[] = "advance_to_steady_state";
static const char __pyx_k_ConstPressureMoleReactor[] = "ConstPressureMoleReactor";
static const char __pyx_k_ReactorNet_sensitivities[] = "ReactorNet.sensitivities";
static const char __pyx_k_WallBase___reduce_cython[] = "WallBase.__reduce_cython__";
static const char __pyx_k_add_sensitivity_reaction[] = "add_sensitivity_reaction";
static const char __pyx_k_ExtensibleIdealGasReactor[] = "ExtensibleIdealGasReactor";
static const char __pyx_k_ReactorNet_component_name[] = "ReactorNet.component_name";
static const char __pyx_k_ReactorNet_get_derivative[] = "ReactorNet.get_derivative";
static const char __pyx_k_Reactor___init___line_174[] = "Reactor.__init__ (line 174)";
static const char __pyx_k_Reactor_set_advance_limit[] = "Reactor.set_advance_limit";
static const char __pyx_k_precon_linear_solver_type[] = "precon_linear_solver_type";
static const char __pyx_k_void_double_double_double[] = "void(double, double*, double*)";
static const char __pyx_k_FlowDevice___reduce_cython[] = "FlowDevice.__reduce_cython__";
static const char __pyx_k_PressureController_primary[] = "PressureController.primary";
static const char __pyx_k_WallBase___setstate_cython[] = "WallBase.__setstate_cython__";
static const char __pyx_k_sensitivity_parameter_name[] = "sensitivity_parameter_name";
static const char __pyx_k_No_kinetics_manager_present[] = "No kinetics manager present";
static const char __pyx_k_ReactorNet_set_initial_time[] = "ReactorNet.set_initial_time";
static const char __pyx_k_getSurfaceInitialConditions[] = "getSurfaceInitialConditions";
static const char __pyx_k_should_be_below_solver_rtol[] = ") should be below solver rtol (";
static const char __pyx_k_void_double_double_double_2[] = "void(double*,double*,double*)";
static const char __pyx_k_FlowDevice___setstate_cython[] = "FlowDevice.__setstate_cython__";
static const char __pyx_k_FlowDevice_set_time_function[] = "FlowDevice.set_time_function";
static const char __pyx_k_IdealGasConstPressureReactor[] = "IdealGasConstPressureReactor";
static const char __pyx_k_ExtensibleIdealGasMoleReactor[] = "ExtensibleIdealGasMoleReactor";
static const char __pyx_k_PressureController_set_master[] = "PressureController.set_master";
static const char __pyx_k_ExtensibleConstPressureReactor[] = "ExtensibleConstPressureReactor";
static const char __pyx_k_FlowDevice_time_function___get[] = "FlowDevice.time_function.__get__ (line 1239)";
static const char __pyx_k_ReactorSurface___reduce_cython[] = "ReactorSurface.__reduce_cython__";
static const char __pyx_k_Reactor_object_is_not_copyable[] = "Reactor object is not copyable";
static const char __pyx_k_array_must_be_of_length_n_vars[] = "array must be of length n_vars";
static const char __pyx_k_get_surface_initial_conditions[] = "get_surface_initial_conditions";
static const char __pyx_k_FlowDevice_set_time_function_To[] = "FlowDevice.set_time_function: To be removed after Cantera 3.0; replaced by 'time_function'.";
static const char __pyx_k_Maximum_number_of_steps_reached[] = "Maximum number of steps reached before convergence below maximum residual";
static const char __pyx_k_Reactor_add_sensitivity_species[] = "Reactor.add_sensitivity_species_enthalpy";
static const char __pyx_k_Reactor_object_is_not_picklable[] = "Reactor object is not picklable";
static const char __pyx_k_Set_the_relationship_between_ma[] = "\n        Set the relationship between mass flow rate and the pressure drop across a\n        flow device. The mass flow rate [kg/s] is calculated given the pressure\n        drop [Pa] and a coefficient set by a flow device specific function.\n        The calculation of mass flow rate depends to the flow device.\n\n        >>> F = FlowDevice(res1, reactor1)\n        >>> F.set_pressure_function(lambda dP: dP**2)\n\n        where FlowDevice is either a Valve or PressureController object.\n\n        .. deprecated:: 3.0\n            To be removed after Cantera 3.0. Use property ``pressure_function`` instead.\n        ";
static const char __pyx_k_Set_the_time_dependence_of_a_fl[] = "\n        Set the time dependence of a flow device. The mass flow rate [kg/s] is\n        calculated for a flow device, and multiplied by a function of time.\n        The calculation of mass flow rate depends to the flow device.\n\n        >>> F = FlowDevice(res1, reactor1)\n        >>> F.set_time_function(lambda t: exp(-10 * (t - 0.5)**2))\n\n        where FlowDevice is either a Valve or MassFlowController object.\n\n        .. deprecated:: 3.0\n            To be removed after Cantera 3.0. Use property ``time_function`` instead.\n        ";
static const char __pyx_k_The_relationship_between_mass_f[] = "\n        The relationship between mass flow rate and the pressure drop across a flow\n        device. The mass flow rate [kg/s] is calculated given the pressure drop [Pa] and\n        a coefficient set by a flow device specific function. Unless a user-defined\n        pressure function is provided, the function returns the pressure difference\n        across the device. The calculation of mass flow rate depends on the flow device.\n\n        >>> f = FlowDevice(res1, reactor1)\n        >>> f.pressure_function = lambda dP: dP**2\n\n        where `FlowDevice` is either a `Valve` or `PressureController` object.\n\n        .. versionadded:: 3.0\n        ";
static const char __pyx_k_The_time_dependence_of_a_flow_d[] = "\n        The time dependence of a flow device. The mass flow rate [kg/s] is calculated\n        for a Flow device, and multiplied by a function of time, which returns 1.0\n        unless a user-defined function is provided. The calculation of mass flow rate\n        depends on the flow device.\n\n        >>> f = FlowDevice(res1, reactor1)\n        >>> f.time_function = lambda t: exp(-10 * (t - 0.5)**2)\n\n        where `FlowDevice` is either a `Valve` or `MassFlowController` object.\n\n        .. versionadded:: 3.0\n        ";
static const char __pyx_k_Wall_set_velocity_To_be_removed[] = "Wall.set_velocity: To be removed after Cantera 3.0; replaced by property 'velocity'.";
static const char __pyx_k_energy_must_be_either_on_or_off[] = "'energy' must be either 'on' or 'off'";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_param_contents_Reactor_contents[] = "\n        :param contents:\n            Reactor contents. If not specified, the reactor is initially empty.\n            In this case, call `insert` to specify the contents.\n        :param name:\n            Used only to identify this reactor in output. If not specified,\n            defaults to ``'Reactor_n'``, where *n* is an integer assigned in\n            the order `Reactor` objects are created.\n        :param energy:\n            Set to ``'on'`` or ``'off'``. If set to ``'off'``, the energy\n            equation is not solved, and the temperature is held at its\n            initial value..\n\n        Some examples showing how to create :class:`Reactor` objects are\n        shown below.\n\n        >>> gas = Solution('gri30.yaml')\n        >>> r1 = Reactor(gas)\n\n        This is equivalent to:\n\n        >>> r1 = Reactor()\n        >>> r1.insert(gas)\n\n        Arguments may be specified using keywords in any order:\n\n        >>> r2 = Reactor(contents=gas, energy='off',\n        ...              name='isothermal_reactor')\n        >>> r3 = Reactor(name='adiabatic_reactor', contents=gas)\n\n        ";
static const char __pyx_k_Can_t_set_coverages_before_assig[] = "Can't set coverages before assigning kinetics manager.";
static const char __pyx_k_ExtensibleConstPressureMoleReact[] = "ExtensibleConstPressureMoleReactor";
static const char __pyx_k_ExtensibleIdealGasConstPressureM[] = "ExtensibleIdealGasConstPressureMoleReactor";
static const char __pyx_k_ExtensibleIdealGasConstPressureR[] = "ExtensibleIdealGasConstPressureReactor";
static const char __pyx_k_ExtensibleReactor_qdot_To_be_rem[] = "ExtensibleReactor.qdot: To be removed in Cantera 3.0; renamed to 'heat_rate'.";
static const char __pyx_k_ExtensibleReactor_restore_surfac[] = "ExtensibleReactor.restore_surface_state";
static const char __pyx_k_ExtensibleReactor_restore_thermo[] = "ExtensibleReactor.restore_thermo_state";
static const char __pyx_k_ExtensibleReactor_vdot_To_be_rem[] = "ExtensibleReactor.vdot: To be removed in Cantera 3.0; renamed to 'expansion_rate'.";
static const char __pyx_k_FlowDevice_pressure_function___g[] = "FlowDevice.pressure_function.__get__ (line 1191)";
static const char __pyx_k_FlowDevice_set_pressure_function[] = "FlowDevice.set_pressure_function: To be removed after Cantera 3.0; replaced by 'pressure_function'.";
static const char __pyx_k_FlowDevice_set_time_function_lin[] = "FlowDevice.set_time_function (line 1266)";
static const char __pyx_k_IdealGasConstPressureMoleReactor[] = "IdealGasConstPressureMoleReactor";
static const char __pyx_k_Incorrect_number_of_site_coverag[] = "Incorrect number of site coverages specified";
static const char __pyx_k_MassFlowController___reduce_cyth[] = "MassFlowController.__reduce_cython__";
static const char __pyx_k_MassFlowController___setstate_cy[] = "MassFlowController.__setstate_cython__";
static const char __pyx_k_PressureController_The_master_ke[] = "PressureController: The 'master' keyword argument is deprecated; use 'primary' instead.";
static const char __pyx_k_PressureController___reduce_cyth[] = "PressureController.__reduce_cython__";
static const char __pyx_k_PressureController___setstate_cy[] = "PressureController.__setstate_cython__";
static const char __pyx_k_PressureController_set_master_To[] = "PressureController.set_master: To be removed after Cantera 3.0; replaced by 'primary'.";
static const char __pyx_k_ReactorNet_advance_to_steady_sta[] = "ReactorNet.advance_to_steady_state";
static const char __pyx_k_ReactorNet_empty_or_not_initiali[] = "ReactorNet empty or not initialized.";
static const char __pyx_k_ReactorNet_global_component_inde[] = "ReactorNet.global_component_index";
static const char __pyx_k_ReactorNet_object_is_not_copyabl[] = "ReactorNet object is not copyable";
static const char __pyx_k_ReactorNet_object_is_not_picklab[] = "ReactorNet object is not picklable";
static const char __pyx_k_ReactorNet_sensitivity_parameter[] = "ReactorNet.sensitivity_parameter_name";
static const char __pyx_k_ReactorNet_set_initial_time_To_b[] = "ReactorNet.set_initial_time: To be removed after Cantera 3.0. Use property 'initial_time' instead.";
static const char __pyx_k_ReactorSurface___setstate_cython[] = "ReactorSurface.__setstate_cython__";
static const char __pyx_k_ReactorSurface_add_sensitivity_r[] = "ReactorSurface.add_sensitivity_reaction";
static const char __pyx_k_Reactor_add_sensitivity_reaction[] = "Reactor.add_sensitivity_reaction";
static const char __pyx_k_Reactor_empty_or_network_not_ini[] = "Reactor empty or network not initialized.";
static const char __pyx_k_Wall_set_heat_flux_To_be_removed[] = "Wall.set_heat_flux: To be removed after Cantera 3.0; replaced by property 'heat_flux'.";
static const char __pyx_k_add_sensitivity_species_enthalpy[] = "add_sensitivity_species_enthalpy";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_FlowDevice_set_pressure_function_2[] = "FlowDevice.set_pressure_function";
static const char __pyx_k_FlowDevice_set_pressure_function_3[] = "FlowDevice.set_pressure_function (line 1219)";
/* #### Code section: decls ### */
static int __pyx_pf_7cantera_7reactor_11ReactorBase___cinit__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_7cantera_7reactor_11ReactorBase_2__init__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_contents, PyObject *__pyx_v_name, PyObject *__pyx_v_volume); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_4insert(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, struct __pyx_obj_7cantera_12solutionbase__SolutionBase *__pyx_v_solution); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_4type___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_4name___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_11ReactorBase_4name_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_6syncState(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_6thermo___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_6volume___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_11ReactorBase_6volume_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_1T___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_7density___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_4mass___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_1Y___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_6inlets___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_7outlets___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_5walls___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_8surfaces___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_8_add_inlet(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, PyObject *__pyx_v_inlet); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_10_add_outlet(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, PyObject *__pyx_v_outlet); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_12_add_wall(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, PyObject *__pyx_v_wall); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_14__reduce__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_16__copy__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_7Reactor___cinit__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_7cantera_7reactor_7Reactor_2__init__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyObject *__pyx_v_contents, PyObject *__pyx_v_name, PyObject *__pyx_v_energy, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_4insert(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, struct __pyx_obj_7cantera_12solutionbase__SolutionBase *__pyx_v_solution); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_8kinetics___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_17chemistry_enabled___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_7Reactor_17chemistry_enabled_2__set__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_14energy_enabled___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_7Reactor_14energy_enabled_2__set__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyBoolObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_6add_sensitivity_reaction(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_8add_sensitivity_species_enthalpy(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_10component_index(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_12component_name(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_6n_vars___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_14get_state(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_8jacobian___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_26finite_difference_jacobian___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_16set_advance_limit(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_limit); /* proto */
static int __pyx_pf_7cantera_7reactor_11FlowReactor_14mass_flow_rate___set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_4area___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_11FlowReactor_4area_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_area); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_atol___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_atol_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_atol); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_rtol); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_nsteps); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_nsteps); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_sa_to_vol); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_5speed___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_8distance___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor___cinit__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_2__init__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_6n_vars___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_6n_vars_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_4vdot___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_4vdot_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_vdot); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_14expansion_rate___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_14expansion_rate_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_vdot); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_4qdot___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_4qdot_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_qdot); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_9heat_rate___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_9heat_rate_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_qdot); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_4restore_thermo_state(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_6restore_surface_state(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_10_delegates___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_10_delegates_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_10_delegates_4__del__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_14ReactorSurface___cinit__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self); /* proto */
static void __pyx_pf_7cantera_7reactor_14ReactorSurface_2__dealloc__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_14ReactorSurface_4__init__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, PyObject *__pyx_v_kin, struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_r, PyObject *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_6install(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_r); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_4area___get__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_14ReactorSurface_4area_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, PyObject *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_8kinetics___get__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_14ReactorSurface_8kinetics_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, struct __pyx_obj_7cantera_8kinetics_Kinetics *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_9coverages___get__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_14ReactorSurface_9coverages_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, PyObject *__pyx_v_coverages); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_8add_sensitivity_reaction(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, int __pyx_v_m); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cantera_7reactor_8WallBase___cinit__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_7cantera_7reactor_8WallBase_2__init__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, PyObject *__pyx_v_left, PyObject *__pyx_v_right, PyObject *__pyx_v_name, PyObject *__pyx_v_A, PyObject *__pyx_v_K, PyObject *__pyx_v_U, PyObject *__pyx_v_Q, PyObject *__pyx_v_velocity); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_4_install(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_left, struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_right); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_4type___get__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_4area___get__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_8WallBase_4area_2__set__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_14expansion_rate___get__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_6vdot(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_9heat_rate___get__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_8qdot(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_4Wall_20expansion_rate_coeff___get__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_4Wall_20expansion_rate_coeff_2__set__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, double __pyx_v_val); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_4Wall_19heat_transfer_coeff___get__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_4Wall_19heat_transfer_coeff_2__set__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_4Wall_10emissivity___get__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_4Wall_10emissivity_2__set__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_4Wall_8velocity___get__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_4Wall_8velocity_2__set__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_4Wall_set_velocity(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_4Wall_9heat_flux___get__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_4Wall_9heat_flux_2__set__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, PyObject *__pyx_v_q); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_4Wall_2set_heat_flux(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, PyObject *__pyx_v_q); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_4Wall_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_4Wall_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cantera_7reactor_10FlowDevice___cinit__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_7cantera_7reactor_10FlowDevice_2__init__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, PyObject *__pyx_v_upstream, PyObject *__pyx_v_downstream, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_4type___get__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_4_install(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_upstream, struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_downstream); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_14mass_flow_rate___get__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_17pressure_function___get__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10FlowDevice_17pressure_function_2__set__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_6set_pressure_function(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_13time_function___get__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10FlowDevice_13time_function_2__set__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_8set_time_function(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cantera_7reactor_18MassFlowController___init__(struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self, PyObject *__pyx_v_upstream, PyObject *__pyx_v_downstream, PyObject *__pyx_v_name, PyObject *__pyx_v_mdot); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_18MassFlowController_15mass_flow_coeff___get__(struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_18MassFlowController_15mass_flow_coeff_2__set__(struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_18MassFlowController_14mass_flow_rate___get__(struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_18MassFlowController_14mass_flow_rate_2__set__(struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_18MassFlowController_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_18MassFlowController_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cantera_7reactor_5Valve___init__(struct __pyx_obj_7cantera_7reactor_Valve *__pyx_v_self, PyObject *__pyx_v_upstream, PyObject *__pyx_v_downstream, PyObject *__pyx_v_name, PyObject *__pyx_v_K); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_5Valve_11valve_coeff___get__(struct __pyx_obj_7cantera_7reactor_Valve *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_5Valve_11valve_coeff_2__set__(struct __pyx_obj_7cantera_7reactor_Valve *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_5Valve_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_Valve *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_5Valve_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_Valve *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cantera_7reactor_18PressureController___init__(struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self, PyObject *__pyx_v_upstream, PyObject *__pyx_v_downstream, PyObject *__pyx_v_name, PyObject *__pyx_v_primary, PyObject *__pyx_v_K, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_18PressureController_14pressure_coeff___get__(struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_18PressureController_14pressure_coeff_2__set__(struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_18PressureController_7primary___get__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_18PressureController_7primary_2__set__(struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_18PressureController_2set_master(struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_d); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_18PressureController_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_18PressureController_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet___init__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_reactors); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_2add_reactor(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_r); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_4advance(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, double __pyx_v_t, PyBoolObject *__pyx_v_apply_limit); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_6step(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_8initialize(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_10reinitialize(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_4time___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_8distance___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_12initial_time___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_12initial_time_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_12set_initial_time(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_13max_time_step___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_13max_time_step_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, double __pyx_v_t); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_18max_err_test_fails___set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyBoolObject *__pyx_v_yesno); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_9max_order___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_9max_order_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_n); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_9max_steps___set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_nsteps); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_9max_steps_2__get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_4rtol___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_4rtol_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_tol); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_4atol___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_4atol_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_tol); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_16rtol_sensitivity___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_16rtol_sensitivity_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_tol); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_16atol_sensitivity___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_16atol_sensitivity_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_tol); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_7verbose___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_7verbose_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyBoolObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_14global_component_index(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_name, int __pyx_v_reactor); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_16component_name(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_18sensitivity(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_component, int __pyx_v_p, int __pyx_v_r); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_20sensitivities(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_22sensitivity_parameter_name(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_p); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_20n_sensitivity_params___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_6n_vars___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_24get_state(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_26get_derivative(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_k); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_14advance_limits___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_14advance_limits_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_limits); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_28advance_to_steady_state(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_max_steps, double __pyx_v_residual_threshold, double __pyx_v_atol, PyBoolObject *__pyx_v_return_residuals); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_30__reduce__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_32__copy__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_14preconditioner___set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, struct __pyx_obj_7cantera_15preconditioners_PreconditionerBase *__pyx_v_precon); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_18linear_solver_type___set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_linear_solver_type); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_18linear_solver_type_2__get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_12solver_stats___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self); /* proto */
static int __pyx_pf_7cantera_7reactor_10ReactorNet_19derivative_settings___set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_settings); /* proto */
static PyObject *__pyx_tp_new_7cantera_7reactor_ReactorBase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cantera_7reactor_Reactor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cantera_7reactor_ExtensibleReactor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cantera_7reactor_ReactorSurface(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cantera_7reactor_WallBase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cantera_7reactor_FlowDevice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7cantera_7reactor_ReactorNet(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_5func1_Func1;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_5units_Units;
  PyTypeObject *__pyx_ptype_7cantera_5units_UnitStack;
  PyTypeObject *__pyx_ptype_7cantera_5units_UnitSystem;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_12solutionbase__SolutionBase;
  PyTypeObject *__pyx_ptype_7cantera_12solutionbase_SolutionArrayBase;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_8kinetics_Kinetics;
  PyTypeObject *__pyx_ptype_7cantera_8kinetics_InterfaceKinetics;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_15preconditioners_PreconditionerBase;
  PyTypeObject *__pyx_ptype_7cantera_15preconditioners_AdaptivePreconditioner;
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_6thermo_Species;
  PyTypeObject *__pyx_ptype_7cantera_6thermo_ThermoPhase;
  PyTypeObject *__pyx_ptype_7cantera_6thermo_InterfacePhase;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cantera_6_utils_AnyMap;
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_7cantera_7reactor_ReactorBase;
  PyObject *__pyx_type_7cantera_7reactor_Reactor;
  PyObject *__pyx_type_7cantera_7reactor_MoleReactor;
  PyObject *__pyx_type_7cantera_7reactor_Reservoir;
  PyObject *__pyx_type_7cantera_7reactor_ConstPressureReactor;
  PyObject *__pyx_type_7cantera_7reactor_ConstPressureMoleReactor;
  PyObject *__pyx_type_7cantera_7reactor_IdealGasReactor;
  PyObject *__pyx_type_7cantera_7reactor_IdealGasConstPressureReactor;
  PyObject *__pyx_type_7cantera_7reactor_FlowReactor;
  PyObject *__pyx_type_7cantera_7reactor_ExtensibleReactor;
  PyObject *__pyx_type_7cantera_7reactor_ReactorSurface;
  PyObject *__pyx_type_7cantera_7reactor_WallBase;
  PyObject *__pyx_type_7cantera_7reactor_Wall;
  PyObject *__pyx_type_7cantera_7reactor_FlowDevice;
  PyObject *__pyx_type_7cantera_7reactor_MassFlowController;
  PyObject *__pyx_type_7cantera_7reactor_Valve;
  PyObject *__pyx_type_7cantera_7reactor_PressureController;
  PyObject *__pyx_type_7cantera_7reactor_ReactorNet;
  PyObject *__pyx_type_7cantera_7reactor_IdealGasMoleReactor;
  PyObject *__pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor;
  PyObject *__pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor;
  PyObject *__pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor;
  PyObject *__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor;
  PyObject *__pyx_type_7cantera_7reactor_ExtensibleMoleReactor;
  PyObject *__pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor;
  PyObject *__pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor;
  PyObject *__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor;
  #endif
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ReactorBase;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_Reactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_MoleReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_Reservoir;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ConstPressureReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_IdealGasReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_FlowReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ExtensibleReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ReactorSurface;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_WallBase;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_Wall;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_FlowDevice;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_MassFlowController;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_Valve;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_PressureController;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ReactorNet;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_IdealGasMoleReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor;
  PyTypeObject *__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor;
  PyObject *__pyx_kp_u_0___1;
  PyObject *__pyx_n_s_A;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_kp_u_Can_t_set_coverages_before_assig;
  PyObject *__pyx_n_s_CanteraError;
  PyObject *__pyx_n_s_ConstPressureMoleReactor;
  PyObject *__pyx_n_u_ConstPressureMoleReactor;
  PyObject *__pyx_n_s_ConstPressureReactor;
  PyObject *__pyx_n_u_ConstPressureReactor;
  PyObject *__pyx_n_s_DeprecationWarning;
  PyObject *__pyx_n_s_ExtensibleConstPressureMoleReact;
  PyObject *__pyx_n_u_ExtensibleConstPressureMoleReact;
  PyObject *__pyx_n_s_ExtensibleConstPressureReactor;
  PyObject *__pyx_n_u_ExtensibleConstPressureReactor;
  PyObject *__pyx_n_s_ExtensibleIdealGasConstPressureM;
  PyObject *__pyx_n_u_ExtensibleIdealGasConstPressureM;
  PyObject *__pyx_n_s_ExtensibleIdealGasConstPressureR;
  PyObject *__pyx_n_u_ExtensibleIdealGasConstPressureR;
  PyObject *__pyx_n_s_ExtensibleIdealGasMoleReactor;
  PyObject *__pyx_n_u_ExtensibleIdealGasMoleReactor;
  PyObject *__pyx_n_s_ExtensibleIdealGasReactor;
  PyObject *__pyx_n_u_ExtensibleIdealGasReactor;
  PyObject *__pyx_n_s_ExtensibleMoleReactor;
  PyObject *__pyx_n_u_ExtensibleMoleReactor;
  PyObject *__pyx_n_s_ExtensibleReactor;
  PyObject *__pyx_n_u_ExtensibleReactor;
  PyObject *__pyx_kp_u_ExtensibleReactor_qdot_To_be_rem;
  PyObject *__pyx_n_s_ExtensibleReactor_restore_surfac;
  PyObject *__pyx_n_s_ExtensibleReactor_restore_thermo;
  PyObject *__pyx_kp_u_ExtensibleReactor_vdot_To_be_rem;
  PyObject *__pyx_n_s_FlowDevice;
  PyObject *__pyx_n_s_FlowDevice___reduce_cython;
  PyObject *__pyx_n_s_FlowDevice___setstate_cython;
  PyObject *__pyx_n_s_FlowDevice__install;
  PyObject *__pyx_kp_u_FlowDevice_pressure_function___g;
  PyObject *__pyx_kp_u_FlowDevice_set_pressure_function;
  PyObject *__pyx_n_s_FlowDevice_set_pressure_function_2;
  PyObject *__pyx_kp_u_FlowDevice_set_pressure_function_3;
  PyObject *__pyx_n_s_FlowDevice_set_time_function;
  PyObject *__pyx_kp_u_FlowDevice_set_time_function_To;
  PyObject *__pyx_kp_u_FlowDevice_set_time_function_lin;
  PyObject *__pyx_kp_u_FlowDevice_time_function___get;
  PyObject *__pyx_n_s_FlowReactor;
  PyObject *__pyx_n_u_FlowReactor;
  PyObject *__pyx_n_s_IdealGasConstPressureMoleReactor;
  PyObject *__pyx_n_u_IdealGasConstPressureMoleReactor;
  PyObject *__pyx_n_s_IdealGasConstPressureReactor;
  PyObject *__pyx_n_u_IdealGasConstPressureReactor;
  PyObject *__pyx_n_s_IdealGasMoleReactor;
  PyObject *__pyx_n_u_IdealGasMoleReactor;
  PyObject *__pyx_n_s_IdealGasReactor;
  PyObject *__pyx_n_u_IdealGasReactor;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_kp_u_Incorrect_number_of_site_coverag;
  PyObject *__pyx_n_s_IndexError;
  PyObject *__pyx_n_s_K;
  PyObject *__pyx_n_s_MassFlowController;
  PyObject *__pyx_n_u_MassFlowController;
  PyObject *__pyx_n_s_MassFlowController___reduce_cyth;
  PyObject *__pyx_n_s_MassFlowController___setstate_cy;
  PyObject *__pyx_kp_u_Maximum_number_of_steps_reached;
  PyObject *__pyx_n_s_MoleReactor;
  PyObject *__pyx_n_u_MoleReactor;
  PyObject *__pyx_kp_u_No_kinetics_manager_present;
  PyObject *__pyx_kp_u_No_such_component_r;
  PyObject *__pyx_n_s_NotImplementedError;
  PyObject *__pyx_n_s_PressureController;
  PyObject *__pyx_n_u_PressureController;
  PyObject *__pyx_kp_u_PressureController_The_master_ke;
  PyObject *__pyx_n_s_PressureController___reduce_cyth;
  PyObject *__pyx_n_s_PressureController___setstate_cy;
  PyObject *__pyx_kp_u_PressureController_primary;
  PyObject *__pyx_n_s_PressureController_set_master;
  PyObject *__pyx_kp_u_PressureController_set_master_To;
  PyObject *__pyx_n_s_Q;
  PyObject *__pyx_n_s_Reactor;
  PyObject *__pyx_n_u_Reactor;
  PyObject *__pyx_n_s_ReactorBase;
  PyObject *__pyx_n_s_ReactorBase___copy;
  PyObject *__pyx_n_s_ReactorBase___reduce;
  PyObject *__pyx_n_s_ReactorBase__add_inlet;
  PyObject *__pyx_n_s_ReactorBase__add_outlet;
  PyObject *__pyx_n_s_ReactorBase__add_wall;
  PyObject *__pyx_n_s_ReactorBase_insert;
  PyObject *__pyx_n_s_ReactorBase_syncState;
  PyObject *__pyx_n_s_ReactorNet;
  PyObject *__pyx_n_s_ReactorNet___copy;
  PyObject *__pyx_n_s_ReactorNet___reduce;
  PyObject *__pyx_n_s_ReactorNet_add_reactor;
  PyObject *__pyx_n_s_ReactorNet_advance;
  PyObject *__pyx_n_s_ReactorNet_advance_to_steady_sta;
  PyObject *__pyx_n_s_ReactorNet_component_name;
  PyObject *__pyx_kp_u_ReactorNet_empty_or_not_initiali;
  PyObject *__pyx_n_s_ReactorNet_get_derivative;
  PyObject *__pyx_n_s_ReactorNet_get_state;
  PyObject *__pyx_n_s_ReactorNet_global_component_inde;
  PyObject *__pyx_n_s_ReactorNet_initialize;
  PyObject *__pyx_kp_u_ReactorNet_object_is_not_copyabl;
  PyObject *__pyx_kp_u_ReactorNet_object_is_not_picklab;
  PyObject *__pyx_n_s_ReactorNet_reinitialize;
  PyObject *__pyx_n_s_ReactorNet_sensitivities;
  PyObject *__pyx_n_s_ReactorNet_sensitivity;
  PyObject *__pyx_n_s_ReactorNet_sensitivity_parameter;
  PyObject *__pyx_n_s_ReactorNet_set_initial_time;
  PyObject *__pyx_kp_u_ReactorNet_set_initial_time_To_b;
  PyObject *__pyx_n_s_ReactorNet_step;
  PyObject *__pyx_n_s_ReactorSurface;
  PyObject *__pyx_n_s_ReactorSurface___reduce_cython;
  PyObject *__pyx_n_s_ReactorSurface___setstate_cython;
  PyObject *__pyx_n_s_ReactorSurface_add_sensitivity_r;
  PyObject *__pyx_n_s_ReactorSurface_install;
  PyObject *__pyx_kp_u_Reactor___init___line_174;
  PyObject *__pyx_n_s_Reactor_add_sensitivity_reaction;
  PyObject *__pyx_n_s_Reactor_add_sensitivity_species;
  PyObject *__pyx_n_s_Reactor_component_index;
  PyObject *__pyx_n_s_Reactor_component_name;
  PyObject *__pyx_kp_u_Reactor_empty_or_network_not_ini;
  PyObject *__pyx_n_s_Reactor_get_state;
  PyObject *__pyx_n_s_Reactor_insert;
  PyObject *__pyx_kp_u_Reactor_object_is_not_copyable;
  PyObject *__pyx_kp_u_Reactor_object_is_not_picklable;
  PyObject *__pyx_n_s_Reactor_set_advance_limit;
  PyObject *__pyx_n_s_Real;
  PyObject *__pyx_n_s_Reservoir;
  PyObject *__pyx_n_u_Reservoir;
  PyObject *__pyx_kp_u_Residual_threshold;
  PyObject *__pyx_kp_u_Set_the_relationship_between_ma;
  PyObject *__pyx_kp_u_Set_the_time_dependence_of_a_fl;
  PyObject *__pyx_n_s_T;
  PyObject *__pyx_kp_u_The_relationship_between_mass_f;
  PyObject *__pyx_kp_u_The_time_dependence_of_a_flow_d;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_U;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_Valve;
  PyObject *__pyx_n_u_Valve;
  PyObject *__pyx_n_s_Valve___reduce_cython;
  PyObject *__pyx_n_s_Valve___setstate_cython;
  PyObject *__pyx_n_s_Wall;
  PyObject *__pyx_n_u_Wall;
  PyObject *__pyx_n_s_WallBase;
  PyObject *__pyx_n_s_WallBase___reduce_cython;
  PyObject *__pyx_n_s_WallBase___setstate_cython;
  PyObject *__pyx_n_s_WallBase__install;
  PyObject *__pyx_n_s_WallBase_qdot;
  PyObject *__pyx_n_s_WallBase_vdot;
  PyObject *__pyx_kp_u_Wall__0;
  PyObject *__pyx_n_s_Wall___reduce_cython;
  PyObject *__pyx_n_s_Wall___setstate_cython;
  PyObject *__pyx_n_s_Wall_set_heat_flux;
  PyObject *__pyx_kp_u_Wall_set_heat_flux_To_be_removed;
  PyObject *__pyx_n_s_Wall_set_velocity;
  PyObject *__pyx_kp_u_Wall_set_velocity_To_be_removed;
  PyObject *__pyx_n_s_WeakrefProxy;
  PyObject *__pyx_n_s_Y;
  PyObject *__pyx_n_s__125;
  PyObject *__pyx_kp_u__20;
  PyObject *__pyx_n_s__23;
  PyObject *__pyx_kp_u__24;
  PyObject *__pyx_n_s_add_inlet;
  PyObject *__pyx_n_s_add_outlet;
  PyObject *__pyx_n_s_add_reactor;
  PyObject *__pyx_n_s_add_sensitivity_reaction;
  PyObject *__pyx_n_s_add_sensitivity_species_enthalpy;
  PyObject *__pyx_n_s_add_wall;
  PyObject *__pyx_n_s_advance;
  PyObject *__pyx_n_s_advance_to_steady_state;
  PyObject *__pyx_n_s_apply_limit;
  PyObject *__pyx_n_s_area;
  PyObject *__pyx_kp_u_array_must_be_of_length_n_vars;
  PyObject *__pyx_n_s_ascontiguousarray;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_atol;
  PyObject *__pyx_n_s_cantera_reactor;
  PyObject *__pyx_kp_s_cantera_reactor_pyx;
  PyObject *__pyx_n_s_class;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_collections;
  PyObject *__pyx_n_s_component;
  PyObject *__pyx_n_u_componentIndex;
  PyObject *__pyx_n_u_componentName;
  PyObject *__pyx_n_s_component_index;
  PyObject *__pyx_n_u_component_index;
  PyObject *__pyx_n_s_component_name;
  PyObject *__pyx_n_u_component_name;
  PyObject *__pyx_n_s_contents;
  PyObject *__pyx_n_s_copy;
  PyObject *__pyx_n_s_coverages;
  PyObject *__pyx_n_s_d;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_defaultdict;
  PyObject *__pyx_n_s_defaultdict_2;
  PyObject *__pyx_n_s_delegatable_methods;
  PyObject *__pyx_n_s_density;
  PyObject *__pyx_n_s_density_mass;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_dky;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_double;
  PyObject *__pyx_n_s_downstream;
  PyObject *__pyx_n_s_dtype;
  PyObject *__pyx_n_s_empty;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_energy;
  PyObject *__pyx_n_s_energy_enabled;
  PyObject *__pyx_kp_u_energy_must_be_either_on_or_off;
  PyObject *__pyx_n_u_eval;
  PyObject *__pyx_n_u_evalSurfaces;
  PyObject *__pyx_n_u_evalWalls;
  PyObject *__pyx_n_u_eval_surfaces;
  PyObject *__pyx_n_u_eval_walls;
  PyObject *__pyx_n_s_expansion_rate_coeff;
  PyObject *__pyx_n_s_flowdevice_type;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_u_getState;
  PyObject *__pyx_n_u_getSurfaceInitialConditions;
  PyObject *__pyx_n_s_get_derivative;
  PyObject *__pyx_n_s_get_state;
  PyObject *__pyx_n_u_get_state;
  PyObject *__pyx_n_u_get_surface_initial_conditions;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_global_component_index;
  PyObject *__pyx_n_s_heat_flux;
  PyObject *__pyx_n_s_heat_transfer_coeff;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_n_s_initial_time;
  PyObject *__pyx_n_s_initialize;
  PyObject *__pyx_n_u_initialize;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_inlet;
  PyObject *__pyx_n_s_insert;
  PyObject *__pyx_n_s_install;
  PyObject *__pyx_n_s_install_2;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_k;
  PyObject *__pyx_n_s_kin;
  PyObject *__pyx_n_s_kinetics;
  PyObject *__pyx_n_s_left;
  PyObject *__pyx_n_s_limit;
  PyObject *__pyx_n_s_linalg;
  PyObject *__pyx_n_s_linear_solver_type;
  PyObject *__pyx_n_s_m;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_mass_flow_coeff;
  PyObject *__pyx_n_s_mass_flow_rate;
  PyObject *__pyx_n_u_master;
  PyObject *__pyx_n_s_max_state_values;
  PyObject *__pyx_n_s_max_steps;
  PyObject *__pyx_n_s_maximum;
  PyObject *__pyx_n_s_mdot;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_s_n;
  PyObject *__pyx_n_s_n1;
  PyObject *__pyx_n_s_n_sensitivity_params;
  PyObject *__pyx_n_s_n_species;
  PyObject *__pyx_n_s_n_vars;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_u_none;
  PyObject *__pyx_n_s_norm;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_numbers;
  PyObject *__pyx_n_s_numbers_2;
  PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
  PyObject *__pyx_n_u_off;
  PyObject *__pyx_n_u_on;
  PyObject *__pyx_n_s_ones;
  PyObject *__pyx_n_s_outlet;
  PyObject *__pyx_n_s_p;
  PyObject *__pyx_kp_u_param_contents_Reactor_contents;
  PyObject *__pyx_n_s_precon_linear_solver_type;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_pressure_coeff;
  PyObject *__pyx_n_s_pressure_function;
  PyObject *__pyx_n_s_previous_state;
  PyObject *__pyx_n_s_primary;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_q;
  PyObject *__pyx_n_s_qdot;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_r;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_reactor;
  PyObject *__pyx_n_s_reactor_counts;
  PyObject *__pyx_n_s_reactor_type;
  PyObject *__pyx_n_s_reactors;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_references;
  PyObject *__pyx_n_s_reinitialize;
  PyObject *__pyx_n_s_residual;
  PyObject *__pyx_n_s_residual_threshold;
  PyObject *__pyx_n_s_residuals;
  PyObject *__pyx_n_s_restore_surface_state;
  PyObject *__pyx_n_s_restore_thermo_state;
  PyObject *__pyx_n_s_return_residuals;
  PyObject *__pyx_n_s_right;
  PyObject *__pyx_n_s_rtol;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_n_s_sensitivities;
  PyObject *__pyx_n_s_sensitivity;
  PyObject *__pyx_n_s_sensitivity_parameter_name;
  PyObject *__pyx_n_s_set_advance_limit;
  PyObject *__pyx_n_s_set_heat_flux;
  PyObject *__pyx_n_s_set_initial_time;
  PyObject *__pyx_n_s_set_master;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_n_s_set_pressure_function;
  PyObject *__pyx_n_s_set_time_function;
  PyObject *__pyx_n_s_set_velocity;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_kp_u_should_be_below_solver_rtol;
  PyObject *__pyx_kp_u_size_t_string;
  PyObject *__pyx_n_s_solution;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_u_speciesIndex;
  PyObject *__pyx_n_s_species_index;
  PyObject *__pyx_n_u_species_index;
  PyObject *__pyx_n_s_sqrt;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_n_s_step;
  PyObject *__pyx_kp_u_string_size_t;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_syncState;
  PyObject *__pyx_n_u_syncState;
  PyObject *__pyx_n_u_sync_state;
  PyObject *__pyx_n_s_t;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_thermo;
  PyObject *__pyx_n_s_time_function;
  PyObject *__pyx_n_u_updateConnected;
  PyObject *__pyx_n_u_updateState;
  PyObject *__pyx_n_u_updateSurfaceState;
  PyObject *__pyx_n_u_update_connected;
  PyObject *__pyx_n_u_update_state;
  PyObject *__pyx_n_u_update_surface_state;
  PyObject *__pyx_n_s_upstream;
  PyObject *__pyx_n_s_utils;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_n_s_valve_coeff;
  PyObject *__pyx_n_s_vdot;
  PyObject *__pyx_n_s_velocity;
  PyObject *__pyx_kp_u_void;
  PyObject *__pyx_kp_u_void_bool;
  PyObject *__pyx_kp_u_void_double;
  PyObject *__pyx_kp_u_void_double_2;
  PyObject *__pyx_kp_u_void_double_double_double;
  PyObject *__pyx_kp_u_void_double_double_double_2;
  PyObject *__pyx_n_s_volume;
  PyObject *__pyx_n_s_wall;
  PyObject *__pyx_n_s_wall_type;
  PyObject *__pyx_n_s_warn;
  PyObject *__pyx_n_s_warnings;
  PyObject *__pyx_n_s_y;
  PyObject *__pyx_n_s_zeros;
  PyObject *__pyx_float_0_;
  PyObject *__pyx_float_1_;
  PyObject *__pyx_float_10_;
  PyObject *__pyx_float_neg_1_;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_10000;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__3;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__44;
  PyObject *__pyx_tuple__46;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__59;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__66;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__74;
  PyObject *__pyx_tuple__79;
  PyObject *__pyx_tuple__81;
  PyObject *__pyx_tuple__85;
  PyObject *__pyx_tuple__95;
  PyObject *__pyx_tuple__100;
  PyObject *__pyx_tuple__102;
  PyObject *__pyx_tuple__107;
  PyObject *__pyx_tuple__110;
  PyObject *__pyx_tuple__112;
  PyObject *__pyx_tuple__113;
  PyObject *__pyx_tuple__115;
  PyObject *__pyx_tuple__118;
  PyObject *__pyx_tuple__120;
  PyObject *__pyx_tuple__122;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__36;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__65;
  PyObject *__pyx_codeobj__67;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__75;
  PyObject *__pyx_codeobj__76;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__78;
  PyObject *__pyx_codeobj__80;
  PyObject *__pyx_codeobj__82;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__84;
  PyObject *__pyx_codeobj__86;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__88;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__90;
  PyObject *__pyx_codeobj__91;
  PyObject *__pyx_codeobj__92;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__98;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__105;
  PyObject *__pyx_codeobj__106;
  PyObject *__pyx_codeobj__108;
  PyObject *__pyx_codeobj__109;
  PyObject *__pyx_codeobj__111;
  PyObject *__pyx_codeobj__114;
  PyObject *__pyx_codeobj__116;
  PyObject *__pyx_codeobj__117;
  PyObject *__pyx_codeobj__119;
  PyObject *__pyx_codeobj__121;
  PyObject *__pyx_codeobj__123;
  PyObject *__pyx_codeobj__124;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_5func1_Func1);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_5units_Units);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_5units_UnitStack);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_5units_UnitSystem);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_12solutionbase__SolutionBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_12solutionbase_SolutionArrayBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_8kinetics_Kinetics);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_8kinetics_InterfaceKinetics);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_15preconditioners_PreconditionerBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_15preconditioners_AdaptivePreconditioner);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_6thermo_Species);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_6thermo_ThermoPhase);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_6thermo_InterfacePhase);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_6_utils_AnyMap);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ReactorBase);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ReactorBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_Reactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_Reactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_MoleReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_MoleReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_Reservoir);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_Reservoir);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_IdealGasReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_IdealGasReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_IdealGasConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_FlowReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_FlowReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ExtensibleReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ReactorSurface);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ReactorSurface);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_WallBase);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_WallBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_Wall);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_Wall);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_FlowDevice);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_FlowDevice);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_MassFlowController);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_MassFlowController);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_Valve);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_Valve);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_PressureController);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_PressureController);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ReactorNet);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ReactorNet);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_IdealGasMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_IdealGasMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ExtensibleMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0___1);
  Py_CLEAR(clear_module_state->__pyx_n_s_A);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Can_t_set_coverages_before_assig);
  Py_CLEAR(clear_module_state->__pyx_n_s_CanteraError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_ConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_ConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_ConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_DeprecationWarning);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtensibleConstPressureMoleReact);
  Py_CLEAR(clear_module_state->__pyx_n_u_ExtensibleConstPressureMoleReact);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtensibleConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_ExtensibleConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtensibleIdealGasConstPressureM);
  Py_CLEAR(clear_module_state->__pyx_n_u_ExtensibleIdealGasConstPressureM);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtensibleIdealGasConstPressureR);
  Py_CLEAR(clear_module_state->__pyx_n_u_ExtensibleIdealGasConstPressureR);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtensibleIdealGasMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_ExtensibleIdealGasMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtensibleIdealGasReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_ExtensibleIdealGasReactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtensibleMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_ExtensibleMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtensibleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_ExtensibleReactor);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ExtensibleReactor_qdot_To_be_rem);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtensibleReactor_restore_surfac);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExtensibleReactor_restore_thermo);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ExtensibleReactor_vdot_To_be_rem);
  Py_CLEAR(clear_module_state->__pyx_n_s_FlowDevice);
  Py_CLEAR(clear_module_state->__pyx_n_s_FlowDevice___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_FlowDevice___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_FlowDevice__install);
  Py_CLEAR(clear_module_state->__pyx_kp_u_FlowDevice_pressure_function___g);
  Py_CLEAR(clear_module_state->__pyx_kp_u_FlowDevice_set_pressure_function);
  Py_CLEAR(clear_module_state->__pyx_n_s_FlowDevice_set_pressure_function_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_FlowDevice_set_pressure_function_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_FlowDevice_set_time_function);
  Py_CLEAR(clear_module_state->__pyx_kp_u_FlowDevice_set_time_function_To);
  Py_CLEAR(clear_module_state->__pyx_kp_u_FlowDevice_set_time_function_lin);
  Py_CLEAR(clear_module_state->__pyx_kp_u_FlowDevice_time_function___get);
  Py_CLEAR(clear_module_state->__pyx_n_s_FlowReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_FlowReactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_IdealGasConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_IdealGasConstPressureMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_IdealGasConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_IdealGasConstPressureReactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_IdealGasMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_IdealGasMoleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_IdealGasReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_IdealGasReactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Incorrect_number_of_site_coverag);
  Py_CLEAR(clear_module_state->__pyx_n_s_IndexError);
  Py_CLEAR(clear_module_state->__pyx_n_s_K);
  Py_CLEAR(clear_module_state->__pyx_n_s_MassFlowController);
  Py_CLEAR(clear_module_state->__pyx_n_u_MassFlowController);
  Py_CLEAR(clear_module_state->__pyx_n_s_MassFlowController___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_MassFlowController___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Maximum_number_of_steps_reached);
  Py_CLEAR(clear_module_state->__pyx_n_s_MoleReactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_MoleReactor);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_kinetics_manager_present);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_such_component_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_NotImplementedError);
  Py_CLEAR(clear_module_state->__pyx_n_s_PressureController);
  Py_CLEAR(clear_module_state->__pyx_n_u_PressureController);
  Py_CLEAR(clear_module_state->__pyx_kp_u_PressureController_The_master_ke);
  Py_CLEAR(clear_module_state->__pyx_n_s_PressureController___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_PressureController___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_PressureController_primary);
  Py_CLEAR(clear_module_state->__pyx_n_s_PressureController_set_master);
  Py_CLEAR(clear_module_state->__pyx_kp_u_PressureController_set_master_To);
  Py_CLEAR(clear_module_state->__pyx_n_s_Q);
  Py_CLEAR(clear_module_state->__pyx_n_s_Reactor);
  Py_CLEAR(clear_module_state->__pyx_n_u_Reactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorBase);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorBase___copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorBase___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorBase__add_inlet);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorBase__add_outlet);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorBase__add_wall);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorBase_insert);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorBase_syncState);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet___copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_add_reactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_advance);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_advance_to_steady_sta);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_component_name);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ReactorNet_empty_or_not_initiali);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_get_derivative);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_get_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_global_component_inde);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_initialize);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ReactorNet_object_is_not_copyabl);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ReactorNet_object_is_not_picklab);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_reinitialize);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_sensitivities);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_sensitivity);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_sensitivity_parameter);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_set_initial_time);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ReactorNet_set_initial_time_To_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorNet_step);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorSurface);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorSurface___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorSurface___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorSurface_add_sensitivity_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReactorSurface_install);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Reactor___init___line_174);
  Py_CLEAR(clear_module_state->__pyx_n_s_Reactor_add_sensitivity_reaction);
  Py_CLEAR(clear_module_state->__pyx_n_s_Reactor_add_sensitivity_species);
  Py_CLEAR(clear_module_state->__pyx_n_s_Reactor_component_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_Reactor_component_name);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Reactor_empty_or_network_not_ini);
  Py_CLEAR(clear_module_state->__pyx_n_s_Reactor_get_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_Reactor_insert);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Reactor_object_is_not_copyable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Reactor_object_is_not_picklable);
  Py_CLEAR(clear_module_state->__pyx_n_s_Reactor_set_advance_limit);
  Py_CLEAR(clear_module_state->__pyx_n_s_Real);
  Py_CLEAR(clear_module_state->__pyx_n_s_Reservoir);
  Py_CLEAR(clear_module_state->__pyx_n_u_Reservoir);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Residual_threshold);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Set_the_relationship_between_ma);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Set_the_time_dependence_of_a_fl);
  Py_CLEAR(clear_module_state->__pyx_n_s_T);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_relationship_between_mass_f);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_time_dependence_of_a_flow_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_U);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_Valve);
  Py_CLEAR(clear_module_state->__pyx_n_u_Valve);
  Py_CLEAR(clear_module_state->__pyx_n_s_Valve___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Valve___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Wall);
  Py_CLEAR(clear_module_state->__pyx_n_u_Wall);
  Py_CLEAR(clear_module_state->__pyx_n_s_WallBase);
  Py_CLEAR(clear_module_state->__pyx_n_s_WallBase___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_WallBase___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_WallBase__install);
  Py_CLEAR(clear_module_state->__pyx_n_s_WallBase_qdot);
  Py_CLEAR(clear_module_state->__pyx_n_s_WallBase_vdot);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Wall__0);
  Py_CLEAR(clear_module_state->__pyx_n_s_Wall___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Wall___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_Wall_set_heat_flux);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Wall_set_heat_flux_To_be_removed);
  Py_CLEAR(clear_module_state->__pyx_n_s_Wall_set_velocity);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Wall_set_velocity_To_be_removed);
  Py_CLEAR(clear_module_state->__pyx_n_s_WeakrefProxy);
  Py_CLEAR(clear_module_state->__pyx_n_s_Y);
  Py_CLEAR(clear_module_state->__pyx_n_s__125);
  Py_CLEAR(clear_module_state->__pyx_kp_u__20);
  Py_CLEAR(clear_module_state->__pyx_n_s__23);
  Py_CLEAR(clear_module_state->__pyx_kp_u__24);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_inlet);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_outlet);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_reactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_sensitivity_reaction);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_sensitivity_species_enthalpy);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_wall);
  Py_CLEAR(clear_module_state->__pyx_n_s_advance);
  Py_CLEAR(clear_module_state->__pyx_n_s_advance_to_steady_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_apply_limit);
  Py_CLEAR(clear_module_state->__pyx_n_s_area);
  Py_CLEAR(clear_module_state->__pyx_kp_u_array_must_be_of_length_n_vars);
  Py_CLEAR(clear_module_state->__pyx_n_s_ascontiguousarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_atol);
  Py_CLEAR(clear_module_state->__pyx_n_s_cantera_reactor);
  Py_CLEAR(clear_module_state->__pyx_kp_s_cantera_reactor_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_class);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections);
  Py_CLEAR(clear_module_state->__pyx_n_s_component);
  Py_CLEAR(clear_module_state->__pyx_n_u_componentIndex);
  Py_CLEAR(clear_module_state->__pyx_n_u_componentName);
  Py_CLEAR(clear_module_state->__pyx_n_s_component_index);
  Py_CLEAR(clear_module_state->__pyx_n_u_component_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_component_name);
  Py_CLEAR(clear_module_state->__pyx_n_u_component_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_contents);
  Py_CLEAR(clear_module_state->__pyx_n_s_copy);
  Py_CLEAR(clear_module_state->__pyx_n_s_coverages);
  Py_CLEAR(clear_module_state->__pyx_n_s_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_defaultdict);
  Py_CLEAR(clear_module_state->__pyx_n_s_defaultdict_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_delegatable_methods);
  Py_CLEAR(clear_module_state->__pyx_n_s_density);
  Py_CLEAR(clear_module_state->__pyx_n_s_density_mass);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_dky);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_double);
  Py_CLEAR(clear_module_state->__pyx_n_s_downstream);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_empty);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_energy);
  Py_CLEAR(clear_module_state->__pyx_n_s_energy_enabled);
  Py_CLEAR(clear_module_state->__pyx_kp_u_energy_must_be_either_on_or_off);
  Py_CLEAR(clear_module_state->__pyx_n_u_eval);
  Py_CLEAR(clear_module_state->__pyx_n_u_evalSurfaces);
  Py_CLEAR(clear_module_state->__pyx_n_u_evalWalls);
  Py_CLEAR(clear_module_state->__pyx_n_u_eval_surfaces);
  Py_CLEAR(clear_module_state->__pyx_n_u_eval_walls);
  Py_CLEAR(clear_module_state->__pyx_n_s_expansion_rate_coeff);
  Py_CLEAR(clear_module_state->__pyx_n_s_flowdevice_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_u_getState);
  Py_CLEAR(clear_module_state->__pyx_n_u_getSurfaceInitialConditions);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_derivative);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_state);
  Py_CLEAR(clear_module_state->__pyx_n_u_get_state);
  Py_CLEAR(clear_module_state->__pyx_n_u_get_surface_initial_conditions);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_global_component_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_heat_flux);
  Py_CLEAR(clear_module_state->__pyx_n_s_heat_transfer_coeff);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_subclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_initial_time);
  Py_CLEAR(clear_module_state->__pyx_n_s_initialize);
  Py_CLEAR(clear_module_state->__pyx_n_u_initialize);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_inlet);
  Py_CLEAR(clear_module_state->__pyx_n_s_insert);
  Py_CLEAR(clear_module_state->__pyx_n_s_install);
  Py_CLEAR(clear_module_state->__pyx_n_s_install_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_k);
  Py_CLEAR(clear_module_state->__pyx_n_s_kin);
  Py_CLEAR(clear_module_state->__pyx_n_s_kinetics);
  Py_CLEAR(clear_module_state->__pyx_n_s_left);
  Py_CLEAR(clear_module_state->__pyx_n_s_limit);
  Py_CLEAR(clear_module_state->__pyx_n_s_linalg);
  Py_CLEAR(clear_module_state->__pyx_n_s_linear_solver_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_m);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_mass_flow_coeff);
  Py_CLEAR(clear_module_state->__pyx_n_s_mass_flow_rate);
  Py_CLEAR(clear_module_state->__pyx_n_u_master);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_state_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_steps);
  Py_CLEAR(clear_module_state->__pyx_n_s_maximum);
  Py_CLEAR(clear_module_state->__pyx_n_s_mdot);
  Py_CLEAR(clear_module_state->__pyx_n_s_metaclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_module);
  Py_CLEAR(clear_module_state->__pyx_n_s_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_n1);
  Py_CLEAR(clear_module_state->__pyx_n_s_n_sensitivity_params);
  Py_CLEAR(clear_module_state->__pyx_n_s_n_species);
  Py_CLEAR(clear_module_state->__pyx_n_s_n_vars);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_u_none);
  Py_CLEAR(clear_module_state->__pyx_n_s_norm);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_numbers);
  Py_CLEAR(clear_module_state->__pyx_n_s_numbers_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_CLEAR(clear_module_state->__pyx_n_u_off);
  Py_CLEAR(clear_module_state->__pyx_n_u_on);
  Py_CLEAR(clear_module_state->__pyx_n_s_ones);
  Py_CLEAR(clear_module_state->__pyx_n_s_outlet);
  Py_CLEAR(clear_module_state->__pyx_n_s_p);
  Py_CLEAR(clear_module_state->__pyx_kp_u_param_contents_Reactor_contents);
  Py_CLEAR(clear_module_state->__pyx_n_s_precon_linear_solver_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepare);
  Py_CLEAR(clear_module_state->__pyx_n_s_pressure_coeff);
  Py_CLEAR(clear_module_state->__pyx_n_s_pressure_function);
  Py_CLEAR(clear_module_state->__pyx_n_s_previous_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_primary);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_q);
  Py_CLEAR(clear_module_state->__pyx_n_s_qdot);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_reactor);
  Py_CLEAR(clear_module_state->__pyx_n_s_reactor_counts);
  Py_CLEAR(clear_module_state->__pyx_n_s_reactor_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_reactors);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_references);
  Py_CLEAR(clear_module_state->__pyx_n_s_reinitialize);
  Py_CLEAR(clear_module_state->__pyx_n_s_residual);
  Py_CLEAR(clear_module_state->__pyx_n_s_residual_threshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_residuals);
  Py_CLEAR(clear_module_state->__pyx_n_s_restore_surface_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_restore_thermo_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_return_residuals);
  Py_CLEAR(clear_module_state->__pyx_n_s_right);
  Py_CLEAR(clear_module_state->__pyx_n_s_rtol);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_sensitivities);
  Py_CLEAR(clear_module_state->__pyx_n_s_sensitivity);
  Py_CLEAR(clear_module_state->__pyx_n_s_sensitivity_parameter_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_advance_limit);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_heat_flux);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_initial_time);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_master);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_pressure_function);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_time_function);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_velocity);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_kp_u_should_be_below_solver_rtol);
  Py_CLEAR(clear_module_state->__pyx_kp_u_size_t_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_solution);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_u_speciesIndex);
  Py_CLEAR(clear_module_state->__pyx_n_s_species_index);
  Py_CLEAR(clear_module_state->__pyx_n_u_species_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_sqrt);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_step);
  Py_CLEAR(clear_module_state->__pyx_kp_u_string_size_t);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_syncState);
  Py_CLEAR(clear_module_state->__pyx_n_u_syncState);
  Py_CLEAR(clear_module_state->__pyx_n_u_sync_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_thermo);
  Py_CLEAR(clear_module_state->__pyx_n_s_time_function);
  Py_CLEAR(clear_module_state->__pyx_n_u_updateConnected);
  Py_CLEAR(clear_module_state->__pyx_n_u_updateState);
  Py_CLEAR(clear_module_state->__pyx_n_u_updateSurfaceState);
  Py_CLEAR(clear_module_state->__pyx_n_u_update_connected);
  Py_CLEAR(clear_module_state->__pyx_n_u_update_state);
  Py_CLEAR(clear_module_state->__pyx_n_u_update_surface_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_upstream);
  Py_CLEAR(clear_module_state->__pyx_n_s_utils);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_valve_coeff);
  Py_CLEAR(clear_module_state->__pyx_n_s_vdot);
  Py_CLEAR(clear_module_state->__pyx_n_s_velocity);
  Py_CLEAR(clear_module_state->__pyx_kp_u_void);
  Py_CLEAR(clear_module_state->__pyx_kp_u_void_bool);
  Py_CLEAR(clear_module_state->__pyx_kp_u_void_double);
  Py_CLEAR(clear_module_state->__pyx_kp_u_void_double_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_void_double_double_double);
  Py_CLEAR(clear_module_state->__pyx_kp_u_void_double_double_double_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_volume);
  Py_CLEAR(clear_module_state->__pyx_n_s_wall);
  Py_CLEAR(clear_module_state->__pyx_n_s_wall_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_warn);
  Py_CLEAR(clear_module_state->__pyx_n_s_warnings);
  Py_CLEAR(clear_module_state->__pyx_n_s_y);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeros);
  Py_CLEAR(clear_module_state->__pyx_float_0_);
  Py_CLEAR(clear_module_state->__pyx_float_1_);
  Py_CLEAR(clear_module_state->__pyx_float_10_);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1_);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_10000);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__44);
  Py_CLEAR(clear_module_state->__pyx_tuple__46);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__59);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__61);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__74);
  Py_CLEAR(clear_module_state->__pyx_tuple__79);
  Py_CLEAR(clear_module_state->__pyx_tuple__81);
  Py_CLEAR(clear_module_state->__pyx_tuple__85);
  Py_CLEAR(clear_module_state->__pyx_tuple__95);
  Py_CLEAR(clear_module_state->__pyx_tuple__100);
  Py_CLEAR(clear_module_state->__pyx_tuple__102);
  Py_CLEAR(clear_module_state->__pyx_tuple__107);
  Py_CLEAR(clear_module_state->__pyx_tuple__110);
  Py_CLEAR(clear_module_state->__pyx_tuple__112);
  Py_CLEAR(clear_module_state->__pyx_tuple__113);
  Py_CLEAR(clear_module_state->__pyx_tuple__115);
  Py_CLEAR(clear_module_state->__pyx_tuple__118);
  Py_CLEAR(clear_module_state->__pyx_tuple__120);
  Py_CLEAR(clear_module_state->__pyx_tuple__122);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__36);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__67);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__75);
  Py_CLEAR(clear_module_state->__pyx_codeobj__76);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__78);
  Py_CLEAR(clear_module_state->__pyx_codeobj__80);
  Py_CLEAR(clear_module_state->__pyx_codeobj__82);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__84);
  Py_CLEAR(clear_module_state->__pyx_codeobj__86);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__88);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__90);
  Py_CLEAR(clear_module_state->__pyx_codeobj__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__92);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__105);
  Py_CLEAR(clear_module_state->__pyx_codeobj__106);
  Py_CLEAR(clear_module_state->__pyx_codeobj__108);
  Py_CLEAR(clear_module_state->__pyx_codeobj__109);
  Py_CLEAR(clear_module_state->__pyx_codeobj__111);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  Py_CLEAR(clear_module_state->__pyx_codeobj__116);
  Py_CLEAR(clear_module_state->__pyx_codeobj__117);
  Py_CLEAR(clear_module_state->__pyx_codeobj__119);
  Py_CLEAR(clear_module_state->__pyx_codeobj__121);
  Py_CLEAR(clear_module_state->__pyx_codeobj__123);
  Py_CLEAR(clear_module_state->__pyx_codeobj__124);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_5func1_Func1);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_5units_Units);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_5units_UnitStack);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_5units_UnitSystem);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_12solutionbase__SolutionBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_12solutionbase_SolutionArrayBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_8kinetics_Kinetics);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_8kinetics_InterfaceKinetics);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_15preconditioners_PreconditionerBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_15preconditioners_AdaptivePreconditioner);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_6thermo_Species);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_6thermo_ThermoPhase);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_6thermo_InterfacePhase);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_6_utils_AnyMap);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ReactorBase);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ReactorBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_Reactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_Reactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_MoleReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_MoleReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_Reservoir);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_Reservoir);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_IdealGasReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_IdealGasReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_IdealGasConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_FlowReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_FlowReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ExtensibleReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ReactorSurface);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ReactorSurface);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_WallBase);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_WallBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_Wall);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_Wall);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_FlowDevice);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_FlowDevice);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_MassFlowController);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_MassFlowController);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_Valve);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_Valve);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_PressureController);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_PressureController);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ReactorNet);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ReactorNet);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_IdealGasMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_IdealGasMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ExtensibleMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0___1);
  Py_VISIT(traverse_module_state->__pyx_n_s_A);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Can_t_set_coverages_before_assig);
  Py_VISIT(traverse_module_state->__pyx_n_s_CanteraError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_ConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_ConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_ConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_DeprecationWarning);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtensibleConstPressureMoleReact);
  Py_VISIT(traverse_module_state->__pyx_n_u_ExtensibleConstPressureMoleReact);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtensibleConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_ExtensibleConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtensibleIdealGasConstPressureM);
  Py_VISIT(traverse_module_state->__pyx_n_u_ExtensibleIdealGasConstPressureM);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtensibleIdealGasConstPressureR);
  Py_VISIT(traverse_module_state->__pyx_n_u_ExtensibleIdealGasConstPressureR);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtensibleIdealGasMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_ExtensibleIdealGasMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtensibleIdealGasReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_ExtensibleIdealGasReactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtensibleMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_ExtensibleMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtensibleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_ExtensibleReactor);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ExtensibleReactor_qdot_To_be_rem);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtensibleReactor_restore_surfac);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExtensibleReactor_restore_thermo);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ExtensibleReactor_vdot_To_be_rem);
  Py_VISIT(traverse_module_state->__pyx_n_s_FlowDevice);
  Py_VISIT(traverse_module_state->__pyx_n_s_FlowDevice___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_FlowDevice___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_FlowDevice__install);
  Py_VISIT(traverse_module_state->__pyx_kp_u_FlowDevice_pressure_function___g);
  Py_VISIT(traverse_module_state->__pyx_kp_u_FlowDevice_set_pressure_function);
  Py_VISIT(traverse_module_state->__pyx_n_s_FlowDevice_set_pressure_function_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_FlowDevice_set_pressure_function_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_FlowDevice_set_time_function);
  Py_VISIT(traverse_module_state->__pyx_kp_u_FlowDevice_set_time_function_To);
  Py_VISIT(traverse_module_state->__pyx_kp_u_FlowDevice_set_time_function_lin);
  Py_VISIT(traverse_module_state->__pyx_kp_u_FlowDevice_time_function___get);
  Py_VISIT(traverse_module_state->__pyx_n_s_FlowReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_FlowReactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_IdealGasConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_IdealGasConstPressureMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_IdealGasConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_IdealGasConstPressureReactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_IdealGasMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_IdealGasMoleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_IdealGasReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_IdealGasReactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Incorrect_number_of_site_coverag);
  Py_VISIT(traverse_module_state->__pyx_n_s_IndexError);
  Py_VISIT(traverse_module_state->__pyx_n_s_K);
  Py_VISIT(traverse_module_state->__pyx_n_s_MassFlowController);
  Py_VISIT(traverse_module_state->__pyx_n_u_MassFlowController);
  Py_VISIT(traverse_module_state->__pyx_n_s_MassFlowController___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_MassFlowController___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Maximum_number_of_steps_reached);
  Py_VISIT(traverse_module_state->__pyx_n_s_MoleReactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_MoleReactor);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_kinetics_manager_present);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_such_component_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_NotImplementedError);
  Py_VISIT(traverse_module_state->__pyx_n_s_PressureController);
  Py_VISIT(traverse_module_state->__pyx_n_u_PressureController);
  Py_VISIT(traverse_module_state->__pyx_kp_u_PressureController_The_master_ke);
  Py_VISIT(traverse_module_state->__pyx_n_s_PressureController___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_PressureController___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_PressureController_primary);
  Py_VISIT(traverse_module_state->__pyx_n_s_PressureController_set_master);
  Py_VISIT(traverse_module_state->__pyx_kp_u_PressureController_set_master_To);
  Py_VISIT(traverse_module_state->__pyx_n_s_Q);
  Py_VISIT(traverse_module_state->__pyx_n_s_Reactor);
  Py_VISIT(traverse_module_state->__pyx_n_u_Reactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorBase);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorBase___copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorBase___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorBase__add_inlet);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorBase__add_outlet);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorBase__add_wall);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorBase_insert);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorBase_syncState);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet___copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_add_reactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_advance);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_advance_to_steady_sta);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_component_name);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ReactorNet_empty_or_not_initiali);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_get_derivative);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_get_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_global_component_inde);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_initialize);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ReactorNet_object_is_not_copyabl);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ReactorNet_object_is_not_picklab);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_reinitialize);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_sensitivities);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_sensitivity);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_sensitivity_parameter);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_set_initial_time);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ReactorNet_set_initial_time_To_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorNet_step);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorSurface);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorSurface___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorSurface___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorSurface_add_sensitivity_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReactorSurface_install);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Reactor___init___line_174);
  Py_VISIT(traverse_module_state->__pyx_n_s_Reactor_add_sensitivity_reaction);
  Py_VISIT(traverse_module_state->__pyx_n_s_Reactor_add_sensitivity_species);
  Py_VISIT(traverse_module_state->__pyx_n_s_Reactor_component_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_Reactor_component_name);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Reactor_empty_or_network_not_ini);
  Py_VISIT(traverse_module_state->__pyx_n_s_Reactor_get_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_Reactor_insert);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Reactor_object_is_not_copyable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Reactor_object_is_not_picklable);
  Py_VISIT(traverse_module_state->__pyx_n_s_Reactor_set_advance_limit);
  Py_VISIT(traverse_module_state->__pyx_n_s_Real);
  Py_VISIT(traverse_module_state->__pyx_n_s_Reservoir);
  Py_VISIT(traverse_module_state->__pyx_n_u_Reservoir);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Residual_threshold);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Set_the_relationship_between_ma);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Set_the_time_dependence_of_a_fl);
  Py_VISIT(traverse_module_state->__pyx_n_s_T);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_relationship_between_mass_f);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_time_dependence_of_a_flow_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_U);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_Valve);
  Py_VISIT(traverse_module_state->__pyx_n_u_Valve);
  Py_VISIT(traverse_module_state->__pyx_n_s_Valve___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Valve___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Wall);
  Py_VISIT(traverse_module_state->__pyx_n_u_Wall);
  Py_VISIT(traverse_module_state->__pyx_n_s_WallBase);
  Py_VISIT(traverse_module_state->__pyx_n_s_WallBase___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_WallBase___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_WallBase__install);
  Py_VISIT(traverse_module_state->__pyx_n_s_WallBase_qdot);
  Py_VISIT(traverse_module_state->__pyx_n_s_WallBase_vdot);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Wall__0);
  Py_VISIT(traverse_module_state->__pyx_n_s_Wall___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Wall___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_Wall_set_heat_flux);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Wall_set_heat_flux_To_be_removed);
  Py_VISIT(traverse_module_state->__pyx_n_s_Wall_set_velocity);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Wall_set_velocity_To_be_removed);
  Py_VISIT(traverse_module_state->__pyx_n_s_WeakrefProxy);
  Py_VISIT(traverse_module_state->__pyx_n_s_Y);
  Py_VISIT(traverse_module_state->__pyx_n_s__125);
  Py_VISIT(traverse_module_state->__pyx_kp_u__20);
  Py_VISIT(traverse_module_state->__pyx_n_s__23);
  Py_VISIT(traverse_module_state->__pyx_kp_u__24);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_inlet);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_outlet);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_reactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_sensitivity_reaction);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_sensitivity_species_enthalpy);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_wall);
  Py_VISIT(traverse_module_state->__pyx_n_s_advance);
  Py_VISIT(traverse_module_state->__pyx_n_s_advance_to_steady_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_apply_limit);
  Py_VISIT(traverse_module_state->__pyx_n_s_area);
  Py_VISIT(traverse_module_state->__pyx_kp_u_array_must_be_of_length_n_vars);
  Py_VISIT(traverse_module_state->__pyx_n_s_ascontiguousarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_atol);
  Py_VISIT(traverse_module_state->__pyx_n_s_cantera_reactor);
  Py_VISIT(traverse_module_state->__pyx_kp_s_cantera_reactor_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_class);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections);
  Py_VISIT(traverse_module_state->__pyx_n_s_component);
  Py_VISIT(traverse_module_state->__pyx_n_u_componentIndex);
  Py_VISIT(traverse_module_state->__pyx_n_u_componentName);
  Py_VISIT(traverse_module_state->__pyx_n_s_component_index);
  Py_VISIT(traverse_module_state->__pyx_n_u_component_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_component_name);
  Py_VISIT(traverse_module_state->__pyx_n_u_component_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_contents);
  Py_VISIT(traverse_module_state->__pyx_n_s_copy);
  Py_VISIT(traverse_module_state->__pyx_n_s_coverages);
  Py_VISIT(traverse_module_state->__pyx_n_s_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_defaultdict);
  Py_VISIT(traverse_module_state->__pyx_n_s_defaultdict_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_delegatable_methods);
  Py_VISIT(traverse_module_state->__pyx_n_s_density);
  Py_VISIT(traverse_module_state->__pyx_n_s_density_mass);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_dky);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_double);
  Py_VISIT(traverse_module_state->__pyx_n_s_downstream);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_empty);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_energy);
  Py_VISIT(traverse_module_state->__pyx_n_s_energy_enabled);
  Py_VISIT(traverse_module_state->__pyx_kp_u_energy_must_be_either_on_or_off);
  Py_VISIT(traverse_module_state->__pyx_n_u_eval);
  Py_VISIT(traverse_module_state->__pyx_n_u_evalSurfaces);
  Py_VISIT(traverse_module_state->__pyx_n_u_evalWalls);
  Py_VISIT(traverse_module_state->__pyx_n_u_eval_surfaces);
  Py_VISIT(traverse_module_state->__pyx_n_u_eval_walls);
  Py_VISIT(traverse_module_state->__pyx_n_s_expansion_rate_coeff);
  Py_VISIT(traverse_module_state->__pyx_n_s_flowdevice_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_u_getState);
  Py_VISIT(traverse_module_state->__pyx_n_u_getSurfaceInitialConditions);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_derivative);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_state);
  Py_VISIT(traverse_module_state->__pyx_n_u_get_state);
  Py_VISIT(traverse_module_state->__pyx_n_u_get_surface_initial_conditions);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_global_component_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_heat_flux);
  Py_VISIT(traverse_module_state->__pyx_n_s_heat_transfer_coeff);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_subclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_initial_time);
  Py_VISIT(traverse_module_state->__pyx_n_s_initialize);
  Py_VISIT(traverse_module_state->__pyx_n_u_initialize);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_inlet);
  Py_VISIT(traverse_module_state->__pyx_n_s_insert);
  Py_VISIT(traverse_module_state->__pyx_n_s_install);
  Py_VISIT(traverse_module_state->__pyx_n_s_install_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_k);
  Py_VISIT(traverse_module_state->__pyx_n_s_kin);
  Py_VISIT(traverse_module_state->__pyx_n_s_kinetics);
  Py_VISIT(traverse_module_state->__pyx_n_s_left);
  Py_VISIT(traverse_module_state->__pyx_n_s_limit);
  Py_VISIT(traverse_module_state->__pyx_n_s_linalg);
  Py_VISIT(traverse_module_state->__pyx_n_s_linear_solver_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_m);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_mass_flow_coeff);
  Py_VISIT(traverse_module_state->__pyx_n_s_mass_flow_rate);
  Py_VISIT(traverse_module_state->__pyx_n_u_master);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_state_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_steps);
  Py_VISIT(traverse_module_state->__pyx_n_s_maximum);
  Py_VISIT(traverse_module_state->__pyx_n_s_mdot);
  Py_VISIT(traverse_module_state->__pyx_n_s_metaclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_module);
  Py_VISIT(traverse_module_state->__pyx_n_s_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_n1);
  Py_VISIT(traverse_module_state->__pyx_n_s_n_sensitivity_params);
  Py_VISIT(traverse_module_state->__pyx_n_s_n_species);
  Py_VISIT(traverse_module_state->__pyx_n_s_n_vars);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_u_none);
  Py_VISIT(traverse_module_state->__pyx_n_s_norm);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_numbers);
  Py_VISIT(traverse_module_state->__pyx_n_s_numbers_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_VISIT(traverse_module_state->__pyx_n_u_off);
  Py_VISIT(traverse_module_state->__pyx_n_u_on);
  Py_VISIT(traverse_module_state->__pyx_n_s_ones);
  Py_VISIT(traverse_module_state->__pyx_n_s_outlet);
  Py_VISIT(traverse_module_state->__pyx_n_s_p);
  Py_VISIT(traverse_module_state->__pyx_kp_u_param_contents_Reactor_contents);
  Py_VISIT(traverse_module_state->__pyx_n_s_precon_linear_solver_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepare);
  Py_VISIT(traverse_module_state->__pyx_n_s_pressure_coeff);
  Py_VISIT(traverse_module_state->__pyx_n_s_pressure_function);
  Py_VISIT(traverse_module_state->__pyx_n_s_previous_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_primary);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_q);
  Py_VISIT(traverse_module_state->__pyx_n_s_qdot);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_reactor);
  Py_VISIT(traverse_module_state->__pyx_n_s_reactor_counts);
  Py_VISIT(traverse_module_state->__pyx_n_s_reactor_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_reactors);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_references);
  Py_VISIT(traverse_module_state->__pyx_n_s_reinitialize);
  Py_VISIT(traverse_module_state->__pyx_n_s_residual);
  Py_VISIT(traverse_module_state->__pyx_n_s_residual_threshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_residuals);
  Py_VISIT(traverse_module_state->__pyx_n_s_restore_surface_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_restore_thermo_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_return_residuals);
  Py_VISIT(traverse_module_state->__pyx_n_s_right);
  Py_VISIT(traverse_module_state->__pyx_n_s_rtol);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_sensitivities);
  Py_VISIT(traverse_module_state->__pyx_n_s_sensitivity);
  Py_VISIT(traverse_module_state->__pyx_n_s_sensitivity_parameter_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_advance_limit);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_heat_flux);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_initial_time);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_master);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_pressure_function);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_time_function);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_velocity);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_kp_u_should_be_below_solver_rtol);
  Py_VISIT(traverse_module_state->__pyx_kp_u_size_t_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_solution);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_u_speciesIndex);
  Py_VISIT(traverse_module_state->__pyx_n_s_species_index);
  Py_VISIT(traverse_module_state->__pyx_n_u_species_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_sqrt);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_step);
  Py_VISIT(traverse_module_state->__pyx_kp_u_string_size_t);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_syncState);
  Py_VISIT(traverse_module_state->__pyx_n_u_syncState);
  Py_VISIT(traverse_module_state->__pyx_n_u_sync_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_thermo);
  Py_VISIT(traverse_module_state->__pyx_n_s_time_function);
  Py_VISIT(traverse_module_state->__pyx_n_u_updateConnected);
  Py_VISIT(traverse_module_state->__pyx_n_u_updateState);
  Py_VISIT(traverse_module_state->__pyx_n_u_updateSurfaceState);
  Py_VISIT(traverse_module_state->__pyx_n_u_update_connected);
  Py_VISIT(traverse_module_state->__pyx_n_u_update_state);
  Py_VISIT(traverse_module_state->__pyx_n_u_update_surface_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_upstream);
  Py_VISIT(traverse_module_state->__pyx_n_s_utils);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_valve_coeff);
  Py_VISIT(traverse_module_state->__pyx_n_s_vdot);
  Py_VISIT(traverse_module_state->__pyx_n_s_velocity);
  Py_VISIT(traverse_module_state->__pyx_kp_u_void);
  Py_VISIT(traverse_module_state->__pyx_kp_u_void_bool);
  Py_VISIT(traverse_module_state->__pyx_kp_u_void_double);
  Py_VISIT(traverse_module_state->__pyx_kp_u_void_double_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_void_double_double_double);
  Py_VISIT(traverse_module_state->__pyx_kp_u_void_double_double_double_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_volume);
  Py_VISIT(traverse_module_state->__pyx_n_s_wall);
  Py_VISIT(traverse_module_state->__pyx_n_s_wall_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_warn);
  Py_VISIT(traverse_module_state->__pyx_n_s_warnings);
  Py_VISIT(traverse_module_state->__pyx_n_s_y);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeros);
  Py_VISIT(traverse_module_state->__pyx_float_0_);
  Py_VISIT(traverse_module_state->__pyx_float_1_);
  Py_VISIT(traverse_module_state->__pyx_float_10_);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1_);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_10000);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__44);
  Py_VISIT(traverse_module_state->__pyx_tuple__46);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__59);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__61);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__74);
  Py_VISIT(traverse_module_state->__pyx_tuple__79);
  Py_VISIT(traverse_module_state->__pyx_tuple__81);
  Py_VISIT(traverse_module_state->__pyx_tuple__85);
  Py_VISIT(traverse_module_state->__pyx_tuple__95);
  Py_VISIT(traverse_module_state->__pyx_tuple__100);
  Py_VISIT(traverse_module_state->__pyx_tuple__102);
  Py_VISIT(traverse_module_state->__pyx_tuple__107);
  Py_VISIT(traverse_module_state->__pyx_tuple__110);
  Py_VISIT(traverse_module_state->__pyx_tuple__112);
  Py_VISIT(traverse_module_state->__pyx_tuple__113);
  Py_VISIT(traverse_module_state->__pyx_tuple__115);
  Py_VISIT(traverse_module_state->__pyx_tuple__118);
  Py_VISIT(traverse_module_state->__pyx_tuple__120);
  Py_VISIT(traverse_module_state->__pyx_tuple__122);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__36);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__67);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__75);
  Py_VISIT(traverse_module_state->__pyx_codeobj__76);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__78);
  Py_VISIT(traverse_module_state->__pyx_codeobj__80);
  Py_VISIT(traverse_module_state->__pyx_codeobj__82);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__84);
  Py_VISIT(traverse_module_state->__pyx_codeobj__86);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__88);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__90);
  Py_VISIT(traverse_module_state->__pyx_codeobj__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__92);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__105);
  Py_VISIT(traverse_module_state->__pyx_codeobj__106);
  Py_VISIT(traverse_module_state->__pyx_codeobj__108);
  Py_VISIT(traverse_module_state->__pyx_codeobj__109);
  Py_VISIT(traverse_module_state->__pyx_codeobj__111);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  Py_VISIT(traverse_module_state->__pyx_codeobj__116);
  Py_VISIT(traverse_module_state->__pyx_codeobj__117);
  Py_VISIT(traverse_module_state->__pyx_codeobj__119);
  Py_VISIT(traverse_module_state->__pyx_codeobj__121);
  Py_VISIT(traverse_module_state->__pyx_codeobj__123);
  Py_VISIT(traverse_module_state->__pyx_codeobj__124);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4bool_bool __pyx_mstate_global->__pyx_ptype_7cpython_4bool_bool
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_7complex_complex __pyx_mstate_global->__pyx_ptype_7cpython_7complex_complex
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_5func1_Func1 __pyx_mstate_global->__pyx_ptype_7cantera_5func1_Func1
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_5units_Units __pyx_mstate_global->__pyx_ptype_7cantera_5units_Units
#define __pyx_ptype_7cantera_5units_UnitStack __pyx_mstate_global->__pyx_ptype_7cantera_5units_UnitStack
#define __pyx_ptype_7cantera_5units_UnitSystem __pyx_mstate_global->__pyx_ptype_7cantera_5units_UnitSystem
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_12solutionbase__SolutionBase __pyx_mstate_global->__pyx_ptype_7cantera_12solutionbase__SolutionBase
#define __pyx_ptype_7cantera_12solutionbase_SolutionArrayBase __pyx_mstate_global->__pyx_ptype_7cantera_12solutionbase_SolutionArrayBase
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_8kinetics_Kinetics __pyx_mstate_global->__pyx_ptype_7cantera_8kinetics_Kinetics
#define __pyx_ptype_7cantera_8kinetics_InterfaceKinetics __pyx_mstate_global->__pyx_ptype_7cantera_8kinetics_InterfaceKinetics
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_15preconditioners_PreconditionerBase __pyx_mstate_global->__pyx_ptype_7cantera_15preconditioners_PreconditionerBase
#define __pyx_ptype_7cantera_15preconditioners_AdaptivePreconditioner __pyx_mstate_global->__pyx_ptype_7cantera_15preconditioners_AdaptivePreconditioner
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_6thermo_Species __pyx_mstate_global->__pyx_ptype_7cantera_6thermo_Species
#define __pyx_ptype_7cantera_6thermo_ThermoPhase __pyx_mstate_global->__pyx_ptype_7cantera_6thermo_ThermoPhase
#define __pyx_ptype_7cantera_6thermo_InterfacePhase __pyx_mstate_global->__pyx_ptype_7cantera_6thermo_InterfacePhase
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cantera_6_utils_AnyMap __pyx_mstate_global->__pyx_ptype_7cantera_6_utils_AnyMap
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_7cantera_7reactor_ReactorBase __pyx_mstate_global->__pyx_type_7cantera_7reactor_ReactorBase
#define __pyx_type_7cantera_7reactor_Reactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_Reactor
#define __pyx_type_7cantera_7reactor_MoleReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_MoleReactor
#define __pyx_type_7cantera_7reactor_Reservoir __pyx_mstate_global->__pyx_type_7cantera_7reactor_Reservoir
#define __pyx_type_7cantera_7reactor_ConstPressureReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_ConstPressureReactor
#define __pyx_type_7cantera_7reactor_ConstPressureMoleReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_ConstPressureMoleReactor
#define __pyx_type_7cantera_7reactor_IdealGasReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_IdealGasReactor
#define __pyx_type_7cantera_7reactor_IdealGasConstPressureReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_IdealGasConstPressureReactor
#define __pyx_type_7cantera_7reactor_FlowReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_FlowReactor
#define __pyx_type_7cantera_7reactor_ExtensibleReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_ExtensibleReactor
#define __pyx_type_7cantera_7reactor_ReactorSurface __pyx_mstate_global->__pyx_type_7cantera_7reactor_ReactorSurface
#define __pyx_type_7cantera_7reactor_WallBase __pyx_mstate_global->__pyx_type_7cantera_7reactor_WallBase
#define __pyx_type_7cantera_7reactor_Wall __pyx_mstate_global->__pyx_type_7cantera_7reactor_Wall
#define __pyx_type_7cantera_7reactor_FlowDevice __pyx_mstate_global->__pyx_type_7cantera_7reactor_FlowDevice
#define __pyx_type_7cantera_7reactor_MassFlowController __pyx_mstate_global->__pyx_type_7cantera_7reactor_MassFlowController
#define __pyx_type_7cantera_7reactor_Valve __pyx_mstate_global->__pyx_type_7cantera_7reactor_Valve
#define __pyx_type_7cantera_7reactor_PressureController __pyx_mstate_global->__pyx_type_7cantera_7reactor_PressureController
#define __pyx_type_7cantera_7reactor_ReactorNet __pyx_mstate_global->__pyx_type_7cantera_7reactor_ReactorNet
#define __pyx_type_7cantera_7reactor_IdealGasMoleReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_IdealGasMoleReactor
#define __pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor
#define __pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor
#define __pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor
#define __pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor
#define __pyx_type_7cantera_7reactor_ExtensibleMoleReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_ExtensibleMoleReactor
#define __pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor
#define __pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor
#define __pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor __pyx_mstate_global->__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor
#endif
#define __pyx_ptype_7cantera_7reactor_ReactorBase __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ReactorBase
#define __pyx_ptype_7cantera_7reactor_Reactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_Reactor
#define __pyx_ptype_7cantera_7reactor_MoleReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_MoleReactor
#define __pyx_ptype_7cantera_7reactor_Reservoir __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_Reservoir
#define __pyx_ptype_7cantera_7reactor_ConstPressureReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ConstPressureReactor
#define __pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor
#define __pyx_ptype_7cantera_7reactor_IdealGasReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_IdealGasReactor
#define __pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor
#define __pyx_ptype_7cantera_7reactor_FlowReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_FlowReactor
#define __pyx_ptype_7cantera_7reactor_ExtensibleReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ExtensibleReactor
#define __pyx_ptype_7cantera_7reactor_ReactorSurface __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ReactorSurface
#define __pyx_ptype_7cantera_7reactor_WallBase __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_WallBase
#define __pyx_ptype_7cantera_7reactor_Wall __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_Wall
#define __pyx_ptype_7cantera_7reactor_FlowDevice __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_FlowDevice
#define __pyx_ptype_7cantera_7reactor_MassFlowController __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_MassFlowController
#define __pyx_ptype_7cantera_7reactor_Valve __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_Valve
#define __pyx_ptype_7cantera_7reactor_PressureController __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_PressureController
#define __pyx_ptype_7cantera_7reactor_ReactorNet __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ReactorNet
#define __pyx_ptype_7cantera_7reactor_IdealGasMoleReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_IdealGasMoleReactor
#define __pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor
#define __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor
#define __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor
#define __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor
#define __pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor
#define __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor
#define __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor
#define __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor __pyx_mstate_global->__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor
#define __pyx_kp_u_0___1 __pyx_mstate_global->__pyx_kp_u_0___1
#define __pyx_n_s_A __pyx_mstate_global->__pyx_n_s_A
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_kp_u_Can_t_set_coverages_before_assig __pyx_mstate_global->__pyx_kp_u_Can_t_set_coverages_before_assig
#define __pyx_n_s_CanteraError __pyx_mstate_global->__pyx_n_s_CanteraError
#define __pyx_n_s_ConstPressureMoleReactor __pyx_mstate_global->__pyx_n_s_ConstPressureMoleReactor
#define __pyx_n_u_ConstPressureMoleReactor __pyx_mstate_global->__pyx_n_u_ConstPressureMoleReactor
#define __pyx_n_s_ConstPressureReactor __pyx_mstate_global->__pyx_n_s_ConstPressureReactor
#define __pyx_n_u_ConstPressureReactor __pyx_mstate_global->__pyx_n_u_ConstPressureReactor
#define __pyx_n_s_DeprecationWarning __pyx_mstate_global->__pyx_n_s_DeprecationWarning
#define __pyx_n_s_ExtensibleConstPressureMoleReact __pyx_mstate_global->__pyx_n_s_ExtensibleConstPressureMoleReact
#define __pyx_n_u_ExtensibleConstPressureMoleReact __pyx_mstate_global->__pyx_n_u_ExtensibleConstPressureMoleReact
#define __pyx_n_s_ExtensibleConstPressureReactor __pyx_mstate_global->__pyx_n_s_ExtensibleConstPressureReactor
#define __pyx_n_u_ExtensibleConstPressureReactor __pyx_mstate_global->__pyx_n_u_ExtensibleConstPressureReactor
#define __pyx_n_s_ExtensibleIdealGasConstPressureM __pyx_mstate_global->__pyx_n_s_ExtensibleIdealGasConstPressureM
#define __pyx_n_u_ExtensibleIdealGasConstPressureM __pyx_mstate_global->__pyx_n_u_ExtensibleIdealGasConstPressureM
#define __pyx_n_s_ExtensibleIdealGasConstPressureR __pyx_mstate_global->__pyx_n_s_ExtensibleIdealGasConstPressureR
#define __pyx_n_u_ExtensibleIdealGasConstPressureR __pyx_mstate_global->__pyx_n_u_ExtensibleIdealGasConstPressureR
#define __pyx_n_s_ExtensibleIdealGasMoleReactor __pyx_mstate_global->__pyx_n_s_ExtensibleIdealGasMoleReactor
#define __pyx_n_u_ExtensibleIdealGasMoleReactor __pyx_mstate_global->__pyx_n_u_ExtensibleIdealGasMoleReactor
#define __pyx_n_s_ExtensibleIdealGasReactor __pyx_mstate_global->__pyx_n_s_ExtensibleIdealGasReactor
#define __pyx_n_u_ExtensibleIdealGasReactor __pyx_mstate_global->__pyx_n_u_ExtensibleIdealGasReactor
#define __pyx_n_s_ExtensibleMoleReactor __pyx_mstate_global->__pyx_n_s_ExtensibleMoleReactor
#define __pyx_n_u_ExtensibleMoleReactor __pyx_mstate_global->__pyx_n_u_ExtensibleMoleReactor
#define __pyx_n_s_ExtensibleReactor __pyx_mstate_global->__pyx_n_s_ExtensibleReactor
#define __pyx_n_u_ExtensibleReactor __pyx_mstate_global->__pyx_n_u_ExtensibleReactor
#define __pyx_kp_u_ExtensibleReactor_qdot_To_be_rem __pyx_mstate_global->__pyx_kp_u_ExtensibleReactor_qdot_To_be_rem
#define __pyx_n_s_ExtensibleReactor_restore_surfac __pyx_mstate_global->__pyx_n_s_ExtensibleReactor_restore_surfac
#define __pyx_n_s_ExtensibleReactor_restore_thermo __pyx_mstate_global->__pyx_n_s_ExtensibleReactor_restore_thermo
#define __pyx_kp_u_ExtensibleReactor_vdot_To_be_rem __pyx_mstate_global->__pyx_kp_u_ExtensibleReactor_vdot_To_be_rem
#define __pyx_n_s_FlowDevice __pyx_mstate_global->__pyx_n_s_FlowDevice
#define __pyx_n_s_FlowDevice___reduce_cython __pyx_mstate_global->__pyx_n_s_FlowDevice___reduce_cython
#define __pyx_n_s_FlowDevice___setstate_cython __pyx_mstate_global->__pyx_n_s_FlowDevice___setstate_cython
#define __pyx_n_s_FlowDevice__install __pyx_mstate_global->__pyx_n_s_FlowDevice__install
#define __pyx_kp_u_FlowDevice_pressure_function___g __pyx_mstate_global->__pyx_kp_u_FlowDevice_pressure_function___g
#define __pyx_kp_u_FlowDevice_set_pressure_function __pyx_mstate_global->__pyx_kp_u_FlowDevice_set_pressure_function
#define __pyx_n_s_FlowDevice_set_pressure_function_2 __pyx_mstate_global->__pyx_n_s_FlowDevice_set_pressure_function_2
#define __pyx_kp_u_FlowDevice_set_pressure_function_3 __pyx_mstate_global->__pyx_kp_u_FlowDevice_set_pressure_function_3
#define __pyx_n_s_FlowDevice_set_time_function __pyx_mstate_global->__pyx_n_s_FlowDevice_set_time_function
#define __pyx_kp_u_FlowDevice_set_time_function_To __pyx_mstate_global->__pyx_kp_u_FlowDevice_set_time_function_To
#define __pyx_kp_u_FlowDevice_set_time_function_lin __pyx_mstate_global->__pyx_kp_u_FlowDevice_set_time_function_lin
#define __pyx_kp_u_FlowDevice_time_function___get __pyx_mstate_global->__pyx_kp_u_FlowDevice_time_function___get
#define __pyx_n_s_FlowReactor __pyx_mstate_global->__pyx_n_s_FlowReactor
#define __pyx_n_u_FlowReactor __pyx_mstate_global->__pyx_n_u_FlowReactor
#define __pyx_n_s_IdealGasConstPressureMoleReactor __pyx_mstate_global->__pyx_n_s_IdealGasConstPressureMoleReactor
#define __pyx_n_u_IdealGasConstPressureMoleReactor __pyx_mstate_global->__pyx_n_u_IdealGasConstPressureMoleReactor
#define __pyx_n_s_IdealGasConstPressureReactor __pyx_mstate_global->__pyx_n_s_IdealGasConstPressureReactor
#define __pyx_n_u_IdealGasConstPressureReactor __pyx_mstate_global->__pyx_n_u_IdealGasConstPressureReactor
#define __pyx_n_s_IdealGasMoleReactor __pyx_mstate_global->__pyx_n_s_IdealGasMoleReactor
#define __pyx_n_u_IdealGasMoleReactor __pyx_mstate_global->__pyx_n_u_IdealGasMoleReactor
#define __pyx_n_s_IdealGasReactor __pyx_mstate_global->__pyx_n_s_IdealGasReactor
#define __pyx_n_u_IdealGasReactor __pyx_mstate_global->__pyx_n_u_IdealGasReactor
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_kp_u_Incorrect_number_of_site_coverag __pyx_mstate_global->__pyx_kp_u_Incorrect_number_of_site_coverag
#define __pyx_n_s_IndexError __pyx_mstate_global->__pyx_n_s_IndexError
#define __pyx_n_s_K __pyx_mstate_global->__pyx_n_s_K
#define __pyx_n_s_MassFlowController __pyx_mstate_global->__pyx_n_s_MassFlowController
#define __pyx_n_u_MassFlowController __pyx_mstate_global->__pyx_n_u_MassFlowController
#define __pyx_n_s_MassFlowController___reduce_cyth __pyx_mstate_global->__pyx_n_s_MassFlowController___reduce_cyth
#define __pyx_n_s_MassFlowController___setstate_cy __pyx_mstate_global->__pyx_n_s_MassFlowController___setstate_cy
#define __pyx_kp_u_Maximum_number_of_steps_reached __pyx_mstate_global->__pyx_kp_u_Maximum_number_of_steps_reached
#define __pyx_n_s_MoleReactor __pyx_mstate_global->__pyx_n_s_MoleReactor
#define __pyx_n_u_MoleReactor __pyx_mstate_global->__pyx_n_u_MoleReactor
#define __pyx_kp_u_No_kinetics_manager_present __pyx_mstate_global->__pyx_kp_u_No_kinetics_manager_present
#define __pyx_kp_u_No_such_component_r __pyx_mstate_global->__pyx_kp_u_No_such_component_r
#define __pyx_n_s_NotImplementedError __pyx_mstate_global->__pyx_n_s_NotImplementedError
#define __pyx_n_s_PressureController __pyx_mstate_global->__pyx_n_s_PressureController
#define __pyx_n_u_PressureController __pyx_mstate_global->__pyx_n_u_PressureController
#define __pyx_kp_u_PressureController_The_master_ke __pyx_mstate_global->__pyx_kp_u_PressureController_The_master_ke
#define __pyx_n_s_PressureController___reduce_cyth __pyx_mstate_global->__pyx_n_s_PressureController___reduce_cyth
#define __pyx_n_s_PressureController___setstate_cy __pyx_mstate_global->__pyx_n_s_PressureController___setstate_cy
#define __pyx_kp_u_PressureController_primary __pyx_mstate_global->__pyx_kp_u_PressureController_primary
#define __pyx_n_s_PressureController_set_master __pyx_mstate_global->__pyx_n_s_PressureController_set_master
#define __pyx_kp_u_PressureController_set_master_To __pyx_mstate_global->__pyx_kp_u_PressureController_set_master_To
#define __pyx_n_s_Q __pyx_mstate_global->__pyx_n_s_Q
#define __pyx_n_s_Reactor __pyx_mstate_global->__pyx_n_s_Reactor
#define __pyx_n_u_Reactor __pyx_mstate_global->__pyx_n_u_Reactor
#define __pyx_n_s_ReactorBase __pyx_mstate_global->__pyx_n_s_ReactorBase
#define __pyx_n_s_ReactorBase___copy __pyx_mstate_global->__pyx_n_s_ReactorBase___copy
#define __pyx_n_s_ReactorBase___reduce __pyx_mstate_global->__pyx_n_s_ReactorBase___reduce
#define __pyx_n_s_ReactorBase__add_inlet __pyx_mstate_global->__pyx_n_s_ReactorBase__add_inlet
#define __pyx_n_s_ReactorBase__add_outlet __pyx_mstate_global->__pyx_n_s_ReactorBase__add_outlet
#define __pyx_n_s_ReactorBase__add_wall __pyx_mstate_global->__pyx_n_s_ReactorBase__add_wall
#define __pyx_n_s_ReactorBase_insert __pyx_mstate_global->__pyx_n_s_ReactorBase_insert
#define __pyx_n_s_ReactorBase_syncState __pyx_mstate_global->__pyx_n_s_ReactorBase_syncState
#define __pyx_n_s_ReactorNet __pyx_mstate_global->__pyx_n_s_ReactorNet
#define __pyx_n_s_ReactorNet___copy __pyx_mstate_global->__pyx_n_s_ReactorNet___copy
#define __pyx_n_s_ReactorNet___reduce __pyx_mstate_global->__pyx_n_s_ReactorNet___reduce
#define __pyx_n_s_ReactorNet_add_reactor __pyx_mstate_global->__pyx_n_s_ReactorNet_add_reactor
#define __pyx_n_s_ReactorNet_advance __pyx_mstate_global->__pyx_n_s_ReactorNet_advance
#define __pyx_n_s_ReactorNet_advance_to_steady_sta __pyx_mstate_global->__pyx_n_s_ReactorNet_advance_to_steady_sta
#define __pyx_n_s_ReactorNet_component_name __pyx_mstate_global->__pyx_n_s_ReactorNet_component_name
#define __pyx_kp_u_ReactorNet_empty_or_not_initiali __pyx_mstate_global->__pyx_kp_u_ReactorNet_empty_or_not_initiali
#define __pyx_n_s_ReactorNet_get_derivative __pyx_mstate_global->__pyx_n_s_ReactorNet_get_derivative
#define __pyx_n_s_ReactorNet_get_state __pyx_mstate_global->__pyx_n_s_ReactorNet_get_state
#define __pyx_n_s_ReactorNet_global_component_inde __pyx_mstate_global->__pyx_n_s_ReactorNet_global_component_inde
#define __pyx_n_s_ReactorNet_initialize __pyx_mstate_global->__pyx_n_s_ReactorNet_initialize
#define __pyx_kp_u_ReactorNet_object_is_not_copyabl __pyx_mstate_global->__pyx_kp_u_ReactorNet_object_is_not_copyabl
#define __pyx_kp_u_ReactorNet_object_is_not_picklab __pyx_mstate_global->__pyx_kp_u_ReactorNet_object_is_not_picklab
#define __pyx_n_s_ReactorNet_reinitialize __pyx_mstate_global->__pyx_n_s_ReactorNet_reinitialize
#define __pyx_n_s_ReactorNet_sensitivities __pyx_mstate_global->__pyx_n_s_ReactorNet_sensitivities
#define __pyx_n_s_ReactorNet_sensitivity __pyx_mstate_global->__pyx_n_s_ReactorNet_sensitivity
#define __pyx_n_s_ReactorNet_sensitivity_parameter __pyx_mstate_global->__pyx_n_s_ReactorNet_sensitivity_parameter
#define __pyx_n_s_ReactorNet_set_initial_time __pyx_mstate_global->__pyx_n_s_ReactorNet_set_initial_time
#define __pyx_kp_u_ReactorNet_set_initial_time_To_b __pyx_mstate_global->__pyx_kp_u_ReactorNet_set_initial_time_To_b
#define __pyx_n_s_ReactorNet_step __pyx_mstate_global->__pyx_n_s_ReactorNet_step
#define __pyx_n_s_ReactorSurface __pyx_mstate_global->__pyx_n_s_ReactorSurface
#define __pyx_n_s_ReactorSurface___reduce_cython __pyx_mstate_global->__pyx_n_s_ReactorSurface___reduce_cython
#define __pyx_n_s_ReactorSurface___setstate_cython __pyx_mstate_global->__pyx_n_s_ReactorSurface___setstate_cython
#define __pyx_n_s_ReactorSurface_add_sensitivity_r __pyx_mstate_global->__pyx_n_s_ReactorSurface_add_sensitivity_r
#define __pyx_n_s_ReactorSurface_install __pyx_mstate_global->__pyx_n_s_ReactorSurface_install
#define __pyx_kp_u_Reactor___init___line_174 __pyx_mstate_global->__pyx_kp_u_Reactor___init___line_174
#define __pyx_n_s_Reactor_add_sensitivity_reaction __pyx_mstate_global->__pyx_n_s_Reactor_add_sensitivity_reaction
#define __pyx_n_s_Reactor_add_sensitivity_species __pyx_mstate_global->__pyx_n_s_Reactor_add_sensitivity_species
#define __pyx_n_s_Reactor_component_index __pyx_mstate_global->__pyx_n_s_Reactor_component_index
#define __pyx_n_s_Reactor_component_name __pyx_mstate_global->__pyx_n_s_Reactor_component_name
#define __pyx_kp_u_Reactor_empty_or_network_not_ini __pyx_mstate_global->__pyx_kp_u_Reactor_empty_or_network_not_ini
#define __pyx_n_s_Reactor_get_state __pyx_mstate_global->__pyx_n_s_Reactor_get_state
#define __pyx_n_s_Reactor_insert __pyx_mstate_global->__pyx_n_s_Reactor_insert
#define __pyx_kp_u_Reactor_object_is_not_copyable __pyx_mstate_global->__pyx_kp_u_Reactor_object_is_not_copyable
#define __pyx_kp_u_Reactor_object_is_not_picklable __pyx_mstate_global->__pyx_kp_u_Reactor_object_is_not_picklable
#define __pyx_n_s_Reactor_set_advance_limit __pyx_mstate_global->__pyx_n_s_Reactor_set_advance_limit
#define __pyx_n_s_Real __pyx_mstate_global->__pyx_n_s_Real
#define __pyx_n_s_Reservoir __pyx_mstate_global->__pyx_n_s_Reservoir
#define __pyx_n_u_Reservoir __pyx_mstate_global->__pyx_n_u_Reservoir
#define __pyx_kp_u_Residual_threshold __pyx_mstate_global->__pyx_kp_u_Residual_threshold
#define __pyx_kp_u_Set_the_relationship_between_ma __pyx_mstate_global->__pyx_kp_u_Set_the_relationship_between_ma
#define __pyx_kp_u_Set_the_time_dependence_of_a_fl __pyx_mstate_global->__pyx_kp_u_Set_the_time_dependence_of_a_fl
#define __pyx_n_s_T __pyx_mstate_global->__pyx_n_s_T
#define __pyx_kp_u_The_relationship_between_mass_f __pyx_mstate_global->__pyx_kp_u_The_relationship_between_mass_f
#define __pyx_kp_u_The_time_dependence_of_a_flow_d __pyx_mstate_global->__pyx_kp_u_The_time_dependence_of_a_flow_d
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_U __pyx_mstate_global->__pyx_n_s_U
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_Valve __pyx_mstate_global->__pyx_n_s_Valve
#define __pyx_n_u_Valve __pyx_mstate_global->__pyx_n_u_Valve
#define __pyx_n_s_Valve___reduce_cython __pyx_mstate_global->__pyx_n_s_Valve___reduce_cython
#define __pyx_n_s_Valve___setstate_cython __pyx_mstate_global->__pyx_n_s_Valve___setstate_cython
#define __pyx_n_s_Wall __pyx_mstate_global->__pyx_n_s_Wall
#define __pyx_n_u_Wall __pyx_mstate_global->__pyx_n_u_Wall
#define __pyx_n_s_WallBase __pyx_mstate_global->__pyx_n_s_WallBase
#define __pyx_n_s_WallBase___reduce_cython __pyx_mstate_global->__pyx_n_s_WallBase___reduce_cython
#define __pyx_n_s_WallBase___setstate_cython __pyx_mstate_global->__pyx_n_s_WallBase___setstate_cython
#define __pyx_n_s_WallBase__install __pyx_mstate_global->__pyx_n_s_WallBase__install
#define __pyx_n_s_WallBase_qdot __pyx_mstate_global->__pyx_n_s_WallBase_qdot
#define __pyx_n_s_WallBase_vdot __pyx_mstate_global->__pyx_n_s_WallBase_vdot
#define __pyx_kp_u_Wall__0 __pyx_mstate_global->__pyx_kp_u_Wall__0
#define __pyx_n_s_Wall___reduce_cython __pyx_mstate_global->__pyx_n_s_Wall___reduce_cython
#define __pyx_n_s_Wall___setstate_cython __pyx_mstate_global->__pyx_n_s_Wall___setstate_cython
#define __pyx_n_s_Wall_set_heat_flux __pyx_mstate_global->__pyx_n_s_Wall_set_heat_flux
#define __pyx_kp_u_Wall_set_heat_flux_To_be_removed __pyx_mstate_global->__pyx_kp_u_Wall_set_heat_flux_To_be_removed
#define __pyx_n_s_Wall_set_velocity __pyx_mstate_global->__pyx_n_s_Wall_set_velocity
#define __pyx_kp_u_Wall_set_velocity_To_be_removed __pyx_mstate_global->__pyx_kp_u_Wall_set_velocity_To_be_removed
#define __pyx_n_s_WeakrefProxy __pyx_mstate_global->__pyx_n_s_WeakrefProxy
#define __pyx_n_s_Y __pyx_mstate_global->__pyx_n_s_Y
#define __pyx_n_s__125 __pyx_mstate_global->__pyx_n_s__125
#define __pyx_kp_u__20 __pyx_mstate_global->__pyx_kp_u__20
#define __pyx_n_s__23 __pyx_mstate_global->__pyx_n_s__23
#define __pyx_kp_u__24 __pyx_mstate_global->__pyx_kp_u__24
#define __pyx_n_s_add_inlet __pyx_mstate_global->__pyx_n_s_add_inlet
#define __pyx_n_s_add_outlet __pyx_mstate_global->__pyx_n_s_add_outlet
#define __pyx_n_s_add_reactor __pyx_mstate_global->__pyx_n_s_add_reactor
#define __pyx_n_s_add_sensitivity_reaction __pyx_mstate_global->__pyx_n_s_add_sensitivity_reaction
#define __pyx_n_s_add_sensitivity_species_enthalpy __pyx_mstate_global->__pyx_n_s_add_sensitivity_species_enthalpy
#define __pyx_n_s_add_wall __pyx_mstate_global->__pyx_n_s_add_wall
#define __pyx_n_s_advance __pyx_mstate_global->__pyx_n_s_advance
#define __pyx_n_s_advance_to_steady_state __pyx_mstate_global->__pyx_n_s_advance_to_steady_state
#define __pyx_n_s_apply_limit __pyx_mstate_global->__pyx_n_s_apply_limit
#define __pyx_n_s_area __pyx_mstate_global->__pyx_n_s_area
#define __pyx_kp_u_array_must_be_of_length_n_vars __pyx_mstate_global->__pyx_kp_u_array_must_be_of_length_n_vars
#define __pyx_n_s_ascontiguousarray __pyx_mstate_global->__pyx_n_s_ascontiguousarray
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_atol __pyx_mstate_global->__pyx_n_s_atol
#define __pyx_n_s_cantera_reactor __pyx_mstate_global->__pyx_n_s_cantera_reactor
#define __pyx_kp_s_cantera_reactor_pyx __pyx_mstate_global->__pyx_kp_s_cantera_reactor_pyx
#define __pyx_n_s_class __pyx_mstate_global->__pyx_n_s_class
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_collections __pyx_mstate_global->__pyx_n_s_collections
#define __pyx_n_s_component __pyx_mstate_global->__pyx_n_s_component
#define __pyx_n_u_componentIndex __pyx_mstate_global->__pyx_n_u_componentIndex
#define __pyx_n_u_componentName __pyx_mstate_global->__pyx_n_u_componentName
#define __pyx_n_s_component_index __pyx_mstate_global->__pyx_n_s_component_index
#define __pyx_n_u_component_index __pyx_mstate_global->__pyx_n_u_component_index
#define __pyx_n_s_component_name __pyx_mstate_global->__pyx_n_s_component_name
#define __pyx_n_u_component_name __pyx_mstate_global->__pyx_n_u_component_name
#define __pyx_n_s_contents __pyx_mstate_global->__pyx_n_s_contents
#define __pyx_n_s_copy __pyx_mstate_global->__pyx_n_s_copy
#define __pyx_n_s_coverages __pyx_mstate_global->__pyx_n_s_coverages
#define __pyx_n_s_d __pyx_mstate_global->__pyx_n_s_d
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_defaultdict __pyx_mstate_global->__pyx_n_s_defaultdict
#define __pyx_n_s_defaultdict_2 __pyx_mstate_global->__pyx_n_s_defaultdict_2
#define __pyx_n_s_delegatable_methods __pyx_mstate_global->__pyx_n_s_delegatable_methods
#define __pyx_n_s_density __pyx_mstate_global->__pyx_n_s_density
#define __pyx_n_s_density_mass __pyx_mstate_global->__pyx_n_s_density_mass
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_dky __pyx_mstate_global->__pyx_n_s_dky
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_double __pyx_mstate_global->__pyx_n_s_double
#define __pyx_n_s_downstream __pyx_mstate_global->__pyx_n_s_downstream
#define __pyx_n_s_dtype __pyx_mstate_global->__pyx_n_s_dtype
#define __pyx_n_s_empty __pyx_mstate_global->__pyx_n_s_empty
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_energy __pyx_mstate_global->__pyx_n_s_energy
#define __pyx_n_s_energy_enabled __pyx_mstate_global->__pyx_n_s_energy_enabled
#define __pyx_kp_u_energy_must_be_either_on_or_off __pyx_mstate_global->__pyx_kp_u_energy_must_be_either_on_or_off
#define __pyx_n_u_eval __pyx_mstate_global->__pyx_n_u_eval
#define __pyx_n_u_evalSurfaces __pyx_mstate_global->__pyx_n_u_evalSurfaces
#define __pyx_n_u_evalWalls __pyx_mstate_global->__pyx_n_u_evalWalls
#define __pyx_n_u_eval_surfaces __pyx_mstate_global->__pyx_n_u_eval_surfaces
#define __pyx_n_u_eval_walls __pyx_mstate_global->__pyx_n_u_eval_walls
#define __pyx_n_s_expansion_rate_coeff __pyx_mstate_global->__pyx_n_s_expansion_rate_coeff
#define __pyx_n_s_flowdevice_type __pyx_mstate_global->__pyx_n_s_flowdevice_type
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_u_getState __pyx_mstate_global->__pyx_n_u_getState
#define __pyx_n_u_getSurfaceInitialConditions __pyx_mstate_global->__pyx_n_u_getSurfaceInitialConditions
#define __pyx_n_s_get_derivative __pyx_mstate_global->__pyx_n_s_get_derivative
#define __pyx_n_s_get_state __pyx_mstate_global->__pyx_n_s_get_state
#define __pyx_n_u_get_state __pyx_mstate_global->__pyx_n_u_get_state
#define __pyx_n_u_get_surface_initial_conditions __pyx_mstate_global->__pyx_n_u_get_surface_initial_conditions
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_global_component_index __pyx_mstate_global->__pyx_n_s_global_component_index
#define __pyx_n_s_heat_flux __pyx_mstate_global->__pyx_n_s_heat_flux
#define __pyx_n_s_heat_transfer_coeff __pyx_mstate_global->__pyx_n_s_heat_transfer_coeff
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_init_subclass __pyx_mstate_global->__pyx_n_s_init_subclass
#define __pyx_n_s_initial_time __pyx_mstate_global->__pyx_n_s_initial_time
#define __pyx_n_s_initialize __pyx_mstate_global->__pyx_n_s_initialize
#define __pyx_n_u_initialize __pyx_mstate_global->__pyx_n_u_initialize
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_inlet __pyx_mstate_global->__pyx_n_s_inlet
#define __pyx_n_s_insert __pyx_mstate_global->__pyx_n_s_insert
#define __pyx_n_s_install __pyx_mstate_global->__pyx_n_s_install
#define __pyx_n_s_install_2 __pyx_mstate_global->__pyx_n_s_install_2
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_k __pyx_mstate_global->__pyx_n_s_k
#define __pyx_n_s_kin __pyx_mstate_global->__pyx_n_s_kin
#define __pyx_n_s_kinetics __pyx_mstate_global->__pyx_n_s_kinetics
#define __pyx_n_s_left __pyx_mstate_global->__pyx_n_s_left
#define __pyx_n_s_limit __pyx_mstate_global->__pyx_n_s_limit
#define __pyx_n_s_linalg __pyx_mstate_global->__pyx_n_s_linalg
#define __pyx_n_s_linear_solver_type __pyx_mstate_global->__pyx_n_s_linear_solver_type
#define __pyx_n_s_m __pyx_mstate_global->__pyx_n_s_m
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_mass_flow_coeff __pyx_mstate_global->__pyx_n_s_mass_flow_coeff
#define __pyx_n_s_mass_flow_rate __pyx_mstate_global->__pyx_n_s_mass_flow_rate
#define __pyx_n_u_master __pyx_mstate_global->__pyx_n_u_master
#define __pyx_n_s_max_state_values __pyx_mstate_global->__pyx_n_s_max_state_values
#define __pyx_n_s_max_steps __pyx_mstate_global->__pyx_n_s_max_steps
#define __pyx_n_s_maximum __pyx_mstate_global->__pyx_n_s_maximum
#define __pyx_n_s_mdot __pyx_mstate_global->__pyx_n_s_mdot
#define __pyx_n_s_metaclass __pyx_mstate_global->__pyx_n_s_metaclass
#define __pyx_n_s_module __pyx_mstate_global->__pyx_n_s_module
#define __pyx_n_s_n __pyx_mstate_global->__pyx_n_s_n
#define __pyx_n_s_n1 __pyx_mstate_global->__pyx_n_s_n1
#define __pyx_n_s_n_sensitivity_params __pyx_mstate_global->__pyx_n_s_n_sensitivity_params
#define __pyx_n_s_n_species __pyx_mstate_global->__pyx_n_s_n_species
#define __pyx_n_s_n_vars __pyx_mstate_global->__pyx_n_s_n_vars
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_u_none __pyx_mstate_global->__pyx_n_u_none
#define __pyx_n_s_norm __pyx_mstate_global->__pyx_n_s_norm
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_numbers __pyx_mstate_global->__pyx_n_s_numbers
#define __pyx_n_s_numbers_2 __pyx_mstate_global->__pyx_n_s_numbers_2
#define __pyx_kp_u_numpy_core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy_core_multiarray_failed_to
#define __pyx_kp_u_numpy_core_umath_failed_to_impor __pyx_mstate_global->__pyx_kp_u_numpy_core_umath_failed_to_impor
#define __pyx_n_u_off __pyx_mstate_global->__pyx_n_u_off
#define __pyx_n_u_on __pyx_mstate_global->__pyx_n_u_on
#define __pyx_n_s_ones __pyx_mstate_global->__pyx_n_s_ones
#define __pyx_n_s_outlet __pyx_mstate_global->__pyx_n_s_outlet
#define __pyx_n_s_p __pyx_mstate_global->__pyx_n_s_p
#define __pyx_kp_u_param_contents_Reactor_contents __pyx_mstate_global->__pyx_kp_u_param_contents_Reactor_contents
#define __pyx_n_s_precon_linear_solver_type __pyx_mstate_global->__pyx_n_s_precon_linear_solver_type
#define __pyx_n_s_prepare __pyx_mstate_global->__pyx_n_s_prepare
#define __pyx_n_s_pressure_coeff __pyx_mstate_global->__pyx_n_s_pressure_coeff
#define __pyx_n_s_pressure_function __pyx_mstate_global->__pyx_n_s_pressure_function
#define __pyx_n_s_previous_state __pyx_mstate_global->__pyx_n_s_previous_state
#define __pyx_n_s_primary __pyx_mstate_global->__pyx_n_s_primary
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_q __pyx_mstate_global->__pyx_n_s_q
#define __pyx_n_s_qdot __pyx_mstate_global->__pyx_n_s_qdot
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_r __pyx_mstate_global->__pyx_n_s_r
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_reactor __pyx_mstate_global->__pyx_n_s_reactor
#define __pyx_n_s_reactor_counts __pyx_mstate_global->__pyx_n_s_reactor_counts
#define __pyx_n_s_reactor_type __pyx_mstate_global->__pyx_n_s_reactor_type
#define __pyx_n_s_reactors __pyx_mstate_global->__pyx_n_s_reactors
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_references __pyx_mstate_global->__pyx_n_s_references
#define __pyx_n_s_reinitialize __pyx_mstate_global->__pyx_n_s_reinitialize
#define __pyx_n_s_residual __pyx_mstate_global->__pyx_n_s_residual
#define __pyx_n_s_residual_threshold __pyx_mstate_global->__pyx_n_s_residual_threshold
#define __pyx_n_s_residuals __pyx_mstate_global->__pyx_n_s_residuals
#define __pyx_n_s_restore_surface_state __pyx_mstate_global->__pyx_n_s_restore_surface_state
#define __pyx_n_s_restore_thermo_state __pyx_mstate_global->__pyx_n_s_restore_thermo_state
#define __pyx_n_s_return_residuals __pyx_mstate_global->__pyx_n_s_return_residuals
#define __pyx_n_s_right __pyx_mstate_global->__pyx_n_s_right
#define __pyx_n_s_rtol __pyx_mstate_global->__pyx_n_s_rtol
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_n_s_sensitivities __pyx_mstate_global->__pyx_n_s_sensitivities
#define __pyx_n_s_sensitivity __pyx_mstate_global->__pyx_n_s_sensitivity
#define __pyx_n_s_sensitivity_parameter_name __pyx_mstate_global->__pyx_n_s_sensitivity_parameter_name
#define __pyx_n_s_set_advance_limit __pyx_mstate_global->__pyx_n_s_set_advance_limit
#define __pyx_n_s_set_heat_flux __pyx_mstate_global->__pyx_n_s_set_heat_flux
#define __pyx_n_s_set_initial_time __pyx_mstate_global->__pyx_n_s_set_initial_time
#define __pyx_n_s_set_master __pyx_mstate_global->__pyx_n_s_set_master
#define __pyx_n_s_set_name __pyx_mstate_global->__pyx_n_s_set_name
#define __pyx_n_s_set_pressure_function __pyx_mstate_global->__pyx_n_s_set_pressure_function
#define __pyx_n_s_set_time_function __pyx_mstate_global->__pyx_n_s_set_time_function
#define __pyx_n_s_set_velocity __pyx_mstate_global->__pyx_n_s_set_velocity
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_kp_u_should_be_below_solver_rtol __pyx_mstate_global->__pyx_kp_u_should_be_below_solver_rtol
#define __pyx_kp_u_size_t_string __pyx_mstate_global->__pyx_kp_u_size_t_string
#define __pyx_n_s_solution __pyx_mstate_global->__pyx_n_s_solution
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_u_speciesIndex __pyx_mstate_global->__pyx_n_u_speciesIndex
#define __pyx_n_s_species_index __pyx_mstate_global->__pyx_n_s_species_index
#define __pyx_n_u_species_index __pyx_mstate_global->__pyx_n_u_species_index
#define __pyx_n_s_sqrt __pyx_mstate_global->__pyx_n_s_sqrt
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_n_s_step __pyx_mstate_global->__pyx_n_s_step
#define __pyx_kp_u_string_size_t __pyx_mstate_global->__pyx_kp_u_string_size_t
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_syncState __pyx_mstate_global->__pyx_n_s_syncState
#define __pyx_n_u_syncState __pyx_mstate_global->__pyx_n_u_syncState
#define __pyx_n_u_sync_state __pyx_mstate_global->__pyx_n_u_sync_state
#define __pyx_n_s_t __pyx_mstate_global->__pyx_n_s_t
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_thermo __pyx_mstate_global->__pyx_n_s_thermo
#define __pyx_n_s_time_function __pyx_mstate_global->__pyx_n_s_time_function
#define __pyx_n_u_updateConnected __pyx_mstate_global->__pyx_n_u_updateConnected
#define __pyx_n_u_updateState __pyx_mstate_global->__pyx_n_u_updateState
#define __pyx_n_u_updateSurfaceState __pyx_mstate_global->__pyx_n_u_updateSurfaceState
#define __pyx_n_u_update_connected __pyx_mstate_global->__pyx_n_u_update_connected
#define __pyx_n_u_update_state __pyx_mstate_global->__pyx_n_u_update_state
#define __pyx_n_u_update_surface_state __pyx_mstate_global->__pyx_n_u_update_surface_state
#define __pyx_n_s_upstream __pyx_mstate_global->__pyx_n_s_upstream
#define __pyx_n_s_utils __pyx_mstate_global->__pyx_n_s_utils
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_n_s_valve_coeff __pyx_mstate_global->__pyx_n_s_valve_coeff
#define __pyx_n_s_vdot __pyx_mstate_global->__pyx_n_s_vdot
#define __pyx_n_s_velocity __pyx_mstate_global->__pyx_n_s_velocity
#define __pyx_kp_u_void __pyx_mstate_global->__pyx_kp_u_void
#define __pyx_kp_u_void_bool __pyx_mstate_global->__pyx_kp_u_void_bool
#define __pyx_kp_u_void_double __pyx_mstate_global->__pyx_kp_u_void_double
#define __pyx_kp_u_void_double_2 __pyx_mstate_global->__pyx_kp_u_void_double_2
#define __pyx_kp_u_void_double_double_double __pyx_mstate_global->__pyx_kp_u_void_double_double_double
#define __pyx_kp_u_void_double_double_double_2 __pyx_mstate_global->__pyx_kp_u_void_double_double_double_2
#define __pyx_n_s_volume __pyx_mstate_global->__pyx_n_s_volume
#define __pyx_n_s_wall __pyx_mstate_global->__pyx_n_s_wall
#define __pyx_n_s_wall_type __pyx_mstate_global->__pyx_n_s_wall_type
#define __pyx_n_s_warn __pyx_mstate_global->__pyx_n_s_warn
#define __pyx_n_s_warnings __pyx_mstate_global->__pyx_n_s_warnings
#define __pyx_n_s_y __pyx_mstate_global->__pyx_n_s_y
#define __pyx_n_s_zeros __pyx_mstate_global->__pyx_n_s_zeros
#define __pyx_float_0_ __pyx_mstate_global->__pyx_float_0_
#define __pyx_float_1_ __pyx_mstate_global->__pyx_float_1_
#define __pyx_float_10_ __pyx_mstate_global->__pyx_float_10_
#define __pyx_float_neg_1_ __pyx_mstate_global->__pyx_float_neg_1_
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_10000 __pyx_mstate_global->__pyx_int_10000
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__3 __pyx_mstate_global->__pyx_tuple__3
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__44 __pyx_mstate_global->__pyx_tuple__44
#define __pyx_tuple__46 __pyx_mstate_global->__pyx_tuple__46
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__59 __pyx_mstate_global->__pyx_tuple__59
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__61 __pyx_mstate_global->__pyx_tuple__61
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__66 __pyx_mstate_global->__pyx_tuple__66
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__74 __pyx_mstate_global->__pyx_tuple__74
#define __pyx_tuple__79 __pyx_mstate_global->__pyx_tuple__79
#define __pyx_tuple__81 __pyx_mstate_global->__pyx_tuple__81
#define __pyx_tuple__85 __pyx_mstate_global->__pyx_tuple__85
#define __pyx_tuple__95 __pyx_mstate_global->__pyx_tuple__95
#define __pyx_tuple__100 __pyx_mstate_global->__pyx_tuple__100
#define __pyx_tuple__102 __pyx_mstate_global->__pyx_tuple__102
#define __pyx_tuple__107 __pyx_mstate_global->__pyx_tuple__107
#define __pyx_tuple__110 __pyx_mstate_global->__pyx_tuple__110
#define __pyx_tuple__112 __pyx_mstate_global->__pyx_tuple__112
#define __pyx_tuple__113 __pyx_mstate_global->__pyx_tuple__113
#define __pyx_tuple__115 __pyx_mstate_global->__pyx_tuple__115
#define __pyx_tuple__118 __pyx_mstate_global->__pyx_tuple__118
#define __pyx_tuple__120 __pyx_mstate_global->__pyx_tuple__120
#define __pyx_tuple__122 __pyx_mstate_global->__pyx_tuple__122
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__36 __pyx_mstate_global->__pyx_codeobj__36
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__65 __pyx_mstate_global->__pyx_codeobj__65
#define __pyx_codeobj__67 __pyx_mstate_global->__pyx_codeobj__67
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__75 __pyx_mstate_global->__pyx_codeobj__75
#define __pyx_codeobj__76 __pyx_mstate_global->__pyx_codeobj__76
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__78 __pyx_mstate_global->__pyx_codeobj__78
#define __pyx_codeobj__80 __pyx_mstate_global->__pyx_codeobj__80
#define __pyx_codeobj__82 __pyx_mstate_global->__pyx_codeobj__82
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__84 __pyx_mstate_global->__pyx_codeobj__84
#define __pyx_codeobj__86 __pyx_mstate_global->__pyx_codeobj__86
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__88 __pyx_mstate_global->__pyx_codeobj__88
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__90 __pyx_mstate_global->__pyx_codeobj__90
#define __pyx_codeobj__91 __pyx_mstate_global->__pyx_codeobj__91
#define __pyx_codeobj__92 __pyx_mstate_global->__pyx_codeobj__92
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__98 __pyx_mstate_global->__pyx_codeobj__98
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__105 __pyx_mstate_global->__pyx_codeobj__105
#define __pyx_codeobj__106 __pyx_mstate_global->__pyx_codeobj__106
#define __pyx_codeobj__108 __pyx_mstate_global->__pyx_codeobj__108
#define __pyx_codeobj__109 __pyx_mstate_global->__pyx_codeobj__109
#define __pyx_codeobj__111 __pyx_mstate_global->__pyx_codeobj__111
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
#define __pyx_codeobj__116 __pyx_mstate_global->__pyx_codeobj__116
#define __pyx_codeobj__117 __pyx_mstate_global->__pyx_codeobj__117
#define __pyx_codeobj__119 __pyx_mstate_global->__pyx_codeobj__119
#define __pyx_codeobj__121 __pyx_mstate_global->__pyx_codeobj__121
#define __pyx_codeobj__123 __pyx_mstate_global->__pyx_codeobj__123
#define __pyx_codeobj__124 __pyx_mstate_global->__pyx_codeobj__124
/* #### Code section: module_code ### */

/* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("real", 0);

  /* "cpython/complex.pxd":20
 *         @property
 *         cdef inline double real(self):
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = __pyx_v_self->cval.real;
  goto __pyx_L0;

  /* "cpython/complex.pxd":19
 * 
 *         @property
 *         cdef inline double real(self):             # <<<<<<<<<<<<<<
 *             return self.cval.real
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("imag", 0);

  /* "cpython/complex.pxd":24
 *         @property
 *         cdef inline double imag(self):
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
 */
  __pyx_r = __pyx_v_self->cval.imag;
  goto __pyx_L0;

  /* "cpython/complex.pxd":23
 * 
 *         @property
 *         cdef inline double imag(self):             # <<<<<<<<<<<<<<
 *             return self.cval.imag
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":117
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":118
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 118, __pyx_L1_error)

  /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
  __pyx_t_2 = (__pyx_v_value == NULL);
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":121
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
 */
    __Pyx_INCREF(__pyx_v_default_value);
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":119
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
 */
    goto __pyx_L3;
  }

  /* "cpython/contextvars.pxd":124
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_v_value);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_pyvalue = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":125
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
 */
    Py_XDECREF(__pyx_v_value);
  }
  __pyx_L3:;

  /* "cpython/contextvars.pxd":126
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":112
 * 
 * 
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value_no_default", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":135
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 */
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":136
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 */
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 136, __pyx_L1_error)

  /* "cpython/contextvars.pxd":138
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_value);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pyvalue = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":139
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 */
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":140
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":129
 * 
 * 
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":249
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":255
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":261
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":269
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":276
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":282
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":291
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":784
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":787
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":790
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);
  if (__pyx_t_1) {

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":794
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":796
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":971
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":972
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":973
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":971
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":975
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":976
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":977
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = (__pyx_v_base == NULL);
  if (__pyx_t_1) {

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":978
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":977
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":979
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":975
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":983
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":984
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":985
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 985, __pyx_L3_error)

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":984
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":986
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 986, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":987
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 987, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 987, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":984
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":983
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":989
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":990
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":991
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 991, __pyx_L3_error)

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":990
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":992
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 992, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":993
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 993, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 993, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":990
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":989
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":995
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":996
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":997
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 997, __pyx_L3_error)

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":996
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":998
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 998, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":999
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 999, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 999, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":996
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":995
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1002
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1014
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1002
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1017
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1029
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1017
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1032
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1039
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1032
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1042
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1046
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1042
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1049
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1053
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":1049
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "cantera/reactor.pyx":25
 *     """
 *     reactor_type = "none"
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._reactor = newReactor3(stringify(self.reactor_type))
 *         self.rbase = self._reactor.get()
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_11ReactorBase_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_11ReactorBase_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase___cinit__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_11ReactorBase___cinit__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  std::shared_ptr<Cantera::ReactorBase>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cantera/reactor.pyx":26
 *     reactor_type = "none"
 *     def __cinit__(self, *args, **kwargs):
 *         self._reactor = newReactor3(stringify(self.reactor_type))             # <<<<<<<<<<<<<<
 *         self.rbase = self._reactor.get()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reactor_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_7cantera_6_utils_stringify(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = Cantera::newReactor3(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 26, __pyx_L1_error)
  }
  __pyx_v_self->_reactor = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "cantera/reactor.pyx":27
 *     def __cinit__(self, *args, **kwargs):
 *         self._reactor = newReactor3(stringify(self.reactor_type))
 *         self.rbase = self._reactor.get()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, ThermoPhase contents=None, name=None, *, volume=None):
 */
  __pyx_v_self->rbase = __pyx_v_self->_reactor.get();

  /* "cantera/reactor.pyx":25
 *     """
 *     reactor_type = "none"
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._reactor = newReactor3(stringify(self.reactor_type))
 *         self.rbase = self._reactor.get()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":29
 *         self.rbase = self._reactor.get()
 * 
 *     def __init__(self, ThermoPhase contents=None, name=None, *, volume=None):             # <<<<<<<<<<<<<<
 *         self._weakref_proxy = _WeakrefProxy()
 *         self._inlets = []
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_11ReactorBase_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_11ReactorBase_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_contents = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_volume = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_contents,&__pyx_n_s_name,&__pyx_n_s_volume,0};
    PyObject* values[3] = {0,0,0};
    values[0] = (PyObject *)((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_contents);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 29, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 29, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 2;
        PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = value; kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 29, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 29, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_contents = ((struct __pyx_obj_7cantera_6thermo_ThermoPhase *)values[0]);
    __pyx_v_name = values[1];
    __pyx_v_volume = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, __pyx_nargs); __PYX_ERR(0, 29, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_contents), __pyx_ptype_7cantera_6thermo_ThermoPhase, 1, "contents", 0))) __PYX_ERR(0, 29, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_2__init__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self), __pyx_v_contents, __pyx_v_name, __pyx_v_volume);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_11ReactorBase_2__init__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, struct __pyx_obj_7cantera_6thermo_ThermoPhase *__pyx_v_contents, PyObject *__pyx_v_name, PyObject *__pyx_v_volume) {
  PyObject *__pyx_v_n = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/reactor.pyx":30
 * 
 *     def __init__(self, ThermoPhase contents=None, name=None, *, volume=None):
 *         self._weakref_proxy = _WeakrefProxy()             # <<<<<<<<<<<<<<
 *         self._inlets = []
 *         self._outlets = []
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_WeakrefProxy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_weakref_proxy);
  __Pyx_DECREF(__pyx_v_self->_weakref_proxy);
  __pyx_v_self->_weakref_proxy = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":31
 *     def __init__(self, ThermoPhase contents=None, name=None, *, volume=None):
 *         self._weakref_proxy = _WeakrefProxy()
 *         self._inlets = []             # <<<<<<<<<<<<<<
 *         self._outlets = []
 *         self._walls = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_inlets);
  __Pyx_DECREF(__pyx_v_self->_inlets);
  __pyx_v_self->_inlets = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":32
 *         self._weakref_proxy = _WeakrefProxy()
 *         self._inlets = []
 *         self._outlets = []             # <<<<<<<<<<<<<<
 *         self._walls = []
 *         self._surfaces = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_outlets);
  __Pyx_DECREF(__pyx_v_self->_outlets);
  __pyx_v_self->_outlets = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":33
 *         self._inlets = []
 *         self._outlets = []
 *         self._walls = []             # <<<<<<<<<<<<<<
 *         self._surfaces = []
 *         if isinstance(contents, ThermoPhase):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_walls);
  __Pyx_DECREF(__pyx_v_self->_walls);
  __pyx_v_self->_walls = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":34
 *         self._outlets = []
 *         self._walls = []
 *         self._surfaces = []             # <<<<<<<<<<<<<<
 *         if isinstance(contents, ThermoPhase):
 *             self.insert(contents)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_surfaces);
  __Pyx_DECREF(__pyx_v_self->_surfaces);
  __pyx_v_self->_surfaces = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":35
 *         self._walls = []
 *         self._surfaces = []
 *         if isinstance(contents, ThermoPhase):             # <<<<<<<<<<<<<<
 *             self.insert(contents)
 * 
 */
  __pyx_t_5 = __Pyx_TypeCheck(((PyObject *)__pyx_v_contents), __pyx_ptype_7cantera_6thermo_ThermoPhase); 
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":36
 *         self._surfaces = []
 *         if isinstance(contents, ThermoPhase):
 *             self.insert(contents)             # <<<<<<<<<<<<<<
 * 
 *         if name is not None:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_insert); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_contents)};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cantera/reactor.pyx":35
 *         self._walls = []
 *         self._surfaces = []
 *         if isinstance(contents, ThermoPhase):             # <<<<<<<<<<<<<<
 *             self.insert(contents)
 * 
 */
  }

  /* "cantera/reactor.pyx":38
 *             self.insert(contents)
 * 
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             self.name = name
 *         else:
 */
  __pyx_t_5 = (__pyx_v_name != Py_None);
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":39
 * 
 *         if name is not None:
 *             self.name = name             # <<<<<<<<<<<<<<
 *         else:
 *             _reactor_counts[self.reactor_type] += 1
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(0, 39, __pyx_L1_error)

    /* "cantera/reactor.pyx":38
 *             self.insert(contents)
 * 
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             self.name = name
 *         else:
 */
    goto __pyx_L4;
  }

  /* "cantera/reactor.pyx":41
 *             self.name = name
 *         else:
 *             _reactor_counts[self.reactor_type] += 1             # <<<<<<<<<<<<<<
 *             n = _reactor_counts[self.reactor_type]
 *             self.name = '{0}_{1}'.format(self.reactor_type, n)
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reactor_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_reactor_counts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_reactor_counts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely((PyObject_SetItem(__pyx_t_3, __pyx_t_1, __pyx_t_2) < 0))) __PYX_ERR(0, 41, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "cantera/reactor.pyx":42
 *         else:
 *             _reactor_counts[self.reactor_type] += 1
 *             n = _reactor_counts[self.reactor_type]             # <<<<<<<<<<<<<<
 *             self.name = '{0}_{1}'.format(self.reactor_type, n)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_reactor_counts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reactor_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_n = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cantera/reactor.pyx":43
 *             _reactor_counts[self.reactor_type] += 1
 *             n = _reactor_counts[self.reactor_type]
 *             self.name = '{0}_{1}'.format(self.reactor_type, n)             # <<<<<<<<<<<<<<
 * 
 *         if volume is not None:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_0___1, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reactor_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_1, __pyx_v_n};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_name, __pyx_t_3) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L4:;

  /* "cantera/reactor.pyx":45
 *             self.name = '{0}_{1}'.format(self.reactor_type, n)
 * 
 *         if volume is not None:             # <<<<<<<<<<<<<<
 *             self.volume = volume
 * 
 */
  __pyx_t_5 = (__pyx_v_volume != Py_None);
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":46
 * 
 *         if volume is not None:
 *             self.volume = volume             # <<<<<<<<<<<<<<
 * 
 *     def insert(self, _SolutionBase solution):
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_volume, __pyx_v_volume) < 0) __PYX_ERR(0, 46, __pyx_L1_error)

    /* "cantera/reactor.pyx":45
 *             self.name = '{0}_{1}'.format(self.reactor_type, n)
 * 
 *         if volume is not None:             # <<<<<<<<<<<<<<
 *             self.volume = volume
 * 
 */
  }

  /* "cantera/reactor.pyx":29
 *         self.rbase = self._reactor.get()
 * 
 *     def __init__(self, ThermoPhase contents=None, name=None, *, volume=None):             # <<<<<<<<<<<<<<
 *         self._weakref_proxy = _WeakrefProxy()
 *         self._inlets = []
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":48
 *             self.volume = volume
 * 
 *     def insert(self, _SolutionBase solution):             # <<<<<<<<<<<<<<
 *         """
 *         Set ``solution`` to be the object used to compute thermodynamic
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_5insert(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_11ReactorBase_4insert, "\n        Set ``solution`` to be the object used to compute thermodynamic\n        properties and kinetic rates for this reactor.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_11ReactorBase_5insert = {"insert", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_5insert, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_11ReactorBase_4insert};
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_5insert(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7cantera_12solutionbase__SolutionBase *__pyx_v_solution = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_solution,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_solution)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "insert") < 0)) __PYX_ERR(0, 48, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_solution = ((struct __pyx_obj_7cantera_12solutionbase__SolutionBase *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 48, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_solution), __pyx_ptype_7cantera_12solutionbase__SolutionBase, 1, "solution", 0))) __PYX_ERR(0, 48, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_4insert(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self), __pyx_v_solution);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_4insert(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, struct __pyx_obj_7cantera_12solutionbase__SolutionBase *__pyx_v_solution) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("insert", 0);

  /* "cantera/reactor.pyx":53
 *         properties and kinetic rates for this reactor.
 *         """
 *         self._thermo = solution             # <<<<<<<<<<<<<<
 *         # Block species from being added to the phase as long as this object exists
 *         self._thermo._references[self._weakref_proxy] = True
 */
  __Pyx_INCREF((PyObject *)__pyx_v_solution);
  __Pyx_GIVEREF((PyObject *)__pyx_v_solution);
  __Pyx_GOTREF(__pyx_v_self->_thermo);
  __Pyx_DECREF(__pyx_v_self->_thermo);
  __pyx_v_self->_thermo = ((PyObject *)__pyx_v_solution);

  /* "cantera/reactor.pyx":55
 *         self._thermo = solution
 *         # Block species from being added to the phase as long as this object exists
 *         self._thermo._references[self._weakref_proxy] = True             # <<<<<<<<<<<<<<
 *         self.rbase.setThermoMgr(deref(solution.thermo))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_thermo, __pyx_n_s_references); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_v_self->_weakref_proxy, Py_True) < 0))) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":56
 *         # Block species from being added to the phase as long as this object exists
 *         self._thermo._references[self._weakref_proxy] = True
 *         self.rbase.setThermoMgr(deref(solution.thermo))             # <<<<<<<<<<<<<<
 * 
 *     property type:
 */
  try {
    __pyx_v_self->rbase->setThermoMgr((*__pyx_v_solution->thermo));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 56, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":48
 *             self.volume = volume
 * 
 *     def insert(self, _SolutionBase solution):             # <<<<<<<<<<<<<<
 *         """
 *         Set ``solution`` to be the object used to compute thermodynamic
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":60
 *     property type:
 *         """The type of the reactor."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.rbase.type())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_4type_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_4type___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_4type___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":61
 *         """The type of the reactor."""
 *         def __get__(self):
 *             return pystr(self.rbase.type())             # <<<<<<<<<<<<<<
 * 
 *     property name:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6_utils_pystr(__pyx_v_self->rbase->type()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":60
 *     property type:
 *         """The type of the reactor."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.rbase.type())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":65
 *     property name:
 *         """The name of the reactor."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.rbase.name())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_4name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_4name___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_4name___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":66
 *         """The name of the reactor."""
 *         def __get__(self):
 *             return pystr(self.rbase.name())             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6_utils_pystr(__pyx_v_self->rbase->name()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":65
 *     property name:
 *         """The name of the reactor."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.rbase.name())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":68
 *             return pystr(self.rbase.name())
 * 
 *         def __set__(self, name):             # <<<<<<<<<<<<<<
 *             self.rbase.setName(stringify(name))
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_11ReactorBase_4name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static int __pyx_pw_7cantera_7reactor_11ReactorBase_4name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_4name_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_11ReactorBase_4name_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":69
 * 
 *         def __set__(self, name):
 *             self.rbase.setName(stringify(name))             # <<<<<<<<<<<<<<
 * 
 *     def syncState(self):
 */
  __pyx_t_1 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_v_self->rbase->setName(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1));

  /* "cantera/reactor.pyx":68
 *             return pystr(self.rbase.name())
 * 
 *         def __set__(self, name):             # <<<<<<<<<<<<<<
 *             self.rbase.setName(stringify(name))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.name.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":71
 *             self.rbase.setName(stringify(name))
 * 
 *     def syncState(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the Reactor to match that of the associated
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_7syncState(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_11ReactorBase_6syncState, "\n        Set the state of the Reactor to match that of the associated\n        `ThermoPhase` object. After calling syncState(), call\n        ReactorNet.reinitialize() before further integration.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_11ReactorBase_7syncState = {"syncState", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_7syncState, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_11ReactorBase_6syncState};
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_7syncState(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("syncState (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("syncState", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "syncState", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_6syncState(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_6syncState(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("syncState", 0);

  /* "cantera/reactor.pyx":77
 *         ReactorNet.reinitialize() before further integration.
 *         """
 *         self.rbase.syncState()             # <<<<<<<<<<<<<<
 * 
 *     property thermo:
 */
  try {
    __pyx_v_self->rbase->syncState();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 77, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":71
 *             self.rbase.setName(stringify(name))
 * 
 *     def syncState(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the Reactor to match that of the associated
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.syncState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":81
 *     property thermo:
 *         """The `ThermoPhase` object representing the reactor's contents."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.rbase.restoreState()
 *             return self._thermo
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_6thermo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_6thermo_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_6thermo___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_6thermo___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":82
 *         """The `ThermoPhase` object representing the reactor's contents."""
 *         def __get__(self):
 *             self.rbase.restoreState()             # <<<<<<<<<<<<<<
 *             return self._thermo
 * 
 */
  try {
    __pyx_v_self->rbase->restoreState();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 82, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":83
 *         def __get__(self):
 *             self.rbase.restoreState()
 *             return self._thermo             # <<<<<<<<<<<<<<
 * 
 *     property volume:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_thermo);
  __pyx_r = __pyx_v_self->_thermo;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":81
 *     property thermo:
 *         """The `ThermoPhase` object representing the reactor's contents."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.rbase.restoreState()
 *             return self._thermo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.thermo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":87
 *     property volume:
 *         """The volume [m^3] of the reactor."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rbase.volume()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_6volume_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_6volume_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_6volume___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_6volume___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":88
 *         """The volume [m^3] of the reactor."""
 *         def __get__(self):
 *             return self.rbase.volume()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->rbase->volume()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":87
 *     property volume:
 *         """The volume [m^3] of the reactor."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.rbase.volume()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.volume.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":90
 *             return self.rbase.volume()
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.rbase.setInitialVolume(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_11ReactorBase_6volume_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7cantera_7reactor_11ReactorBase_6volume_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.volume.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_6volume_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_11ReactorBase_6volume_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":91
 * 
 *         def __set__(self, double value):
 *             self.rbase.setInitialVolume(value)             # <<<<<<<<<<<<<<
 * 
 *     property T:
 */
  __pyx_v_self->rbase->setInitialVolume(__pyx_v_value);

  /* "cantera/reactor.pyx":90
 *             return self.rbase.volume()
 * 
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.rbase.setInitialVolume(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":95
 *     property T:
 *         """The temperature [K] of the reactor's contents."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.T
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_1T_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_1T___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_1T___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":96
 *         """The temperature [K] of the reactor's contents."""
 *         def __get__(self):
 *             return self.thermo.T             # <<<<<<<<<<<<<<
 * 
 *     property density:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":95
 *     property T:
 *         """The temperature [K] of the reactor's contents."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.T
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":100
 *     property density:
 *         """The density [kg/m^3 or kmol/m^3] of the reactor's contents."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.density
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_7density_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_7density_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_7density___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_7density___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":101
 *         """The density [kg/m^3 or kmol/m^3] of the reactor's contents."""
 *         def __get__(self):
 *             return self.thermo.density             # <<<<<<<<<<<<<<
 * 
 *     property mass:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_density); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":100
 *     property density:
 *         """The density [kg/m^3 or kmol/m^3] of the reactor's contents."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.density
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.density.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":105
 *     property mass:
 *         """The mass of the reactor's contents."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.density_mass * self.volume
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_4mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_4mass_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_4mass___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_4mass___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":106
 *         """The mass of the reactor's contents."""
 *         def __get__(self):
 *             return self.thermo.density_mass * self.volume             # <<<<<<<<<<<<<<
 * 
 *     property Y:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_density_mass); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_volume); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":105
 *     property mass:
 *         """The mass of the reactor's contents."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.density_mass * self.volume
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":110
 *     property Y:
 *         """The mass fractions of the reactor's contents."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.Y
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_1Y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_1Y_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_1Y___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_1Y___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":111
 *         """The mass fractions of the reactor's contents."""
 *         def __get__(self):
 *             return self.thermo.Y             # <<<<<<<<<<<<<<
 * 
 *     # Flow devices & walls
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":110
 *     property Y:
 *         """The mass fractions of the reactor's contents."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thermo.Y
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.Y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":116
 *     property inlets:
 *         """List of flow devices installed as inlets to this reactor"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._inlets
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_6inlets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_6inlets_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_6inlets___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_6inlets___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":117
 *         """List of flow devices installed as inlets to this reactor"""
 *         def __get__(self):
 *             return self._inlets             # <<<<<<<<<<<<<<
 * 
 *     property outlets:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_inlets);
  __pyx_r = __pyx_v_self->_inlets;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":116
 *     property inlets:
 *         """List of flow devices installed as inlets to this reactor"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._inlets
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":121
 *     property outlets:
 *         """List of flow devices installed as outlets to this reactor"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._outlets
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_7outlets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_7outlets_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_7outlets___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_7outlets___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":122
 *         """List of flow devices installed as outlets to this reactor"""
 *         def __get__(self):
 *             return self._outlets             # <<<<<<<<<<<<<<
 * 
 *     property walls:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_outlets);
  __pyx_r = __pyx_v_self->_outlets;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":121
 *     property outlets:
 *         """List of flow devices installed as outlets to this reactor"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._outlets
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":126
 *     property walls:
 *         """List of walls installed on this reactor"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._walls
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_5walls_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_5walls_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_5walls___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_5walls___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":127
 *         """List of walls installed on this reactor"""
 *         def __get__(self):
 *             return self._walls             # <<<<<<<<<<<<<<
 * 
 *     property surfaces:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_walls);
  __pyx_r = __pyx_v_self->_walls;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":126
 *     property walls:
 *         """List of walls installed on this reactor"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._walls
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":131
 *     property surfaces:
 *         """List of reacting surfaces installed on this reactor"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._surfaces
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_8surfaces_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_8surfaces_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_8surfaces___get__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_8surfaces___get__(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":132
 *         """List of reacting surfaces installed on this reactor"""
 *         def __get__(self):
 *             return self._surfaces             # <<<<<<<<<<<<<<
 * 
 *     def _add_inlet(self, inlet):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_surfaces);
  __pyx_r = __pyx_v_self->_surfaces;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":131
 *     property surfaces:
 *         """List of reacting surfaces installed on this reactor"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._surfaces
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":134
 *             return self._surfaces
 * 
 *     def _add_inlet(self, inlet):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``inlet`` to prevent it from being prematurely
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_9_add_inlet(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_11ReactorBase_8_add_inlet, "\n        Store a reference to ``inlet`` to prevent it from being prematurely\n        garbage collected.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_11ReactorBase_9_add_inlet = {"_add_inlet", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_9_add_inlet, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_11ReactorBase_8_add_inlet};
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_9_add_inlet(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_inlet = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_inlet (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_inlet,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_inlet)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 134, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_add_inlet") < 0)) __PYX_ERR(0, 134, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_inlet = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add_inlet", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 134, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase._add_inlet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_8_add_inlet(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self), __pyx_v_inlet);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_8_add_inlet(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, PyObject *__pyx_v_inlet) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_add_inlet", 0);

  /* "cantera/reactor.pyx":139
 *         garbage collected.
 *         """
 *         self._inlets.append(inlet)             # <<<<<<<<<<<<<<
 * 
 *     def _add_outlet(self, outlet):
 */
  if (unlikely(__pyx_v_self->_inlets == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 139, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Append(__pyx_v_self->_inlets, __pyx_v_inlet); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 139, __pyx_L1_error)

  /* "cantera/reactor.pyx":134
 *             return self._surfaces
 * 
 *     def _add_inlet(self, inlet):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``inlet`` to prevent it from being prematurely
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase._add_inlet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":141
 *         self._inlets.append(inlet)
 * 
 *     def _add_outlet(self, outlet):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``outlet`` to prevent it from being prematurely
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_11_add_outlet(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_11ReactorBase_10_add_outlet, "\n        Store a reference to ``outlet`` to prevent it from being prematurely\n        garbage collected.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_11ReactorBase_11_add_outlet = {"_add_outlet", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_11_add_outlet, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_11ReactorBase_10_add_outlet};
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_11_add_outlet(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_outlet = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_outlet (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_outlet,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_outlet)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_add_outlet") < 0)) __PYX_ERR(0, 141, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_outlet = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add_outlet", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 141, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase._add_outlet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_10_add_outlet(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self), __pyx_v_outlet);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_10_add_outlet(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, PyObject *__pyx_v_outlet) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_add_outlet", 0);

  /* "cantera/reactor.pyx":146
 *         garbage collected.
 *         """
 *         self._outlets.append(outlet)             # <<<<<<<<<<<<<<
 * 
 *     def _add_wall(self, wall):
 */
  if (unlikely(__pyx_v_self->_outlets == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 146, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Append(__pyx_v_self->_outlets, __pyx_v_outlet); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 146, __pyx_L1_error)

  /* "cantera/reactor.pyx":141
 *         self._inlets.append(inlet)
 * 
 *     def _add_outlet(self, outlet):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``outlet`` to prevent it from being prematurely
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase._add_outlet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":148
 *         self._outlets.append(outlet)
 * 
 *     def _add_wall(self, wall):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``wall`` to prevent it from being prematurely
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_13_add_wall(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_11ReactorBase_12_add_wall, "\n        Store a reference to ``wall`` to prevent it from being prematurely\n        garbage collected.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_11ReactorBase_13_add_wall = {"_add_wall", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_13_add_wall, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_11ReactorBase_12_add_wall};
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_13_add_wall(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_wall = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_wall (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wall,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_wall)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_add_wall") < 0)) __PYX_ERR(0, 148, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_wall = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add_wall", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 148, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase._add_wall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_12_add_wall(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self), __pyx_v_wall);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_12_add_wall(struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self, PyObject *__pyx_v_wall) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_add_wall", 0);

  /* "cantera/reactor.pyx":153
 *         garbage collected.
 *         """
 *         self._walls.append(wall)             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  if (unlikely(__pyx_v_self->_walls == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 153, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Append(__pyx_v_self->_walls, __pyx_v_wall); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 153, __pyx_L1_error)

  /* "cantera/reactor.pyx":148
 *         self._outlets.append(outlet)
 * 
 *     def _add_wall(self, wall):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``wall`` to prevent it from being prematurely
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorBase._add_wall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":155
 *         self._walls.append(wall)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('Reactor object is not picklable')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_15__reduce__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_11ReactorBase_15__reduce__ = {"__reduce__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_15__reduce__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_15__reduce__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_14__reduce__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_14__reduce__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "cantera/reactor.pyx":156
 * 
 *     def __reduce__(self):
 *         raise NotImplementedError('Reactor object is not picklable')             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 156, __pyx_L1_error)

  /* "cantera/reactor.pyx":155
 *         self._walls.append(wall)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('Reactor object is not picklable')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":158
 *         raise NotImplementedError('Reactor object is not picklable')
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('Reactor object is not copyable')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_17__copy__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_11ReactorBase_17__copy__ = {"__copy__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_17__copy__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_11ReactorBase_17__copy__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__copy__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__copy__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_11ReactorBase_16__copy__(((struct __pyx_obj_7cantera_7reactor_ReactorBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11ReactorBase_16__copy__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "cantera/reactor.pyx":159
 * 
 *     def __copy__(self):
 *         raise NotImplementedError('Reactor object is not copyable')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 159, __pyx_L1_error)

  /* "cantera/reactor.pyx":158
 *         raise NotImplementedError('Reactor object is not picklable')
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('Reactor object is not copyable')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorBase.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":171
 *     reactor_type = "Reactor"
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.reactor = <CxxReactor*>(self.rbase)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_7Reactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_7Reactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor___cinit__(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_7Reactor___cinit__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cantera/reactor.pyx":172
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         self.reactor = <CxxReactor*>(self.rbase)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, contents=None, *, name=None, energy='on', **kwargs):
 */
  __pyx_v_self->reactor = ((Cantera::Reactor *)__pyx_v_self->__pyx_base.rbase);

  /* "cantera/reactor.pyx":171
 *     reactor_type = "Reactor"
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.reactor = <CxxReactor*>(self.rbase)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":174
 *         self.reactor = <CxxReactor*>(self.rbase)
 * 
 *     def __init__(self, contents=None, *, name=None, energy='on', **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         :param contents:
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_7Reactor_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_7Reactor_2__init__, "\n        :param contents:\n            Reactor contents. If not specified, the reactor is initially empty.\n            In this case, call `insert` to specify the contents.\n        :param name:\n            Used only to identify this reactor in output. If not specified,\n            defaults to ``'Reactor_n'``, where *n* is an integer assigned in\n            the order `Reactor` objects are created.\n        :param energy:\n            Set to ``'on'`` or ``'off'``. If set to ``'off'``, the energy\n            equation is not solved, and the temperature is held at its\n            initial value..\n\n        Some examples showing how to create :class:`Reactor` objects are\n        shown below.\n\n        >>> gas = Solution('gri30.yaml')\n        >>> r1 = Reactor(gas)\n\n        This is equivalent to:\n\n        >>> r1 = Reactor()\n        >>> r1.insert(gas)\n\n        Arguments may be specified using keywords in any order:\n\n        >>> r2 = Reactor(contents=gas, energy='off',\n        ...              name='isothermal_reactor')\n        >>> r3 = Reactor(name='adiabatic_reactor', contents=gas)\n\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7cantera_7reactor_7Reactor_2__init__;
#endif
static int __pyx_pw_7cantera_7reactor_7Reactor_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_contents = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_energy = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_contents,&__pyx_n_s_name,&__pyx_n_s_energy,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_n_u_on);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_contents);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && (kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 1; index < 3 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 174, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_contents = values[0];
    __pyx_v_name = values[1];
    __pyx_v_energy = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("cantera.reactor.Reactor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_2__init__(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self), __pyx_v_contents, __pyx_v_name, __pyx_v_energy, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_7Reactor_2__init__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyObject *__pyx_v_contents, PyObject *__pyx_v_name, PyObject *__pyx_v_energy, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/reactor.pyx":206
 * 
 *         """
 *         super().__init__(contents, name, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if energy == 'off':
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor);
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_contents);
  __Pyx_GIVEREF(__pyx_v_contents);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_contents);
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_name);
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/reactor.pyx":208
 *         super().__init__(contents, name, **kwargs)
 * 
 *         if energy == 'off':             # <<<<<<<<<<<<<<
 *             self.energy_enabled = False
 *         elif energy != 'on':
 */
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_energy, __pyx_n_u_off, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 208, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":209
 * 
 *         if energy == 'off':
 *             self.energy_enabled = False             # <<<<<<<<<<<<<<
 *         elif energy != 'on':
 *             raise ValueError("'energy' must be either 'on' or 'off'")
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_energy_enabled, Py_False) < 0) __PYX_ERR(0, 209, __pyx_L1_error)

    /* "cantera/reactor.pyx":208
 *         super().__init__(contents, name, **kwargs)
 * 
 *         if energy == 'off':             # <<<<<<<<<<<<<<
 *             self.energy_enabled = False
 *         elif energy != 'on':
 */
    goto __pyx_L3;
  }

  /* "cantera/reactor.pyx":210
 *         if energy == 'off':
 *             self.energy_enabled = False
 *         elif energy != 'on':             # <<<<<<<<<<<<<<
 *             raise ValueError("'energy' must be either 'on' or 'off'")
 * 
 */
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_energy, __pyx_n_u_on, Py_NE)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 210, __pyx_L1_error)
  if (unlikely(__pyx_t_5)) {

    /* "cantera/reactor.pyx":211
 *             self.energy_enabled = False
 *         elif energy != 'on':
 *             raise ValueError("'energy' must be either 'on' or 'off'")             # <<<<<<<<<<<<<<
 * 
 *     def insert(self, _SolutionBase solution):
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 211, __pyx_L1_error)

    /* "cantera/reactor.pyx":210
 *         if energy == 'off':
 *             self.energy_enabled = False
 *         elif energy != 'on':             # <<<<<<<<<<<<<<
 *             raise ValueError("'energy' must be either 'on' or 'off'")
 * 
 */
  }
  __pyx_L3:;

  /* "cantera/reactor.pyx":174
 *         self.reactor = <CxxReactor*>(self.rbase)
 * 
 *     def __init__(self, contents=None, *, name=None, energy='on', **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         :param contents:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.reactor.Reactor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":213
 *             raise ValueError("'energy' must be either 'on' or 'off'")
 * 
 *     def insert(self, _SolutionBase solution):             # <<<<<<<<<<<<<<
 *         """
 *         Set ``solution`` to be the object used to compute thermodynamic
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_5insert(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_7Reactor_4insert, "\n        Set ``solution`` to be the object used to compute thermodynamic\n        properties and kinetic rates for this reactor.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_7Reactor_5insert = {"insert", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_5insert, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_4insert};
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_5insert(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7cantera_12solutionbase__SolutionBase *__pyx_v_solution = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_solution,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_solution)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "insert") < 0)) __PYX_ERR(0, 213, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_solution = ((struct __pyx_obj_7cantera_12solutionbase__SolutionBase *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 213, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Reactor.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_solution), __pyx_ptype_7cantera_12solutionbase__SolutionBase, 1, "solution", 0))) __PYX_ERR(0, 213, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_4insert(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self), __pyx_v_solution);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_4insert(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, struct __pyx_obj_7cantera_12solutionbase__SolutionBase *__pyx_v_solution) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("insert", 0);

  /* "cantera/reactor.pyx":218
 *         properties and kinetic rates for this reactor.
 *         """
 *         ReactorBase.insert(self, solution)             # <<<<<<<<<<<<<<
 *         self._kinetics = solution
 *         if solution.kinetics != NULL:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorBase), __pyx_n_s_insert); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_solution)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":219
 *         """
 *         ReactorBase.insert(self, solution)
 *         self._kinetics = solution             # <<<<<<<<<<<<<<
 *         if solution.kinetics != NULL:
 *             self.reactor.setKineticsMgr(deref(solution.kinetics))
 */
  __Pyx_INCREF((PyObject *)__pyx_v_solution);
  __Pyx_GIVEREF((PyObject *)__pyx_v_solution);
  __Pyx_GOTREF(__pyx_v_self->_kinetics);
  __Pyx_DECREF(__pyx_v_self->_kinetics);
  __pyx_v_self->_kinetics = ((PyObject *)__pyx_v_solution);

  /* "cantera/reactor.pyx":220
 *         ReactorBase.insert(self, solution)
 *         self._kinetics = solution
 *         if solution.kinetics != NULL:             # <<<<<<<<<<<<<<
 *             self.reactor.setKineticsMgr(deref(solution.kinetics))
 * 
 */
  __pyx_t_5 = (__pyx_v_solution->kinetics != NULL);
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":221
 *         self._kinetics = solution
 *         if solution.kinetics != NULL:
 *             self.reactor.setKineticsMgr(deref(solution.kinetics))             # <<<<<<<<<<<<<<
 * 
 *     property kinetics:
 */
    __pyx_v_self->reactor->setKineticsMgr((*__pyx_v_solution->kinetics));

    /* "cantera/reactor.pyx":220
 *         ReactorBase.insert(self, solution)
 *         self._kinetics = solution
 *         if solution.kinetics != NULL:             # <<<<<<<<<<<<<<
 *             self.reactor.setKineticsMgr(deref(solution.kinetics))
 * 
 */
  }

  /* "cantera/reactor.pyx":213
 *             raise ValueError("'energy' must be either 'on' or 'off'")
 * 
 *     def insert(self, _SolutionBase solution):             # <<<<<<<<<<<<<<
 *         """
 *         Set ``solution`` to be the object used to compute thermodynamic
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.reactor.Reactor.insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":228
 *         this reactor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.rbase.restoreState()
 *             return self._kinetics
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_8kinetics_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_8kinetics_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_8kinetics___get__(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_8kinetics___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":229
 *         """
 *         def __get__(self):
 *             self.rbase.restoreState()             # <<<<<<<<<<<<<<
 *             return self._kinetics
 * 
 */
  try {
    __pyx_v_self->__pyx_base.rbase->restoreState();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 229, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":230
 *         def __get__(self):
 *             self.rbase.restoreState()
 *             return self._kinetics             # <<<<<<<<<<<<<<
 * 
 *     property chemistry_enabled:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_kinetics);
  __pyx_r = __pyx_v_self->_kinetics;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":228
 *         this reactor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.rbase.restoreState()
 *             return self._kinetics
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.Reactor.kinetics.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":238
 *         reactor composition is held constant.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.reactor.chemistryEnabled()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_17chemistry_enabled_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_17chemistry_enabled_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_17chemistry_enabled___get__(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_17chemistry_enabled___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":239
 *         """
 *         def __get__(self):
 *             return self.reactor.chemistryEnabled()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, pybool value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->reactor->chemistryEnabled()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":238
 *         reactor composition is held constant.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.reactor.chemistryEnabled()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.Reactor.chemistry_enabled.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":241
 *             return self.reactor.chemistryEnabled()
 * 
 *         def __set__(self, pybool value):             # <<<<<<<<<<<<<<
 *             self.reactor.setChemistry(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_7Reactor_17chemistry_enabled_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cantera_7reactor_7Reactor_17chemistry_enabled_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 241, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_17chemistry_enabled_2__set__(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_7Reactor_17chemistry_enabled_2__set__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":242
 * 
 *         def __set__(self, pybool value):
 *             self.reactor.setChemistry(value)             # <<<<<<<<<<<<<<
 * 
 *     property energy_enabled:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_value)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_v_self->reactor->setChemistry(__pyx_t_1);

  /* "cantera/reactor.pyx":241
 *             return self.reactor.chemistryEnabled()
 * 
 *         def __set__(self, pybool value):             # <<<<<<<<<<<<<<
 *             self.reactor.setChemistry(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.Reactor.chemistry_enabled.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":249
 *         When this is `False`, the reactor temperature is held constant.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.reactor.energyEnabled()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_14energy_enabled_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_14energy_enabled_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_14energy_enabled___get__(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_14energy_enabled___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":250
 *         """
 *         def __get__(self):
 *             return self.reactor.energyEnabled()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, pybool value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->reactor->energyEnabled()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":249
 *         When this is `False`, the reactor temperature is held constant.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.reactor.energyEnabled()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.Reactor.energy_enabled.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":252
 *             return self.reactor.energyEnabled()
 * 
 *         def __set__(self, pybool value):             # <<<<<<<<<<<<<<
 *             self.reactor.setEnergy(int(value))
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_7Reactor_14energy_enabled_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cantera_7reactor_7Reactor_14energy_enabled_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7cpython_4bool_bool, 1, "value", 0))) __PYX_ERR(0, 252, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_14energy_enabled_2__set__(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self), ((PyBoolObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_7Reactor_14energy_enabled_2__set__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyBoolObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":253
 * 
 *         def __set__(self, pybool value):
 *             self.reactor.setEnergy(int(value))             # <<<<<<<<<<<<<<
 * 
 *     def add_sensitivity_reaction(self, m):
 */
  __pyx_t_1 = __Pyx_PyNumber_Int(((PyObject *)__pyx_v_value)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->reactor->setEnergy(__pyx_t_2);

  /* "cantera/reactor.pyx":252
 *             return self.reactor.energyEnabled()
 * 
 *         def __set__(self, pybool value):             # <<<<<<<<<<<<<<
 *             self.reactor.setEnergy(int(value))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.Reactor.energy_enabled.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":255
 *             self.reactor.setEnergy(int(value))
 * 
 *     def add_sensitivity_reaction(self, m):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_7add_sensitivity_reaction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_7Reactor_6add_sensitivity_reaction, "\n        Specifies that the sensitivity of the state variables with respect to\n        reaction ``m`` should be computed. ``m`` is the 0-based reaction index.\n        The reactor must be part of a network first. Specifying the same\n        reaction more than one time raises an exception.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_7Reactor_7add_sensitivity_reaction = {"add_sensitivity_reaction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_7add_sensitivity_reaction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_6add_sensitivity_reaction};
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_7add_sensitivity_reaction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_m = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_sensitivity_reaction (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_m)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_sensitivity_reaction") < 0)) __PYX_ERR(0, 255, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_m = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_sensitivity_reaction", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 255, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Reactor.add_sensitivity_reaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_6add_sensitivity_reaction(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self), __pyx_v_m);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_6add_sensitivity_reaction(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyObject *__pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_sensitivity_reaction", 0);

  /* "cantera/reactor.pyx":262
 *         reaction more than one time raises an exception.
 *         """
 *         self.reactor.addSensitivityReaction(m)             # <<<<<<<<<<<<<<
 * 
 *     def add_sensitivity_species_enthalpy(self, k):
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_m); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
  try {
    __pyx_v_self->reactor->addSensitivityReaction(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 262, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":255
 *             self.reactor.setEnergy(int(value))
 * 
 *     def add_sensitivity_reaction(self, m):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.Reactor.add_sensitivity_reaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":264
 *         self.reactor.addSensitivityReaction(m)
 * 
 *     def add_sensitivity_species_enthalpy(self, k):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_9add_sensitivity_species_enthalpy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_7Reactor_8add_sensitivity_species_enthalpy, "\n        Specifies that the sensitivity of the state variables with respect to\n        species ``k`` should be computed. The reactor must be part of a network\n        first.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_7Reactor_9add_sensitivity_species_enthalpy = {"add_sensitivity_species_enthalpy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_9add_sensitivity_species_enthalpy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_8add_sensitivity_species_enthalpy};
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_9add_sensitivity_species_enthalpy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_k = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_sensitivity_species_enthalpy (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 264, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_sensitivity_species_enthalpy") < 0)) __PYX_ERR(0, 264, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_k = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_sensitivity_species_enthalpy", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 264, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Reactor.add_sensitivity_species_enthalpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_8add_sensitivity_species_enthalpy(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self), __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_8add_sensitivity_species_enthalpy(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_sensitivity_species_enthalpy", 0);

  /* "cantera/reactor.pyx":270
 *         first.
 *         """
 *         self.reactor.addSensitivitySpeciesEnthalpy(self.thermo.species_index(k))             # <<<<<<<<<<<<<<
 * 
 *     def component_index(self, name):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_thermo); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_species_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_k};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_v_self->reactor->addSensitivitySpeciesEnthalpy(__pyx_t_5);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 270, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":264
 *         self.reactor.addSensitivityReaction(m)
 * 
 *     def add_sensitivity_species_enthalpy(self, k):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.reactor.Reactor.add_sensitivity_species_enthalpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":272
 *         self.reactor.addSensitivitySpeciesEnthalpy(self.thermo.species_index(k))
 * 
 *     def component_index(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the index of the component named ``name`` in the system. This determines
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_11component_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_7Reactor_10component_index, "\n        Returns the index of the component named ``name`` in the system. This determines\n        the index of the component in the vector of sensitivity coefficients. ``name``\n        is either a species name or the name of a reactor state variable, for example\n        ``'int_energy'`` or ``'temperature'``, depending on the reactor's equations.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_7Reactor_11component_index = {"component_index", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_11component_index, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_10component_index};
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_11component_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("component_index (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "component_index") < 0)) __PYX_ERR(0, 272, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("component_index", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 272, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Reactor.component_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_10component_index(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_10component_index(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyObject *__pyx_v_name) {
  size_t __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("component_index", 0);

  /* "cantera/reactor.pyx":279
 *         ``'int_energy'`` or ``'temperature'``, depending on the reactor's equations.
 *         """
 *         k = self.reactor.componentIndex(stringify(name))             # <<<<<<<<<<<<<<
 *         if k == -1:
 *             raise IndexError('No such component: {!r}'.format(name))
 */
  __pyx_t_1 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 279, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->reactor->componentIndex(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 279, __pyx_L1_error)
  }
  __pyx_v_k = __pyx_t_2;

  /* "cantera/reactor.pyx":280
 *         """
 *         k = self.reactor.componentIndex(stringify(name))
 *         if k == -1:             # <<<<<<<<<<<<<<
 *             raise IndexError('No such component: {!r}'.format(name))
 *         return k
 */
  __pyx_t_3 = (__pyx_v_k == -1L);
  if (unlikely(__pyx_t_3)) {

    /* "cantera/reactor.pyx":281
 *         k = self.reactor.componentIndex(stringify(name))
 *         if k == -1:
 *             raise IndexError('No such component: {!r}'.format(name))             # <<<<<<<<<<<<<<
 *         return k
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_No_such_component_r, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_name};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 281, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 281, __pyx_L1_error)

    /* "cantera/reactor.pyx":280
 *         """
 *         k = self.reactor.componentIndex(stringify(name))
 *         if k == -1:             # <<<<<<<<<<<<<<
 *             raise IndexError('No such component: {!r}'.format(name))
 *         return k
 */
  }

  /* "cantera/reactor.pyx":282
 *         if k == -1:
 *             raise IndexError('No such component: {!r}'.format(name))
 *         return k             # <<<<<<<<<<<<<<
 * 
 *     def component_name(self, int i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_FromSize_t(__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":272
 *         self.reactor.addSensitivitySpeciesEnthalpy(self.thermo.species_index(k))
 * 
 *     def component_index(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the index of the component named ``name`` in the system. This determines
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.reactor.Reactor.component_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":284
 *         return k
 * 
 *     def component_name(self, int i):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the name of the component with index ``i`` within the array of
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_13component_name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_7Reactor_12component_name, "\n        Returns the name of the component with index ``i`` within the array of\n        variables returned by `get_state`. This is the inverse of\n        `component_index`.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_7Reactor_13component_name = {"component_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_13component_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_12component_name};
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_13component_name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_i;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("component_name (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_i)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 284, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "component_name") < 0)) __PYX_ERR(0, 284, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 284, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("component_name", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 284, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Reactor.component_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_12component_name(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self), __pyx_v_i);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_12component_name(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("component_name", 0);

  /* "cantera/reactor.pyx":290
 *         `component_index`.
 *         """
 *         return pystr(self.reactor.componentName(i))             # <<<<<<<<<<<<<<
 * 
 *     property n_vars:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->reactor->componentName(__pyx_v_i);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 290, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":284
 *         return k
 * 
 *     def component_name(self, int i):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the name of the component with index ``i`` within the array of
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.Reactor.component_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":303
 *         `n_species` + 2 (mass, enthalpy or temperature).
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.reactor.neq()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_6n_vars_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_6n_vars_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_6n_vars___get__(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_6n_vars___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":304
 *         """
 *         def __get__(self):
 *             return self.reactor.neq()             # <<<<<<<<<<<<<<
 * 
 *     def get_state(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->reactor->neq()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":303
 *         `n_species` + 2 (mass, enthalpy or temperature).
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.reactor.neq()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.Reactor.n_vars.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":306
 *             return self.reactor.neq()
 * 
 *     def get_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the state vector of the reactor.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_15get_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_7Reactor_14get_state, "\n        Get the state vector of the reactor.\n\n        The order of the variables (that is, rows) is:\n\n        `Reactor` or `IdealGasReactor`:\n\n          - 0  - mass\n          - 1  - volume\n          - 2  - internal energy or temperature\n          - 3+ - mass fractions of the species\n\n        `ConstPressureReactor` or `IdealGasConstPressureReactor`:\n\n          - 0  - mass\n          - 1  - enthalpy or temperature\n          - 2+ - mass fractions of the species\n\n        You can use the function `component_index` to determine the location of\n        a specific component from its name, or `component_name` to determine the\n        name from the index.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_7Reactor_15get_state = {"get_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_15get_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_14get_state};
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_15get_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_state (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_state", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_state", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_14get_state(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_14get_state(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self) {
  PyArrayObject *__pyx_v_y = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_y;
  __Pyx_Buffer __pyx_pybuffer_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_state", 0);
  __pyx_pybuffer_y.pybuffer.buf = NULL;
  __pyx_pybuffer_y.refcount = 0;
  __pyx_pybuffernd_y.data = NULL;
  __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;

  /* "cantera/reactor.pyx":329
 *         name from the index.
 *         """
 *         if not self.n_vars:             # <<<<<<<<<<<<<<
 *             raise CanteraError('Reactor empty or network not initialized.')
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "cantera/reactor.pyx":330
 *         """
 *         if not self.n_vars:
 *             raise CanteraError('Reactor empty or network not initialized.')             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)
 *         self.reactor.getState(&y[0])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_CanteraError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u_Reactor_empty_or_network_not_ini};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 330, __pyx_L1_error)

    /* "cantera/reactor.pyx":329
 *         name from the index.
 *         """
 *         if not self.n_vars:             # <<<<<<<<<<<<<<
 *             raise CanteraError('Reactor empty or network not initialized.')
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)
 */
  }

  /* "cantera/reactor.pyx":331
 *         if not self.n_vars:
 *             raise CanteraError('Reactor empty or network not initialized.')
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)             # <<<<<<<<<<<<<<
 *         self.reactor.getState(&y[0])
 *         return y
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 331, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_y = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_y.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 331, __pyx_L1_error)
    } else {__pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_y = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":332
 *             raise CanteraError('Reactor empty or network not initialized.')
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)
 *         self.reactor.getState(&y[0])             # <<<<<<<<<<<<<<
 *         return y
 * 
 */
  __pyx_t_9 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_y.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_y.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 332, __pyx_L1_error)
  }
  try {
    __pyx_v_self->reactor->getState((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_y.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_y.diminfo[0].strides))));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 332, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":333
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)
 *         self.reactor.getState(&y[0])
 *         return y             # <<<<<<<<<<<<<<
 * 
 *     property jacobian:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_y);
  __pyx_r = ((PyObject *)__pyx_v_y);
  goto __pyx_L0;

  /* "cantera/reactor.pyx":306
 *             return self.reactor.neq()
 * 
 *     def get_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the state vector of the reactor.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.reactor.Reactor.get_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":350
 *             changed or removed without notice.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return get_from_sparse(self.reactor.jacobian(), self.n_vars, self.n_vars)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_8jacobian_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_8jacobian_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_8jacobian___get__(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_8jacobian___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Eigen::SparseMatrix<double> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":351
 *         """
 *         def __get__(self):
 *             return get_from_sparse(self.reactor.jacobian(), self.n_vars, self.n_vars)             # <<<<<<<<<<<<<<
 * 
 *     property finite_difference_jacobian:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->reactor->jacobian();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 351, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_f_7cantera_8kinetics_get_from_sparse(__pyx_t_1, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":350
 *             changed or removed without notice.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return get_from_sparse(self.reactor.jacobian(), self.n_vars, self.n_vars)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.Reactor.jacobian.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":362
 *             may be changed or removed without notice.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return get_from_sparse(self.reactor.finiteDifferenceJacobian(),
 *                                    self.n_vars, self.n_vars)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_26finite_difference_jacobian_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_26finite_difference_jacobian_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_26finite_difference_jacobian___get__(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_26finite_difference_jacobian___get__(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Eigen::SparseMatrix<double> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":363
 *         """
 *         def __get__(self):
 *             return get_from_sparse(self.reactor.finiteDifferenceJacobian(),             # <<<<<<<<<<<<<<
 *                                    self.n_vars, self.n_vars)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->reactor->finiteDifferenceJacobian();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 363, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":364
 *         def __get__(self):
 *             return get_from_sparse(self.reactor.finiteDifferenceJacobian(),
 *                                    self.n_vars, self.n_vars)             # <<<<<<<<<<<<<<
 * 
 *     def set_advance_limit(self, name, limit):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/reactor.pyx":363
 *         """
 *         def __get__(self):
 *             return get_from_sparse(self.reactor.finiteDifferenceJacobian(),             # <<<<<<<<<<<<<<
 *                                    self.n_vars, self.n_vars)
 * 
 */
  __pyx_t_2 = __pyx_f_7cantera_8kinetics_get_from_sparse(__pyx_t_1, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":362
 *             may be changed or removed without notice.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return get_from_sparse(self.reactor.finiteDifferenceJacobian(),
 *                                    self.n_vars, self.n_vars)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.Reactor.finite_difference_jacobian.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":366
 *                                    self.n_vars, self.n_vars)
 * 
 *     def set_advance_limit(self, name, limit):             # <<<<<<<<<<<<<<
 *         """
 *         Limit absolute change of component ``name`` during `ReactorNet.advance`.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_17set_advance_limit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_7Reactor_16set_advance_limit, "\n        Limit absolute change of component ``name`` during `ReactorNet.advance`.\n        (positive ``limit`` values are considered; negative values disable a\n        previously set advance limit for a solution component). Note that\n        limits are disabled by default (with individual values set to -1.).\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_7Reactor_17set_advance_limit = {"set_advance_limit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_17set_advance_limit, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_16set_advance_limit};
static PyObject *__pyx_pw_7cantera_7reactor_7Reactor_17set_advance_limit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_limit = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_advance_limit (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_limit,0};
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 366, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_limit)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 366, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("set_advance_limit", 1, 2, 2, 1); __PYX_ERR(0, 366, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_advance_limit") < 0)) __PYX_ERR(0, 366, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_limit = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_advance_limit", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 366, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Reactor.set_advance_limit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_7Reactor_16set_advance_limit(((struct __pyx_obj_7cantera_7reactor_Reactor *)__pyx_v_self), __pyx_v_name, __pyx_v_limit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_7Reactor_16set_advance_limit(struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_limit) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_advance_limit", 0);
  __Pyx_INCREF(__pyx_v_limit);

  /* "cantera/reactor.pyx":373
 *         limits are disabled by default (with individual values set to -1.).
 *         """
 *         if limit is None:             # <<<<<<<<<<<<<<
 *             limit = -1.
 *         self.reactor.setAdvanceLimit(stringify(name), limit)
 */
  __pyx_t_1 = (__pyx_v_limit == Py_None);
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":374
 *         """
 *         if limit is None:
 *             limit = -1.             # <<<<<<<<<<<<<<
 *         self.reactor.setAdvanceLimit(stringify(name), limit)
 * 
 */
    __Pyx_INCREF(__pyx_float_neg_1_);
    __Pyx_DECREF_SET(__pyx_v_limit, __pyx_float_neg_1_);

    /* "cantera/reactor.pyx":373
 *         limits are disabled by default (with individual values set to -1.).
 *         """
 *         if limit is None:             # <<<<<<<<<<<<<<
 *             limit = -1.
 *         self.reactor.setAdvanceLimit(stringify(name), limit)
 */
  }

  /* "cantera/reactor.pyx":375
 *         if limit is None:
 *             limit = -1.
 *         self.reactor.setAdvanceLimit(stringify(name), limit)             # <<<<<<<<<<<<<<
 * 
 * cdef class MoleReactor(Reactor):
 */
  __pyx_t_2 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 375, __pyx_L1_error)
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_limit); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 375, __pyx_L1_error)
  try {
    __pyx_v_self->reactor->setAdvanceLimit(__pyx_t_2, __pyx_t_3);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 375, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":366
 *                                    self.n_vars, self.n_vars)
 * 
 *     def set_advance_limit(self, name, limit):             # <<<<<<<<<<<<<<
 *         """
 *         Limit absolute change of component ``name`` during `ReactorNet.advance`.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.Reactor.set_advance_limit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_limit);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":454
 *     property mass_flow_rate:
 *         """ Mass flow rate [kg/s] """
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxFlowReactor*>self.reactor).setMassFlowRate(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_11FlowReactor_14mass_flow_rate_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7cantera_7reactor_11FlowReactor_14mass_flow_rate_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 454, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.mass_flow_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_14mass_flow_rate___set__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_11FlowReactor_14mass_flow_rate___set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":455
 *         """ Mass flow rate [kg/s] """
 *         def __set__(self, double value):
 *             (<CxxFlowReactor*>self.reactor).setMassFlowRate(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    ((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->setMassFlowRate(__pyx_v_value);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 455, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":454
 *     property mass_flow_rate:
 *         """ Mass flow rate [kg/s] """
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxFlowReactor*>self.reactor).setMassFlowRate(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.mass_flow_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":457
 *             (<CxxFlowReactor*>self.reactor).setMassFlowRate(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def area(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_4area_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_4area_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_4area___get__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_4area___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":465
 *         rate constant.
 *         """
 *         return (<CxxFlowReactor*>self.reactor).area()             # <<<<<<<<<<<<<<
 * 
 *     @area.setter
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->area();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 465, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":457
 *             (<CxxFlowReactor*>self.reactor).setMassFlowRate(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def area(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.area.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":467
 *         return (<CxxFlowReactor*>self.reactor).area()
 * 
 *     @area.setter             # <<<<<<<<<<<<<<
 *     def area(self, area):
 *         (<CxxFlowReactor*>self.reactor).setArea(area)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_11FlowReactor_4area_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_area); /*proto*/
static int __pyx_pw_7cantera_7reactor_11FlowReactor_4area_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_area) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_4area_2__set__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self), ((PyObject *)__pyx_v_area));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_11FlowReactor_4area_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_area) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":469
 *     @area.setter
 *     def area(self, area):
 *         (<CxxFlowReactor*>self.reactor).setArea(area)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_area); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L1_error)
  try {
    ((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->setArea(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 469, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":467
 *         return (<CxxFlowReactor*>self.reactor).area()
 * 
 *     @area.setter             # <<<<<<<<<<<<<<
 *     def area(self, area):
 *         (<CxxFlowReactor*>self.reactor).setArea(area)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.area.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":471
 *         (<CxxFlowReactor*>self.reactor).setArea(area)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inlet_surface_atol(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_atol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_atol_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_atol___get__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_atol___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":477
 *         species coverages.
 *         """
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceAtol()             # <<<<<<<<<<<<<<
 * 
 *     @inlet_surface_atol.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->inletSurfaceAtol()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":471
 *         (<CxxFlowReactor*>self.reactor).setArea(area)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inlet_surface_atol(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.inlet_surface_atol.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":479
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceAtol()
 * 
 *     @inlet_surface_atol.setter             # <<<<<<<<<<<<<<
 *     def inlet_surface_atol(self, atol):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceAtol(atol)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_atol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_atol); /*proto*/
static int __pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_atol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_atol) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_atol_2__set__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self), ((PyObject *)__pyx_v_atol));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_atol_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_atol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":481
 *     @inlet_surface_atol.setter
 *     def inlet_surface_atol(self, atol):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceAtol(atol)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_atol); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L1_error)
  try {
    ((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->setInletSurfaceAtol(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 481, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":479
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceAtol()
 * 
 *     @inlet_surface_atol.setter             # <<<<<<<<<<<<<<
 *     def inlet_surface_atol(self, atol):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceAtol(atol)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.inlet_surface_atol.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":483
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceAtol(atol)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inlet_surface_rtol(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol___get__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":489
 *         species coverages.
 *         """
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceRtol()             # <<<<<<<<<<<<<<
 * 
 *     @inlet_surface_rtol.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->inletSurfaceRtol()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":483
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceAtol(atol)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inlet_surface_rtol(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.inlet_surface_rtol.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":491
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceRtol()
 * 
 *     @inlet_surface_rtol.setter             # <<<<<<<<<<<<<<
 *     def inlet_surface_rtol(self, rtol):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceRtol(rtol)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rtol); /*proto*/
static int __pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_rtol) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol_2__set__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self), ((PyObject *)__pyx_v_rtol));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_rtol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":493
 *     @inlet_surface_rtol.setter
 *     def inlet_surface_rtol(self, rtol):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceRtol(rtol)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_rtol); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L1_error)
  try {
    ((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->setInletSurfaceRtol(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 493, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":491
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceRtol()
 * 
 *     @inlet_surface_rtol.setter             # <<<<<<<<<<<<<<
 *     def inlet_surface_rtol(self, rtol):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceRtol(rtol)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.inlet_surface_rtol.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":495
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceRtol(rtol)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inlet_surface_max_steps(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps___get__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":501
 *         surface species coverages.
 *         """
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceMaxSteps()             # <<<<<<<<<<<<<<
 * 
 *     @inlet_surface_max_steps.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->inletSurfaceMaxSteps()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":495
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceRtol(rtol)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inlet_surface_max_steps(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.inlet_surface_max_steps.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":503
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceMaxSteps()
 * 
 *     @inlet_surface_max_steps.setter             # <<<<<<<<<<<<<<
 *     def inlet_surface_max_steps(self, nsteps):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceMaxSteps(nsteps)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_nsteps); /*proto*/
static int __pyx_pw_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_nsteps) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps_2__set__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self), ((PyObject *)__pyx_v_nsteps));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_nsteps) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":505
 *     @inlet_surface_max_steps.setter
 *     def inlet_surface_max_steps(self, nsteps):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceMaxSteps(nsteps)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_nsteps); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 505, __pyx_L1_error)
  try {
    ((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->setInletSurfaceMaxSteps(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 505, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":503
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceMaxSteps()
 * 
 *     @inlet_surface_max_steps.setter             # <<<<<<<<<<<<<<
 *     def inlet_surface_max_steps(self, nsteps):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceMaxSteps(nsteps)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.inlet_surface_max_steps.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":507
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceMaxSteps(nsteps)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inlet_surface_max_error_failures(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures___get__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":513
 *         the initial surface species coverages.
 *         """
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceMaxErrorFailures()             # <<<<<<<<<<<<<<
 * 
 *     @inlet_surface_max_error_failures.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->inletSurfaceMaxErrorFailures()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":507
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceMaxSteps(nsteps)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inlet_surface_max_error_failures(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.inlet_surface_max_error_failures.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":515
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceMaxErrorFailures()
 * 
 *     @inlet_surface_max_error_failures.setter             # <<<<<<<<<<<<<<
 *     def inlet_surface_max_error_failures(self, nsteps):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceMaxErrorFailures(nsteps)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_nsteps); /*proto*/
static int __pyx_pw_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_nsteps) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures_2__set__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self), ((PyObject *)__pyx_v_nsteps));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_nsteps) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":517
 *     @inlet_surface_max_error_failures.setter
 *     def inlet_surface_max_error_failures(self, nsteps):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceMaxErrorFailures(nsteps)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_nsteps); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 517, __pyx_L1_error)
  try {
    ((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->setInletSurfaceMaxErrorFailures(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 517, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":515
 *         return (<CxxFlowReactor*>self.reactor).inletSurfaceMaxErrorFailures()
 * 
 *     @inlet_surface_max_error_failures.setter             # <<<<<<<<<<<<<<
 *     def inlet_surface_max_error_failures(self, nsteps):
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceMaxErrorFailures(nsteps)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.inlet_surface_max_error_failures.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":519
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceMaxErrorFailures(nsteps)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def surface_area_to_volume_ratio(self):
 *         """ Get/Set the surface area to volume ratio of the reactor [m^-1] """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio___get__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":522
 *     def surface_area_to_volume_ratio(self):
 *         """ Get/Set the surface area to volume ratio of the reactor [m^-1] """
 *         return (<CxxFlowReactor*>self.reactor).surfaceAreaToVolumeRatio()             # <<<<<<<<<<<<<<
 * 
 *     @surface_area_to_volume_ratio.setter
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->surfaceAreaToVolumeRatio();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 522, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":519
 *         (<CxxFlowReactor*>self.reactor).setInletSurfaceMaxErrorFailures(nsteps)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def surface_area_to_volume_ratio(self):
 *         """ Get/Set the surface area to volume ratio of the reactor [m^-1] """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.surface_area_to_volume_ratio.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":524
 *         return (<CxxFlowReactor*>self.reactor).surfaceAreaToVolumeRatio()
 * 
 *     @surface_area_to_volume_ratio.setter             # <<<<<<<<<<<<<<
 *     def surface_area_to_volume_ratio(self, sa_to_vol):
 *         (<CxxFlowReactor*>self.reactor).setSurfaceAreaToVolumeRatio(sa_to_vol)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_sa_to_vol); /*proto*/
static int __pyx_pw_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_sa_to_vol) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio_2__set__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self), ((PyObject *)__pyx_v_sa_to_vol));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio_2__set__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self, PyObject *__pyx_v_sa_to_vol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":526
 *     @surface_area_to_volume_ratio.setter
 *     def surface_area_to_volume_ratio(self, sa_to_vol):
 *         (<CxxFlowReactor*>self.reactor).setSurfaceAreaToVolumeRatio(sa_to_vol)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_sa_to_vol); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 526, __pyx_L1_error)
  try {
    ((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->setSurfaceAreaToVolumeRatio(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 526, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":524
 *         return (<CxxFlowReactor*>self.reactor).surfaceAreaToVolumeRatio()
 * 
 *     @surface_area_to_volume_ratio.setter             # <<<<<<<<<<<<<<
 *     def surface_area_to_volume_ratio(self, sa_to_vol):
 *         (<CxxFlowReactor*>self.reactor).setSurfaceAreaToVolumeRatio(sa_to_vol)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.surface_area_to_volume_ratio.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":528
 *         (<CxxFlowReactor*>self.reactor).setSurfaceAreaToVolumeRatio(sa_to_vol)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def speed(self):
 *         """ Speed [m/s] of the flow in the reactor at the current position """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_5speed_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_5speed_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_5speed___get__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_5speed___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":531
 *     def speed(self):
 *         """ Speed [m/s] of the flow in the reactor at the current position """
 *         return (<CxxFlowReactor*>self.reactor).speed()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->speed()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":528
 *         (<CxxFlowReactor*>self.reactor).setSurfaceAreaToVolumeRatio(sa_to_vol)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def speed(self):
 *         """ Speed [m/s] of the flow in the reactor at the current position """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.speed.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":533
 *         return (<CxxFlowReactor*>self.reactor).speed()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def distance(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_8distance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_11FlowReactor_8distance_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_11FlowReactor_8distance___get__(((struct __pyx_obj_7cantera_7reactor_FlowReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_11FlowReactor_8distance___get__(struct __pyx_obj_7cantera_7reactor_FlowReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":542
 *             To be removed after Cantera 3.0. Access distance via `ReactorNet`.
 *         """
 *         return (<CxxFlowReactor*>self.reactor).distance()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((Cantera::FlowReactor *)__pyx_v_self->__pyx_base.reactor)->distance();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 542, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":533
 *         return (<CxxFlowReactor*>self.reactor).speed()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def distance(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.FlowReactor.distance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":644
 *     }
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.accessor = dynamic_cast[CxxReactorAccessorPtr](self.rbase)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor___cinit__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor___cinit__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_7cantera_7reactor_CxxReactorAccessorPtr __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cantera/reactor.pyx":645
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         self.accessor = dynamic_cast[CxxReactorAccessorPtr](self.rbase)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
  try {
    __pyx_t_1 = dynamic_cast<__pyx_t_7cantera_7reactor_CxxReactorAccessorPtr>(__pyx_v_self->__pyx_base.__pyx_base.rbase);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 645, __pyx_L1_error)
  }
  __pyx_v_self->accessor = __pyx_t_1;

  /* "cantera/reactor.pyx":644
 *     }
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.accessor = dynamic_cast[CxxReactorAccessorPtr](self.rbase)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":647
 *         self.accessor = dynamic_cast[CxxReactorAccessorPtr](self.rbase)
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assign_delegates(self, dynamic_cast[CxxDelegatorPtr](self.rbase))
 *         super().__init__(*args, **kwargs)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = __Pyx_KwargsAsDict_VARARGS(__pyx_kwds, __pyx_kwvalues);
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = PyDict_New();
    if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_2__init__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_2__init__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_7cantera_9delegator_CxxDelegatorPtr __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/reactor.pyx":648
 * 
 *     def __init__(self, *args, **kwargs):
 *         assign_delegates(self, dynamic_cast[CxxDelegatorPtr](self.rbase))             # <<<<<<<<<<<<<<
 *         super().__init__(*args, **kwargs)
 * 
 */
  try {
    __pyx_t_1 = dynamic_cast<__pyx_t_7cantera_9delegator_CxxDelegatorPtr>(__pyx_v_self->__pyx_base.__pyx_base.rbase);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 648, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_7cantera_9delegator_assign_delegates(((PyObject *)__pyx_v_self), __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 648, __pyx_L1_error)

  /* "cantera/reactor.pyx":649
 *     def __init__(self, *args, **kwargs):
 *         assign_delegates(self, dynamic_cast[CxxDelegatorPtr](self.rbase))
 *         super().__init__(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     property n_vars:
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor);
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cantera/reactor.pyx":647
 *         self.accessor = dynamic_cast[CxxReactorAccessorPtr](self.rbase)
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assign_delegates(self, dynamic_cast[CxxDelegatorPtr](self.rbase))
 *         super().__init__(*args, **kwargs)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":655
 *         Get/Set the number of state variables in the reactor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.reactor.neq()
 *         def __set__(self, n):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_6n_vars_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_6n_vars_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_6n_vars___get__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_6n_vars___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":656
 *         """
 *         def __get__(self):
 *             return self.reactor.neq()             # <<<<<<<<<<<<<<
 *         def __set__(self, n):
 *             self.accessor.setNEq(n)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->__pyx_base.reactor->neq()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":655
 *         Get/Set the number of state variables in the reactor.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.reactor.neq()
 *         def __set__(self, n):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.n_vars.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":657
 *         def __get__(self):
 *             return self.reactor.neq()
 *         def __set__(self, n):             # <<<<<<<<<<<<<<
 *             self.accessor.setNEq(n)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_6n_vars_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_6n_vars_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_6n_vars_2__set__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self), ((PyObject *)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_6n_vars_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_n) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":658
 *             return self.reactor.neq()
 *         def __set__(self, n):
 *             self.accessor.setNEq(n)             # <<<<<<<<<<<<<<
 * 
 *     property vdot:
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_n); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L1_error)
  __pyx_v_self->accessor->setNEq(__pyx_t_1);

  /* "cantera/reactor.pyx":657
 *         def __get__(self):
 *             return self.reactor.neq()
 *         def __set__(self, n):             # <<<<<<<<<<<<<<
 *             self.accessor.setNEq(n)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.n_vars.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":668
 *             To be removed in Cantera 3.0; renamed to `expansion_rate`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             warnings.warn(
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_4vdot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_4vdot_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_4vdot___get__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_4vdot___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":669
 *         """
 *         def __get__(self):
 *             warnings.warn(             # <<<<<<<<<<<<<<
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'expansion_rate'.", DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":671
 *             warnings.warn(
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'expansion_rate'.", DeprecationWarning)             # <<<<<<<<<<<<<<
 *             return self.accessor.expansionRate()
 *         def __set__(self, vdot):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":672
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'expansion_rate'.", DeprecationWarning)
 *             return self.accessor.expansionRate()             # <<<<<<<<<<<<<<
 *         def __set__(self, vdot):
 *             warnings.warn(
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->accessor->expansionRate()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":668
 *             To be removed in Cantera 3.0; renamed to `expansion_rate`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             warnings.warn(
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.vdot.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":673
 *                 "renamed to 'expansion_rate'.", DeprecationWarning)
 *             return self.accessor.expansionRate()
 *         def __set__(self, vdot):             # <<<<<<<<<<<<<<
 *             warnings.warn(
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_4vdot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_vdot); /*proto*/
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_4vdot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_vdot) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_4vdot_2__set__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self), ((PyObject *)__pyx_v_vdot));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_4vdot_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_vdot) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":674
 *             return self.accessor.expansionRate()
 *         def __set__(self, vdot):
 *             warnings.warn(             # <<<<<<<<<<<<<<
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'expansion_rate'.", DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":676
 *             warnings.warn(
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'expansion_rate'.", DeprecationWarning)             # <<<<<<<<<<<<<<
 *             self.accessor.setExpansionRate(vdot)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":677
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'expansion_rate'.", DeprecationWarning)
 *             self.accessor.setExpansionRate(vdot)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_vdot); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 677, __pyx_L1_error)
  __pyx_v_self->accessor->setExpansionRate(__pyx_t_3);

  /* "cantera/reactor.pyx":673
 *                 "renamed to 'expansion_rate'.", DeprecationWarning)
 *             return self.accessor.expansionRate()
 *         def __set__(self, vdot):             # <<<<<<<<<<<<<<
 *             warnings.warn(
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.vdot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":679
 *             self.accessor.setExpansionRate(vdot)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def expansion_rate(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_14expansion_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_14expansion_rate_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_14expansion_rate___get__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_14expansion_rate___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":686
 *         .. versionadded:: 3.0
 *         """
 *         return self.accessor.expansionRate()             # <<<<<<<<<<<<<<
 * 
 *     @expansion_rate.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->accessor->expansionRate()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":679
 *             self.accessor.setExpansionRate(vdot)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def expansion_rate(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.expansion_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":688
 *         return self.accessor.expansionRate()
 * 
 *     @expansion_rate.setter             # <<<<<<<<<<<<<<
 *     def expansion_rate(self, vdot):
 *         self.accessor.setExpansionRate(vdot)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_14expansion_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_vdot); /*proto*/
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_14expansion_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_vdot) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_14expansion_rate_2__set__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self), ((PyObject *)__pyx_v_vdot));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_14expansion_rate_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_vdot) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":690
 *     @expansion_rate.setter
 *     def expansion_rate(self, vdot):
 *         self.accessor.setExpansionRate(vdot)             # <<<<<<<<<<<<<<
 * 
 *     property qdot:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_vdot); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 690, __pyx_L1_error)
  __pyx_v_self->accessor->setExpansionRate(__pyx_t_1);

  /* "cantera/reactor.pyx":688
 *         return self.accessor.expansionRate()
 * 
 *     @expansion_rate.setter             # <<<<<<<<<<<<<<
 *     def expansion_rate(self, vdot):
 *         self.accessor.setExpansionRate(vdot)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.expansion_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":700
 *             To be removed in Cantera 3.0; renamed to `heat_rate`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             warnings.warn(
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_4qdot_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_4qdot_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_4qdot___get__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_4qdot___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":701
 *         """
 *         def __get__(self):
 *             warnings.warn(             # <<<<<<<<<<<<<<
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'heat_rate'.", DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":703
 *             warnings.warn(
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'heat_rate'.", DeprecationWarning)             # <<<<<<<<<<<<<<
 *             return self.accessor.heatRate()
 *         def __set__(self, qdot):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":704
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'heat_rate'.", DeprecationWarning)
 *             return self.accessor.heatRate()             # <<<<<<<<<<<<<<
 *         def __set__(self, qdot):
 *             warnings.warn(
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->accessor->heatRate()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":700
 *             To be removed in Cantera 3.0; renamed to `heat_rate`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             warnings.warn(
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.qdot.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":705
 *                 "renamed to 'heat_rate'.", DeprecationWarning)
 *             return self.accessor.heatRate()
 *         def __set__(self, qdot):             # <<<<<<<<<<<<<<
 *             warnings.warn(
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_4qdot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_qdot); /*proto*/
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_4qdot_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_qdot) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_4qdot_2__set__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self), ((PyObject *)__pyx_v_qdot));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_4qdot_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_qdot) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":706
 *             return self.accessor.heatRate()
 *         def __set__(self, qdot):
 *             warnings.warn(             # <<<<<<<<<<<<<<
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'heat_rate'.", DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":708
 *             warnings.warn(
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'heat_rate'.", DeprecationWarning)             # <<<<<<<<<<<<<<
 *             self.accessor.setHeatRate(qdot)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":709
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'heat_rate'.", DeprecationWarning)
 *             self.accessor.setHeatRate(qdot)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_qdot); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L1_error)
  __pyx_v_self->accessor->setHeatRate(__pyx_t_3);

  /* "cantera/reactor.pyx":705
 *                 "renamed to 'heat_rate'.", DeprecationWarning)
 *             return self.accessor.heatRate()
 *         def __set__(self, qdot):             # <<<<<<<<<<<<<<
 *             warnings.warn(
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.qdot.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":711
 *             self.accessor.setHeatRate(qdot)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def heat_rate(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_9heat_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_9heat_rate_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_9heat_rate___get__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_9heat_rate___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":718
 *         .. versionadded:: 3.0
 *         """
 *         return self.accessor.heatRate()             # <<<<<<<<<<<<<<
 * 
 *     @heat_rate.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->accessor->heatRate()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":711
 *             self.accessor.setHeatRate(qdot)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def heat_rate(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.heat_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":720
 *         return self.accessor.heatRate()
 * 
 *     @heat_rate.setter             # <<<<<<<<<<<<<<
 *     def heat_rate(self, qdot):
 *         self.accessor.setHeatRate(qdot)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_9heat_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_qdot); /*proto*/
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_9heat_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_qdot) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_9heat_rate_2__set__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self), ((PyObject *)__pyx_v_qdot));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_9heat_rate_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_qdot) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":722
 *     @heat_rate.setter
 *     def heat_rate(self, qdot):
 *         self.accessor.setHeatRate(qdot)             # <<<<<<<<<<<<<<
 * 
 *     def restore_thermo_state(self):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_qdot); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 722, __pyx_L1_error)
  __pyx_v_self->accessor->setHeatRate(__pyx_t_1);

  /* "cantera/reactor.pyx":720
 *         return self.accessor.heatRate()
 * 
 *     @heat_rate.setter             # <<<<<<<<<<<<<<
 *     def heat_rate(self, qdot):
 *         self.accessor.setHeatRate(qdot)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.heat_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":724
 *         self.accessor.setHeatRate(qdot)
 * 
 *     def restore_thermo_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the thermo object to correspond to the state of the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_5restore_thermo_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_17ExtensibleReactor_4restore_thermo_state, "\n        Set the state of the thermo object to correspond to the state of the\n        reactor.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_17ExtensibleReactor_5restore_thermo_state = {"restore_thermo_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_17ExtensibleReactor_5restore_thermo_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_17ExtensibleReactor_4restore_thermo_state};
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_5restore_thermo_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore_thermo_state (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("restore_thermo_state", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "restore_thermo_state", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_4restore_thermo_state(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_4restore_thermo_state(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("restore_thermo_state", 0);

  /* "cantera/reactor.pyx":729
 *         reactor.
 *         """
 *         self.accessor.restoreThermoState()             # <<<<<<<<<<<<<<
 * 
 *     def restore_surface_state(self, n):
 */
  try {
    __pyx_v_self->accessor->restoreThermoState();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 729, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":724
 *         self.accessor.setHeatRate(qdot)
 * 
 *     def restore_thermo_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the thermo object to correspond to the state of the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.restore_thermo_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":731
 *         self.accessor.restoreThermoState()
 * 
 *     def restore_surface_state(self, n):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the thermo object for surface ``n`` to correspond to the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_7restore_surface_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_17ExtensibleReactor_6restore_surface_state, "\n        Set the state of the thermo object for surface ``n`` to correspond to the\n        state of that surface\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_17ExtensibleReactor_7restore_surface_state = {"restore_surface_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_17ExtensibleReactor_7restore_surface_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_17ExtensibleReactor_6restore_surface_state};
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_7restore_surface_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_n = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore_surface_state (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_n)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 731, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "restore_surface_state") < 0)) __PYX_ERR(0, 731, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_n = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("restore_surface_state", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 731, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.restore_surface_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_6restore_surface_state(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self), __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_6restore_surface_state(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("restore_surface_state", 0);

  /* "cantera/reactor.pyx":736
 *         state of that surface
 *         """
 *         self.accessor.restoreSurfaceState(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_size_t(__pyx_v_n); if (unlikely((__pyx_t_1 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L1_error)
  try {
    __pyx_v_self->accessor->restoreSurfaceState(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 736, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":731
 *         self.accessor.restoreThermoState()
 * 
 *     def restore_surface_state(self, n):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the thermo object for surface ``n`` to correspond to the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ExtensibleReactor.restore_surface_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pxd":255
 * 
 * cdef class ExtensibleReactor(Reactor):
 *     cdef public _delegates             # <<<<<<<<<<<<<<
 *     cdef CxxReactorAccessor* accessor
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_10_delegates_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_17ExtensibleReactor_10_delegates_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_10_delegates___get__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_17ExtensibleReactor_10_delegates___get__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_delegates);
  __pyx_r = __pyx_v_self->_delegates;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_10_delegates_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_10_delegates_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_10_delegates_2__set__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_10_delegates_2__set__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_delegates);
  __Pyx_DECREF(__pyx_v_self->_delegates);
  __pyx_v_self->_delegates = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_10_delegates_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7cantera_7reactor_17ExtensibleReactor_10_delegates_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_17ExtensibleReactor_10_delegates_4__del__(((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_17ExtensibleReactor_10_delegates_4__del__(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_delegates);
  __Pyx_DECREF(__pyx_v_self->_delegates);
  __pyx_v_self->_delegates = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":815
 *         The area of the reacting surface [m^2]
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.surface = new CxxReactorSurface()
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_14ReactorSurface_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_14ReactorSurface_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface___cinit__(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_14ReactorSurface___cinit__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cantera/reactor.pyx":816
 *     """
 *     def __cinit__(self):
 *         self.surface = new CxxReactorSurface()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->surface = new Cantera::ReactorSurface();

  /* "cantera/reactor.pyx":815
 *         The area of the reacting surface [m^2]
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.surface = new CxxReactorSurface()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":818
 *         self.surface = new CxxReactorSurface()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.surface
 * 
 */

/* Python wrapper */
static void __pyx_pw_7cantera_7reactor_14ReactorSurface_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7cantera_7reactor_14ReactorSurface_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7cantera_7reactor_14ReactorSurface_2__dealloc__(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cantera_7reactor_14ReactorSurface_2__dealloc__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "cantera/reactor.pyx":819
 * 
 *     def __dealloc__(self):
 *         del self.surface             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, kin=None, Reactor r=None, *, A=None):
 */
  delete __pyx_v_self->surface;

  /* "cantera/reactor.pyx":818
 *         self.surface = new CxxReactorSurface()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.surface
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "cantera/reactor.pyx":821
 *         del self.surface
 * 
 *     def __init__(self, kin=None, Reactor r=None, *, A=None):             # <<<<<<<<<<<<<<
 *         if kin is not None:
 *             self.kinetics = kin
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_14ReactorSurface_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_14ReactorSurface_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kin = 0;
  struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_r = 0;
  PyObject *__pyx_v_A = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kin,&__pyx_n_s_r,&__pyx_n_s_A,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = (PyObject *)((struct __pyx_obj_7cantera_7reactor_Reactor *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_kin);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 821, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_r);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 821, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 2;
        PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = value; kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 821, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 821, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_kin = values[0];
    __pyx_v_r = ((struct __pyx_obj_7cantera_7reactor_Reactor *)values[1]);
    __pyx_v_A = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, __pyx_nargs); __PYX_ERR(0, 821, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_7cantera_7reactor_Reactor, 1, "r", 0))) __PYX_ERR(0, 821, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface_4__init__(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self), __pyx_v_kin, __pyx_v_r, __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_14ReactorSurface_4__init__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, PyObject *__pyx_v_kin, struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_r, PyObject *__pyx_v_A) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/reactor.pyx":822
 * 
 *     def __init__(self, kin=None, Reactor r=None, *, A=None):
 *         if kin is not None:             # <<<<<<<<<<<<<<
 *             self.kinetics = kin
 *         if r is not None:
 */
  __pyx_t_1 = (__pyx_v_kin != Py_None);
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":823
 *     def __init__(self, kin=None, Reactor r=None, *, A=None):
 *         if kin is not None:
 *             self.kinetics = kin             # <<<<<<<<<<<<<<
 *         if r is not None:
 *             self.install(r)
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_kinetics, __pyx_v_kin) < 0) __PYX_ERR(0, 823, __pyx_L1_error)

    /* "cantera/reactor.pyx":822
 * 
 *     def __init__(self, kin=None, Reactor r=None, *, A=None):
 *         if kin is not None:             # <<<<<<<<<<<<<<
 *             self.kinetics = kin
 *         if r is not None:
 */
  }

  /* "cantera/reactor.pyx":824
 *         if kin is not None:
 *             self.kinetics = kin
 *         if r is not None:             # <<<<<<<<<<<<<<
 *             self.install(r)
 *         if A is not None:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_r) != Py_None);
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":825
 *             self.kinetics = kin
 *         if r is not None:
 *             self.install(r)             # <<<<<<<<<<<<<<
 *         if A is not None:
 *             self.area = A
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_install); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, ((PyObject *)__pyx_v_r)};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 825, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cantera/reactor.pyx":824
 *         if kin is not None:
 *             self.kinetics = kin
 *         if r is not None:             # <<<<<<<<<<<<<<
 *             self.install(r)
 *         if A is not None:
 */
  }

  /* "cantera/reactor.pyx":826
 *         if r is not None:
 *             self.install(r)
 *         if A is not None:             # <<<<<<<<<<<<<<
 *             self.area = A
 * 
 */
  __pyx_t_1 = (__pyx_v_A != Py_None);
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":827
 *             self.install(r)
 *         if A is not None:
 *             self.area = A             # <<<<<<<<<<<<<<
 * 
 *     def install(self, Reactor r):
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_area, __pyx_v_A) < 0) __PYX_ERR(0, 827, __pyx_L1_error)

    /* "cantera/reactor.pyx":826
 *         if r is not None:
 *             self.install(r)
 *         if A is not None:             # <<<<<<<<<<<<<<
 *             self.area = A
 * 
 */
  }

  /* "cantera/reactor.pyx":821
 *         del self.surface
 * 
 *     def __init__(self, kin=None, Reactor r=None, *, A=None):             # <<<<<<<<<<<<<<
 *         if kin is not None:
 *             self.kinetics = kin
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":829
 *             self.area = A
 * 
 *     def install(self, Reactor r):             # <<<<<<<<<<<<<<
 *         """
 *         Add this `ReactorSurface` to the specified `Reactor`
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_7install(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_14ReactorSurface_6install, "\n        Add this `ReactorSurface` to the specified `Reactor`\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_14ReactorSurface_7install = {"install", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_14ReactorSurface_7install, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_14ReactorSurface_6install};
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_7install(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_r = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("install (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_r)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "install") < 0)) __PYX_ERR(0, 829, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_r = ((struct __pyx_obj_7cantera_7reactor_Reactor *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("install", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 829, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.install", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_7cantera_7reactor_Reactor, 1, "r", 0))) __PYX_ERR(0, 829, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface_6install(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self), __pyx_v_r);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_6install(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("install", 0);

  /* "cantera/reactor.pyx":833
 *         Add this `ReactorSurface` to the specified `Reactor`
 *         """
 *         r._surfaces.append(self)             # <<<<<<<<<<<<<<
 *         r.reactor.addSurface(self.surface)
 * 
 */
  if (unlikely(__pyx_v_r->__pyx_base._surfaces == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 833, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Append(__pyx_v_r->__pyx_base._surfaces, ((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 833, __pyx_L1_error)

  /* "cantera/reactor.pyx":834
 *         """
 *         r._surfaces.append(self)
 *         r.reactor.addSurface(self.surface)             # <<<<<<<<<<<<<<
 * 
 *     property area:
 */
  __pyx_v_r->reactor->addSurface(__pyx_v_self->surface);

  /* "cantera/reactor.pyx":829
 *             self.area = A
 * 
 *     def install(self, Reactor r):             # <<<<<<<<<<<<<<
 *         """
 *         Add this `ReactorSurface` to the specified `Reactor`
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.install", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":838
 *     property area:
 *         """ Area on which reactions can occur [m^2] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.surface.area()
 *         def __set__(self, A):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_4area_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_4area_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface_4area___get__(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_4area___get__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":839
 *         """ Area on which reactions can occur [m^2] """
 *         def __get__(self):
 *             return self.surface.area()             # <<<<<<<<<<<<<<
 *         def __set__(self, A):
 *             self.surface.setArea(A)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->surface->area()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":838
 *     property area:
 *         """ Area on which reactions can occur [m^2] """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.surface.area()
 *         def __set__(self, A):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.area.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":840
 *         def __get__(self):
 *             return self.surface.area()
 *         def __set__(self, A):             # <<<<<<<<<<<<<<
 *             self.surface.setArea(A)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_14ReactorSurface_4area_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_A); /*proto*/
static int __pyx_pw_7cantera_7reactor_14ReactorSurface_4area_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_A) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface_4area_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self), ((PyObject *)__pyx_v_A));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_14ReactorSurface_4area_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, PyObject *__pyx_v_A) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":841
 *             return self.surface.area()
 *         def __set__(self, A):
 *             self.surface.setArea(A)             # <<<<<<<<<<<<<<
 * 
 *     property kinetics:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_A); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 841, __pyx_L1_error)
  __pyx_v_self->surface->setArea(__pyx_t_1);

  /* "cantera/reactor.pyx":840
 *         def __get__(self):
 *             return self.surface.area()
 *         def __set__(self, A):             # <<<<<<<<<<<<<<
 *             self.surface.setArea(A)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.area.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":848
 *         this surface.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.surface.syncState()
 *             return self._kinetics
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_8kinetics_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_8kinetics_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface_8kinetics___get__(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_8kinetics___get__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":849
 *         """
 *         def __get__(self):
 *             self.surface.syncState()             # <<<<<<<<<<<<<<
 *             return self._kinetics
 *         def __set__(self, Kinetics k):
 */
  __pyx_v_self->surface->syncState();

  /* "cantera/reactor.pyx":850
 *         def __get__(self):
 *             self.surface.syncState()
 *             return self._kinetics             # <<<<<<<<<<<<<<
 *         def __set__(self, Kinetics k):
 *             self._kinetics = k
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->_kinetics);
  __pyx_r = ((PyObject *)__pyx_v_self->_kinetics);
  goto __pyx_L0;

  /* "cantera/reactor.pyx":848
 *         this surface.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.surface.syncState()
 *             return self._kinetics
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":851
 *             self.surface.syncState()
 *             return self._kinetics
 *         def __set__(self, Kinetics k):             # <<<<<<<<<<<<<<
 *             self._kinetics = k
 *             self.surface.setKinetics(self._kinetics.kinetics)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_14ReactorSurface_8kinetics_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static int __pyx_pw_7cantera_7reactor_14ReactorSurface_8kinetics_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_k), __pyx_ptype_7cantera_8kinetics_Kinetics, 1, "k", 0))) __PYX_ERR(0, 851, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface_8kinetics_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self), ((struct __pyx_obj_7cantera_8kinetics_Kinetics *)__pyx_v_k));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_14ReactorSurface_8kinetics_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, struct __pyx_obj_7cantera_8kinetics_Kinetics *__pyx_v_k) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":852
 *             return self._kinetics
 *         def __set__(self, Kinetics k):
 *             self._kinetics = k             # <<<<<<<<<<<<<<
 *             self.surface.setKinetics(self._kinetics.kinetics)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_k);
  __Pyx_GIVEREF((PyObject *)__pyx_v_k);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_kinetics);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_kinetics);
  __pyx_v_self->_kinetics = __pyx_v_k;

  /* "cantera/reactor.pyx":853
 *         def __set__(self, Kinetics k):
 *             self._kinetics = k
 *             self.surface.setKinetics(self._kinetics.kinetics)             # <<<<<<<<<<<<<<
 * 
 *     property coverages:
 */
  __pyx_v_self->surface->setKinetics(__pyx_v_self->_kinetics->__pyx_base.kinetics);

  /* "cantera/reactor.pyx":851
 *             self.surface.syncState()
 *             return self._kinetics
 *         def __set__(self, Kinetics k):             # <<<<<<<<<<<<<<
 *             self._kinetics = k
 *             self.surface.setKinetics(self._kinetics.kinetics)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":859
 *         The fraction of sites covered by each surface species.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._kinetics is None:
 *                 raise CanteraError('No kinetics manager present')
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_9coverages_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_9coverages_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface_9coverages___get__(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_9coverages___get__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":860
 *         """
 *         def __get__(self):
 *             if self._kinetics is None:             # <<<<<<<<<<<<<<
 *                 raise CanteraError('No kinetics manager present')
 *             self.surface.syncState()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->_kinetics) == Py_None);
  if (unlikely(__pyx_t_1)) {

    /* "cantera/reactor.pyx":861
 *         def __get__(self):
 *             if self._kinetics is None:
 *                 raise CanteraError('No kinetics manager present')             # <<<<<<<<<<<<<<
 *             self.surface.syncState()
 *             return self._kinetics.coverages
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_CanteraError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_No_kinetics_manager_present};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 861, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 861, __pyx_L1_error)

    /* "cantera/reactor.pyx":860
 *         """
 *         def __get__(self):
 *             if self._kinetics is None:             # <<<<<<<<<<<<<<
 *                 raise CanteraError('No kinetics manager present')
 *             self.surface.syncState()
 */
  }

  /* "cantera/reactor.pyx":862
 *             if self._kinetics is None:
 *                 raise CanteraError('No kinetics manager present')
 *             self.surface.syncState()             # <<<<<<<<<<<<<<
 *             return self._kinetics.coverages
 *         def __set__(self, coverages):
 */
  __pyx_v_self->surface->syncState();

  /* "cantera/reactor.pyx":863
 *                 raise CanteraError('No kinetics manager present')
 *             self.surface.syncState()
 *             return self._kinetics.coverages             # <<<<<<<<<<<<<<
 *         def __set__(self, coverages):
 *             if self._kinetics is None:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_kinetics), __pyx_n_s_coverages); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":859
 *         The fraction of sites covered by each surface species.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self._kinetics is None:
 *                 raise CanteraError('No kinetics manager present')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.coverages.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":864
 *             self.surface.syncState()
 *             return self._kinetics.coverages
 *         def __set__(self, coverages):             # <<<<<<<<<<<<<<
 *             if self._kinetics is None:
 *                 raise CanteraError("Can't set coverages before assigning kinetics manager.")
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_14ReactorSurface_9coverages_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coverages); /*proto*/
static int __pyx_pw_7cantera_7reactor_14ReactorSurface_9coverages_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_coverages) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface_9coverages_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self), ((PyObject *)__pyx_v_coverages));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_14ReactorSurface_9coverages_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, PyObject *__pyx_v_coverages) {
  PyArrayObject *__pyx_v_data = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  __pyx_t_7cantera_5ctcxx_Composition __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/reactor.pyx":865
 *             return self._kinetics.coverages
 *         def __set__(self, coverages):
 *             if self._kinetics is None:             # <<<<<<<<<<<<<<
 *                 raise CanteraError("Can't set coverages before assigning kinetics manager.")
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->_kinetics) == Py_None);
  if (unlikely(__pyx_t_1)) {

    /* "cantera/reactor.pyx":866
 *         def __set__(self, coverages):
 *             if self._kinetics is None:
 *                 raise CanteraError("Can't set coverages before assigning kinetics manager.")             # <<<<<<<<<<<<<<
 * 
 *             if isinstance(coverages, (dict, str, bytes)):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_CanteraError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_Can_t_set_coverages_before_assig};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 866, __pyx_L1_error)

    /* "cantera/reactor.pyx":865
 *             return self._kinetics.coverages
 *         def __set__(self, coverages):
 *             if self._kinetics is None:             # <<<<<<<<<<<<<<
 *                 raise CanteraError("Can't set coverages before assigning kinetics manager.")
 * 
 */
  }

  /* "cantera/reactor.pyx":868
 *                 raise CanteraError("Can't set coverages before assigning kinetics manager.")
 * 
 *             if isinstance(coverages, (dict, str, bytes)):             # <<<<<<<<<<<<<<
 *                 self.surface.setCoverages(comp_map(coverages))
 *                 return
 */
  __pyx_t_6 = PyDict_Check(__pyx_v_coverages); 
  if (!__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = PyUnicode_Check(__pyx_v_coverages); 
  if (!__pyx_t_6) {
  } else {
    __pyx_t_1 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = PyBytes_Check(__pyx_v_coverages); 
  __pyx_t_1 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":869
 * 
 *             if isinstance(coverages, (dict, str, bytes)):
 *                 self.surface.setCoverages(comp_map(coverages))             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
    __pyx_t_7 = __pyx_f_7cantera_6_utils_comp_map(__pyx_v_coverages); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 869, __pyx_L1_error)
    try {
      __pyx_v_self->surface->setCoverages(__pyx_t_7);
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 869, __pyx_L1_error)
    }

    /* "cantera/reactor.pyx":870
 *             if isinstance(coverages, (dict, str, bytes)):
 *                 self.surface.setCoverages(comp_map(coverages))
 *                 return             # <<<<<<<<<<<<<<
 * 
 *             if len(coverages) != self._kinetics.n_species:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "cantera/reactor.pyx":868
 *                 raise CanteraError("Can't set coverages before assigning kinetics manager.")
 * 
 *             if isinstance(coverages, (dict, str, bytes)):             # <<<<<<<<<<<<<<
 *                 self.surface.setCoverages(comp_map(coverages))
 *                 return
 */
  }

  /* "cantera/reactor.pyx":872
 *                 return
 * 
 *             if len(coverages) != self._kinetics.n_species:             # <<<<<<<<<<<<<<
 *                 raise ValueError('Incorrect number of site coverages specified')
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_coverages); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 872, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_kinetics), __pyx_n_s_n_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "cantera/reactor.pyx":873
 * 
 *             if len(coverages) != self._kinetics.n_species:
 *                 raise ValueError('Incorrect number of site coverages specified')             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                     np.ascontiguousarray(coverages, dtype=np.double)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 873, __pyx_L1_error)

    /* "cantera/reactor.pyx":872
 *                 return
 * 
 *             if len(coverages) != self._kinetics.n_species:             # <<<<<<<<<<<<<<
 *                 raise ValueError('Incorrect number of site coverages specified')
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 */
  }

  /* "cantera/reactor.pyx":875
 *                 raise ValueError('Incorrect number of site coverages specified')
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                     np.ascontiguousarray(coverages, dtype=np.double)             # <<<<<<<<<<<<<<
 *             self.surface.setCoverages(&data[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_coverages);
  __Pyx_GIVEREF(__pyx_v_coverages);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_coverages);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_double); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 875, __pyx_L1_error)
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_10);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 874, __pyx_L1_error)
    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_data = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "cantera/reactor.pyx":876
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                     np.ascontiguousarray(coverages, dtype=np.double)
 *             self.surface.setCoverages(&data[0])             # <<<<<<<<<<<<<<
 * 
 *     def add_sensitivity_reaction(self, int m):
 */
  __pyx_t_12 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 876, __pyx_L1_error)
  }
  __pyx_v_self->surface->setCoverages((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_data.diminfo[0].strides)))); 

  /* "cantera/reactor.pyx":864
 *             self.surface.syncState()
 *             return self._kinetics.coverages
 *         def __set__(self, coverages):             # <<<<<<<<<<<<<<
 *             if self._kinetics is None:
 *                 raise CanteraError("Can't set coverages before assigning kinetics manager.")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.coverages.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":878
 *             self.surface.setCoverages(&data[0])
 * 
 *     def add_sensitivity_reaction(self, int m):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_9add_sensitivity_reaction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_14ReactorSurface_8add_sensitivity_reaction, "\n        Specifies that the sensitivity of the state variables with respect to\n        reaction ``m`` should be computed. ``m`` is the 0-based reaction index.\n        The Surface must be installed on a reactor and part of a network first.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_14ReactorSurface_9add_sensitivity_reaction = {"add_sensitivity_reaction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_14ReactorSurface_9add_sensitivity_reaction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_14ReactorSurface_8add_sensitivity_reaction};
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_9add_sensitivity_reaction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_m;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_sensitivity_reaction (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_m)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 878, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_sensitivity_reaction") < 0)) __PYX_ERR(0, 878, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_m = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 878, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_sensitivity_reaction", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 878, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.add_sensitivity_reaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface_8add_sensitivity_reaction(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self), __pyx_v_m);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_8add_sensitivity_reaction(struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, int __pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_sensitivity_reaction", 0);

  /* "cantera/reactor.pyx":884
 *         The Surface must be installed on a reactor and part of a network first.
 *         """
 *         self.surface.addSensitivityReaction(m)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->surface->addSensitivityReaction(__pyx_v_m);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 884, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":878
 *             self.surface.setCoverages(&data[0])
 * 
 *     def add_sensitivity_reaction(self, int m):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.add_sensitivity_reaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_14ReactorSurface_11__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_14ReactorSurface_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface_10__reduce_cython__(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_14ReactorSurface_13__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_14ReactorSurface_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_14ReactorSurface_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_14ReactorSurface_12__setstate_cython__(((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_14ReactorSurface_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorSurface *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorSurface.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":892
 *     """
 *     wall_type = "none"
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._wall = newWall3(stringify(self.wall_type))
 *         self.wall = self._wall.get()
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_8WallBase_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_8WallBase_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase___cinit__(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_8WallBase___cinit__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  std::shared_ptr<Cantera::WallBase>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cantera/reactor.pyx":893
 *     wall_type = "none"
 *     def __cinit__(self, *args, **kwargs):
 *         self._wall = newWall3(stringify(self.wall_type))             # <<<<<<<<<<<<<<
 *         self.wall = self._wall.get()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_wall_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_7cantera_6_utils_stringify(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = Cantera::newWall3(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 893, __pyx_L1_error)
  }
  __pyx_v_self->_wall = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "cantera/reactor.pyx":894
 *     def __cinit__(self, *args, **kwargs):
 *         self._wall = newWall3(stringify(self.wall_type))
 *         self.wall = self._wall.get()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, left, right, *, name=None, A=None, K=None, U=None,
 */
  __pyx_v_self->wall = __pyx_v_self->_wall.get();

  /* "cantera/reactor.pyx":892
 *     """
 *     wall_type = "none"
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._wall = newWall3(stringify(self.wall_type))
 *         self.wall = self._wall.get()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.WallBase.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":896
 *         self.wall = self._wall.get()
 * 
 *     def __init__(self, left, right, *, name=None, A=None, K=None, U=None,             # <<<<<<<<<<<<<<
 *                  Q=None, velocity=None):
 *         """
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_8WallBase_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_8WallBase_2__init__, "\n        :param left:\n            Reactor or reservoir on the left. Required.\n        :param right:\n            Reactor or reservoir on the right. Required.\n        :param name:\n            Name string. If omitted, the name is ``'Wall_n'``, where ``'n'``\n            is an integer assigned in the order walls are created.\n        :param A:\n            Wall area [m^2]. Defaults to 1.0 m^2.\n        :param K:\n            Wall expansion rate parameter [m/s/Pa]. Defaults to 0.0.\n        :param U:\n            Overall heat transfer coefficient [W/m^2]. Defaults to 0.0\n            (adiabatic wall).\n        :param Q:\n            Heat flux function :math:`q_0(t)` [W/m^2]. Optional. Default:\n            :math:`q_0(t) = 0.0`.\n        :param velocity:\n            Wall velocity function :math:`v_0(t)` [m/s].\n            Default: :math:`v_0(t) = 0.0`.\n        ");
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_7cantera_7reactor_8WallBase_2__init__;
#endif
static int __pyx_pw_7cantera_7reactor_8WallBase_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_left = 0;
  PyObject *__pyx_v_right = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_A = 0;
  PyObject *__pyx_v_K = 0;
  PyObject *__pyx_v_U = 0;
  PyObject *__pyx_v_Q = 0;
  PyObject *__pyx_v_velocity = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_left,&__pyx_n_s_right,&__pyx_n_s_name,&__pyx_n_s_A,&__pyx_n_s_K,&__pyx_n_s_U,&__pyx_n_s_Q,&__pyx_n_s_velocity,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);

    /* "cantera/reactor.pyx":897
 * 
 *     def __init__(self, left, right, *, name=None, A=None, K=None, U=None,
 *                  Q=None, velocity=None):             # <<<<<<<<<<<<<<
 *         """
 *         :param left:
 */
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_left)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 896, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_right)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 896, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 896, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 6)) {
        Py_ssize_t index;
        for (index = 2; index < 8 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 896, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 896, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_left = values[0];
    __pyx_v_right = values[1];
    __pyx_v_name = values[2];
    __pyx_v_A = values[3];
    __pyx_v_K = values[4];
    __pyx_v_U = values[5];
    __pyx_v_Q = values[6];
    __pyx_v_velocity = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 896, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.WallBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase_2__init__(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self), __pyx_v_left, __pyx_v_right, __pyx_v_name, __pyx_v_A, __pyx_v_K, __pyx_v_U, __pyx_v_Q, __pyx_v_velocity);

  /* "cantera/reactor.pyx":896
 *         self.wall = self._wall.get()
 * 
 *     def __init__(self, left, right, *, name=None, A=None, K=None, U=None,             # <<<<<<<<<<<<<<
 *                  Q=None, velocity=None):
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_8WallBase_2__init__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, PyObject *__pyx_v_left, PyObject *__pyx_v_right, PyObject *__pyx_v_name, PyObject *__pyx_v_A, PyObject *__pyx_v_K, PyObject *__pyx_v_U, PyObject *__pyx_v_Q, PyObject *__pyx_v_velocity) {
  PyObject *__pyx_v_n = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/reactor.pyx":920
 *             Default: :math:`v_0(t) = 0.0`.
 *         """
 *         self._velocity_func = None             # <<<<<<<<<<<<<<
 *         self._heat_flux_func = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_velocity_func);
  __Pyx_DECREF(__pyx_v_self->_velocity_func);
  __pyx_v_self->_velocity_func = Py_None;

  /* "cantera/reactor.pyx":921
 *         """
 *         self._velocity_func = None
 *         self._heat_flux_func = None             # <<<<<<<<<<<<<<
 * 
 *         self._install(left, right)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_heat_flux_func);
  __Pyx_DECREF(__pyx_v_self->_heat_flux_func);
  __pyx_v_self->_heat_flux_func = Py_None;

  /* "cantera/reactor.pyx":923
 *         self._heat_flux_func = None
 * 
 *         self._install(left, right)             # <<<<<<<<<<<<<<
 *         if name is not None:
 *             self.name = name
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_install_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_left, __pyx_v_right};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":924
 * 
 *         self._install(left, right)
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             self.name = name
 *         else:
 */
  __pyx_t_5 = (__pyx_v_name != Py_None);
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":925
 *         self._install(left, right)
 *         if name is not None:
 *             self.name = name             # <<<<<<<<<<<<<<
 *         else:
 *             _reactor_counts['Wall'] += 1
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_v_name))) __PYX_ERR(0, 925, __pyx_L1_error)
    __pyx_t_1 = __pyx_v_name;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->name);
    __Pyx_DECREF(__pyx_v_self->name);
    __pyx_v_self->name = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "cantera/reactor.pyx":924
 * 
 *         self._install(left, right)
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             self.name = name
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/reactor.pyx":927
 *             self.name = name
 *         else:
 *             _reactor_counts['Wall'] += 1             # <<<<<<<<<<<<<<
 *             n = _reactor_counts['Wall']
 *             self.name = 'Wall_{0}'.format(n)
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_n_u_Wall);
    __pyx_t_6 = __pyx_n_u_Wall;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_reactor_counts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_reactor_counts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely((PyObject_SetItem(__pyx_t_2, __pyx_t_6, __pyx_t_1) < 0))) __PYX_ERR(0, 927, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "cantera/reactor.pyx":928
 *         else:
 *             _reactor_counts['Wall'] += 1
 *             n = _reactor_counts['Wall']             # <<<<<<<<<<<<<<
 *             self.name = 'Wall_{0}'.format(n)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_reactor_counts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_Wall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_n = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cantera/reactor.pyx":929
 *             _reactor_counts['Wall'] += 1
 *             n = _reactor_counts['Wall']
 *             self.name = 'Wall_{0}'.format(n)             # <<<<<<<<<<<<<<
 * 
 *         if A is not None:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Wall__0, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_n};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 929, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->name);
    __Pyx_DECREF(__pyx_v_self->name);
    __pyx_v_self->name = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "cantera/reactor.pyx":931
 *             self.name = 'Wall_{0}'.format(n)
 * 
 *         if A is not None:             # <<<<<<<<<<<<<<
 *             self.area = A
 *         if K is not None:
 */
  __pyx_t_5 = (__pyx_v_A != Py_None);
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":932
 * 
 *         if A is not None:
 *             self.area = A             # <<<<<<<<<<<<<<
 *         if K is not None:
 *             self.expansion_rate_coeff = K
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_area, __pyx_v_A) < 0) __PYX_ERR(0, 932, __pyx_L1_error)

    /* "cantera/reactor.pyx":931
 *             self.name = 'Wall_{0}'.format(n)
 * 
 *         if A is not None:             # <<<<<<<<<<<<<<
 *             self.area = A
 *         if K is not None:
 */
  }

  /* "cantera/reactor.pyx":933
 *         if A is not None:
 *             self.area = A
 *         if K is not None:             # <<<<<<<<<<<<<<
 *             self.expansion_rate_coeff = K
 *         if U is not None:
 */
  __pyx_t_5 = (__pyx_v_K != Py_None);
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":934
 *             self.area = A
 *         if K is not None:
 *             self.expansion_rate_coeff = K             # <<<<<<<<<<<<<<
 *         if U is not None:
 *             self.heat_transfer_coeff = U
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_expansion_rate_coeff, __pyx_v_K) < 0) __PYX_ERR(0, 934, __pyx_L1_error)

    /* "cantera/reactor.pyx":933
 *         if A is not None:
 *             self.area = A
 *         if K is not None:             # <<<<<<<<<<<<<<
 *             self.expansion_rate_coeff = K
 *         if U is not None:
 */
  }

  /* "cantera/reactor.pyx":935
 *         if K is not None:
 *             self.expansion_rate_coeff = K
 *         if U is not None:             # <<<<<<<<<<<<<<
 *             self.heat_transfer_coeff = U
 *         if Q is not None:
 */
  __pyx_t_5 = (__pyx_v_U != Py_None);
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":936
 *             self.expansion_rate_coeff = K
 *         if U is not None:
 *             self.heat_transfer_coeff = U             # <<<<<<<<<<<<<<
 *         if Q is not None:
 *             self.heat_flux = Q
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_heat_transfer_coeff, __pyx_v_U) < 0) __PYX_ERR(0, 936, __pyx_L1_error)

    /* "cantera/reactor.pyx":935
 *         if K is not None:
 *             self.expansion_rate_coeff = K
 *         if U is not None:             # <<<<<<<<<<<<<<
 *             self.heat_transfer_coeff = U
 *         if Q is not None:
 */
  }

  /* "cantera/reactor.pyx":937
 *         if U is not None:
 *             self.heat_transfer_coeff = U
 *         if Q is not None:             # <<<<<<<<<<<<<<
 *             self.heat_flux = Q
 *         if velocity is not None:
 */
  __pyx_t_5 = (__pyx_v_Q != Py_None);
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":938
 *             self.heat_transfer_coeff = U
 *         if Q is not None:
 *             self.heat_flux = Q             # <<<<<<<<<<<<<<
 *         if velocity is not None:
 *             self.velocity = velocity
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_heat_flux, __pyx_v_Q) < 0) __PYX_ERR(0, 938, __pyx_L1_error)

    /* "cantera/reactor.pyx":937
 *         if U is not None:
 *             self.heat_transfer_coeff = U
 *         if Q is not None:             # <<<<<<<<<<<<<<
 *             self.heat_flux = Q
 *         if velocity is not None:
 */
  }

  /* "cantera/reactor.pyx":939
 *         if Q is not None:
 *             self.heat_flux = Q
 *         if velocity is not None:             # <<<<<<<<<<<<<<
 *             self.velocity = velocity
 * 
 */
  __pyx_t_5 = (__pyx_v_velocity != Py_None);
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":940
 *             self.heat_flux = Q
 *         if velocity is not None:
 *             self.velocity = velocity             # <<<<<<<<<<<<<<
 * 
 *     def _install(self, ReactorBase left, ReactorBase right):
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_velocity, __pyx_v_velocity) < 0) __PYX_ERR(0, 940, __pyx_L1_error)

    /* "cantera/reactor.pyx":939
 *         if Q is not None:
 *             self.heat_flux = Q
 *         if velocity is not None:             # <<<<<<<<<<<<<<
 *             self.velocity = velocity
 * 
 */
  }

  /* "cantera/reactor.pyx":896
 *         self.wall = self._wall.get()
 * 
 *     def __init__(self, left, right, *, name=None, A=None, K=None, U=None,             # <<<<<<<<<<<<<<
 *                  Q=None, velocity=None):
 *         """
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.reactor.WallBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":942
 *             self.velocity = velocity
 * 
 *     def _install(self, ReactorBase left, ReactorBase right):             # <<<<<<<<<<<<<<
 *         """
 *         Install this Wall between two `Reactor` objects or between a
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_5_install(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_8WallBase_4_install, "\n        Install this Wall between two `Reactor` objects or between a\n        `Reactor` and a `Reservoir`.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_8WallBase_5_install = {"_install", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_8WallBase_5_install, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_8WallBase_4_install};
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_5_install(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_left = 0;
  struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_right = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_install (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_left,&__pyx_n_s_right,0};
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_left)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 942, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_right)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 942, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_install", 1, 2, 2, 1); __PYX_ERR(0, 942, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_install") < 0)) __PYX_ERR(0, 942, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_left = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)values[0]);
    __pyx_v_right = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_install", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 942, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.WallBase._install", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_left), __pyx_ptype_7cantera_7reactor_ReactorBase, 1, "left", 0))) __PYX_ERR(0, 942, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_right), __pyx_ptype_7cantera_7reactor_ReactorBase, 1, "right", 0))) __PYX_ERR(0, 942, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase_4_install(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self), __pyx_v_left, __pyx_v_right);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_4_install(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_left, struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_right) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_install", 0);

  /* "cantera/reactor.pyx":947
 *         `Reactor` and a `Reservoir`.
 *         """
 *         left._add_wall(self)             # <<<<<<<<<<<<<<
 *         right._add_wall(self)
 *         self.wall.install(deref(left.rbase), deref(right.rbase))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_left), __pyx_n_s_add_wall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":948
 *         """
 *         left._add_wall(self)
 *         right._add_wall(self)             # <<<<<<<<<<<<<<
 *         self.wall.install(deref(left.rbase), deref(right.rbase))
 *         # Keep references to prevent premature garbage collection
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_right), __pyx_n_s_add_wall); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":949
 *         left._add_wall(self)
 *         right._add_wall(self)
 *         self.wall.install(deref(left.rbase), deref(right.rbase))             # <<<<<<<<<<<<<<
 *         # Keep references to prevent premature garbage collection
 *         self._left_reactor = left
 */
  (void)(__pyx_v_self->wall->install((*__pyx_v_left->rbase), (*__pyx_v_right->rbase)));

  /* "cantera/reactor.pyx":951
 *         self.wall.install(deref(left.rbase), deref(right.rbase))
 *         # Keep references to prevent premature garbage collection
 *         self._left_reactor = left             # <<<<<<<<<<<<<<
 *         self._right_reactor = right
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_left);
  __Pyx_GIVEREF((PyObject *)__pyx_v_left);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_left_reactor);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_left_reactor);
  __pyx_v_self->_left_reactor = __pyx_v_left;

  /* "cantera/reactor.pyx":952
 *         # Keep references to prevent premature garbage collection
 *         self._left_reactor = left
 *         self._right_reactor = right             # <<<<<<<<<<<<<<
 * 
 *     property type:
 */
  __Pyx_INCREF((PyObject *)__pyx_v_right);
  __Pyx_GIVEREF((PyObject *)__pyx_v_right);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_right_reactor);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_right_reactor);
  __pyx_v_self->_right_reactor = __pyx_v_right;

  /* "cantera/reactor.pyx":942
 *             self.velocity = velocity
 * 
 *     def _install(self, ReactorBase left, ReactorBase right):             # <<<<<<<<<<<<<<
 *         """
 *         Install this Wall between two `Reactor` objects or between a
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.reactor.WallBase._install", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":956
 *     property type:
 *         """The type of the wall."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.wall.type())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_4type_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase_4type___get__(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_4type___get__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":957
 *         """The type of the wall."""
 *         def __get__(self):
 *             return pystr(self.wall.type())             # <<<<<<<<<<<<<<
 * 
 *     property area:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6_utils_pystr(__pyx_v_self->wall->type()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":956
 *     property type:
 *         """The type of the wall."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.wall.type())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.WallBase.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":961
 *     property area:
 *         """ The wall area [m^2]. """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.wall.area()
 *         def __set__(self, double value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_4area_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_4area_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase_4area___get__(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_4area___get__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":962
 *         """ The wall area [m^2]. """
 *         def __get__(self):
 *             return self.wall.area()             # <<<<<<<<<<<<<<
 *         def __set__(self, double value):
 *             self.wall.setArea(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->wall->area()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":961
 *     property area:
 *         """ The wall area [m^2]. """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.wall.area()
 *         def __set__(self, double value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.WallBase.area.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":963
 *         def __get__(self):
 *             return self.wall.area()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.wall.setArea(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_8WallBase_4area_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7cantera_7reactor_8WallBase_4area_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 963, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.WallBase.area.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase_4area_2__set__(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_8WallBase_4area_2__set__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":964
 *             return self.wall.area()
 *         def __set__(self, double value):
 *             self.wall.setArea(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->wall->setArea(__pyx_v_value);

  /* "cantera/reactor.pyx":963
 *         def __get__(self):
 *             return self.wall.area()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             self.wall.setArea(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":966
 *             self.wall.setArea(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def expansion_rate(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_14expansion_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_14expansion_rate_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase_14expansion_rate___get__(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_14expansion_rate___get__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":975
 *         .. versionadded:: 3.0
 *         """
 *         return self.wall.expansionRate()             # <<<<<<<<<<<<<<
 * 
 *     def vdot(self, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->wall->expansionRate();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 975, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":966
 *             self.wall.setArea(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def expansion_rate(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.WallBase.expansion_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":977
 *         return self.wall.expansionRate()
 * 
 *     def vdot(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         The rate of volumetric change [m^3/s] associated with the wall
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_7vdot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_8WallBase_6vdot, "\n        The rate of volumetric change [m^3/s] associated with the wall\n        at time ``t``. A positive value corresponds to the left-hand reactor\n        volume increasing, and the right-hand reactor volume decreasing.\n\n        .. deprecated:: 3.0\n\n            To be removed after Cantera 3.0; replaceable by ``expansion_rate``.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_8WallBase_7vdot = {"vdot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_8WallBase_7vdot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_8WallBase_6vdot};
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_7vdot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_t;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vdot (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 977, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "vdot") < 0)) __PYX_ERR(0, 977, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 977, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("vdot", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 977, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.WallBase.vdot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase_6vdot(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_6vdot(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("vdot", 0);

  /* "cantera/reactor.pyx":987
 *             To be removed after Cantera 3.0; replaceable by ``expansion_rate``.
 *         """
 *         return self.wall.vdot(t)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->wall->vdot(__pyx_v_t);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 987, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":977
 *         return self.wall.expansionRate()
 * 
 *     def vdot(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         The rate of volumetric change [m^3/s] associated with the wall
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.WallBase.vdot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":989
 *         return self.wall.vdot(t)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def heat_rate(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_9heat_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_9heat_rate_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase_9heat_rate___get__(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_9heat_rate___get__(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":998
 *         .. versionadded:: 3.0
 *         """
 *         return self.wall.heatRate()             # <<<<<<<<<<<<<<
 * 
 *     def qdot(self, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->wall->heatRate();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 998, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":989
 *         return self.wall.vdot(t)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def heat_rate(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.WallBase.heat_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1000
 *         return self.wall.heatRate()
 * 
 *     def qdot(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         Total heat flux [W] through the wall at time ``t``. A positive value
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_9qdot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_8WallBase_8qdot, "\n        Total heat flux [W] through the wall at time ``t``. A positive value\n        corresponds to heat flowing from the left-hand reactor to the\n        right-hand one.\n\n        .. deprecated:: 3.0\n\n            To be removed after Cantera 3.0; replaceable by ``heat_rate``.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_8WallBase_9qdot = {"qdot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_8WallBase_9qdot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_8WallBase_8qdot};
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_9qdot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_t;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("qdot (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1000, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "qdot") < 0)) __PYX_ERR(0, 1000, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1000, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("qdot", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1000, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.WallBase.qdot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase_8qdot(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_8qdot(struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("qdot", 0);

  /* "cantera/reactor.pyx":1010
 *             To be removed after Cantera 3.0; replaceable by ``heat_rate``.
 *         """
 *         return self.wall.Q(t)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->wall->Q(__pyx_v_t);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1010, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1000
 *         return self.wall.heatRate()
 * 
 *     def qdot(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         Total heat flux [W] through the wall at time ``t``. A positive value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.WallBase.qdot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_8WallBase_11__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_8WallBase_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase_10__reduce_cython__(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.WallBase.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_8WallBase_13__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_8WallBase_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_8WallBase_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.WallBase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_8WallBase_12__setstate_cython__(((struct __pyx_obj_7cantera_7reactor_WallBase *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_8WallBase_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_WallBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.WallBase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1047
 *         as a function of the pressure difference between the adjacent reactors.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxWall*>(self.wall)).getExpansionRateCoeff()
 *         def __set__(self, double val):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_20expansion_rate_coeff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_20expansion_rate_coeff_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_20expansion_rate_coeff___get__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_4Wall_20expansion_rate_coeff___get__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1048
 *         """
 *         def __get__(self):
 *             return (<CxxWall*>(self.wall)).getExpansionRateCoeff()             # <<<<<<<<<<<<<<
 *         def __set__(self, double val):
 *             (<CxxWall*>(self.wall)).setExpansionRateCoeff(val)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::Wall *)__pyx_v_self->__pyx_base.wall)->getExpansionRateCoeff()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1047
 *         as a function of the pressure difference between the adjacent reactors.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxWall*>(self.wall)).getExpansionRateCoeff()
 *         def __set__(self, double val):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.Wall.expansion_rate_coeff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1049
 *         def __get__(self):
 *             return (<CxxWall*>(self.wall)).getExpansionRateCoeff()
 *         def __set__(self, double val):             # <<<<<<<<<<<<<<
 *             (<CxxWall*>(self.wall)).setExpansionRateCoeff(val)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_4Wall_20expansion_rate_coeff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val); /*proto*/
static int __pyx_pw_7cantera_7reactor_4Wall_20expansion_rate_coeff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_val) {
  double __pyx_v_val;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_val); {
    __pyx_v_val = __pyx_PyFloat_AsDouble(__pyx_arg_val); if (unlikely((__pyx_v_val == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1049, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Wall.expansion_rate_coeff.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_20expansion_rate_coeff_2__set__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self), ((double)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_4Wall_20expansion_rate_coeff_2__set__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, double __pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1050
 *             return (<CxxWall*>(self.wall)).getExpansionRateCoeff()
 *         def __set__(self, double val):
 *             (<CxxWall*>(self.wall)).setExpansionRateCoeff(val)             # <<<<<<<<<<<<<<
 * 
 *     property heat_transfer_coeff:
 */
  ((Cantera::Wall *)__pyx_v_self->__pyx_base.wall)->setExpansionRateCoeff(__pyx_v_val);

  /* "cantera/reactor.pyx":1049
 *         def __get__(self):
 *             return (<CxxWall*>(self.wall)).getExpansionRateCoeff()
 *         def __set__(self, double val):             # <<<<<<<<<<<<<<
 *             (<CxxWall*>(self.wall)).setExpansionRateCoeff(val)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1054
 *     property heat_transfer_coeff:
 *         """the overall heat transfer coefficient [W/m^2/K]"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxWall*>(self.wall)).getHeatTransferCoeff()
 *         def __set__(self, double value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_19heat_transfer_coeff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_19heat_transfer_coeff_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_19heat_transfer_coeff___get__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_4Wall_19heat_transfer_coeff___get__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1055
 *         """the overall heat transfer coefficient [W/m^2/K]"""
 *         def __get__(self):
 *             return (<CxxWall*>(self.wall)).getHeatTransferCoeff()             # <<<<<<<<<<<<<<
 *         def __set__(self, double value):
 *             (<CxxWall*>(self.wall)).setHeatTransferCoeff(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::Wall *)__pyx_v_self->__pyx_base.wall)->getHeatTransferCoeff()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1054
 *     property heat_transfer_coeff:
 *         """the overall heat transfer coefficient [W/m^2/K]"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxWall*>(self.wall)).getHeatTransferCoeff()
 *         def __set__(self, double value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.Wall.heat_transfer_coeff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1056
 *         def __get__(self):
 *             return (<CxxWall*>(self.wall)).getHeatTransferCoeff()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxWall*>(self.wall)).setHeatTransferCoeff(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_4Wall_19heat_transfer_coeff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7cantera_7reactor_4Wall_19heat_transfer_coeff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1056, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Wall.heat_transfer_coeff.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_19heat_transfer_coeff_2__set__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_4Wall_19heat_transfer_coeff_2__set__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1057
 *             return (<CxxWall*>(self.wall)).getHeatTransferCoeff()
 *         def __set__(self, double value):
 *             (<CxxWall*>(self.wall)).setHeatTransferCoeff(value)             # <<<<<<<<<<<<<<
 * 
 *     property emissivity:
 */
  ((Cantera::Wall *)__pyx_v_self->__pyx_base.wall)->setHeatTransferCoeff(__pyx_v_value);

  /* "cantera/reactor.pyx":1056
 *         def __get__(self):
 *             return (<CxxWall*>(self.wall)).getHeatTransferCoeff()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxWall*>(self.wall)).setHeatTransferCoeff(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1061
 *     property emissivity:
 *         """The emissivity (nondimensional)"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxWall*>(self.wall)).getEmissivity()
 *         def __set__(self, double value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_10emissivity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_10emissivity_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_10emissivity___get__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_4Wall_10emissivity___get__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1062
 *         """The emissivity (nondimensional)"""
 *         def __get__(self):
 *             return (<CxxWall*>(self.wall)).getEmissivity()             # <<<<<<<<<<<<<<
 *         def __set__(self, double value):
 *             (<CxxWall*>(self.wall)).setEmissivity(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::Wall *)__pyx_v_self->__pyx_base.wall)->getEmissivity()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1061
 *     property emissivity:
 *         """The emissivity (nondimensional)"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxWall*>(self.wall)).getEmissivity()
 *         def __set__(self, double value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.Wall.emissivity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1063
 *         def __get__(self):
 *             return (<CxxWall*>(self.wall)).getEmissivity()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxWall*>(self.wall)).setEmissivity(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_4Wall_10emissivity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7cantera_7reactor_4Wall_10emissivity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1063, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Wall.emissivity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_10emissivity_2__set__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_4Wall_10emissivity_2__set__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1064
 *             return (<CxxWall*>(self.wall)).getEmissivity()
 *         def __set__(self, double value):
 *             (<CxxWall*>(self.wall)).setEmissivity(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    ((Cantera::Wall *)__pyx_v_self->__pyx_base.wall)->setEmissivity(__pyx_v_value);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1064, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1063
 *         def __get__(self):
 *             return (<CxxWall*>(self.wall)).getEmissivity()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxWall*>(self.wall)).setEmissivity(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.Wall.emissivity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1066
 *             (<CxxWall*>(self.wall)).setEmissivity(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def velocity(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_8velocity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_8velocity_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_8velocity___get__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_4Wall_8velocity___get__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1074
 *         .. versionadded:: 3.0
 *         """
 *         return (<CxxWall*>(self.wall)).velocity()             # <<<<<<<<<<<<<<
 * 
 *     @velocity.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::Wall *)__pyx_v_self->__pyx_base.wall)->velocity()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1066
 *             (<CxxWall*>(self.wall)).setEmissivity(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def velocity(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.Wall.velocity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1076
 *         return (<CxxWall*>(self.wall)).velocity()
 * 
 *     @velocity.setter             # <<<<<<<<<<<<<<
 *     def velocity(self, v):
 *         cdef Func1 f
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_4Wall_8velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7cantera_7reactor_4Wall_8velocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_8velocity_2__set__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_4Wall_8velocity_2__set__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, PyObject *__pyx_v_v) {
  struct __pyx_obj_7cantera_5func1_Func1 *__pyx_v_f = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1079
 *     def velocity(self, v):
 *         cdef Func1 f
 *         if isinstance(v, Func1):             # <<<<<<<<<<<<<<
 *             f = v
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_v, __pyx_ptype_7cantera_5func1_Func1); 
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1080
 *         cdef Func1 f
 *         if isinstance(v, Func1):
 *             f = v             # <<<<<<<<<<<<<<
 *         else:
 *             f = Func1(v)
 */
    if (!(likely(((__pyx_v_v) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_v, __pyx_ptype_7cantera_5func1_Func1))))) __PYX_ERR(0, 1080, __pyx_L1_error)
    __pyx_t_2 = __pyx_v_v;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_f = ((struct __pyx_obj_7cantera_5func1_Func1 *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cantera/reactor.pyx":1079
 *     def velocity(self, v):
 *         cdef Func1 f
 *         if isinstance(v, Func1):             # <<<<<<<<<<<<<<
 *             f = v
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/reactor.pyx":1082
 *             f = v
 *         else:
 *             f = Func1(v)             # <<<<<<<<<<<<<<
 * 
 *         self._velocity_func = f
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cantera_5func1_Func1), __pyx_v_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_f = ((struct __pyx_obj_7cantera_5func1_Func1 *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "cantera/reactor.pyx":1084
 *             f = Func1(v)
 * 
 *         self._velocity_func = f             # <<<<<<<<<<<<<<
 *         (<CxxWall*>(self.wall)).setVelocity(f.func)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_f);
  __Pyx_GIVEREF((PyObject *)__pyx_v_f);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._velocity_func);
  __Pyx_DECREF(__pyx_v_self->__pyx_base._velocity_func);
  __pyx_v_self->__pyx_base._velocity_func = ((PyObject *)__pyx_v_f);

  /* "cantera/reactor.pyx":1085
 * 
 *         self._velocity_func = f
 *         (<CxxWall*>(self.wall)).setVelocity(f.func)             # <<<<<<<<<<<<<<
 * 
 *     def set_velocity(self, v):
 */
  ((Cantera::Wall *)__pyx_v_self->__pyx_base.wall)->setVelocity(__pyx_v_f->func);

  /* "cantera/reactor.pyx":1076
 *         return (<CxxWall*>(self.wall)).velocity()
 * 
 *     @velocity.setter             # <<<<<<<<<<<<<<
 *     def velocity(self, v):
 *         cdef Func1 f
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.Wall.velocity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_f);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1087
 *         (<CxxWall*>(self.wall)).setVelocity(f.func)
 * 
 *     def set_velocity(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         The wall velocity [m/s]. May be either a constant or an arbitrary
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_1set_velocity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_4Wall_set_velocity, "\n        The wall velocity [m/s]. May be either a constant or an arbitrary\n        function of time. See `Func1`.\n\n        .. deprecated:: 3.0\n\n            Replaced by the ``velocity`` property.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_4Wall_1set_velocity = {"set_velocity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_4Wall_1set_velocity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_4Wall_set_velocity};
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_1set_velocity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_v = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_velocity (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1087, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_velocity") < 0)) __PYX_ERR(0, 1087, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_v = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_velocity", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1087, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Wall.set_velocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_set_velocity(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self), __pyx_v_v);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_4Wall_set_velocity(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_velocity", 0);

  /* "cantera/reactor.pyx":1096
 *             Replaced by the ``velocity`` property.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "Wall.set_velocity: To be removed after Cantera 3.0; replaced by property "
 *             "'velocity'.", DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1098
 *         warnings.warn(
 *             "Wall.set_velocity: To be removed after Cantera 3.0; replaced by property "
 *             "'velocity'.", DeprecationWarning)             # <<<<<<<<<<<<<<
 *         self.velocity = v
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1099
 *             "Wall.set_velocity: To be removed after Cantera 3.0; replaced by property "
 *             "'velocity'.", DeprecationWarning)
 *         self.velocity = v             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_velocity, __pyx_v_v) < 0) __PYX_ERR(0, 1099, __pyx_L1_error)

  /* "cantera/reactor.pyx":1087
 *         (<CxxWall*>(self.wall)).setVelocity(f.func)
 * 
 *     def set_velocity(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         The wall velocity [m/s]. May be either a constant or an arbitrary
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.Wall.set_velocity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1101
 *         self.velocity = v
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def heat_flux(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_9heat_flux_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_9heat_flux_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_9heat_flux___get__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_4Wall_9heat_flux___get__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1109
 *         .. versionadded:: 3.0
 *         """
 *         return (<CxxWall*>(self.wall)).heatFlux()             # <<<<<<<<<<<<<<
 * 
 *     @heat_flux.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::Wall *)__pyx_v_self->__pyx_base.wall)->heatFlux()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1101
 *         self.velocity = v
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def heat_flux(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.Wall.heat_flux.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1111
 *         return (<CxxWall*>(self.wall)).heatFlux()
 * 
 *     @heat_flux.setter             # <<<<<<<<<<<<<<
 *     def heat_flux(self, q):
 *         cdef Func1 f
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_4Wall_9heat_flux_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_q); /*proto*/
static int __pyx_pw_7cantera_7reactor_4Wall_9heat_flux_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_q) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_9heat_flux_2__set__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self), ((PyObject *)__pyx_v_q));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_4Wall_9heat_flux_2__set__(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, PyObject *__pyx_v_q) {
  struct __pyx_obj_7cantera_5func1_Func1 *__pyx_v_f = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1114
 *     def heat_flux(self, q):
 *         cdef Func1 f
 *         if isinstance(q, Func1):             # <<<<<<<<<<<<<<
 *             f = q
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_q, __pyx_ptype_7cantera_5func1_Func1); 
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1115
 *         cdef Func1 f
 *         if isinstance(q, Func1):
 *             f = q             # <<<<<<<<<<<<<<
 *         else:
 *             f = Func1(q)
 */
    if (!(likely(((__pyx_v_q) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_q, __pyx_ptype_7cantera_5func1_Func1))))) __PYX_ERR(0, 1115, __pyx_L1_error)
    __pyx_t_2 = __pyx_v_q;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_f = ((struct __pyx_obj_7cantera_5func1_Func1 *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cantera/reactor.pyx":1114
 *     def heat_flux(self, q):
 *         cdef Func1 f
 *         if isinstance(q, Func1):             # <<<<<<<<<<<<<<
 *             f = q
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/reactor.pyx":1117
 *             f = q
 *         else:
 *             f = Func1(q)             # <<<<<<<<<<<<<<
 * 
 *         self._heat_flux_func = f
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cantera_5func1_Func1), __pyx_v_q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_f = ((struct __pyx_obj_7cantera_5func1_Func1 *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "cantera/reactor.pyx":1119
 *             f = Func1(q)
 * 
 *         self._heat_flux_func = f             # <<<<<<<<<<<<<<
 *         (<CxxWall*>self.wall).setHeatFlux(f.func)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_f);
  __Pyx_GIVEREF((PyObject *)__pyx_v_f);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._heat_flux_func);
  __Pyx_DECREF(__pyx_v_self->__pyx_base._heat_flux_func);
  __pyx_v_self->__pyx_base._heat_flux_func = ((PyObject *)__pyx_v_f);

  /* "cantera/reactor.pyx":1120
 * 
 *         self._heat_flux_func = f
 *         (<CxxWall*>self.wall).setHeatFlux(f.func)             # <<<<<<<<<<<<<<
 * 
 *     def set_heat_flux(self, q):
 */
  ((Cantera::Wall *)__pyx_v_self->__pyx_base.wall)->setHeatFlux(__pyx_v_f->func);

  /* "cantera/reactor.pyx":1111
 *         return (<CxxWall*>(self.wall)).heatFlux()
 * 
 *     @heat_flux.setter             # <<<<<<<<<<<<<<
 *     def heat_flux(self, q):
 *         cdef Func1 f
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.Wall.heat_flux.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_f);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1122
 *         (<CxxWall*>self.wall).setHeatFlux(f.func)
 * 
 *     def set_heat_flux(self, q):             # <<<<<<<<<<<<<<
 *         """
 *         Heat flux [W/m^2] across the wall. May be either a constant or
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_3set_heat_flux(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_4Wall_2set_heat_flux, "\n        Heat flux [W/m^2] across the wall. May be either a constant or\n        an arbitrary function of time. See `Func1`.\n\n        .. deprecated:: 3.0\n\n            Replaced by the ``heat_flux`` property.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_4Wall_3set_heat_flux = {"set_heat_flux", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_4Wall_3set_heat_flux, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_4Wall_2set_heat_flux};
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_3set_heat_flux(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_q = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_heat_flux (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_q,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_q)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1122, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_heat_flux") < 0)) __PYX_ERR(0, 1122, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_q = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_heat_flux", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Wall.set_heat_flux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_2set_heat_flux(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self), __pyx_v_q);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_4Wall_2set_heat_flux(struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, PyObject *__pyx_v_q) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_heat_flux", 0);

  /* "cantera/reactor.pyx":1131
 *             Replaced by the ``heat_flux`` property.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "Wall.set_heat_flux: To be removed after Cantera 3.0; replaced by property "
 *             "'heat_flux'.", DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1133
 *         warnings.warn(
 *             "Wall.set_heat_flux: To be removed after Cantera 3.0; replaced by property "
 *             "'heat_flux'.", DeprecationWarning)             # <<<<<<<<<<<<<<
 *         self.heat_flux = q
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1134
 *             "Wall.set_heat_flux: To be removed after Cantera 3.0; replaced by property "
 *             "'heat_flux'.", DeprecationWarning)
 *         self.heat_flux = q             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_heat_flux, __pyx_v_q) < 0) __PYX_ERR(0, 1134, __pyx_L1_error)

  /* "cantera/reactor.pyx":1122
 *         (<CxxWall*>self.wall).setHeatFlux(f.func)
 * 
 *     def set_heat_flux(self, q):             # <<<<<<<<<<<<<<
 *         """
 *         Heat flux [W/m^2] across the wall. May be either a constant or
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.Wall.set_heat_flux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_4Wall_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_4Wall_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_4__reduce_cython__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_4Wall_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.Wall.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_4Wall_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_4Wall_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_4Wall_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Wall.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_4Wall_6__setstate_cython__(((struct __pyx_obj_7cantera_7reactor_Wall *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_4Wall_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_Wall *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.Wall.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1149
 *     """
 *     flowdevice_type = "none"
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._dev = newFlowDevice3(stringify(self.flowdevice_type))
 *         self.dev = self._dev.get()
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10FlowDevice_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_10FlowDevice_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice___cinit__(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10FlowDevice___cinit__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  std::shared_ptr<Cantera::FlowDevice>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cantera/reactor.pyx":1150
 *     flowdevice_type = "none"
 *     def __cinit__(self, *args, **kwargs):
 *         self._dev = newFlowDevice3(stringify(self.flowdevice_type))             # <<<<<<<<<<<<<<
 *         self.dev = self._dev.get()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flowdevice_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_7cantera_6_utils_stringify(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = Cantera::newFlowDevice3(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1150, __pyx_L1_error)
  }
  __pyx_v_self->_dev = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);

  /* "cantera/reactor.pyx":1151
 *     def __cinit__(self, *args, **kwargs):
 *         self._dev = newFlowDevice3(stringify(self.flowdevice_type))
 *         self.dev = self._dev.get()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, upstream, downstream, *, name=None):
 */
  __pyx_v_self->dev = __pyx_v_self->_dev.get();

  /* "cantera/reactor.pyx":1149
 *     """
 *     flowdevice_type = "none"
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._dev = newFlowDevice3(stringify(self.flowdevice_type))
 *         self.dev = self._dev.get()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1153
 *         self.dev = self._dev.get()
 * 
 *     def __init__(self, upstream, downstream, *, name=None):             # <<<<<<<<<<<<<<
 *         assert self.dev != NULL
 *         self._rate_func = None
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10FlowDevice_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_10FlowDevice_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_upstream = 0;
  PyObject *__pyx_v_downstream = 0;
  PyObject *__pyx_v_name = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_upstream,&__pyx_n_s_downstream,&__pyx_n_s_name,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_upstream)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1153, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_downstream)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1153, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 1153, __pyx_L3_error)
        }
      }
      if (kw_args == 1) {
        const Py_ssize_t index = 2;
        PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
        if (value) { values[index] = value; kw_args--; }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1153, __pyx_L3_error)
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 1153, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_upstream = values[0];
    __pyx_v_downstream = values[1];
    __pyx_v_name = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1153, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_2__init__(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self), __pyx_v_upstream, __pyx_v_downstream, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10FlowDevice_2__init__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, PyObject *__pyx_v_upstream, PyObject *__pyx_v_downstream, PyObject *__pyx_v_name) {
  PyObject *__pyx_v_n = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/reactor.pyx":1154
 * 
 *     def __init__(self, upstream, downstream, *, name=None):
 *         assert self.dev != NULL             # <<<<<<<<<<<<<<
 *         self._rate_func = None
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_self->dev != NULL);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 1154, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1154, __pyx_L1_error)
  #endif

  /* "cantera/reactor.pyx":1155
 *     def __init__(self, upstream, downstream, *, name=None):
 *         assert self.dev != NULL
 *         self._rate_func = None             # <<<<<<<<<<<<<<
 * 
 *         if name is not None:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_rate_func);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_rate_func);
  __pyx_v_self->_rate_func = ((struct __pyx_obj_7cantera_5func1_Func1 *)Py_None);

  /* "cantera/reactor.pyx":1157
 *         self._rate_func = None
 * 
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             self.name = name
 *         else:
 */
  __pyx_t_1 = (__pyx_v_name != Py_None);
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1158
 * 
 *         if name is not None:
 *             self.name = name             # <<<<<<<<<<<<<<
 *         else:
 *             _reactor_counts[self.__class__.__name__] += 1
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v_name))||((__pyx_v_name) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_v_name))) __PYX_ERR(0, 1158, __pyx_L1_error)
    __pyx_t_2 = __pyx_v_name;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->name);
    __Pyx_DECREF(__pyx_v_self->name);
    __pyx_v_self->name = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cantera/reactor.pyx":1157
 *         self._rate_func = None
 * 
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             self.name = name
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/reactor.pyx":1160
 *             self.name = name
 *         else:
 *             _reactor_counts[self.__class__.__name__] += 1             # <<<<<<<<<<<<<<
 *             n = _reactor_counts[self.__class__.__name__]
 *             self.name = '{0}_{1}'.format(self.__class__.__name__, n)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_reactor_counts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_reactor_counts); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely((PyObject_SetItem(__pyx_t_4, __pyx_t_3, __pyx_t_2) < 0))) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "cantera/reactor.pyx":1161
 *         else:
 *             _reactor_counts[self.__class__.__name__] += 1
 *             n = _reactor_counts[self.__class__.__name__]             # <<<<<<<<<<<<<<
 *             self.name = '{0}_{1}'.format(self.__class__.__name__, n)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_reactor_counts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_n = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "cantera/reactor.pyx":1162
 *             _reactor_counts[self.__class__.__name__] += 1
 *             n = _reactor_counts[self.__class__.__name__]
 *             self.name = '{0}_{1}'.format(self.__class__.__name__, n)             # <<<<<<<<<<<<<<
 * 
 *         self._install(upstream, downstream)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u_0___1, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_5, __pyx_v_n};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->name);
    __Pyx_DECREF(__pyx_v_self->name);
    __pyx_v_self->name = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "cantera/reactor.pyx":1164
 *             self.name = '{0}_{1}'.format(self.__class__.__name__, n)
 * 
 *         self._install(upstream, downstream)             # <<<<<<<<<<<<<<
 * 
 *     property type:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_install_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_upstream, __pyx_v_downstream};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/reactor.pyx":1153
 *         self.dev = self._dev.get()
 * 
 *     def __init__(self, upstream, downstream, *, name=None):             # <<<<<<<<<<<<<<
 *         assert self.dev != NULL
 *         self._rate_func = None
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1168
 *     property type:
 *         """The type of the flow device."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.dev.type())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_4type_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_4type___get__(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_4type___get__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1169
 *         """The type of the flow device."""
 *         def __get__(self):
 *             return pystr(self.dev.type())             # <<<<<<<<<<<<<<
 * 
 *     def _install(self, ReactorBase upstream, ReactorBase downstream):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6_utils_pystr(__pyx_v_self->dev->type()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1168
 *     property type:
 *         """The type of the flow device."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.dev.type())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1171
 *             return pystr(self.dev.type())
 * 
 *     def _install(self, ReactorBase upstream, ReactorBase downstream):             # <<<<<<<<<<<<<<
 *         """
 *         Install the device between the ``upstream`` (source) and ``downstream``
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_5_install(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10FlowDevice_4_install, "\n        Install the device between the ``upstream`` (source) and ``downstream``\n        (destination) reactors or reservoirs.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10FlowDevice_5_install = {"_install", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10FlowDevice_5_install, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10FlowDevice_4_install};
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_5_install(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_upstream = 0;
  struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_downstream = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_install (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_upstream,&__pyx_n_s_downstream,0};
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_upstream)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1171, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_downstream)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1171, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_install", 1, 2, 2, 1); __PYX_ERR(0, 1171, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_install") < 0)) __PYX_ERR(0, 1171, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_upstream = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)values[0]);
    __pyx_v_downstream = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_install", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1171, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowDevice._install", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_upstream), __pyx_ptype_7cantera_7reactor_ReactorBase, 1, "upstream", 0))) __PYX_ERR(0, 1171, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_downstream), __pyx_ptype_7cantera_7reactor_ReactorBase, 1, "downstream", 0))) __PYX_ERR(0, 1171, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_4_install(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self), __pyx_v_upstream, __pyx_v_downstream);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_4_install(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_upstream, struct __pyx_obj_7cantera_7reactor_ReactorBase *__pyx_v_downstream) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_install", 0);

  /* "cantera/reactor.pyx":1176
 *         (destination) reactors or reservoirs.
 *         """
 *         upstream._add_outlet(self)             # <<<<<<<<<<<<<<
 *         downstream._add_inlet(self)
 *         self.dev.install(deref(upstream.rbase), deref(downstream.rbase))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_upstream), __pyx_n_s_add_outlet); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1177
 *         """
 *         upstream._add_outlet(self)
 *         downstream._add_inlet(self)             # <<<<<<<<<<<<<<
 *         self.dev.install(deref(upstream.rbase), deref(downstream.rbase))
 *         # Keep references to prevent premature garbage collection
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_downstream), __pyx_n_s_add_inlet); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1178
 *         upstream._add_outlet(self)
 *         downstream._add_inlet(self)
 *         self.dev.install(deref(upstream.rbase), deref(downstream.rbase))             # <<<<<<<<<<<<<<
 *         # Keep references to prevent premature garbage collection
 *         self._upstream = upstream
 */
  try {
    __pyx_v_self->dev->install((*__pyx_v_upstream->rbase), (*__pyx_v_downstream->rbase));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1178, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1180
 *         self.dev.install(deref(upstream.rbase), deref(downstream.rbase))
 *         # Keep references to prevent premature garbage collection
 *         self._upstream = upstream             # <<<<<<<<<<<<<<
 *         self._downstream = downstream
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_upstream);
  __Pyx_GIVEREF((PyObject *)__pyx_v_upstream);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_upstream);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_upstream);
  __pyx_v_self->_upstream = __pyx_v_upstream;

  /* "cantera/reactor.pyx":1181
 *         # Keep references to prevent premature garbage collection
 *         self._upstream = upstream
 *         self._downstream = downstream             # <<<<<<<<<<<<<<
 * 
 *     property mass_flow_rate:
 */
  __Pyx_INCREF((PyObject *)__pyx_v_downstream);
  __Pyx_GIVEREF((PyObject *)__pyx_v_downstream);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_downstream);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_downstream);
  __pyx_v_self->_downstream = __pyx_v_downstream;

  /* "cantera/reactor.pyx":1171
 *             return pystr(self.dev.type())
 * 
 *     def _install(self, ReactorBase upstream, ReactorBase downstream):             # <<<<<<<<<<<<<<
 *         """
 *         Install the device between the ``upstream`` (source) and ``downstream``
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.reactor.FlowDevice._install", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1188
 *         network time.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.dev.massFlowRate()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_14mass_flow_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_14mass_flow_rate_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_14mass_flow_rate___get__(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_14mass_flow_rate___get__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1189
 *         """
 *         def __get__(self):
 *             return self.dev.massFlowRate()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->dev->massFlowRate();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1189, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1188
 *         network time.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.dev.massFlowRate()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.mass_flow_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1191
 *             return self.dev.massFlowRate()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def pressure_function(self):
 *         r"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_17pressure_function_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_17pressure_function_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_17pressure_function___get__(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_17pressure_function___get__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1207
 *         .. versionadded:: 3.0
 *         """
 *         return self.dev.evalPressureFunction()             # <<<<<<<<<<<<<<
 * 
 *     @pressure_function.setter
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->dev->evalPressureFunction();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1207, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1191
 *             return self.dev.massFlowRate()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def pressure_function(self):
 *         r"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.pressure_function.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1209
 *         return self.dev.evalPressureFunction()
 * 
 *     @pressure_function.setter             # <<<<<<<<<<<<<<
 *     def pressure_function(self, k):
 *         cdef Func1 f
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10FlowDevice_17pressure_function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static int __pyx_pw_7cantera_7reactor_10FlowDevice_17pressure_function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_17pressure_function_2__set__(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self), ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10FlowDevice_17pressure_function_2__set__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, PyObject *__pyx_v_k) {
  struct __pyx_obj_7cantera_5func1_Func1 *__pyx_v_f = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1212
 *     def pressure_function(self, k):
 *         cdef Func1 f
 *         if isinstance(k, Func1):             # <<<<<<<<<<<<<<
 *             f = k
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_k, __pyx_ptype_7cantera_5func1_Func1); 
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1213
 *         cdef Func1 f
 *         if isinstance(k, Func1):
 *             f = k             # <<<<<<<<<<<<<<
 *         else:
 *             f = Func1(k)
 */
    if (!(likely(((__pyx_v_k) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_k, __pyx_ptype_7cantera_5func1_Func1))))) __PYX_ERR(0, 1213, __pyx_L1_error)
    __pyx_t_2 = __pyx_v_k;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_f = ((struct __pyx_obj_7cantera_5func1_Func1 *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cantera/reactor.pyx":1212
 *     def pressure_function(self, k):
 *         cdef Func1 f
 *         if isinstance(k, Func1):             # <<<<<<<<<<<<<<
 *             f = k
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/reactor.pyx":1215
 *             f = k
 *         else:
 *             f = Func1(k)             # <<<<<<<<<<<<<<
 *         self._rate_func = f
 *         self.dev.setPressureFunction(f.func)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cantera_5func1_Func1), __pyx_v_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_f = ((struct __pyx_obj_7cantera_5func1_Func1 *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "cantera/reactor.pyx":1216
 *         else:
 *             f = Func1(k)
 *         self._rate_func = f             # <<<<<<<<<<<<<<
 *         self.dev.setPressureFunction(f.func)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_f);
  __Pyx_GIVEREF((PyObject *)__pyx_v_f);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_rate_func);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_rate_func);
  __pyx_v_self->_rate_func = __pyx_v_f;

  /* "cantera/reactor.pyx":1217
 *             f = Func1(k)
 *         self._rate_func = f
 *         self.dev.setPressureFunction(f.func)             # <<<<<<<<<<<<<<
 * 
 *     def set_pressure_function(self, k):
 */
  try {
    __pyx_v_self->dev->setPressureFunction(__pyx_v_f->func);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1217, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1209
 *         return self.dev.evalPressureFunction()
 * 
 *     @pressure_function.setter             # <<<<<<<<<<<<<<
 *     def pressure_function(self, k):
 *         cdef Func1 f
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.pressure_function.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_f);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1219
 *         self.dev.setPressureFunction(f.func)
 * 
 *     def set_pressure_function(self, k):             # <<<<<<<<<<<<<<
 *         r"""
 *         Set the relationship between mass flow rate and the pressure drop across a
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_7set_pressure_function(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10FlowDevice_6set_pressure_function, "\n        Set the relationship between mass flow rate and the pressure drop across a\n        flow device. The mass flow rate [kg/s] is calculated given the pressure\n        drop [Pa] and a coefficient set by a flow device specific function.\n        The calculation of mass flow rate depends to the flow device.\n\n        >>> F = FlowDevice(res1, reactor1)\n        >>> F.set_pressure_function(lambda dP: dP**2)\n\n        where FlowDevice is either a Valve or PressureController object.\n\n        .. deprecated:: 3.0\n            To be removed after Cantera 3.0. Use property ``pressure_function`` instead.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10FlowDevice_7set_pressure_function = {"set_pressure_function", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10FlowDevice_7set_pressure_function, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10FlowDevice_6set_pressure_function};
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_7set_pressure_function(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_k = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_pressure_function (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1219, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_pressure_function") < 0)) __PYX_ERR(0, 1219, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_k = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_pressure_function", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1219, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.set_pressure_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_6set_pressure_function(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self), __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_6set_pressure_function(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_pressure_function", 0);

  /* "cantera/reactor.pyx":1234
 *             To be removed after Cantera 3.0. Use property ``pressure_function`` instead.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "FlowDevice.set_pressure_function: To be removed after Cantera 3.0; "
 *             "replaced by 'pressure_function'.", DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1236
 *         warnings.warn(
 *             "FlowDevice.set_pressure_function: To be removed after Cantera 3.0; "
 *             "replaced by 'pressure_function'.", DeprecationWarning)             # <<<<<<<<<<<<<<
 *         self.pressure_function = k
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1237
 *             "FlowDevice.set_pressure_function: To be removed after Cantera 3.0; "
 *             "replaced by 'pressure_function'.", DeprecationWarning)
 *         self.pressure_function = k             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pressure_function, __pyx_v_k) < 0) __PYX_ERR(0, 1237, __pyx_L1_error)

  /* "cantera/reactor.pyx":1219
 *         self.dev.setPressureFunction(f.func)
 * 
 *     def set_pressure_function(self, k):             # <<<<<<<<<<<<<<
 *         r"""
 *         Set the relationship between mass flow rate and the pressure drop across a
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.set_pressure_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1239
 *         self.pressure_function = k
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def time_function(self):
 *         r"""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_13time_function_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_13time_function_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_13time_function___get__(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_13time_function___get__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1254
 *         .. versionadded:: 3.0
 *         """
 *         return self.dev.evalTimeFunction()             # <<<<<<<<<<<<<<
 * 
 *     @time_function.setter
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->dev->evalTimeFunction();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1254, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1239
 *         self.pressure_function = k
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def time_function(self):
 *         r"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.time_function.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1256
 *         return self.dev.evalTimeFunction()
 * 
 *     @time_function.setter             # <<<<<<<<<<<<<<
 *     def time_function(self, k):
 *         cdef Func1 g
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10FlowDevice_13time_function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_k); /*proto*/
static int __pyx_pw_7cantera_7reactor_10FlowDevice_13time_function_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_k) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_13time_function_2__set__(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self), ((PyObject *)__pyx_v_k));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10FlowDevice_13time_function_2__set__(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, PyObject *__pyx_v_k) {
  struct __pyx_obj_7cantera_5func1_Func1 *__pyx_v_g = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1259
 *     def time_function(self, k):
 *         cdef Func1 g
 *         if isinstance(k, Func1):             # <<<<<<<<<<<<<<
 *             g = k
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_k, __pyx_ptype_7cantera_5func1_Func1); 
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1260
 *         cdef Func1 g
 *         if isinstance(k, Func1):
 *             g = k             # <<<<<<<<<<<<<<
 *         else:
 *             g = Func1(k)
 */
    if (!(likely(((__pyx_v_k) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_k, __pyx_ptype_7cantera_5func1_Func1))))) __PYX_ERR(0, 1260, __pyx_L1_error)
    __pyx_t_2 = __pyx_v_k;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_g = ((struct __pyx_obj_7cantera_5func1_Func1 *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "cantera/reactor.pyx":1259
 *     def time_function(self, k):
 *         cdef Func1 g
 *         if isinstance(k, Func1):             # <<<<<<<<<<<<<<
 *             g = k
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/reactor.pyx":1262
 *             g = k
 *         else:
 *             g = Func1(k)             # <<<<<<<<<<<<<<
 *         self._time_func = g
 *         self.dev.setTimeFunction(g.func)
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cantera_5func1_Func1), __pyx_v_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_g = ((struct __pyx_obj_7cantera_5func1_Func1 *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "cantera/reactor.pyx":1263
 *         else:
 *             g = Func1(k)
 *         self._time_func = g             # <<<<<<<<<<<<<<
 *         self.dev.setTimeFunction(g.func)
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_g);
  __Pyx_GIVEREF((PyObject *)__pyx_v_g);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_time_func);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_time_func);
  __pyx_v_self->_time_func = __pyx_v_g;

  /* "cantera/reactor.pyx":1264
 *             g = Func1(k)
 *         self._time_func = g
 *         self.dev.setTimeFunction(g.func)             # <<<<<<<<<<<<<<
 * 
 *     def set_time_function(self, k):
 */
  try {
    __pyx_v_self->dev->setTimeFunction(__pyx_v_g->func);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1264, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1256
 *         return self.dev.evalTimeFunction()
 * 
 *     @time_function.setter             # <<<<<<<<<<<<<<
 *     def time_function(self, k):
 *         cdef Func1 g
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.time_function.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1266
 *         self.dev.setTimeFunction(g.func)
 * 
 *     def set_time_function(self, k):             # <<<<<<<<<<<<<<
 *         r"""
 *         Set the time dependence of a flow device. The mass flow rate [kg/s] is
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_9set_time_function(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10FlowDevice_8set_time_function, "\n        Set the time dependence of a flow device. The mass flow rate [kg/s] is\n        calculated for a flow device, and multiplied by a function of time.\n        The calculation of mass flow rate depends to the flow device.\n\n        >>> F = FlowDevice(res1, reactor1)\n        >>> F.set_time_function(lambda t: exp(-10 * (t - 0.5)**2))\n\n        where FlowDevice is either a Valve or MassFlowController object.\n\n        .. deprecated:: 3.0\n            To be removed after Cantera 3.0. Use property ``time_function`` instead.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10FlowDevice_9set_time_function = {"set_time_function", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10FlowDevice_9set_time_function, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10FlowDevice_8set_time_function};
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_9set_time_function(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_k = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_function (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1266, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_time_function") < 0)) __PYX_ERR(0, 1266, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_k = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_time_function", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1266, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.set_time_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_8set_time_function(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self), __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_8set_time_function(struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, PyObject *__pyx_v_k) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_time_function", 0);

  /* "cantera/reactor.pyx":1280
 *             To be removed after Cantera 3.0. Use property ``time_function`` instead.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "FlowDevice.set_time_function: To be removed after Cantera 3.0; "
 *             "replaced by 'time_function'.", DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1282
 *         warnings.warn(
 *             "FlowDevice.set_time_function: To be removed after Cantera 3.0; "
 *             "replaced by 'time_function'.", DeprecationWarning)             # <<<<<<<<<<<<<<
 *         self.time_function = k
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1283
 *             "FlowDevice.set_time_function: To be removed after Cantera 3.0; "
 *             "replaced by 'time_function'.", DeprecationWarning)
 *         self.time_function = k             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_time_function, __pyx_v_k) < 0) __PYX_ERR(0, 1283, __pyx_L1_error)

  /* "cantera/reactor.pyx":1266
 *         self.dev.setTimeFunction(g.func)
 * 
 *     def set_time_function(self, k):             # <<<<<<<<<<<<<<
 *         r"""
 *         Set the time dependence of a flow device. The mass flow rate [kg/s] is
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.set_time_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_10FlowDevice_11__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10FlowDevice_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_11__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_10__reduce_cython__(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_10FlowDevice_13__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10FlowDevice_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_10FlowDevice_13__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10FlowDevice_12__setstate_cython__(((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10FlowDevice_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.FlowDevice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1310
 *     flowdevice_type = "MassFlowController"
 * 
 *     def __init__(self, upstream, downstream, *, name=None, mdot=1.):             # <<<<<<<<<<<<<<
 *         super().__init__(upstream, downstream, name=name)
 *         self.mass_flow_rate = mdot
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_18MassFlowController_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_18MassFlowController_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_upstream = 0;
  PyObject *__pyx_v_downstream = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_mdot = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_upstream,&__pyx_n_s_downstream,&__pyx_n_s_name,&__pyx_n_s_mdot,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_float_1_);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_upstream)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1310, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_downstream)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1310, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 1310, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1310, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 1310, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_upstream = values[0];
    __pyx_v_downstream = values[1];
    __pyx_v_name = values[2];
    __pyx_v_mdot = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1310, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.MassFlowController.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_18MassFlowController___init__(((struct __pyx_obj_7cantera_7reactor_MassFlowController *)__pyx_v_self), __pyx_v_upstream, __pyx_v_downstream, __pyx_v_name, __pyx_v_mdot);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_18MassFlowController___init__(struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self, PyObject *__pyx_v_upstream, PyObject *__pyx_v_downstream, PyObject *__pyx_v_name, PyObject *__pyx_v_mdot) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/reactor.pyx":1311
 * 
 *     def __init__(self, upstream, downstream, *, name=None, mdot=1.):
 *         super().__init__(upstream, downstream, name=name)             # <<<<<<<<<<<<<<
 *         self.mass_flow_rate = mdot
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7cantera_7reactor_MassFlowController);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7cantera_7reactor_MassFlowController);
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_7cantera_7reactor_MassFlowController));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_upstream);
  __Pyx_GIVEREF(__pyx_v_upstream);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_upstream);
  __Pyx_INCREF(__pyx_v_downstream);
  __Pyx_GIVEREF(__pyx_v_downstream);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_downstream);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(0, 1311, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/reactor.pyx":1312
 *     def __init__(self, upstream, downstream, *, name=None, mdot=1.):
 *         super().__init__(upstream, downstream, name=name)
 *         self.mass_flow_rate = mdot             # <<<<<<<<<<<<<<
 * 
 *     property mass_flow_coeff:
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mass_flow_rate, __pyx_v_mdot) < 0) __PYX_ERR(0, 1312, __pyx_L1_error)

  /* "cantera/reactor.pyx":1310
 *     flowdevice_type = "MassFlowController"
 * 
 *     def __init__(self, upstream, downstream, *, name=None, mdot=1.):             # <<<<<<<<<<<<<<
 *         super().__init__(upstream, downstream, name=name)
 *         self.mass_flow_rate = mdot
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.reactor.MassFlowController.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1323
 *         >>> mfc.mass_flow_coeff  # Get the flow rate value
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxMassFlowController*>self.dev).getMassFlowCoeff()
 *         def __set__(self, double value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_18MassFlowController_15mass_flow_coeff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_18MassFlowController_15mass_flow_coeff_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_18MassFlowController_15mass_flow_coeff___get__(((struct __pyx_obj_7cantera_7reactor_MassFlowController *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_18MassFlowController_15mass_flow_coeff___get__(struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1324
 *         """
 *         def __get__(self):
 *             return (<CxxMassFlowController*>self.dev).getMassFlowCoeff()             # <<<<<<<<<<<<<<
 *         def __set__(self, double value):
 *             (<CxxMassFlowController*>self.dev).setMassFlowCoeff(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::MassFlowController *)__pyx_v_self->__pyx_base.dev)->getMassFlowCoeff()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1323
 *         >>> mfc.mass_flow_coeff  # Get the flow rate value
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxMassFlowController*>self.dev).getMassFlowCoeff()
 *         def __set__(self, double value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.MassFlowController.mass_flow_coeff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1325
 *         def __get__(self):
 *             return (<CxxMassFlowController*>self.dev).getMassFlowCoeff()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxMassFlowController*>self.dev).setMassFlowCoeff(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_18MassFlowController_15mass_flow_coeff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7cantera_7reactor_18MassFlowController_15mass_flow_coeff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1325, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.MassFlowController.mass_flow_coeff.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_18MassFlowController_15mass_flow_coeff_2__set__(((struct __pyx_obj_7cantera_7reactor_MassFlowController *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_18MassFlowController_15mass_flow_coeff_2__set__(struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1326
 *             return (<CxxMassFlowController*>self.dev).getMassFlowCoeff()
 *         def __set__(self, double value):
 *             (<CxxMassFlowController*>self.dev).setMassFlowCoeff(value)             # <<<<<<<<<<<<<<
 * 
 *     property mass_flow_rate:
 */
  ((Cantera::MassFlowController *)__pyx_v_self->__pyx_base.dev)->setMassFlowCoeff(__pyx_v_value);

  /* "cantera/reactor.pyx":1325
 *         def __get__(self):
 *             return (<CxxMassFlowController*>self.dev).getMassFlowCoeff()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxMassFlowController*>self.dev).setMassFlowCoeff(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1340
 *         >>> mfc.mass_flow_rate = lambda t: 2.5 * exp(-10 * (t - 0.5)**2)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.dev.massFlowRate()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_18MassFlowController_14mass_flow_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_18MassFlowController_14mass_flow_rate_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_18MassFlowController_14mass_flow_rate___get__(((struct __pyx_obj_7cantera_7reactor_MassFlowController *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_18MassFlowController_14mass_flow_rate___get__(struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1341
 *         """
 *         def __get__(self):
 *             return self.dev.massFlowRate()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, m):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->__pyx_base.dev->massFlowRate();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1341, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1340
 *         >>> mfc.mass_flow_rate = lambda t: 2.5 * exp(-10 * (t - 0.5)**2)
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.dev.massFlowRate()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.MassFlowController.mass_flow_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1343
 *             return self.dev.massFlowRate()
 * 
 *         def __set__(self, m):             # <<<<<<<<<<<<<<
 *             if isinstance(m, _numbers.Real):
 *                 (<CxxMassFlowController*>self.dev).setMassFlowRate(m)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_18MassFlowController_14mass_flow_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_m); /*proto*/
static int __pyx_pw_7cantera_7reactor_18MassFlowController_14mass_flow_rate_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_m) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_18MassFlowController_14mass_flow_rate_2__set__(((struct __pyx_obj_7cantera_7reactor_MassFlowController *)__pyx_v_self), ((PyObject *)__pyx_v_m));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_18MassFlowController_14mass_flow_rate_2__set__(struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self, PyObject *__pyx_v_m) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1344
 * 
 *         def __set__(self, m):
 *             if isinstance(m, _numbers.Real):             # <<<<<<<<<<<<<<
 *                 (<CxxMassFlowController*>self.dev).setMassFlowRate(m)
 *             else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numbers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Real); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_m, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "cantera/reactor.pyx":1345
 *         def __set__(self, m):
 *             if isinstance(m, _numbers.Real):
 *                 (<CxxMassFlowController*>self.dev).setMassFlowRate(m)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.mass_flow_coeff = 1.
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_m); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1345, __pyx_L1_error)
    ((Cantera::MassFlowController *)__pyx_v_self->__pyx_base.dev)->setMassFlowRate(__pyx_t_4);

    /* "cantera/reactor.pyx":1344
 * 
 *         def __set__(self, m):
 *             if isinstance(m, _numbers.Real):             # <<<<<<<<<<<<<<
 *                 (<CxxMassFlowController*>self.dev).setMassFlowRate(m)
 *             else:
 */
    goto __pyx_L3;
  }

  /* "cantera/reactor.pyx":1347
 *                 (<CxxMassFlowController*>self.dev).setMassFlowRate(m)
 *             else:
 *                 self.mass_flow_coeff = 1.             # <<<<<<<<<<<<<<
 *                 self.time_function = m
 * 
 */
  /*else*/ {
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mass_flow_coeff, __pyx_float_1_) < 0) __PYX_ERR(0, 1347, __pyx_L1_error)

    /* "cantera/reactor.pyx":1348
 *             else:
 *                 self.mass_flow_coeff = 1.
 *                 self.time_function = m             # <<<<<<<<<<<<<<
 * 
 * 
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_time_function, __pyx_v_m) < 0) __PYX_ERR(0, 1348, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/reactor.pyx":1343
 *             return self.dev.massFlowRate()
 * 
 *         def __set__(self, m):             # <<<<<<<<<<<<<<
 *             if isinstance(m, _numbers.Real):
 *                 (<CxxMassFlowController*>self.dev).setMassFlowRate(m)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.MassFlowController.mass_flow_rate.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_18MassFlowController_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_18MassFlowController_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_18MassFlowController_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_18MassFlowController_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_18MassFlowController_2__reduce_cython__(((struct __pyx_obj_7cantera_7reactor_MassFlowController *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_18MassFlowController_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.MassFlowController.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_18MassFlowController_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_18MassFlowController_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_18MassFlowController_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_18MassFlowController_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.MassFlowController.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_18MassFlowController_4__setstate_cython__(((struct __pyx_obj_7cantera_7reactor_MassFlowController *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_18MassFlowController_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_MassFlowController *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.MassFlowController.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1384
 *     flowdevice_type = "Valve"
 * 
 *     def __init__(self, upstream, downstream, *, name=None, K=1.):             # <<<<<<<<<<<<<<
 *         super().__init__(upstream, downstream, name=name)
 *         if isinstance(K, _numbers.Real):
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_5Valve_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_5Valve_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_upstream = 0;
  PyObject *__pyx_v_downstream = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_K = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_upstream,&__pyx_n_s_downstream,&__pyx_n_s_name,&__pyx_n_s_K,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_float_1_);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_upstream)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1384, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_downstream)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1384, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 1384, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && likely(kw_args <= 2)) {
        Py_ssize_t index;
        for (index = 2; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1384, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 1384, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_upstream = values[0];
    __pyx_v_downstream = values[1];
    __pyx_v_name = values[2];
    __pyx_v_K = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1384, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Valve.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_5Valve___init__(((struct __pyx_obj_7cantera_7reactor_Valve *)__pyx_v_self), __pyx_v_upstream, __pyx_v_downstream, __pyx_v_name, __pyx_v_K);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_5Valve___init__(struct __pyx_obj_7cantera_7reactor_Valve *__pyx_v_self, PyObject *__pyx_v_upstream, PyObject *__pyx_v_downstream, PyObject *__pyx_v_name, PyObject *__pyx_v_K) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/reactor.pyx":1385
 * 
 *     def __init__(self, upstream, downstream, *, name=None, K=1.):
 *         super().__init__(upstream, downstream, name=name)             # <<<<<<<<<<<<<<
 *         if isinstance(K, _numbers.Real):
 *             self.valve_coeff = K
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7cantera_7reactor_Valve);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7cantera_7reactor_Valve);
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_ptype_7cantera_7reactor_Valve));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_upstream);
  __Pyx_GIVEREF(__pyx_v_upstream);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_upstream);
  __Pyx_INCREF(__pyx_v_downstream);
  __Pyx_GIVEREF(__pyx_v_downstream);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_downstream);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(0, 1385, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "cantera/reactor.pyx":1386
 *     def __init__(self, upstream, downstream, *, name=None, K=1.):
 *         super().__init__(upstream, downstream, name=name)
 *         if isinstance(K, _numbers.Real):             # <<<<<<<<<<<<<<
 *             self.valve_coeff = K
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_numbers); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Real); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_K, __pyx_t_3); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 1386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "cantera/reactor.pyx":1387
 *         super().__init__(upstream, downstream, name=name)
 *         if isinstance(K, _numbers.Real):
 *             self.valve_coeff = K             # <<<<<<<<<<<<<<
 *         else:
 *             self.valve_coeff = 1.
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_valve_coeff, __pyx_v_K) < 0) __PYX_ERR(0, 1387, __pyx_L1_error)

    /* "cantera/reactor.pyx":1386
 *     def __init__(self, upstream, downstream, *, name=None, K=1.):
 *         super().__init__(upstream, downstream, name=name)
 *         if isinstance(K, _numbers.Real):             # <<<<<<<<<<<<<<
 *             self.valve_coeff = K
 *         else:
 */
    goto __pyx_L3;
  }

  /* "cantera/reactor.pyx":1389
 *             self.valve_coeff = K
 *         else:
 *             self.valve_coeff = 1.             # <<<<<<<<<<<<<<
 *             self.pressure_function = K
 * 
 */
  /*else*/ {
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_valve_coeff, __pyx_float_1_) < 0) __PYX_ERR(0, 1389, __pyx_L1_error)

    /* "cantera/reactor.pyx":1390
 *         else:
 *             self.valve_coeff = 1.
 *             self.pressure_function = K             # <<<<<<<<<<<<<<
 * 
 *     property valve_coeff:
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pressure_function, __pyx_v_K) < 0) __PYX_ERR(0, 1390, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "cantera/reactor.pyx":1384
 *     flowdevice_type = "Valve"
 * 
 *     def __init__(self, upstream, downstream, *, name=None, K=1.):             # <<<<<<<<<<<<<<
 *         super().__init__(upstream, downstream, name=name)
 *         if isinstance(K, _numbers.Real):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.reactor.Valve.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1400
 *         >>> v.valve_coeff  # Get the value of K
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxValve*>self.dev).getValveCoeff()
 *         def __set__(self, double value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_5Valve_11valve_coeff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_5Valve_11valve_coeff_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_5Valve_11valve_coeff___get__(((struct __pyx_obj_7cantera_7reactor_Valve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_5Valve_11valve_coeff___get__(struct __pyx_obj_7cantera_7reactor_Valve *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1401
 *         """
 *         def __get__(self):
 *             return (<CxxValve*>self.dev).getValveCoeff()             # <<<<<<<<<<<<<<
 *         def __set__(self, double value):
 *             (<CxxValve*>self.dev).setValveCoeff(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::Valve *)__pyx_v_self->__pyx_base.dev)->getValveCoeff()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1400
 *         >>> v.valve_coeff  # Get the value of K
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxValve*>self.dev).getValveCoeff()
 *         def __set__(self, double value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.Valve.valve_coeff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1402
 *         def __get__(self):
 *             return (<CxxValve*>self.dev).getValveCoeff()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxValve*>self.dev).setValveCoeff(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_5Valve_11valve_coeff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7cantera_7reactor_5Valve_11valve_coeff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1402, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Valve.valve_coeff.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_5Valve_11valve_coeff_2__set__(((struct __pyx_obj_7cantera_7reactor_Valve *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_5Valve_11valve_coeff_2__set__(struct __pyx_obj_7cantera_7reactor_Valve *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1403
 *             return (<CxxValve*>self.dev).getValveCoeff()
 *         def __set__(self, double value):
 *             (<CxxValve*>self.dev).setValveCoeff(value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((Cantera::Valve *)__pyx_v_self->__pyx_base.dev)->setValveCoeff(__pyx_v_value);

  /* "cantera/reactor.pyx":1402
 *         def __get__(self):
 *             return (<CxxValve*>self.dev).getValveCoeff()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxValve*>self.dev).setValveCoeff(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_5Valve_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_5Valve_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_5Valve_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_5Valve_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_5Valve_2__reduce_cython__(((struct __pyx_obj_7cantera_7reactor_Valve *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_5Valve_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_Valve *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.Valve.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_5Valve_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_5Valve_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_5Valve_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_5Valve_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.Valve.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_5Valve_4__setstate_cython__(((struct __pyx_obj_7cantera_7reactor_Valve *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_5Valve_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_Valve *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.Valve.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1427
 *     flowdevice_type = "PressureController"
 * 
 *     def __init__(self, upstream, downstream, *,             # <<<<<<<<<<<<<<
 *             name=None, primary=None, K=1., **kwargs):
 *         if "master" in kwargs:
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_18PressureController_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_18PressureController_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_upstream = 0;
  PyObject *__pyx_v_downstream = 0;
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_primary = 0;
  PyObject *__pyx_v_K = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_upstream,&__pyx_n_s_downstream,&__pyx_n_s_name,&__pyx_n_s_primary,&__pyx_n_s_K,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "cantera/reactor.pyx":1428
 * 
 *     def __init__(self, upstream, downstream, *,
 *             name=None, primary=None, K=1., **kwargs):             # <<<<<<<<<<<<<<
 *         if "master" in kwargs:
 *             warnings.warn(
 */
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)__pyx_float_1_);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_upstream)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1427, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_downstream)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1427, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 1427, __pyx_L3_error)
        }
      }
      if (kw_args > 0 && (kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 2; index < 5 && kw_args > 0; index++) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1427, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 1427, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
      values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
    }
    __pyx_v_upstream = values[0];
    __pyx_v_downstream = values[1];
    __pyx_v_name = values[2];
    __pyx_v_primary = values[3];
    __pyx_v_K = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1427, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("cantera.reactor.PressureController.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_18PressureController___init__(((struct __pyx_obj_7cantera_7reactor_PressureController *)__pyx_v_self), __pyx_v_upstream, __pyx_v_downstream, __pyx_v_name, __pyx_v_primary, __pyx_v_K, __pyx_v_kwargs);

  /* "cantera/reactor.pyx":1427
 *     flowdevice_type = "PressureController"
 * 
 *     def __init__(self, upstream, downstream, *,             # <<<<<<<<<<<<<<
 *             name=None, primary=None, K=1., **kwargs):
 *         if "master" in kwargs:
 */

  /* function exit code */
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_18PressureController___init__(struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self, PyObject *__pyx_v_upstream, PyObject *__pyx_v_downstream, PyObject *__pyx_v_name, PyObject *__pyx_v_primary, PyObject *__pyx_v_K, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_primary);

  /* "cantera/reactor.pyx":1429
 *     def __init__(self, upstream, downstream, *,
 *             name=None, primary=None, K=1., **kwargs):
 *         if "master" in kwargs:             # <<<<<<<<<<<<<<
 *             warnings.warn(
 *                 "PressureController: The 'master' keyword argument is deprecated; "
 */
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_n_u_master, __pyx_v_kwargs, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1429, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1430
 *             name=None, primary=None, K=1., **kwargs):
 *         if "master" in kwargs:
 *             warnings.warn(             # <<<<<<<<<<<<<<
 *                 "PressureController: The 'master' keyword argument is deprecated; "
 *                 "use 'primary' instead.", DeprecationWarning)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_warnings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_warn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cantera/reactor.pyx":1432
 *             warnings.warn(
 *                 "PressureController: The 'master' keyword argument is deprecated; "
 *                 "use 'primary' instead.", DeprecationWarning)             # <<<<<<<<<<<<<<
 *             primary = kwargs["master"]
 *         super().__init__(upstream, downstream, name=name)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cantera/reactor.pyx":1433
 *                 "PressureController: The 'master' keyword argument is deprecated; "
 *                 "use 'primary' instead.", DeprecationWarning)
 *             primary = kwargs["master"]             # <<<<<<<<<<<<<<
 *         super().__init__(upstream, downstream, name=name)
 *         if primary is not None:
 */
    __pyx_t_2 = __Pyx_PyDict_GetItem(__pyx_v_kwargs, __pyx_n_u_master); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_primary, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "cantera/reactor.pyx":1429
 *     def __init__(self, upstream, downstream, *,
 *             name=None, primary=None, K=1., **kwargs):
 *         if "master" in kwargs:             # <<<<<<<<<<<<<<
 *             warnings.warn(
 *                 "PressureController: The 'master' keyword argument is deprecated; "
 */
  }

  /* "cantera/reactor.pyx":1434
 *                 "use 'primary' instead.", DeprecationWarning)
 *             primary = kwargs["master"]
 *         super().__init__(upstream, downstream, name=name)             # <<<<<<<<<<<<<<
 *         if primary is not None:
 *             self.primary = primary
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_7cantera_7reactor_PressureController);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_7cantera_7reactor_PressureController);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_7cantera_7reactor_PressureController));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_upstream);
  __Pyx_GIVEREF(__pyx_v_upstream);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_upstream);
  __Pyx_INCREF(__pyx_v_downstream);
  __Pyx_GIVEREF(__pyx_v_downstream);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_downstream);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_name, __pyx_v_name) < 0) __PYX_ERR(0, 1434, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "cantera/reactor.pyx":1435
 *             primary = kwargs["master"]
 *         super().__init__(upstream, downstream, name=name)
 *         if primary is not None:             # <<<<<<<<<<<<<<
 *             self.primary = primary
 *         if isinstance(K, _numbers.Real):
 */
  __pyx_t_1 = (__pyx_v_primary != Py_None);
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1436
 *         super().__init__(upstream, downstream, name=name)
 *         if primary is not None:
 *             self.primary = primary             # <<<<<<<<<<<<<<
 *         if isinstance(K, _numbers.Real):
 *             self.pressure_coeff = K
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_primary, __pyx_v_primary) < 0) __PYX_ERR(0, 1436, __pyx_L1_error)

    /* "cantera/reactor.pyx":1435
 *             primary = kwargs["master"]
 *         super().__init__(upstream, downstream, name=name)
 *         if primary is not None:             # <<<<<<<<<<<<<<
 *             self.primary = primary
 *         if isinstance(K, _numbers.Real):
 */
  }

  /* "cantera/reactor.pyx":1437
 *         if primary is not None:
 *             self.primary = primary
 *         if isinstance(K, _numbers.Real):             # <<<<<<<<<<<<<<
 *             self.pressure_coeff = K
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_numbers); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Real); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_K, __pyx_t_4); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1438
 *             self.primary = primary
 *         if isinstance(K, _numbers.Real):
 *             self.pressure_coeff = K             # <<<<<<<<<<<<<<
 *         else:
 *             self.pressure_coeff = 1.
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pressure_coeff, __pyx_v_K) < 0) __PYX_ERR(0, 1438, __pyx_L1_error)

    /* "cantera/reactor.pyx":1437
 *         if primary is not None:
 *             self.primary = primary
 *         if isinstance(K, _numbers.Real):             # <<<<<<<<<<<<<<
 *             self.pressure_coeff = K
 *         else:
 */
    goto __pyx_L5;
  }

  /* "cantera/reactor.pyx":1440
 *             self.pressure_coeff = K
 *         else:
 *             self.pressure_coeff = 1.             # <<<<<<<<<<<<<<
 *             self.pressure_function = K
 * 
 */
  /*else*/ {
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pressure_coeff, __pyx_float_1_) < 0) __PYX_ERR(0, 1440, __pyx_L1_error)

    /* "cantera/reactor.pyx":1441
 *         else:
 *             self.pressure_coeff = 1.
 *             self.pressure_function = K             # <<<<<<<<<<<<<<
 * 
 *     property pressure_coeff:
 */
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pressure_function, __pyx_v_K) < 0) __PYX_ERR(0, 1441, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "cantera/reactor.pyx":1427
 *     flowdevice_type = "PressureController"
 * 
 *     def __init__(self, upstream, downstream, *,             # <<<<<<<<<<<<<<
 *             name=None, primary=None, K=1., **kwargs):
 *         if "master" in kwargs:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("cantera.reactor.PressureController.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_primary);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1448
 *         pressure drop and the mass flow rate.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxPressureController*>self.dev).getPressureCoeff()
 *         def __set__(self, double value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_18PressureController_14pressure_coeff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_18PressureController_14pressure_coeff_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_18PressureController_14pressure_coeff___get__(((struct __pyx_obj_7cantera_7reactor_PressureController *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_18PressureController_14pressure_coeff___get__(struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1449
 *         """
 *         def __get__(self):
 *             return (<CxxPressureController*>self.dev).getPressureCoeff()             # <<<<<<<<<<<<<<
 *         def __set__(self, double value):
 *             (<CxxPressureController*>self.dev).setPressureCoeff(value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((Cantera::PressureController *)__pyx_v_self->__pyx_base.dev)->getPressureCoeff()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1448
 *         pressure drop and the mass flow rate.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<CxxPressureController*>self.dev).getPressureCoeff()
 *         def __set__(self, double value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.PressureController.pressure_coeff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1450
 *         def __get__(self):
 *             return (<CxxPressureController*>self.dev).getPressureCoeff()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxPressureController*>self.dev).setPressureCoeff(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_18PressureController_14pressure_coeff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7cantera_7reactor_18PressureController_14pressure_coeff_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1450, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.PressureController.pressure_coeff.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_18PressureController_14pressure_coeff_2__set__(((struct __pyx_obj_7cantera_7reactor_PressureController *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_18PressureController_14pressure_coeff_2__set__(struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1451
 *             return (<CxxPressureController*>self.dev).getPressureCoeff()
 *         def __set__(self, double value):
 *             (<CxxPressureController*>self.dev).setPressureCoeff(value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  ((Cantera::PressureController *)__pyx_v_self->__pyx_base.dev)->setPressureCoeff(__pyx_v_value);

  /* "cantera/reactor.pyx":1450
 *         def __get__(self):
 *             return (<CxxPressureController*>self.dev).getPressureCoeff()
 *         def __set__(self, double value):             # <<<<<<<<<<<<<<
 *             (<CxxPressureController*>self.dev).setPressureCoeff(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1453
 *             (<CxxPressureController*>self.dev).setPressureCoeff(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def primary(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_18PressureController_7primary_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_18PressureController_7primary_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_18PressureController_7primary___get__(((struct __pyx_obj_7cantera_7reactor_PressureController *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_18PressureController_7primary___get__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1460
 *         .. versionadded:: 3.0
 *         """
 *         raise NotImplementedError("PressureController.primary")             # <<<<<<<<<<<<<<
 * 
 *     @primary.setter
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1460, __pyx_L1_error)

  /* "cantera/reactor.pyx":1453
 *             (<CxxPressureController*>self.dev).setPressureCoeff(value)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def primary(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.PressureController.primary.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1462
 *         raise NotImplementedError("PressureController.primary")
 * 
 *     @primary.setter             # <<<<<<<<<<<<<<
 *     def primary(self, FlowDevice d):
 *         (<CxxPressureController*>self.dev).setPrimary(d.dev)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_18PressureController_7primary_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_d); /*proto*/
static int __pyx_pw_7cantera_7reactor_18PressureController_7primary_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_d) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d), __pyx_ptype_7cantera_7reactor_FlowDevice, 1, "d", 0))) __PYX_ERR(0, 1463, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_18PressureController_7primary_2__set__(((struct __pyx_obj_7cantera_7reactor_PressureController *)__pyx_v_self), ((struct __pyx_obj_7cantera_7reactor_FlowDevice *)__pyx_v_d));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_18PressureController_7primary_2__set__(struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_d) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1464
 *     @primary.setter
 *     def primary(self, FlowDevice d):
 *         (<CxxPressureController*>self.dev).setPrimary(d.dev)             # <<<<<<<<<<<<<<
 * 
 *     def set_master(self, FlowDevice d):
 */
  ((Cantera::PressureController *)__pyx_v_self->__pyx_base.dev)->setPrimary(__pyx_v_d->dev);

  /* "cantera/reactor.pyx":1462
 *         raise NotImplementedError("PressureController.primary")
 * 
 *     @primary.setter             # <<<<<<<<<<<<<<
 *     def primary(self, FlowDevice d):
 *         (<CxxPressureController*>self.dev).setPrimary(d.dev)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1466
 *         (<CxxPressureController*>self.dev).setPrimary(d.dev)
 * 
 *     def set_master(self, FlowDevice d):             # <<<<<<<<<<<<<<
 *         """
 *         Set the "master" `FlowDevice` used to compute this device's mass flow
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_18PressureController_3set_master(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_18PressureController_2set_master, "\n        Set the \"master\" `FlowDevice` used to compute this device's mass flow\n        rate.\n\n        .. deprecated:: 3.0\n\n            To be removed after Cantera 3.0; replaced by property ``primary``.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_18PressureController_3set_master = {"set_master", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_18PressureController_3set_master, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_18PressureController_2set_master};
static PyObject *__pyx_pw_7cantera_7reactor_18PressureController_3set_master(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_d = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_master (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_d,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_d)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1466, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_master") < 0)) __PYX_ERR(0, 1466, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_d = ((struct __pyx_obj_7cantera_7reactor_FlowDevice *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_master", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1466, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.PressureController.set_master", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_d), __pyx_ptype_7cantera_7reactor_FlowDevice, 1, "d", 0))) __PYX_ERR(0, 1466, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_18PressureController_2set_master(((struct __pyx_obj_7cantera_7reactor_PressureController *)__pyx_v_self), __pyx_v_d);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_18PressureController_2set_master(struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_FlowDevice *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_master", 0);

  /* "cantera/reactor.pyx":1475
 *             To be removed after Cantera 3.0; replaced by property ``primary``.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "PressureController.set_master: To be removed after Cantera 3.0; "
 *             "replaced by 'primary'.", DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1477
 *         warnings.warn(
 *             "PressureController.set_master: To be removed after Cantera 3.0; "
 *             "replaced by 'primary'.", DeprecationWarning)             # <<<<<<<<<<<<<<
 *         self.primary = d
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1478
 *             "PressureController.set_master: To be removed after Cantera 3.0; "
 *             "replaced by 'primary'.", DeprecationWarning)
 *         self.primary = d             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_primary, ((PyObject *)__pyx_v_d)) < 0) __PYX_ERR(0, 1478, __pyx_L1_error)

  /* "cantera/reactor.pyx":1466
 *         (<CxxPressureController*>self.dev).setPrimary(d.dev)
 * 
 *     def set_master(self, FlowDevice d):             # <<<<<<<<<<<<<<
 *         """
 *         Set the "master" `FlowDevice` used to compute this device's mass flow
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.PressureController.set_master", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_18PressureController_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_18PressureController_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_18PressureController_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_18PressureController_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_18PressureController_4__reduce_cython__(((struct __pyx_obj_7cantera_7reactor_PressureController *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_18PressureController_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.PressureController.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_18PressureController_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_18PressureController_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_18PressureController_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_18PressureController_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.PressureController.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_18PressureController_6__setstate_cython__(((struct __pyx_obj_7cantera_7reactor_PressureController *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_18PressureController_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_PressureController *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.PressureController.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1495
 *     >>> reactor_network.advance(time)
 *     """
 *     def __init__(self, reactors=()):             # <<<<<<<<<<<<<<
 *         self._reactors = []  # prevents premature garbage collection
 *         for R in reactors:
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_reactors = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_reactors,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_empty_tuple);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_reactors);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1495, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 1495, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_reactors = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1495, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet___init__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), __pyx_v_reactors);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet___init__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_reactors) {
  PyObject *__pyx_v_R = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cantera/reactor.pyx":1496
 *     """
 *     def __init__(self, reactors=()):
 *         self._reactors = []  # prevents premature garbage collection             # <<<<<<<<<<<<<<
 *         for R in reactors:
 *             self.add_reactor(R)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_reactors);
  __Pyx_DECREF(__pyx_v_self->_reactors);
  __pyx_v_self->_reactors = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1497
 *     def __init__(self, reactors=()):
 *         self._reactors = []  # prevents premature garbage collection
 *         for R in reactors:             # <<<<<<<<<<<<<<
 *             self.add_reactor(R)
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_reactors)) || PyTuple_CheckExact(__pyx_v_reactors)) {
    __pyx_t_1 = __pyx_v_reactors; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_reactors); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1497, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1497, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1497, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1497, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1497, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1497, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_R, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "cantera/reactor.pyx":1498
 *         self._reactors = []  # prevents premature garbage collection
 *         for R in reactors:
 *             self.add_reactor(R)             # <<<<<<<<<<<<<<
 * 
 *     def add_reactor(self, Reactor r):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_reactor); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_R};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cantera/reactor.pyx":1497
 *     def __init__(self, reactors=()):
 *         self._reactors = []  # prevents premature garbage collection
 *         for R in reactors:             # <<<<<<<<<<<<<<
 *             self.add_reactor(R)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1495
 *     >>> reactor_network.advance(time)
 *     """
 *     def __init__(self, reactors=()):             # <<<<<<<<<<<<<<
 *         self._reactors = []  # prevents premature garbage collection
 *         for R in reactors:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_R);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1500
 *             self.add_reactor(R)
 * 
 *     def add_reactor(self, Reactor r):             # <<<<<<<<<<<<<<
 *         """Add a reactor to the network."""
 *         self._reactors.append(r)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_3add_reactor(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_2add_reactor, "Add a reactor to the network.");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_3add_reactor = {"add_reactor", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_3add_reactor, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_2add_reactor};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_3add_reactor(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_r = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_reactor (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_r)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1500, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_reactor") < 0)) __PYX_ERR(0, 1500, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_r = ((struct __pyx_obj_7cantera_7reactor_Reactor *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_reactor", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1500, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.add_reactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_7cantera_7reactor_Reactor, 1, "r", 0))) __PYX_ERR(0, 1500, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_2add_reactor(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), __pyx_v_r);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_2add_reactor(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, struct __pyx_obj_7cantera_7reactor_Reactor *__pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_reactor", 0);

  /* "cantera/reactor.pyx":1502
 *     def add_reactor(self, Reactor r):
 *         """Add a reactor to the network."""
 *         self._reactors.append(r)             # <<<<<<<<<<<<<<
 *         self.net.addReactor(deref(r.reactor))
 * 
 */
  if (unlikely(__pyx_v_self->_reactors == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 1502, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_Append(__pyx_v_self->_reactors, ((PyObject *)__pyx_v_r)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1502, __pyx_L1_error)

  /* "cantera/reactor.pyx":1503
 *         """Add a reactor to the network."""
 *         self._reactors.append(r)
 *         self.net.addReactor(deref(r.reactor))             # <<<<<<<<<<<<<<
 * 
 *     def advance(self, double t, pybool apply_limit=True):
 */
  try {
    __pyx_v_self->net.addReactor((*__pyx_v_r->reactor));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1503, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1500
 *             self.add_reactor(R)
 * 
 *     def add_reactor(self, Reactor r):             # <<<<<<<<<<<<<<
 *         """Add a reactor to the network."""
 *         self._reactors.append(r)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.add_reactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1505
 *         self.net.addReactor(deref(r.reactor))
 * 
 *     def advance(self, double t, pybool apply_limit=True):             # <<<<<<<<<<<<<<
 *         """
 *         Advance the state of the reactor network from the current time/distance towards
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_5advance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_4advance, "\n        Advance the state of the reactor network from the current time/distance towards\n        the specified value ``t`` of the independent variable, which depends on the type\n        of reactors included in the network.\n\n        The integrator will take as many steps as necessary to reach ``t``. If\n        ``apply_limit`` is true and an advance limit is specified, the reactor state at\n        the end of the step is estimated prior to advancing. If the difference exceed\n        limits, the end value is reduced by half until the projected end state remains\n        within specified limits. Returns the time/distance reached at the end of\n        integration.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_5advance = {"advance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_5advance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_4advance};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_5advance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_t;
  PyBoolObject *__pyx_v_apply_limit = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("advance (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,&__pyx_n_s_apply_limit,0};
    PyObject* values[2] = {0,0};
    values[1] = (PyObject *)((PyBoolObject *)Py_True);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1505, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_apply_limit);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1505, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "advance") < 0)) __PYX_ERR(0, 1505, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1505, __pyx_L3_error)
    __pyx_v_apply_limit = ((PyBoolObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("advance", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1505, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.advance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_apply_limit), __pyx_ptype_7cpython_4bool_bool, 1, "apply_limit", 0))) __PYX_ERR(0, 1505, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_4advance(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), __pyx_v_t, __pyx_v_apply_limit);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_4advance(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, double __pyx_v_t, PyBoolObject *__pyx_v_apply_limit) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("advance", 0);

  /* "cantera/reactor.pyx":1518
 *         integration.
 *         """
 *         return self.net.advance(t, apply_limit)             # <<<<<<<<<<<<<<
 * 
 *     def step(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_apply_limit)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1518, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->net.advance(__pyx_v_t, __pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1518, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1505
 *         self.net.addReactor(deref(r.reactor))
 * 
 *     def advance(self, double t, pybool apply_limit=True):             # <<<<<<<<<<<<<<
 *         """
 *         Advance the state of the reactor network from the current time/distance towards
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.advance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1520
 *         return self.net.advance(t, apply_limit)
 * 
 *     def step(self):             # <<<<<<<<<<<<<<
 *         """
 *         Take a single internal step. The time/distance after taking the step is
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_7step(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_6step, "\n        Take a single internal step. The time/distance after taking the step is\n        returned.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_7step = {"step", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_7step, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_6step};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_7step(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("step", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "step", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_6step(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_6step(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("step", 0);

  /* "cantera/reactor.pyx":1525
 *         returned.
 *         """
 *         return self.net.step()             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->net.step();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1525, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1520
 *         return self.net.advance(t, apply_limit)
 * 
 *     def step(self):             # <<<<<<<<<<<<<<
 *         """
 *         Take a single internal step. The time/distance after taking the step is
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.step", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1527
 *         return self.net.step()
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Force initialization of the integrator after initial setup.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_9initialize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_8initialize, "\n        Force initialization of the integrator after initial setup.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_9initialize = {"initialize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_9initialize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_8initialize};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_9initialize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("initialize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "initialize", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_8initialize(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_8initialize(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "cantera/reactor.pyx":1531
 *         Force initialization of the integrator after initial setup.
 *         """
 *         self.net.initialize()             # <<<<<<<<<<<<<<
 * 
 *     def reinitialize(self):
 */
  try {
    __pyx_v_self->net.initialize();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1531, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1527
 *         return self.net.step()
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Force initialization of the integrator after initial setup.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1533
 *         self.net.initialize()
 * 
 *     def reinitialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Reinitialize the integrator after making changing to the state of the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_11reinitialize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_10reinitialize, "\n        Reinitialize the integrator after making changing to the state of the\n        system. Changes to Reactor contents will automatically trigger\n        reinitialization.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_11reinitialize = {"reinitialize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_11reinitialize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_10reinitialize};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_11reinitialize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reinitialize (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("reinitialize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "reinitialize", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_10reinitialize(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_10reinitialize(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reinitialize", 0);

  /* "cantera/reactor.pyx":1539
 *         reinitialization.
 *         """
 *         self.net.reinitialize()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_v_self->net.reinitialize();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1539, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1533
 *         self.net.initialize()
 * 
 *     def reinitialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Reinitialize the integrator after making changing to the state of the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.reinitialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1541
 *         self.net.reinitialize()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def time(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_4time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_4time_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_4time___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_4time___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1546
 *         The current time [s], for reactor networks that are solved in the time domain.
 *         """
 *         return self.net.time()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->net.time();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1546, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1541
 *         self.net.reinitialize()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def time(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1548
 *         return self.net.time()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def distance(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_8distance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_8distance_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_8distance___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_8distance___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1554
 *         that are solved as a function of space.
 *         """
 *         return self.net.distance()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->net.distance();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1554, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1548
 *         return self.net.time()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def distance(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.distance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1556
 *         return self.net.distance()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def initial_time(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_12initial_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_12initial_time_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_12initial_time___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_12initial_time___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1564
 *         .. versionadded:: 3.0
 *         """
 *         return self.net.getInitialTime()             # <<<<<<<<<<<<<<
 * 
 *     @initial_time.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->net.getInitialTime()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1556
 *         return self.net.distance()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def initial_time(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.initial_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1566
 *         return self.net.getInitialTime()
 * 
 *     @initial_time.setter             # <<<<<<<<<<<<<<
 *     def initial_time(self, double t):
 *         self.net.setInitialTime(t)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_12initial_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_t); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_12initial_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_t) {
  double __pyx_v_t;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_t); {
    __pyx_v_t = __pyx_PyFloat_AsDouble(__pyx_arg_t); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1567, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.initial_time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_12initial_time_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((double)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_12initial_time_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, double __pyx_v_t) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1568
 *     @initial_time.setter
 *     def initial_time(self, double t):
 *         self.net.setInitialTime(t)             # <<<<<<<<<<<<<<
 * 
 *     def set_initial_time(self, double t):
 */
  __pyx_v_self->net.setInitialTime(__pyx_v_t);

  /* "cantera/reactor.pyx":1566
 *         return self.net.getInitialTime()
 * 
 *     @initial_time.setter             # <<<<<<<<<<<<<<
 *     def initial_time(self, double t):
 *         self.net.setInitialTime(t)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1570
 *         self.net.setInitialTime(t)
 * 
 *     def set_initial_time(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         Set the initial time. Restarts integration from this time using the
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_13set_initial_time(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_12set_initial_time, "\n        Set the initial time. Restarts integration from this time using the\n        current state as the initial condition. Default: 0.0 s.\n\n        .. deprecated:: 3.0\n            To be removed after Cantera 3.0. Use property ``initial_time`` instead.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_13set_initial_time = {"set_initial_time", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_13set_initial_time, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_12set_initial_time};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_13set_initial_time(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_t;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_initial_time (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_t)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "set_initial_time") < 0)) __PYX_ERR(0, 1570, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_initial_time", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1570, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.set_initial_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_12set_initial_time(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_12set_initial_time(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_initial_time", 0);

  /* "cantera/reactor.pyx":1578
 *             To be removed after Cantera 3.0. Use property ``initial_time`` instead.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "ReactorNet.set_initial_time: To be removed after Cantera 3.0. "
 *             "Use property 'initial_time' instead.", DeprecationWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1580
 *         warnings.warn(
 *             "ReactorNet.set_initial_time: To be removed after Cantera 3.0. "
 *             "Use property 'initial_time' instead.", DeprecationWarning)             # <<<<<<<<<<<<<<
 *         self.initial_time = t
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1581
 *             "ReactorNet.set_initial_time: To be removed after Cantera 3.0. "
 *             "Use property 'initial_time' instead.", DeprecationWarning)
 *         self.initial_time = t             # <<<<<<<<<<<<<<
 * 
 *     property max_time_step:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_initial_time, __pyx_t_1) < 0) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1570
 *         self.net.setInitialTime(t)
 * 
 *     def set_initial_time(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         Set the initial time. Restarts integration from this time using the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.set_initial_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1589
 *         step maximum is used.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.maxTimeStep()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_13max_time_step_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_13max_time_step_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_13max_time_step___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_13max_time_step___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1590
 *         """
 *         def __get__(self):
 *             return self.net.maxTimeStep()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->net.maxTimeStep()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1589
 *         step maximum is used.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.maxTimeStep()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_time_step.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1592
 *             return self.net.maxTimeStep()
 * 
 *         def __set__(self, double t):             # <<<<<<<<<<<<<<
 *             self.net.setMaxTimeStep(t)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_13max_time_step_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_t); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_13max_time_step_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_t) {
  double __pyx_v_t;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_t); {
    __pyx_v_t = __pyx_PyFloat_AsDouble(__pyx_arg_t); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1592, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_time_step.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_13max_time_step_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((double)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_13max_time_step_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, double __pyx_v_t) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1593
 * 
 *         def __set__(self, double t):
 *             self.net.setMaxTimeStep(t)             # <<<<<<<<<<<<<<
 * 
 *     property max_err_test_fails:
 */
  try {
    __pyx_v_self->net.setMaxTimeStep(__pyx_v_t);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1593, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1592
 *             return self.net.maxTimeStep()
 * 
 *         def __set__(self, double t):             # <<<<<<<<<<<<<<
 *             self.net.setMaxTimeStep(t)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_time_step.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1600
 *         in a single step. The default is 10.
 *         """
 *         def __set__(self, n):             # <<<<<<<<<<<<<<
 *             self.net.setMaxErrTestFails(n)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_18max_err_test_fails_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_18max_err_test_fails_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_18max_err_test_fails___set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((PyObject *)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_18max_err_test_fails___set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_n) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1601
 *         """
 *         def __set__(self, n):
 *             self.net.setMaxErrTestFails(n)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1601, __pyx_L1_error)
  try {
    __pyx_v_self->net.setMaxErrTestFails(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1601, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1600
 *         in a single step. The default is 10.
 *         """
 *         def __set__(self, n):             # <<<<<<<<<<<<<<
 *             self.net.setMaxErrTestFails(n)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_err_test_fails.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1603
 *             self.net.setMaxErrTestFails(n)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def max_nonlinear_iterations(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<Cantera::Integrator> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1609
 *         SUNDIALS solver in one solve attempt. The default value is 4.
 *         """
 *         return self.net.integrator().maxNonlinIterations()             # <<<<<<<<<<<<<<
 * 
 *     @max_nonlinear_iterations.setter
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->net.integrator();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1609, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1->maxNonlinIterations()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1603
 *             self.net.setMaxErrTestFails(n)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def max_nonlinear_iterations(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_nonlinear_iterations.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1611
 *         return self.net.integrator().maxNonlinIterations()
 * 
 *     @max_nonlinear_iterations.setter             # <<<<<<<<<<<<<<
 *     def max_nonlinear_iterations(self, int n):
 *         self.net.integrator().setMaxNonlinIterations(n)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  int __pyx_v_n;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_As_int(__pyx_arg_n); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1612, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_nonlinear_iterations.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((int)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_n) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<Cantera::Integrator> __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1613
 *     @max_nonlinear_iterations.setter
 *     def max_nonlinear_iterations(self, int n):
 *         self.net.integrator().setMaxNonlinIterations(n)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_t_1 = __pyx_v_self->net.integrator();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1613, __pyx_L1_error)
  }
  try {
    __pyx_t_1->setMaxNonlinIterations(__pyx_v_n);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1613, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1611
 *         return self.net.integrator().maxNonlinIterations()
 * 
 *     @max_nonlinear_iterations.setter             # <<<<<<<<<<<<<<
 *     def max_nonlinear_iterations(self, int n):
 *         self.net.integrator().setMaxNonlinIterations(n)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_nonlinear_iterations.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1615
 *         self.net.integrator().setMaxNonlinIterations(n)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def max_nonlinear_convergence_failures(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<Cantera::Integrator> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1621
 *         one step of the SUNDIALS integrator. The default value is 10.
 *         """
 *         return self.net.integrator().maxNonlinConvFailures()             # <<<<<<<<<<<<<<
 * 
 *     @max_nonlinear_convergence_failures.setter
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->net.integrator();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1621, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1->maxNonlinConvFailures()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1615
 *         self.net.integrator().setMaxNonlinIterations(n)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def max_nonlinear_convergence_failures(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_nonlinear_convergence_failures.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1623
 *         return self.net.integrator().maxNonlinConvFailures()
 * 
 *     @max_nonlinear_convergence_failures.setter             # <<<<<<<<<<<<<<
 *     def max_nonlinear_convergence_failures(self, int n):
 *         self.net.integrator().setMaxNonlinConvFailures(n)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  int __pyx_v_n;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_As_int(__pyx_arg_n); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1624, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_nonlinear_convergence_failures.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((int)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_n) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<Cantera::Integrator> __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1625
 *     @max_nonlinear_convergence_failures.setter
 *     def max_nonlinear_convergence_failures(self, int n):
 *         self.net.integrator().setMaxNonlinConvFailures(n)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_t_1 = __pyx_v_self->net.integrator();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1625, __pyx_L1_error)
  }
  try {
    __pyx_t_1->setMaxNonlinConvFailures(__pyx_v_n);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1625, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1623
 *         return self.net.integrator().maxNonlinConvFailures()
 * 
 *     @max_nonlinear_convergence_failures.setter             # <<<<<<<<<<<<<<
 *     def max_nonlinear_convergence_failures(self, int n):
 *         self.net.integrator().setMaxNonlinConvFailures(n)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_nonlinear_convergence_failures.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1627
 *         self.net.integrator().setMaxNonlinConvFailures(n)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def include_algebraic_in_error_test(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<Cantera::Integrator> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1633
 *         Applicable only to DAE systems. The default is `True`.
 *         """
 *         return self.net.integrator().algebraicInErrorTest()             # <<<<<<<<<<<<<<
 * 
 *     @include_algebraic_in_error_test.setter
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->net.integrator();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1633, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1->algebraicInErrorTest()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1627
 *         self.net.integrator().setMaxNonlinConvFailures(n)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def include_algebraic_in_error_test(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.include_algebraic_in_error_test.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1635
 *         return self.net.integrator().algebraicInErrorTest()
 * 
 *     @include_algebraic_in_error_test.setter             # <<<<<<<<<<<<<<
 *     def include_algebraic_in_error_test(self, pybool yesno):
 *         self.net.integrator().includeAlgebraicInErrorTest(yesno)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_yesno); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_yesno) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_yesno), __pyx_ptype_7cpython_4bool_bool, 1, "yesno", 0))) __PYX_ERR(0, 1636, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((PyBoolObject *)__pyx_v_yesno));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyBoolObject *__pyx_v_yesno) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<Cantera::Integrator> __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1637
 *     @include_algebraic_in_error_test.setter
 *     def include_algebraic_in_error_test(self, pybool yesno):
 *         self.net.integrator().includeAlgebraicInErrorTest(yesno)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  try {
    __pyx_t_1 = __pyx_v_self->net.integrator();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1637, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_yesno)); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1637, __pyx_L1_error)
  try {
    __pyx_t_1->includeAlgebraicInErrorTest(__pyx_t_2);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1637, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1635
 *         return self.net.integrator().algebraicInErrorTest()
 * 
 *     @include_algebraic_in_error_test.setter             # <<<<<<<<<<<<<<
 *     def include_algebraic_in_error_test(self, pybool yesno):
 *         self.net.integrator().includeAlgebraicInErrorTest(yesno)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.include_algebraic_in_error_test.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1639
 *         self.net.integrator().includeAlgebraicInErrorTest(yesno)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def max_order(self):
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_9max_order_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_9max_order_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_9max_order___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_9max_order___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<Cantera::Integrator> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1645
 *         maximum is 5.
 *         """
 *         return self.net.integrator().maxOrder()             # <<<<<<<<<<<<<<
 * 
 *     @max_order.setter
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->net.integrator();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1645, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1->maxOrder()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1639
 *         self.net.integrator().includeAlgebraicInErrorTest(yesno)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def max_order(self):
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_order.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1647
 *         return self.net.integrator().maxOrder()
 * 
 *     @max_order.setter             # <<<<<<<<<<<<<<
 *     def max_order(self, int n):
 *         self.net.integrator().setMaxOrder(n)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_9max_order_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_9max_order_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  int __pyx_v_n;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_As_int(__pyx_arg_n); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1648, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_order.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_9max_order_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((int)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_9max_order_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_n) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<Cantera::Integrator> __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1649
 *     @max_order.setter
 *     def max_order(self, int n):
 *         self.net.integrator().setMaxOrder(n)             # <<<<<<<<<<<<<<
 * 
 *     property max_steps:
 */
  try {
    __pyx_t_1 = __pyx_v_self->net.integrator();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1649, __pyx_L1_error)
  }
  try {
    __pyx_t_1->setMaxOrder(__pyx_v_n);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1649, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1647
 *         return self.net.integrator().maxOrder()
 * 
 *     @max_order.setter             # <<<<<<<<<<<<<<
 *     def max_order(self, int n):
 *         self.net.integrator().setMaxOrder(n)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_order.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1656
 *         is allowed to take before reaching the next output point.
 *         """
 *         def __set__(self, nsteps):             # <<<<<<<<<<<<<<
 *             self.net.setMaxSteps(nsteps)
 *         def __get__(self):
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_9max_steps_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_nsteps); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_9max_steps_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_nsteps) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_9max_steps___set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((PyObject *)__pyx_v_nsteps));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_9max_steps___set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_nsteps) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1657
 *         """
 *         def __set__(self, nsteps):
 *             self.net.setMaxSteps(nsteps)             # <<<<<<<<<<<<<<
 *         def __get__(self):
 *             return self.net.maxSteps()
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_nsteps); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1657, __pyx_L1_error)
  try {
    __pyx_v_self->net.setMaxSteps(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1657, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1656
 *         is allowed to take before reaching the next output point.
 *         """
 *         def __set__(self, nsteps):             # <<<<<<<<<<<<<<
 *             self.net.setMaxSteps(nsteps)
 *         def __get__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_steps.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1658
 *         def __set__(self, nsteps):
 *             self.net.setMaxSteps(nsteps)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.maxSteps()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_9max_steps_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_9max_steps_3__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_9max_steps_2__get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_9max_steps_2__get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1659
 *             self.net.setMaxSteps(nsteps)
 *         def __get__(self):
 *             return self.net.maxSteps()             # <<<<<<<<<<<<<<
 * 
 *     property rtol:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->net.maxSteps()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1658
 *         def __set__(self, nsteps):
 *             self.net.setMaxSteps(nsteps)
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.maxSteps()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.max_steps.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1666
 *         equations.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.rtol()
 *         def __set__(self, tol):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_4rtol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_4rtol_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_4rtol___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_4rtol___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1667
 *         """
 *         def __get__(self):
 *             return self.net.rtol()             # <<<<<<<<<<<<<<
 *         def __set__(self, tol):
 *             self.net.setTolerances(tol, -1)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->net.rtol()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1666
 *         equations.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.rtol()
 *         def __set__(self, tol):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.rtol.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1668
 *         def __get__(self):
 *             return self.net.rtol()
 *         def __set__(self, tol):             # <<<<<<<<<<<<<<
 *             self.net.setTolerances(tol, -1)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_4rtol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tol); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_4rtol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tol) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_4rtol_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((PyObject *)__pyx_v_tol));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_4rtol_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1669
 *             return self.net.rtol()
 *         def __set__(self, tol):
 *             self.net.setTolerances(tol, -1)             # <<<<<<<<<<<<<<
 * 
 *     property atol:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_tol); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1669, __pyx_L1_error)
  __pyx_v_self->net.setTolerances(__pyx_t_1, -1.0);

  /* "cantera/reactor.pyx":1668
 *         def __get__(self):
 *             return self.net.rtol()
 *         def __set__(self, tol):             # <<<<<<<<<<<<<<
 *             self.net.setTolerances(tol, -1)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.rtol.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1676
 *         equations.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.atol()
 *         def __set__(self, tol):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_4atol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_4atol_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_4atol___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_4atol___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1677
 *         """
 *         def __get__(self):
 *             return self.net.atol()             # <<<<<<<<<<<<<<
 *         def __set__(self, tol):
 *             self.net.setTolerances(-1, tol)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->net.atol()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1676
 *         equations.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.atol()
 *         def __set__(self, tol):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.atol.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1678
 *         def __get__(self):
 *             return self.net.atol()
 *         def __set__(self, tol):             # <<<<<<<<<<<<<<
 *             self.net.setTolerances(-1, tol)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_4atol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tol); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_4atol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tol) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_4atol_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((PyObject *)__pyx_v_tol));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_4atol_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1679
 *             return self.net.atol()
 *         def __set__(self, tol):
 *             self.net.setTolerances(-1, tol)             # <<<<<<<<<<<<<<
 * 
 *     property rtol_sensitivity:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_tol); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1679, __pyx_L1_error)
  __pyx_v_self->net.setTolerances(-1.0, __pyx_t_1);

  /* "cantera/reactor.pyx":1678
 *         def __get__(self):
 *             return self.net.atol()
 *         def __set__(self, tol):             # <<<<<<<<<<<<<<
 *             self.net.setTolerances(-1, tol)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.atol.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1685
 *         The relative error tolerance for sensitivity analysis.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.rtolSensitivity()
 *         def __set__(self, tol):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_16rtol_sensitivity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_16rtol_sensitivity_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_16rtol_sensitivity___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_16rtol_sensitivity___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1686
 *         """
 *         def __get__(self):
 *             return self.net.rtolSensitivity()             # <<<<<<<<<<<<<<
 *         def __set__(self, tol):
 *             self.net.setSensitivityTolerances(tol, -1)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->net.rtolSensitivity()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1685
 *         The relative error tolerance for sensitivity analysis.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.rtolSensitivity()
 *         def __set__(self, tol):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.rtol_sensitivity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1687
 *         def __get__(self):
 *             return self.net.rtolSensitivity()
 *         def __set__(self, tol):             # <<<<<<<<<<<<<<
 *             self.net.setSensitivityTolerances(tol, -1)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_16rtol_sensitivity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tol); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_16rtol_sensitivity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tol) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_16rtol_sensitivity_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((PyObject *)__pyx_v_tol));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_16rtol_sensitivity_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1688
 *             return self.net.rtolSensitivity()
 *         def __set__(self, tol):
 *             self.net.setSensitivityTolerances(tol, -1)             # <<<<<<<<<<<<<<
 * 
 *     property atol_sensitivity:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_tol); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1688, __pyx_L1_error)
  __pyx_v_self->net.setSensitivityTolerances(__pyx_t_1, -1.0);

  /* "cantera/reactor.pyx":1687
 *         def __get__(self):
 *             return self.net.rtolSensitivity()
 *         def __set__(self, tol):             # <<<<<<<<<<<<<<
 *             self.net.setSensitivityTolerances(tol, -1)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.rtol_sensitivity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1694
 *         The absolute error tolerance for sensitivity analysis.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.atolSensitivity()
 *         def __set__(self, tol):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_16atol_sensitivity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_16atol_sensitivity_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_16atol_sensitivity___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_16atol_sensitivity___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1695
 *         """
 *         def __get__(self):
 *             return self.net.atolSensitivity()             # <<<<<<<<<<<<<<
 *         def __set__(self, tol):
 *             self.net.setSensitivityTolerances(-1, tol)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->net.atolSensitivity()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1694
 *         The absolute error tolerance for sensitivity analysis.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.atolSensitivity()
 *         def __set__(self, tol):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.atol_sensitivity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1696
 *         def __get__(self):
 *             return self.net.atolSensitivity()
 *         def __set__(self, tol):             # <<<<<<<<<<<<<<
 *             self.net.setSensitivityTolerances(-1, tol)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_16atol_sensitivity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tol); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_16atol_sensitivity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_tol) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_16atol_sensitivity_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((PyObject *)__pyx_v_tol));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_16atol_sensitivity_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_tol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1697
 *             return self.net.atolSensitivity()
 *         def __set__(self, tol):
 *             self.net.setSensitivityTolerances(-1, tol)             # <<<<<<<<<<<<<<
 * 
 *     property verbose:
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_tol); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1697, __pyx_L1_error)
  __pyx_v_self->net.setSensitivityTolerances(-1.0, __pyx_t_1);

  /* "cantera/reactor.pyx":1696
 *         def __get__(self):
 *             return self.net.atolSensitivity()
 *         def __set__(self, tol):             # <<<<<<<<<<<<<<
 *             self.net.setSensitivityTolerances(-1, tol)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.atol_sensitivity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1704
 *         integration. The default is `False`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pybool(self.net.verbose())
 *         def __set__(self, pybool v):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_7verbose_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_7verbose_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_7verbose___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_7verbose___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1705
 *         """
 *         def __get__(self):
 *             return pybool(self.net.verbose())             # <<<<<<<<<<<<<<
 *         def __set__(self, pybool v):
 *             self.net.setVerbose(v)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->net.verbose()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4bool_bool), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1704
 *         integration. The default is `False`.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pybool(self.net.verbose())
 *         def __set__(self, pybool v):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.verbose.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1706
 *         def __get__(self):
 *             return pybool(self.net.verbose())
 *         def __set__(self, pybool v):             # <<<<<<<<<<<<<<
 *             self.net.setVerbose(v)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_7verbose_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_7verbose_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_7cpython_4bool_bool, 1, "v", 0))) __PYX_ERR(0, 1706, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_7verbose_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((PyBoolObject *)__pyx_v_v));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_7verbose_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyBoolObject *__pyx_v_v) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1707
 *             return pybool(self.net.verbose())
 *         def __set__(self, pybool v):
 *             self.net.setVerbose(v)             # <<<<<<<<<<<<<<
 * 
 *     def global_component_index(self, name, int reactor):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_v)); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1707, __pyx_L1_error)
  __pyx_v_self->net.setVerbose(__pyx_t_1);

  /* "cantera/reactor.pyx":1706
 *         def __get__(self):
 *             return pybool(self.net.verbose())
 *         def __set__(self, pybool v):             # <<<<<<<<<<<<<<
 *             self.net.setVerbose(v)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.verbose.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1709
 *             self.net.setVerbose(v)
 * 
 *     def global_component_index(self, name, int reactor):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the index of a component named ``name`` of a reactor with index
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_15global_component_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_14global_component_index, "\n        Returns the index of a component named ``name`` of a reactor with index\n        ``reactor`` within the global state vector. That is, this determines the\n        absolute index of the component, where ``reactor`` is the index of the\n        reactor that holds the component. ``name`` is either a species name or the\n        name of a reactor state variable, for example, ``'int_energy'``, ``'temperature'``, etc.\n        depending on the reactor's equations.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_15global_component_index = {"global_component_index", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_15global_component_index, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_14global_component_index};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_15global_component_index(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_name = 0;
  int __pyx_v_reactor;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("global_component_index (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_reactor,0};
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1709, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_reactor)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1709, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("global_component_index", 1, 2, 2, 1); __PYX_ERR(0, 1709, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "global_component_index") < 0)) __PYX_ERR(0, 1709, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_reactor = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_reactor == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1709, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("global_component_index", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1709, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.global_component_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_14global_component_index(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), __pyx_v_name, __pyx_v_reactor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_14global_component_index(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_name, int __pyx_v_reactor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  size_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("global_component_index", 0);

  /* "cantera/reactor.pyx":1718
 *         depending on the reactor's equations.
 *         """
 *         return self.net.globalComponentIndex(stringify(name), reactor)             # <<<<<<<<<<<<<<
 * 
 *     def component_name(self, int i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1718, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->net.globalComponentIndex(__pyx_t_1, __pyx_v_reactor);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1718, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1709
 *             self.net.setVerbose(v)
 * 
 *     def global_component_index(self, name, int reactor):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the index of a component named ``name`` of a reactor with index
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.global_component_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1720
 *         return self.net.globalComponentIndex(stringify(name), reactor)
 * 
 *     def component_name(self, int i):             # <<<<<<<<<<<<<<
 *         """
 *         Return the name of the i-th component of the global state vector. The
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_17component_name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_16component_name, "\n        Return the name of the i-th component of the global state vector. The\n        name returned includes both the name of the reactor and the specific\n        component, for example `'reactor1: CH4'`.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_17component_name = {"component_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_17component_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_16component_name};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_17component_name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_i;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("component_name (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_i)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1720, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "component_name") < 0)) __PYX_ERR(0, 1720, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1720, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("component_name", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1720, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.component_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_16component_name(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), __pyx_v_i);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_16component_name(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("component_name", 0);

  /* "cantera/reactor.pyx":1726
 *         component, for example `'reactor1: CH4'`.
 *         """
 *         return pystr(self.net.componentName(i))             # <<<<<<<<<<<<<<
 * 
 *     def sensitivity(self, component, int p, int r=0):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->net.componentName(__pyx_v_i);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1726, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1720
 *         return self.net.globalComponentIndex(stringify(name), reactor)
 * 
 *     def component_name(self, int i):             # <<<<<<<<<<<<<<
 *         """
 *         Return the name of the i-th component of the global state vector. The
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.component_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1728
 *         return pystr(self.net.componentName(i))
 * 
 *     def sensitivity(self, component, int p, int r=0):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the sensitivity of the solution variable ``component`` in
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_19sensitivity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_18sensitivity, "\n        Returns the sensitivity of the solution variable ``component`` in\n        reactor ``r`` with respect to the parameter ``p``. ``component`` can be a\n        string or an integer. See `component_index` and `sensitivities` to\n        determine the integer index for the variables and the definition of the\n        resulting sensitivity coefficient. If it is not given, ``r`` defaults to\n        the first reactor. Returns an empty array until the first integration step is\n        taken.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_19sensitivity = {"sensitivity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_19sensitivity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_18sensitivity};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_19sensitivity(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_component = 0;
  int __pyx_v_p;
  int __pyx_v_r;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sensitivity (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_component,&__pyx_n_s_p,&__pyx_n_s_r,0};
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_component)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1728, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1728, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("sensitivity", 0, 2, 3, 1); __PYX_ERR(0, 1728, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_r);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1728, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "sensitivity") < 0)) __PYX_ERR(0, 1728, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_component = values[0];
    __pyx_v_p = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_p == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1728, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_r = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_r == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1728, __pyx_L3_error)
    } else {
      __pyx_v_r = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sensitivity", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 1728, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.sensitivity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_18sensitivity(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), __pyx_v_component, __pyx_v_p, __pyx_v_r);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_18sensitivity(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_component, int __pyx_v_p, int __pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sensitivity", 0);

  /* "cantera/reactor.pyx":1738
 *         taken.
 *         """
 *         if isinstance(component, int):             # <<<<<<<<<<<<<<
 *             return self.net.sensitivity(component, p)
 *         elif isinstance(component, (str, bytes)):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_component); 
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1739
 *         """
 *         if isinstance(component, int):
 *             return self.net.sensitivity(component, p)             # <<<<<<<<<<<<<<
 *         elif isinstance(component, (str, bytes)):
 *             return self.net.sensitivity(stringify(component), p, r)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_component); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1739, __pyx_L1_error)
    try {
      __pyx_t_3 = __pyx_v_self->net.sensitivity(__pyx_t_2, __pyx_v_p);
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 1739, __pyx_L1_error)
    }
    __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "cantera/reactor.pyx":1738
 *         taken.
 *         """
 *         if isinstance(component, int):             # <<<<<<<<<<<<<<
 *             return self.net.sensitivity(component, p)
 *         elif isinstance(component, (str, bytes)):
 */
  }

  /* "cantera/reactor.pyx":1740
 *         if isinstance(component, int):
 *             return self.net.sensitivity(component, p)
 *         elif isinstance(component, (str, bytes)):             # <<<<<<<<<<<<<<
 *             return self.net.sensitivity(stringify(component), p, r)
 * 
 */
  __pyx_t_5 = PyUnicode_Check(__pyx_v_component); 
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyBytes_Check(__pyx_v_component); 
  __pyx_t_1 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1741
 *             return self.net.sensitivity(component, p)
 *         elif isinstance(component, (str, bytes)):
 *             return self.net.sensitivity(stringify(component), p, r)             # <<<<<<<<<<<<<<
 * 
 *     def sensitivities(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_component); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1741, __pyx_L1_error)
    try {
      __pyx_t_3 = __pyx_v_self->net.sensitivity(__pyx_t_6, __pyx_v_p, __pyx_v_r);
    } catch(...) {
      translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
      __PYX_ERR(0, 1741, __pyx_L1_error)
    }
    __pyx_t_4 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "cantera/reactor.pyx":1740
 *         if isinstance(component, int):
 *             return self.net.sensitivity(component, p)
 *         elif isinstance(component, (str, bytes)):             # <<<<<<<<<<<<<<
 *             return self.net.sensitivity(stringify(component), p, r)
 * 
 */
  }

  /* "cantera/reactor.pyx":1728
 *         return pystr(self.net.componentName(i))
 * 
 *     def sensitivity(self, component, int p, int r=0):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the sensitivity of the solution variable ``component`` in
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.sensitivity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1743
 *             return self.net.sensitivity(stringify(component), p, r)
 * 
 *     def sensitivities(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Returns the sensitivities of all of the solution variables with respect
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_21sensitivities(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_20sensitivities, "\n        Returns the sensitivities of all of the solution variables with respect\n        to all of the registered parameters. The normalized sensitivity\n        coefficient :math:`S_{ki}` of the solution variable :math:`y_k` with\n        respect to sensitivity parameter :math:`p_i` is defined as:\n\n        .. math:: S_{ki} = \\frac{p_i}{y_k} \\frac{\\partial y_k}{\\partial p_i}\n\n        For reaction sensitivities, the parameter is a multiplier on the forward\n        rate constant (and implicitly on the reverse rate constant for\n        reversible reactions).\n\n        The sensitivities are returned in an array with dimensions *(n_vars,\n        n_sensitivity_params)*, unless no integration steps have been taken, in which\n        case the shape is *(0, n_sensitivity_params)*. The order of the\n        variables (that is, rows) is:\n\n        `Reactor` or `IdealGasReactor`:\n\n        - 0  - mass\n        - 1  - volume\n        - 2  - internal energy or temperature\n        - 3+ - mass fractions of the species\n\n        `ConstPressureReactor` or `IdealGasConstPressureReactor`:\n\n        - 0  - mass\n        - 1  - enthalpy or temperature\n        - 2+ - mass fractions of the species\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_21sensitivities = {"sensitivities", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_21sensitivities, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_20sensitivities};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_21sensitivities(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sensitivities (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("sensitivities", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "sensitivities", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_20sensitivities(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_20sensitivities(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyArrayObject *__pyx_v_data = 0;
  int __pyx_v_p;
  int __pyx_v_k;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  int __pyx_t_12;
  double __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sensitivities", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/reactor.pyx":1775
 *         """
 *         cdef np.ndarray[np.double_t, ndim=2] data = \
 *                 np.empty((self.n_vars, self.n_sensitivity_params))             # <<<<<<<<<<<<<<
 *         cdef int p,k
 *         for p in range(self.n_sensitivity_params):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_sensitivity_params); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1775, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1774, __pyx_L1_error)
    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_data.diminfo[1].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_data.diminfo[1].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_data = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1777
 *                 np.empty((self.n_vars, self.n_sensitivity_params))
 *         cdef int p,k
 *         for p in range(self.n_sensitivity_params):             # <<<<<<<<<<<<<<
 *             for k in range(self.n_vars):
 *                 data[k,p] = self.net.sensitivity(k,p)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_sensitivity_params); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_8 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1777, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_9; __pyx_t_6+=1) {
    __pyx_v_p = __pyx_t_6;

    /* "cantera/reactor.pyx":1778
 *         cdef int p,k
 *         for p in range(self.n_sensitivity_params):
 *             for k in range(self.n_vars):             # <<<<<<<<<<<<<<
 *                 data[k,p] = self.net.sensitivity(k,p)
 *         return data
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_10 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_k = __pyx_t_12;

      /* "cantera/reactor.pyx":1779
 *         for p in range(self.n_sensitivity_params):
 *             for k in range(self.n_vars):
 *                 data[k,p] = self.net.sensitivity(k,p)             # <<<<<<<<<<<<<<
 *         return data
 * 
 */
      try {
        __pyx_t_13 = __pyx_v_self->net.sensitivity(__pyx_v_k, __pyx_v_p);
      } catch(...) {
        translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
        __PYX_ERR(0, 1779, __pyx_L1_error)
      }
      __pyx_t_14 = __pyx_v_k;
      __pyx_t_15 = __pyx_v_p;
      __pyx_t_16 = -1;
      if (__pyx_t_14 < 0) {
        __pyx_t_14 += __pyx_pybuffernd_data.diminfo[0].shape;
        if (unlikely(__pyx_t_14 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_16 = 0;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_pybuffernd_data.diminfo[1].shape;
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_16 = 1;
      } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_data.diminfo[1].shape)) __pyx_t_16 = 1;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 1779, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_data.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_data.diminfo[1].strides) = __pyx_t_13;
    }
  }

  /* "cantera/reactor.pyx":1780
 *             for k in range(self.n_vars):
 *                 data[k,p] = self.net.sensitivity(k,p)
 *         return data             # <<<<<<<<<<<<<<
 * 
 *     def sensitivity_parameter_name(self, int p):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_data);
  __pyx_r = ((PyObject *)__pyx_v_data);
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1743
 *             return self.net.sensitivity(stringify(component), p, r)
 * 
 *     def sensitivities(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Returns the sensitivities of all of the solution variables with respect
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.sensitivities", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1782
 *         return data
 * 
 *     def sensitivity_parameter_name(self, int p):             # <<<<<<<<<<<<<<
 *         """
 *         Name of the sensitivity parameter with index ``p``.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_23sensitivity_parameter_name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_22sensitivity_parameter_name, "\n        Name of the sensitivity parameter with index ``p``.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_23sensitivity_parameter_name = {"sensitivity_parameter_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_23sensitivity_parameter_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_22sensitivity_parameter_name};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_23sensitivity_parameter_name(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_p;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sensitivity_parameter_name (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1782, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "sensitivity_parameter_name") < 0)) __PYX_ERR(0, 1782, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_p = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_p == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1782, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sensitivity_parameter_name", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1782, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.sensitivity_parameter_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_22sensitivity_parameter_name(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), __pyx_v_p);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_22sensitivity_parameter_name(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sensitivity_parameter_name", 0);

  /* "cantera/reactor.pyx":1786
 *         Name of the sensitivity parameter with index ``p``.
 *         """
 *         return pystr(self.net.sensitivityParameterName(p))             # <<<<<<<<<<<<<<
 * 
 *     property n_sensitivity_params:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->net.sensitivityParameterName(__pyx_v_p);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1786, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_f_7cantera_6_utils_pystr(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1782
 *         return data
 * 
 *     def sensitivity_parameter_name(self, int p):             # <<<<<<<<<<<<<<
 *         """
 *         Name of the sensitivity parameter with index ``p``.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.sensitivity_parameter_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1792
 *         The number of registered sensitivity parameters.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.nparams()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_20n_sensitivity_params_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_20n_sensitivity_params_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_20n_sensitivity_params___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_20n_sensitivity_params___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1793
 *         """
 *         def __get__(self):
 *             return self.net.nparams()             # <<<<<<<<<<<<<<
 * 
 *     property n_vars:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->net.nparams()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1792
 *         The number of registered sensitivity parameters.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.nparams()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.n_sensitivity_params.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1809
 *         `Wall`: number of surface species
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.neq()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_6n_vars_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_6n_vars_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_6n_vars___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_6n_vars___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1810
 *         """
 *         def __get__(self):
 *             return self.net.neq()             # <<<<<<<<<<<<<<
 * 
 *     def get_state(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->net.neq()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1809
 *         `Wall`: number of surface species
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.net.neq()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.n_vars.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1812
 *             return self.net.neq()
 * 
 *     def get_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the combined state vector of the reactor network.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_25get_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_24get_state, "\n        Get the combined state vector of the reactor network.\n\n        The combined state vector consists of the concatenated state vectors of\n        all entities contained.\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_25get_state = {"get_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_25get_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_24get_state};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_25get_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_state (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_state", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_state", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_24get_state(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_24get_state(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyArrayObject *__pyx_v_y = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_y;
  __Pyx_Buffer __pyx_pybuffer_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_state", 0);
  __pyx_pybuffer_y.pybuffer.buf = NULL;
  __pyx_pybuffer_y.refcount = 0;
  __pyx_pybuffernd_y.data = NULL;
  __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;

  /* "cantera/reactor.pyx":1819
 *         all entities contained.
 *         """
 *         if not self.n_vars:             # <<<<<<<<<<<<<<
 *             raise CanteraError('ReactorNet empty or not initialized.')
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "cantera/reactor.pyx":1820
 *         """
 *         if not self.n_vars:
 *             raise CanteraError('ReactorNet empty or not initialized.')             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)
 *         self.net.getState(&y[0])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_CanteraError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1820, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u_ReactorNet_empty_or_not_initiali};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1820, __pyx_L1_error)

    /* "cantera/reactor.pyx":1819
 *         all entities contained.
 *         """
 *         if not self.n_vars:             # <<<<<<<<<<<<<<
 *             raise CanteraError('ReactorNet empty or not initialized.')
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)
 */
  }

  /* "cantera/reactor.pyx":1821
 *         if not self.n_vars:
 *             raise CanteraError('ReactorNet empty or not initialized.')
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)             # <<<<<<<<<<<<<<
 *         self.net.getState(&y[0])
 *         return y
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1821, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1821, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_y = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_y.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1821, __pyx_L1_error)
    } else {__pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_y = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1822
 *             raise CanteraError('ReactorNet empty or not initialized.')
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)
 *         self.net.getState(&y[0])             # <<<<<<<<<<<<<<
 *         return y
 * 
 */
  __pyx_t_9 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_y.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_y.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 1822, __pyx_L1_error)
  }
  __pyx_v_self->net.getState((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_y.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_y.diminfo[0].strides))));

  /* "cantera/reactor.pyx":1823
 *         cdef np.ndarray[np.double_t, ndim=1] y = np.zeros(self.n_vars)
 *         self.net.getState(&y[0])
 *         return y             # <<<<<<<<<<<<<<
 * 
 *     def get_derivative(self, k):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_y);
  __pyx_r = ((PyObject *)__pyx_v_y);
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1812
 *             return self.net.neq()
 * 
 *     def get_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the combined state vector of the reactor network.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.get_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_y);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1825
 *         return y
 * 
 *     def get_derivative(self, k):             # <<<<<<<<<<<<<<
 *         """
 *         Get the k-th derivative of the state vector of the reactor network with respect
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_27get_derivative(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_26get_derivative, "\n        Get the k-th derivative of the state vector of the reactor network with respect\n        to the independent integrator variable (time/distance).\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_27get_derivative = {"get_derivative", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_27get_derivative, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_26get_derivative};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_27get_derivative(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_k = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_derivative (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,0};
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_k)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1825, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_derivative") < 0)) __PYX_ERR(0, 1825, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_k = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_derivative", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1825, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.get_derivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_26get_derivative(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), __pyx_v_k);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_26get_derivative(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_k) {
  PyArrayObject *__pyx_v_dky = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dky;
  __Pyx_Buffer __pyx_pybuffer_dky;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_derivative", 0);
  __pyx_pybuffer_dky.pybuffer.buf = NULL;
  __pyx_pybuffer_dky.refcount = 0;
  __pyx_pybuffernd_dky.data = NULL;
  __pyx_pybuffernd_dky.rcbuffer = &__pyx_pybuffer_dky;

  /* "cantera/reactor.pyx":1830
 *         to the independent integrator variable (time/distance).
 *         """
 *         if not self.n_vars:             # <<<<<<<<<<<<<<
 *             raise CanteraError('ReactorNet empty or not initialized.')
 *         cdef np.ndarray[np.double_t, ndim = 1] dky = np.zeros(self.n_vars)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1830, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "cantera/reactor.pyx":1831
 *         """
 *         if not self.n_vars:
 *             raise CanteraError('ReactorNet empty or not initialized.')             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.double_t, ndim = 1] dky = np.zeros(self.n_vars)
 *         self.net.getDerivative(k, & dky[0])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_CanteraError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u_ReactorNet_empty_or_not_initiali};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 1831, __pyx_L1_error)

    /* "cantera/reactor.pyx":1830
 *         to the independent integrator variable (time/distance).
 *         """
 *         if not self.n_vars:             # <<<<<<<<<<<<<<
 *             raise CanteraError('ReactorNet empty or not initialized.')
 *         cdef np.ndarray[np.double_t, ndim = 1] dky = np.zeros(self.n_vars)
 */
  }

  /* "cantera/reactor.pyx":1832
 *         if not self.n_vars:
 *             raise CanteraError('ReactorNet empty or not initialized.')
 *         cdef np.ndarray[np.double_t, ndim = 1] dky = np.zeros(self.n_vars)             # <<<<<<<<<<<<<<
 *         self.net.getDerivative(k, & dky[0])
 *         return dky
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1832, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dky.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_dky = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dky.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1832, __pyx_L1_error)
    } else {__pyx_pybuffernd_dky.diminfo[0].strides = __pyx_pybuffernd_dky.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dky.diminfo[0].shape = __pyx_pybuffernd_dky.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_dky = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1833
 *             raise CanteraError('ReactorNet empty or not initialized.')
 *         cdef np.ndarray[np.double_t, ndim = 1] dky = np.zeros(self.n_vars)
 *         self.net.getDerivative(k, & dky[0])             # <<<<<<<<<<<<<<
 *         return dky
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_k); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1833, __pyx_L1_error)
  __pyx_t_9 = 0;
  __pyx_t_10 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_dky.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_dky.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(0, 1833, __pyx_L1_error)
  }
  try {
    __pyx_v_self->net.getDerivative(__pyx_t_6, (&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_dky.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_dky.diminfo[0].strides))));
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1833, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1834
 *         cdef np.ndarray[np.double_t, ndim = 1] dky = np.zeros(self.n_vars)
 *         self.net.getDerivative(k, & dky[0])
 *         return dky             # <<<<<<<<<<<<<<
 * 
 *     property advance_limits:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_dky);
  __pyx_r = ((PyObject *)__pyx_v_dky);
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1825
 *         return y
 * 
 *     def get_derivative(self, k):             # <<<<<<<<<<<<<<
 *         """
 *         Get the k-th derivative of the state vector of the reactor network with respect
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dky.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.get_derivative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dky.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dky);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1843
 *         disabled by default (with individual values set to -1.).
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] limits = np.empty(self.n_vars)
 *             self.net.getAdvanceLimits(&limits[0])
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_14advance_limits_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_14advance_limits_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_14advance_limits___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_14advance_limits___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyArrayObject *__pyx_v_limits = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_limits;
  __Pyx_Buffer __pyx_pybuffer_limits;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyArrayObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_pybuffer_limits.pybuffer.buf = NULL;
  __pyx_pybuffer_limits.refcount = 0;
  __pyx_pybuffernd_limits.data = NULL;
  __pyx_pybuffernd_limits.rcbuffer = &__pyx_pybuffer_limits;

  /* "cantera/reactor.pyx":1844
 *         """
 *         def __get__(self):
 *             cdef np.ndarray[np.double_t, ndim=1] limits = np.empty(self.n_vars)             # <<<<<<<<<<<<<<
 *             self.net.getAdvanceLimits(&limits[0])
 *             return limits
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1844, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_limits.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_limits = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_limits.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1844, __pyx_L1_error)
    } else {__pyx_pybuffernd_limits.diminfo[0].strides = __pyx_pybuffernd_limits.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_limits.diminfo[0].shape = __pyx_pybuffernd_limits.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_limits = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1845
 *         def __get__(self):
 *             cdef np.ndarray[np.double_t, ndim=1] limits = np.empty(self.n_vars)
 *             self.net.getAdvanceLimits(&limits[0])             # <<<<<<<<<<<<<<
 *             return limits
 * 
 */
  __pyx_t_7 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_limits.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_limits.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1845, __pyx_L1_error)
  }
  (void)(__pyx_v_self->net.getAdvanceLimits((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_limits.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_limits.diminfo[0].strides)))));

  /* "cantera/reactor.pyx":1846
 *             cdef np.ndarray[np.double_t, ndim=1] limits = np.empty(self.n_vars)
 *             self.net.getAdvanceLimits(&limits[0])
 *             return limits             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, limits):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_limits);
  __pyx_r = ((PyObject *)__pyx_v_limits);
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1843
 *         disabled by default (with individual values set to -1.).
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] limits = np.empty(self.n_vars)
 *             self.net.getAdvanceLimits(&limits[0])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_limits.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.advance_limits.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_limits.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_limits);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1848
 *             return limits
 * 
 *         def __set__(self, limits):             # <<<<<<<<<<<<<<
 *             if limits is None:
 *                 limits = -1. * np.ones([self.n_vars])
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_14advance_limits_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_limits); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_14advance_limits_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_limits) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_14advance_limits_2__set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((PyObject *)__pyx_v_limits));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_14advance_limits_2__set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_limits) {
  PyArrayObject *__pyx_v_data = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_limits);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;

  /* "cantera/reactor.pyx":1849
 * 
 *         def __set__(self, limits):
 *             if limits is None:             # <<<<<<<<<<<<<<
 *                 limits = -1. * np.ones([self.n_vars])
 *             elif len(limits) != self.n_vars:
 */
  __pyx_t_1 = (__pyx_v_limits == Py_None);
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1850
 *         def __set__(self, limits):
 *             if limits is None:
 *                 limits = -1. * np.ones([self.n_vars])             # <<<<<<<<<<<<<<
 *             elif len(limits) != self.n_vars:
 *                 raise ValueError('array must be of length n_vars')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ones); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1850, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = PyNumber_Multiply(__pyx_float_neg_1_, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_limits, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "cantera/reactor.pyx":1849
 * 
 *         def __set__(self, limits):
 *             if limits is None:             # <<<<<<<<<<<<<<
 *                 limits = -1. * np.ones([self.n_vars])
 *             elif len(limits) != self.n_vars:
 */
    goto __pyx_L3;
  }

  /* "cantera/reactor.pyx":1851
 *             if limits is None:
 *                 limits = -1. * np.ones([self.n_vars])
 *             elif len(limits) != self.n_vars:             # <<<<<<<<<<<<<<
 *                 raise ValueError('array must be of length n_vars')
 * 
 */
  __pyx_t_7 = PyObject_Length(__pyx_v_limits); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1851, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "cantera/reactor.pyx":1852
 *                 limits = -1. * np.ones([self.n_vars])
 *             elif len(limits) != self.n_vars:
 *                 raise ValueError('array must be of length n_vars')             # <<<<<<<<<<<<<<
 * 
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1852, __pyx_L1_error)

    /* "cantera/reactor.pyx":1851
 *             if limits is None:
 *                 limits = -1. * np.ones([self.n_vars])
 *             elif len(limits) != self.n_vars:             # <<<<<<<<<<<<<<
 *                 raise ValueError('array must be of length n_vars')
 * 
 */
  }
  __pyx_L3:;

  /* "cantera/reactor.pyx":1855
 * 
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                 np.ascontiguousarray(limits, dtype=np.double)             # <<<<<<<<<<<<<<
 *             self.net.setAdvanceLimits(&data[0])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_limits);
  __Pyx_GIVEREF(__pyx_v_limits);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_limits);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_double); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 1855, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1855, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1854, __pyx_L1_error)
    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v_data = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "cantera/reactor.pyx":1856
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                 np.ascontiguousarray(limits, dtype=np.double)
 *             self.net.setAdvanceLimits(&data[0])             # <<<<<<<<<<<<<<
 * 
 *     def advance_to_steady_state(self, int max_steps=10000,
 */
  __pyx_t_10 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_data.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 1856, __pyx_L1_error)
  }
  __pyx_v_self->net.setAdvanceLimits((&(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_data.diminfo[0].strides))));

  /* "cantera/reactor.pyx":1848
 *             return limits
 * 
 *         def __set__(self, limits):             # <<<<<<<<<<<<<<
 *             if limits is None:
 *                 limits = -1. * np.ones([self.n_vars])
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.advance_limits.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_limits);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1858
 *             self.net.setAdvanceLimits(&data[0])
 * 
 *     def advance_to_steady_state(self, int max_steps=10000,             # <<<<<<<<<<<<<<
 *                                 double residual_threshold=0., double atol=0.,
 *                                 pybool return_residuals=False):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_29advance_to_steady_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_7cantera_7reactor_10ReactorNet_28advance_to_steady_state, "\n        Advance the reactor network in time until steady state is reached.\n\n        The steady state is defined by requiring that the state of the system\n        only changes below a certain threshold. The residual is computed using\n        feature scaling:\n\n        .. math:: r = \\left| \\frac{x(t + \\Delta t) - x(t)}{\\text{max}(x) + \\text{atol}} \\right| \\cdot \\frac{1}{\\sqrt{n_x}}\n\n        :param max_steps:\n            Maximum number of steps to be taken\n        :param residual_threshold:\n            Threshold below which the feature-scaled residual r should drop such\n            that the network is defines as steady state. By default,\n            residual_threshold is 10 times the solver rtol.\n        :param atol:\n            The smallest expected value of interest. Used for feature scaling.\n            By default, this atol is identical to the solver atol.\n        :param return_residuals:\n            If set to `True`, this function returns the residual time series\n            as a vector with length `max_steps`.\n\n        ");
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_29advance_to_steady_state = {"advance_to_steady_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_29advance_to_steady_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_28advance_to_steady_state};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_29advance_to_steady_state(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_max_steps;
  double __pyx_v_residual_threshold;
  double __pyx_v_atol;
  PyBoolObject *__pyx_v_return_residuals = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("advance_to_steady_state (wrapper)", 0);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_steps,&__pyx_n_s_residual_threshold,&__pyx_n_s_atol,&__pyx_n_s_return_residuals,0};
    PyObject* values[4] = {0,0,0,0};

    /* "cantera/reactor.pyx":1860
 *     def advance_to_steady_state(self, int max_steps=10000,
 *                                 double residual_threshold=0., double atol=0.,
 *                                 pybool return_residuals=False):             # <<<<<<<<<<<<<<
 *         r"""
 *         Advance the reactor network in time until steady state is reached.
 */
    values[3] = (PyObject *)((PyBoolObject *)Py_False);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_steps);
          if (value) { values[0] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1858, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_residual_threshold);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1858, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_atol);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1858, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_return_residuals);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1858, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "advance_to_steady_state") < 0)) __PYX_ERR(0, 1858, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_max_steps = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_max_steps == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1858, __pyx_L3_error)
    } else {
      __pyx_v_max_steps = ((int)0x2710);
    }
    if (values[1]) {
      __pyx_v_residual_threshold = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_residual_threshold == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1859, __pyx_L3_error)
    } else {
      __pyx_v_residual_threshold = ((double)0.);
    }
    if (values[2]) {
      __pyx_v_atol = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_atol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1859, __pyx_L3_error)
    } else {
      __pyx_v_atol = ((double)0.);
    }
    __pyx_v_return_residuals = ((PyBoolObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("advance_to_steady_state", 0, 0, 4, __pyx_nargs); __PYX_ERR(0, 1858, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.advance_to_steady_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_return_residuals), __pyx_ptype_7cpython_4bool_bool, 1, "return_residuals", 0))) __PYX_ERR(0, 1860, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_28advance_to_steady_state(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), __pyx_v_max_steps, __pyx_v_residual_threshold, __pyx_v_atol, __pyx_v_return_residuals);

  /* "cantera/reactor.pyx":1858
 *             self.net.setAdvanceLimits(&data[0])
 * 
 *     def advance_to_steady_state(self, int max_steps=10000,             # <<<<<<<<<<<<<<
 *                                 double residual_threshold=0., double atol=0.,
 *                                 pybool return_residuals=False):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_28advance_to_steady_state(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, int __pyx_v_max_steps, double __pyx_v_residual_threshold, double __pyx_v_atol, PyBoolObject *__pyx_v_return_residuals) {
  PyObject *__pyx_v_residuals = NULL;
  PyObject *__pyx_v_max_state_values = NULL;
  PyObject *__pyx_v_step = NULL;
  PyObject *__pyx_v_previous_state = NULL;
  CYTHON_UNUSED long __pyx_v_n1;
  PyObject *__pyx_v_state = NULL;
  PyObject *__pyx_v_residual = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  long __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("advance_to_steady_state", 0);

  /* "cantera/reactor.pyx":1885
 *         """
 *         # get default tolerances:
 *         if not atol:             # <<<<<<<<<<<<<<
 *             atol = self.atol
 *         if not residual_threshold:
 */
  __pyx_t_1 = (!(__pyx_v_atol != 0));
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1886
 *         # get default tolerances:
 *         if not atol:
 *             atol = self.atol             # <<<<<<<<<<<<<<
 *         if not residual_threshold:
 *             residual_threshold = 10. * self.rtol
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_atol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1886, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_atol = __pyx_t_3;

    /* "cantera/reactor.pyx":1885
 *         """
 *         # get default tolerances:
 *         if not atol:             # <<<<<<<<<<<<<<
 *             atol = self.atol
 *         if not residual_threshold:
 */
  }

  /* "cantera/reactor.pyx":1887
 *         if not atol:
 *             atol = self.atol
 *         if not residual_threshold:             # <<<<<<<<<<<<<<
 *             residual_threshold = 10. * self.rtol
 *         if residual_threshold <= self.rtol:
 */
  __pyx_t_1 = (!(__pyx_v_residual_threshold != 0));
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1888
 *             atol = self.atol
 *         if not residual_threshold:
 *             residual_threshold = 10. * self.rtol             # <<<<<<<<<<<<<<
 *         if residual_threshold <= self.rtol:
 *             raise CanteraError('Residual threshold (' + str(residual_threshold) +
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rtol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Multiply(__pyx_float_10_, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1888, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_residual_threshold = __pyx_t_3;

    /* "cantera/reactor.pyx":1887
 *         if not atol:
 *             atol = self.atol
 *         if not residual_threshold:             # <<<<<<<<<<<<<<
 *             residual_threshold = 10. * self.rtol
 *         if residual_threshold <= self.rtol:
 */
  }

  /* "cantera/reactor.pyx":1889
 *         if not residual_threshold:
 *             residual_threshold = 10. * self.rtol
 *         if residual_threshold <= self.rtol:             # <<<<<<<<<<<<<<
 *             raise CanteraError('Residual threshold (' + str(residual_threshold) +
 *                                ') should be below solver rtol (' +
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_residual_threshold); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rtol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "cantera/reactor.pyx":1890
 *             residual_threshold = 10. * self.rtol
 *         if residual_threshold <= self.rtol:
 *             raise CanteraError('Residual threshold (' + str(residual_threshold) +             # <<<<<<<<<<<<<<
 *                                ') should be below solver rtol (' +
 *                                str(self.rtol) + ')')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_CanteraError); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1890, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_residual_threshold); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1890, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_Str(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1890, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_u_Residual_threshold, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1890, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_4, __pyx_kp_u_should_be_below_solver_rtol); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1890, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cantera/reactor.pyx":1892
 *             raise CanteraError('Residual threshold (' + str(residual_threshold) +
 *                                ') should be below solver rtol (' +
 *                                str(self.rtol) + ')')             # <<<<<<<<<<<<<<
 *         if return_residuals:
 *             residuals = np.empty(max_steps)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_rtol); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1892, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_Str(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1892, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cantera/reactor.pyx":1891
 *         if residual_threshold <= self.rtol:
 *             raise CanteraError('Residual threshold (' + str(residual_threshold) +
 *                                ') should be below solver rtol (' +             # <<<<<<<<<<<<<<
 *                                str(self.rtol) + ')')
 *         if return_residuals:
 */
    __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "cantera/reactor.pyx":1892
 *             raise CanteraError('Residual threshold (' + str(residual_threshold) +
 *                                ') should be below solver rtol (' +
 *                                str(self.rtol) + ')')             # <<<<<<<<<<<<<<
 *         if return_residuals:
 *             residuals = np.empty(max_steps)
 */
    __pyx_t_7 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_4, __pyx_kp_u__20); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1892, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_7};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 1890, __pyx_L1_error)

    /* "cantera/reactor.pyx":1889
 *         if not residual_threshold:
 *             residual_threshold = 10. * self.rtol
 *         if residual_threshold <= self.rtol:             # <<<<<<<<<<<<<<
 *             raise CanteraError('Residual threshold (' + str(residual_threshold) +
 *                                ') should be below solver rtol (' +
 */
  }

  /* "cantera/reactor.pyx":1893
 *                                ') should be below solver rtol (' +
 *                                str(self.rtol) + ')')
 *         if return_residuals:             # <<<<<<<<<<<<<<
 *             residuals = np.empty(max_steps)
 *         # check if system is initialized
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_return_residuals)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1893, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "cantera/reactor.pyx":1894
 *                                str(self.rtol) + ')')
 *         if return_residuals:
 *             residuals = np.empty(max_steps)             # <<<<<<<<<<<<<<
 *         # check if system is initialized
 *         if not self.n_vars:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_max_steps); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_v_residuals = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "cantera/reactor.pyx":1893
 *                                ') should be below solver rtol (' +
 *                                str(self.rtol) + ')')
 *         if return_residuals:             # <<<<<<<<<<<<<<
 *             residuals = np.empty(max_steps)
 *         # check if system is initialized
 */
  }

  /* "cantera/reactor.pyx":1896
 *             residuals = np.empty(max_steps)
 *         # check if system is initialized
 *         if not self.n_vars:             # <<<<<<<<<<<<<<
 *             self.reinitialize()
 *         max_state_values = self.get_state()  # denominator for feature scaling
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1896, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = (!__pyx_t_1);
  if (__pyx_t_9) {

    /* "cantera/reactor.pyx":1897
 *         # check if system is initialized
 *         if not self.n_vars:
 *             self.reinitialize()             # <<<<<<<<<<<<<<
 *         max_state_values = self.get_state()  # denominator for feature scaling
 *         for step in range(max_steps):
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_reinitialize); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1897, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_2, };
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "cantera/reactor.pyx":1896
 *             residuals = np.empty(max_steps)
 *         # check if system is initialized
 *         if not self.n_vars:             # <<<<<<<<<<<<<<
 *             self.reinitialize()
 *         max_state_values = self.get_state()  # denominator for feature scaling
 */
  }

  /* "cantera/reactor.pyx":1898
 *         if not self.n_vars:
 *             self.reinitialize()
 *         max_state_values = self.get_state()  # denominator for feature scaling             # <<<<<<<<<<<<<<
 *         for step in range(max_steps):
 *             previous_state = self.get_state()
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_state); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_8 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_v_max_state_values = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "cantera/reactor.pyx":1899
 *             self.reinitialize()
 *         max_state_values = self.get_state()  # denominator for feature scaling
 *         for step in range(max_steps):             # <<<<<<<<<<<<<<
 *             previous_state = self.get_state()
 *             # take 10 steps (just to increase speed)
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_max_steps); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_7)) || PyTuple_CheckExact(__pyx_t_7)) {
    __pyx_t_5 = __pyx_t_7; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1899, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 1899, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1899, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 1899, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1899, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_11(__pyx_t_5);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1899, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_step, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "cantera/reactor.pyx":1900
 *         max_state_values = self.get_state()  # denominator for feature scaling
 *         for step in range(max_steps):
 *             previous_state = self.get_state()             # <<<<<<<<<<<<<<
 *             # take 10 steps (just to increase speed)
 *             for n1 in range(10):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1900, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_previous_state, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "cantera/reactor.pyx":1902
 *             previous_state = self.get_state()
 *             # take 10 steps (just to increase speed)
 *             for n1 in range(10):             # <<<<<<<<<<<<<<
 *                 self.step()
 *             state = self.get_state()
 */
    for (__pyx_t_12 = 0; __pyx_t_12 < 10; __pyx_t_12+=1) {
      __pyx_v_n1 = __pyx_t_12;

      /* "cantera/reactor.pyx":1903
 *             # take 10 steps (just to increase speed)
 *             for n1 in range(10):
 *                 self.step()             # <<<<<<<<<<<<<<
 *             state = self.get_state()
 *             max_state_values = np.maximum(max_state_values, state)
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_step); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1903, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_4, };
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1903, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }

    /* "cantera/reactor.pyx":1904
 *             for n1 in range(10):
 *                 self.step()
 *             state = self.get_state()             # <<<<<<<<<<<<<<
 *             max_state_values = np.maximum(max_state_values, state)
 *             # determine feature_scaled residual
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1904, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_state, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "cantera/reactor.pyx":1905
 *                 self.step()
 *             state = self.get_state()
 *             max_state_values = np.maximum(max_state_values, state)             # <<<<<<<<<<<<<<
 *             # determine feature_scaled residual
 *             residual = np.linalg.norm((state - previous_state)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_maximum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_v_max_state_values, __pyx_v_state};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_max_state_values, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "cantera/reactor.pyx":1907
 *             max_state_values = np.maximum(max_state_values, state)
 *             # determine feature_scaled residual
 *             residual = np.linalg.norm((state - previous_state)             # <<<<<<<<<<<<<<
 *                 / (max_state_values + atol)) / np.sqrt(self.n_vars)
 *             if return_residuals:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_linalg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_norm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_state, __pyx_v_previous_state); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "cantera/reactor.pyx":1908
 *             # determine feature_scaled residual
 *             residual = np.linalg.norm((state - previous_state)
 *                 / (max_state_values + atol)) / np.sqrt(self.n_vars)             # <<<<<<<<<<<<<<
 *             if return_residuals:
 *                 residuals[step] = residual
 */
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_atol); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = PyNumber_Add(__pyx_v_max_state_values, __pyx_t_6); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_13); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_t_6};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_vars); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_6};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __pyx_t_13 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_residual, __pyx_t_13);
    __pyx_t_13 = 0;

    /* "cantera/reactor.pyx":1909
 *             residual = np.linalg.norm((state - previous_state)
 *                 / (max_state_values + atol)) / np.sqrt(self.n_vars)
 *             if return_residuals:             # <<<<<<<<<<<<<<
 *                 residuals[step] = residual
 *             if residual < residual_threshold:
 */
    __pyx_t_9 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_return_residuals)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1909, __pyx_L1_error)
    if (__pyx_t_9) {

      /* "cantera/reactor.pyx":1910
 *                 / (max_state_values + atol)) / np.sqrt(self.n_vars)
 *             if return_residuals:
 *                 residuals[step] = residual             # <<<<<<<<<<<<<<
 *             if residual < residual_threshold:
 *                 break
 */
      if (unlikely(!__pyx_v_residuals)) { __Pyx_RaiseUnboundLocalError("residuals"); __PYX_ERR(0, 1910, __pyx_L1_error) }
      if (unlikely((PyObject_SetItem(__pyx_v_residuals, __pyx_v_step, __pyx_v_residual) < 0))) __PYX_ERR(0, 1910, __pyx_L1_error)

      /* "cantera/reactor.pyx":1909
 *             residual = np.linalg.norm((state - previous_state)
 *                 / (max_state_values + atol)) / np.sqrt(self.n_vars)
 *             if return_residuals:             # <<<<<<<<<<<<<<
 *                 residuals[step] = residual
 *             if residual < residual_threshold:
 */
    }

    /* "cantera/reactor.pyx":1911
 *             if return_residuals:
 *                 residuals[step] = residual
 *             if residual < residual_threshold:             # <<<<<<<<<<<<<<
 *                 break
 *         if step == max_steps - 1:
 */
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_residual_threshold); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_residual, __pyx_t_13, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1911, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1911, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_9) {

      /* "cantera/reactor.pyx":1912
 *                 residuals[step] = residual
 *             if residual < residual_threshold:
 *                 break             # <<<<<<<<<<<<<<
 *         if step == max_steps - 1:
 *             raise CanteraError('Maximum number of steps reached before'
 */
      goto __pyx_L9_break;

      /* "cantera/reactor.pyx":1911
 *             if return_residuals:
 *                 residuals[step] = residual
 *             if residual < residual_threshold:             # <<<<<<<<<<<<<<
 *                 break
 *         if step == max_steps - 1:
 */
    }

    /* "cantera/reactor.pyx":1899
 *             self.reinitialize()
 *         max_state_values = self.get_state()  # denominator for feature scaling
 *         for step in range(max_steps):             # <<<<<<<<<<<<<<
 *             previous_state = self.get_state()
 *             # take 10 steps (just to increase speed)
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  goto __pyx_L14_for_end;
  __pyx_L9_break:;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  goto __pyx_L14_for_end;
  __pyx_L14_for_end:;

  /* "cantera/reactor.pyx":1913
 *             if residual < residual_threshold:
 *                 break
 *         if step == max_steps - 1:             # <<<<<<<<<<<<<<
 *             raise CanteraError('Maximum number of steps reached before'
 *                                ' convergence below maximum residual')
 */
  if (unlikely(!__pyx_v_step)) { __Pyx_RaiseUnboundLocalError("step"); __PYX_ERR(0, 1913, __pyx_L1_error) }
  __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_max_steps - 1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_step, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_9)) {

    /* "cantera/reactor.pyx":1914
 *                 break
 *         if step == max_steps - 1:
 *             raise CanteraError('Maximum number of steps reached before'             # <<<<<<<<<<<<<<
 *                                ' convergence below maximum residual')
 *         if return_residuals:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_CanteraError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_kp_u_Maximum_number_of_steps_reached};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 1914, __pyx_L1_error)

    /* "cantera/reactor.pyx":1913
 *             if residual < residual_threshold:
 *                 break
 *         if step == max_steps - 1:             # <<<<<<<<<<<<<<
 *             raise CanteraError('Maximum number of steps reached before'
 *                                ' convergence below maximum residual')
 */
  }

  /* "cantera/reactor.pyx":1916
 *             raise CanteraError('Maximum number of steps reached before'
 *                                ' convergence below maximum residual')
 *         if return_residuals:             # <<<<<<<<<<<<<<
 *             return residuals[:step + 1]
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_return_residuals)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1916, __pyx_L1_error)
  if (__pyx_t_9) {

    /* "cantera/reactor.pyx":1917
 *                                ' convergence below maximum residual')
 *         if return_residuals:
 *             return residuals[:step + 1]             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(!__pyx_v_residuals)) { __Pyx_RaiseUnboundLocalError("residuals"); __PYX_ERR(0, 1917, __pyx_L1_error) }
    if (unlikely(!__pyx_v_step)) { __Pyx_RaiseUnboundLocalError("step"); __PYX_ERR(0, 1917, __pyx_L1_error) }
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_step, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_v_residuals, 0, 0, NULL, &__pyx_t_4, NULL, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "cantera/reactor.pyx":1916
 *             raise CanteraError('Maximum number of steps reached before'
 *                                ' convergence below maximum residual')
 *         if return_residuals:             # <<<<<<<<<<<<<<
 *             return residuals[:step + 1]
 * 
 */
  }

  /* "cantera/reactor.pyx":1858
 *             self.net.setAdvanceLimits(&data[0])
 * 
 *     def advance_to_steady_state(self, int max_steps=10000,             # <<<<<<<<<<<<<<
 *                                 double residual_threshold=0., double atol=0.,
 *                                 pybool return_residuals=False):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.advance_to_steady_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_residuals);
  __Pyx_XDECREF(__pyx_v_max_state_values);
  __Pyx_XDECREF(__pyx_v_step);
  __Pyx_XDECREF(__pyx_v_previous_state);
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v_residual);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1919
 *             return residuals[:step + 1]
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('ReactorNet object is not picklable')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_31__reduce__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_31__reduce__ = {"__reduce__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_31__reduce__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_31__reduce__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_30__reduce__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_30__reduce__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "cantera/reactor.pyx":1920
 * 
 *     def __reduce__(self):
 *         raise NotImplementedError('ReactorNet object is not picklable')             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1920, __pyx_L1_error)

  /* "cantera/reactor.pyx":1919
 *             return residuals[:step + 1]
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('ReactorNet object is not picklable')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1922
 *         raise NotImplementedError('ReactorNet object is not picklable')
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('ReactorNet object is not copyable')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_33__copy__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7cantera_7reactor_10ReactorNet_33__copy__ = {"__copy__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_33__copy__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_33__copy__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__copy__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__copy__", 0))) return NULL;
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_32__copy__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_32__copy__(CYTHON_UNUSED struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "cantera/reactor.pyx":1923
 * 
 *     def __copy__(self):
 *         raise NotImplementedError('ReactorNet object is not copyable')             # <<<<<<<<<<<<<<
 * 
 *     property preconditioner:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 1923, __pyx_L1_error)

  /* "cantera/reactor.pyx":1922
 *         raise NotImplementedError('ReactorNet object is not picklable')
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('ReactorNet object is not copyable')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1927
 *     property preconditioner:
 *         """Preconditioner associated with integrator"""
 *         def __set__(self, PreconditionerBase precon):             # <<<<<<<<<<<<<<
 *             # set preconditioner
 *             self.net.setPreconditioner(precon.pbase)
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_14preconditioner_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_precon); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_14preconditioner_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_precon) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_precon), __pyx_ptype_7cantera_15preconditioners_PreconditionerBase, 1, "precon", 0))) __PYX_ERR(0, 1927, __pyx_L1_error)
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_14preconditioner___set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((struct __pyx_obj_7cantera_15preconditioners_PreconditionerBase *)__pyx_v_precon));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_14preconditioner___set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, struct __pyx_obj_7cantera_15preconditioners_PreconditionerBase *__pyx_v_precon) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1929
 *         def __set__(self, PreconditionerBase precon):
 *             # set preconditioner
 *             self.net.setPreconditioner(precon.pbase)             # <<<<<<<<<<<<<<
 *             # set problem type as default of preconditioner
 *             self.linear_solver_type = precon.precon_linear_solver_type
 */
  __pyx_v_self->net.setPreconditioner(__pyx_v_precon->pbase);

  /* "cantera/reactor.pyx":1931
 *             self.net.setPreconditioner(precon.pbase)
 *             # set problem type as default of preconditioner
 *             self.linear_solver_type = precon.precon_linear_solver_type             # <<<<<<<<<<<<<<
 * 
 *     property linear_solver_type:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_precon), __pyx_n_s_precon_linear_solver_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_linear_solver_type, __pyx_t_1) < 0) __PYX_ERR(0, 1931, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cantera/reactor.pyx":1927
 *     property preconditioner:
 *         """Preconditioner associated with integrator"""
 *         def __set__(self, PreconditionerBase precon):             # <<<<<<<<<<<<<<
 *             # set preconditioner
 *             self.net.setPreconditioner(precon.pbase)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.preconditioner.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1945
 * 
 *         """
 *         def __set__(self, linear_solver_type):             # <<<<<<<<<<<<<<
 *             self.net.setLinearSolverType(stringify(linear_solver_type))
 * 
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_18linear_solver_type_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_linear_solver_type); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_18linear_solver_type_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_linear_solver_type) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_18linear_solver_type___set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((PyObject *)__pyx_v_linear_solver_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_18linear_solver_type___set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_linear_solver_type) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1946
 *         """
 *         def __set__(self, linear_solver_type):
 *             self.net.setLinearSolverType(stringify(linear_solver_type))             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  __pyx_t_1 = __pyx_f_7cantera_6_utils_stringify(__pyx_v_linear_solver_type); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1946, __pyx_L1_error)
  try {
    __pyx_v_self->net.setLinearSolverType(__pyx_t_1);
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1946, __pyx_L1_error)
  }

  /* "cantera/reactor.pyx":1945
 * 
 *         """
 *         def __set__(self, linear_solver_type):             # <<<<<<<<<<<<<<
 *             self.net.setLinearSolverType(stringify(linear_solver_type))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.linear_solver_type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1948
 *             self.net.setLinearSolverType(stringify(linear_solver_type))
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.net.linearSolverType())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_18linear_solver_type_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_18linear_solver_type_3__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_18linear_solver_type_2__get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_18linear_solver_type_2__get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1949
 * 
 *         def __get__(self):
 *             return pystr(self.net.linearSolverType())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_7cantera_6_utils_pystr(__pyx_v_self->net.linearSolverType()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1948
 *             self.net.setLinearSolverType(stringify(linear_solver_type))
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return pystr(self.net.linearSolverType())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.linear_solver_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1954
 *     property solver_stats:
 *         """ODE solver stats from integrator"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CxxAnyMap stats
 *             stats = self.net.solverStats()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_12solver_stats_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7cantera_7reactor_10ReactorNet_12solver_stats_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_12solver_stats___get__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7cantera_7reactor_10ReactorNet_12solver_stats___get__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self) {
  Cantera::AnyMap __pyx_v_stats;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Cantera::AnyMap __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cantera/reactor.pyx":1956
 *         def __get__(self):
 *             cdef CxxAnyMap stats
 *             stats = self.net.solverStats()             # <<<<<<<<<<<<<<
 *             return anymap_to_py(stats)
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->net.solverStats();
  } catch(...) {
    translate_exception(); if (!PyErr_Occurred())PyErr_SetString(PyExc_RuntimeError, "Error converting c++ exception.");
    __PYX_ERR(0, 1956, __pyx_L1_error)
  }
  __pyx_v_stats = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "cantera/reactor.pyx":1957
 *             cdef CxxAnyMap stats
 *             stats = self.net.solverStats()
 *             return anymap_to_py(stats)             # <<<<<<<<<<<<<<
 * 
 *     property derivative_settings:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7cantera_6_utils_anymap_to_py(__pyx_v_stats); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "cantera/reactor.pyx":1954
 *     property solver_stats:
 *         """ODE solver stats from integrator"""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef CxxAnyMap stats
 *             stats = self.net.solverStats()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.solver_stats.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cantera/reactor.pyx":1964
 *         See also `Kinetics.derivative_settings`.
 *         """
 *         def __set__(self, settings):             # <<<<<<<<<<<<<<
 *             self.net.setDerivativeSettings(py_to_anymap(settings))
 */

/* Python wrapper */
static int __pyx_pw_7cantera_7reactor_10ReactorNet_19derivative_settings_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_settings); /*proto*/
static int __pyx_pw_7cantera_7reactor_10ReactorNet_19derivative_settings_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_settings) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cantera_7reactor_10ReactorNet_19derivative_settings___set__(((struct __pyx_obj_7cantera_7reactor_ReactorNet *)__pyx_v_self), ((PyObject *)__pyx_v_settings));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cantera_7reactor_10ReactorNet_19derivative_settings___set__(struct __pyx_obj_7cantera_7reactor_ReactorNet *__pyx_v_self, PyObject *__pyx_v_settings) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Cantera::AnyMap __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "cantera/reactor.pyx":1965
 *         """
 *         def __set__(self, settings):
 *             self.net.setDerivativeSettings(py_to_anymap(settings))             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __pyx_f_7cantera_6_utils_py_to_anymap(__pyx_v_settings, NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1965, __pyx_L1_error)
  __pyx_v_self->net.setDerivativeSettings(__pyx_t_1);

  /* "cantera/reactor.pyx":1964
 *         See also `Kinetics.derivative_settings`.
 *         """
 *         def __set__(self, settings):             # <<<<<<<<<<<<<<
 *             self.net.setDerivativeSettings(py_to_anymap(settings))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("cantera.reactor.ReactorNet.derivative_settings.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_7cantera_7reactor_ReactorBase(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cantera_7reactor_ReactorBase *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)o);
  new((void*)&(p->_reactor)) std::shared_ptr<Cantera::ReactorBase> ();
  p->_thermo = Py_None; Py_INCREF(Py_None);
  p->_inlets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_outlets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_walls = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_surfaces = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_weakref_proxy = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cantera_7reactor_11ReactorBase_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cantera_7reactor_ReactorBase(PyObject *o) {
  struct __pyx_obj_7cantera_7reactor_ReactorBase *p = (struct __pyx_obj_7cantera_7reactor_ReactorBase *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7cantera_7reactor_ReactorBase) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_reactor);
  Py_CLEAR(p->_thermo);
  Py_CLEAR(p->_inlets);
  Py_CLEAR(p->_outlets);
  Py_CLEAR(p->_walls);
  Py_CLEAR(p->_surfaces);
  Py_CLEAR(p->_weakref_proxy);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cantera_7reactor_ReactorBase(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cantera_7reactor_ReactorBase *p = (struct __pyx_obj_7cantera_7reactor_ReactorBase *)o;
  if (p->_thermo) {
    e = (*v)(p->_thermo, a); if (e) return e;
  }
  if (p->_inlets) {
    e = (*v)(p->_inlets, a); if (e) return e;
  }
  if (p->_outlets) {
    e = (*v)(p->_outlets, a); if (e) return e;
  }
  if (p->_walls) {
    e = (*v)(p->_walls, a); if (e) return e;
  }
  if (p->_surfaces) {
    e = (*v)(p->_surfaces, a); if (e) return e;
  }
  if (p->_weakref_proxy) {
    e = (*v)(p->_weakref_proxy, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cantera_7reactor_ReactorBase(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cantera_7reactor_ReactorBase *p = (struct __pyx_obj_7cantera_7reactor_ReactorBase *)o;
  tmp = ((PyObject*)p->_thermo);
  p->_thermo = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_inlets);
  p->_inlets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_outlets);
  p->_outlets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_walls);
  p->_walls = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_surfaces);
  p->_surfaces = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_weakref_proxy);
  p->_weakref_proxy = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_4type_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_4name_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_11ReactorBase_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_11ReactorBase_4name_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_thermo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_6thermo_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_volume(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_6volume_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_11ReactorBase_volume(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_11ReactorBase_6volume_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_1T_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_density(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_7density_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_4mass_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_Y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_1Y_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_inlets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_6inlets_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_outlets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_7outlets_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_walls(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_5walls_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_11ReactorBase_surfaces(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11ReactorBase_8surfaces_1__get__(o);
}

static PyMethodDef __pyx_methods_7cantera_7reactor_ReactorBase[] = {
  {"insert", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_5insert, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_11ReactorBase_4insert},
  {"syncState", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_7syncState, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_11ReactorBase_6syncState},
  {"_add_inlet", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_9_add_inlet, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_11ReactorBase_8_add_inlet},
  {"_add_outlet", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_11_add_outlet, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_11ReactorBase_10_add_outlet},
  {"_add_wall", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_13_add_wall, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_11ReactorBase_12_add_wall},
  {"__reduce__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_15__reduce__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__copy__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_11ReactorBase_17__copy__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_ReactorBase[] = {
  {(char *)"type", __pyx_getprop_7cantera_7reactor_11ReactorBase_type, 0, (char *)PyDoc_STR("The type of the reactor."), 0},
  {(char *)"name", __pyx_getprop_7cantera_7reactor_11ReactorBase_name, __pyx_setprop_7cantera_7reactor_11ReactorBase_name, (char *)PyDoc_STR("The name of the reactor."), 0},
  {(char *)"thermo", __pyx_getprop_7cantera_7reactor_11ReactorBase_thermo, 0, (char *)PyDoc_STR("The `ThermoPhase` object representing the reactor's contents."), 0},
  {(char *)"volume", __pyx_getprop_7cantera_7reactor_11ReactorBase_volume, __pyx_setprop_7cantera_7reactor_11ReactorBase_volume, (char *)PyDoc_STR("The volume [m^3] of the reactor."), 0},
  {(char *)"T", __pyx_getprop_7cantera_7reactor_11ReactorBase_T, 0, (char *)PyDoc_STR("The temperature [K] of the reactor's contents."), 0},
  {(char *)"density", __pyx_getprop_7cantera_7reactor_11ReactorBase_density, 0, (char *)PyDoc_STR("The density [kg/m^3 or kmol/m^3] of the reactor's contents."), 0},
  {(char *)"mass", __pyx_getprop_7cantera_7reactor_11ReactorBase_mass, 0, (char *)PyDoc_STR("The mass of the reactor's contents."), 0},
  {(char *)"Y", __pyx_getprop_7cantera_7reactor_11ReactorBase_Y, 0, (char *)PyDoc_STR("The mass fractions of the reactor's contents."), 0},
  {(char *)"inlets", __pyx_getprop_7cantera_7reactor_11ReactorBase_inlets, 0, (char *)PyDoc_STR("List of flow devices installed as inlets to this reactor"), 0},
  {(char *)"outlets", __pyx_getprop_7cantera_7reactor_11ReactorBase_outlets, 0, (char *)PyDoc_STR("List of flow devices installed as outlets to this reactor"), 0},
  {(char *)"walls", __pyx_getprop_7cantera_7reactor_11ReactorBase_walls, 0, (char *)PyDoc_STR("List of walls installed on this reactor"), 0},
  {(char *)"surfaces", __pyx_getprop_7cantera_7reactor_11ReactorBase_surfaces, 0, (char *)PyDoc_STR("List of reacting surfaces installed on this reactor"), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ReactorBase_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7cantera_7reactor_ReactorBase},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Common base class for reactors and reservoirs.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ReactorBase},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ReactorBase},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_7reactor_ReactorBase},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_ReactorBase},
  {Py_tp_init, (void *)__pyx_pw_7cantera_7reactor_11ReactorBase_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ReactorBase},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ReactorBase_spec = {
  "cantera.reactor.ReactorBase",
  sizeof(struct __pyx_obj_7cantera_7reactor_ReactorBase),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ReactorBase_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ReactorBase = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ReactorBase", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ReactorBase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ReactorBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    Common base class for reactors and reservoirs.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ReactorBase, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ReactorBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_7reactor_ReactorBase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_ReactorBase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_7reactor_11ReactorBase_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ReactorBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7cantera_7reactor_Reactor(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cantera_7reactor_Reactor *p;
  PyObject *o = __pyx_tp_new_7cantera_7reactor_ReactorBase(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cantera_7reactor_Reactor *)o);
  p->_kinetics = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cantera_7reactor_7Reactor_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cantera_7reactor_Reactor(PyObject *o) {
  struct __pyx_obj_7cantera_7reactor_Reactor *p = (struct __pyx_obj_7cantera_7reactor_Reactor *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7cantera_7reactor_Reactor) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_kinetics);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7cantera_7reactor_ReactorBase(o);
}

static int __pyx_tp_traverse_7cantera_7reactor_Reactor(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cantera_7reactor_Reactor *p = (struct __pyx_obj_7cantera_7reactor_Reactor *)o;
  e = __pyx_tp_traverse_7cantera_7reactor_ReactorBase(o, v, a); if (e) return e;
  if (p->_kinetics) {
    e = (*v)(p->_kinetics, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cantera_7reactor_Reactor(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cantera_7reactor_Reactor *p = (struct __pyx_obj_7cantera_7reactor_Reactor *)o;
  __pyx_tp_clear_7cantera_7reactor_ReactorBase(o);
  tmp = ((PyObject*)p->_kinetics);
  p->_kinetics = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cantera_7reactor_7Reactor_kinetics(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_7Reactor_8kinetics_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_7Reactor_chemistry_enabled(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_7Reactor_17chemistry_enabled_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_7Reactor_chemistry_enabled(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_7Reactor_17chemistry_enabled_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_7Reactor_energy_enabled(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_7Reactor_14energy_enabled_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_7Reactor_energy_enabled(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_7Reactor_14energy_enabled_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_7Reactor_n_vars(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_7Reactor_6n_vars_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_7Reactor_jacobian(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_7Reactor_8jacobian_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_7Reactor_finite_difference_jacobian(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_7Reactor_26finite_difference_jacobian_1__get__(o);
}

static PyMethodDef __pyx_methods_7cantera_7reactor_Reactor[] = {
  {"insert", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_5insert, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_4insert},
  {"add_sensitivity_reaction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_7add_sensitivity_reaction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_6add_sensitivity_reaction},
  {"add_sensitivity_species_enthalpy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_9add_sensitivity_species_enthalpy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_8add_sensitivity_species_enthalpy},
  {"component_index", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_11component_index, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_10component_index},
  {"component_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_13component_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_12component_name},
  {"get_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_15get_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_14get_state},
  {"set_advance_limit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_7Reactor_17set_advance_limit, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_7Reactor_16set_advance_limit},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_Reactor[] = {
  {(char *)"kinetics", __pyx_getprop_7cantera_7reactor_7Reactor_kinetics, 0, (char *)PyDoc_STR("\n        The `Kinetics` object used for calculating kinetic rates in\n        this reactor.\n        "), 0},
  {(char *)"chemistry_enabled", __pyx_getprop_7cantera_7reactor_7Reactor_chemistry_enabled, __pyx_setprop_7cantera_7reactor_7Reactor_chemistry_enabled, (char *)PyDoc_STR("\n        `True` when the reactor composition is allowed to change due to\n        chemical reactions in this reactor. When this is `False`, the\n        reactor composition is held constant.\n        "), 0},
  {(char *)"energy_enabled", __pyx_getprop_7cantera_7reactor_7Reactor_energy_enabled, __pyx_setprop_7cantera_7reactor_7Reactor_energy_enabled, (char *)PyDoc_STR("\n        `True` when the energy equation is being solved for this reactor.\n        When this is `False`, the reactor temperature is held constant.\n        "), 0},
  {(char *)"n_vars", __pyx_getprop_7cantera_7reactor_7Reactor_n_vars, 0, (char *)PyDoc_STR("\n        The number of state variables in the reactor.\n        Equal to:\n\n        `Reactor` and `IdealGasReactor`: `n_species` + 3 (mass, volume,\n        internal energy or temperature).\n\n        `ConstPressureReactor` and `IdealGasConstPressureReactor`:\n        `n_species` + 2 (mass, enthalpy or temperature).\n        "), 0},
  {(char *)"jacobian", __pyx_getprop_7cantera_7reactor_7Reactor_jacobian, 0, (char *)PyDoc_STR("\n        Get the local, reactor-specific Jacobian or an approximation thereof\n\n        .. warning::\n\n            Depending on the particular implementation, this may return an approximate\n            Jacobian intended only for use in forming a preconditioner for iterative\n            solvers, excluding terms that would generate a fully-dense Jacobian.\n\n        .. warning::\n\n            This method is an experimental part of the Cantera API and may be\n            changed or removed without notice.\n        "), 0},
  {(char *)"finite_difference_jacobian", __pyx_getprop_7cantera_7reactor_7Reactor_finite_difference_jacobian, 0, (char *)PyDoc_STR("\n        Get the reactor-specific Jacobian, calculated using a finite difference method.\n\n        .. warning::\n\n            This property is an experimental part of the Cantera API and\n            may be changed or removed without notice.\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_Reactor_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7cantera_7reactor_Reactor},
  {Py_tp_doc, (void *)PyDoc_STR("\n    A homogeneous zero-dimensional reactor. By default, they are closed\n    (no inlets or outlets), have fixed volume, and have adiabatic,\n    chemically-inert walls. These properties may all be changed by adding\n    appropriate components such as `Wall`, `MassFlowController` and `Valve`.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_Reactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_Reactor},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_7reactor_Reactor},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_Reactor},
  {Py_tp_init, (void *)__pyx_pw_7cantera_7reactor_7Reactor_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_Reactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_Reactor_spec = {
  "cantera.reactor.Reactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_Reactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_Reactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_Reactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""Reactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_Reactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_Reactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A homogeneous zero-dimensional reactor. By default, they are closed\n    (no inlets or outlets), have fixed volume, and have adiabatic,\n    chemically-inert walls. These properties may all be changed by adding\n    appropriate components such as `Wall`, `MassFlowController` and `Valve`.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_Reactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_Reactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_7reactor_Reactor, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_Reactor, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_7reactor_7Reactor_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_Reactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_MoleReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A homogeneous zero-dimensional reactor with a mole based state vector. By default,\n    they are closed (no inlets or outlets), have fixed volume, and have adiabatic,\n    chemically-inert walls. These properties may all be changed by adding\n    appropriate components such as `Wall`, `MassFlowController` and `Valve`.\n\n    .. versionadded:: 3.0\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_Reactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_Reactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_Reactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_MoleReactor_spec = {
  "cantera.reactor.MoleReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_MoleReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_MoleReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_MoleReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""MoleReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_MoleReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_Reactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A homogeneous zero-dimensional reactor with a mole based state vector. By default,\n    they are closed (no inlets or outlets), have fixed volume, and have adiabatic,\n    chemically-inert walls. These properties may all be changed by adding\n    appropriate components such as `Wall`, `MassFlowController` and `Valve`.\n\n    .. versionadded:: 3.0\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_Reactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_Reactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_7Reactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_Reactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_Reservoir_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A reservoir is a reactor with a constant state. The temperature,\n    pressure, and chemical composition in a reservoir never change from\n    their initial values.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ReactorBase},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ReactorBase},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ReactorBase},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_Reservoir_spec = {
  "cantera.reactor.Reservoir",
  sizeof(struct __pyx_obj_7cantera_7reactor_Reservoir),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_Reservoir_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_Reservoir = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""Reservoir", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_Reservoir), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ReactorBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A reservoir is a reactor with a constant state. The temperature,\n    pressure, and chemical composition in a reservoir never change from\n    their initial values.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ReactorBase, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ReactorBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_11ReactorBase_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ReactorBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ConstPressureReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("A homogeneous, constant pressure, zero-dimensional reactor. The volume\n    of the reactor changes as a function of time in order to keep the\n    pressure constant.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_Reactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_Reactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_Reactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ConstPressureReactor_spec = {
  "cantera.reactor.ConstPressureReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_ConstPressureReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ConstPressureReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ConstPressureReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ConstPressureReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ConstPressureReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_Reactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("A homogeneous, constant pressure, zero-dimensional reactor. The volume\n    of the reactor changes as a function of time in order to keep the\n    pressure constant.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_Reactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_Reactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_7Reactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_Reactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ConstPressureMoleReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("A homogeneous, constant pressure, zero-dimensional reactor with a mole based\n    state vector. The volume of the reactor changes as a function of time in order to\n    keep the pressure constant.\n\n    .. versionadded:: 3.0\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_Reactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_Reactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_Reactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ConstPressureMoleReactor_spec = {
  "cantera.reactor.ConstPressureMoleReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_ConstPressureMoleReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ConstPressureMoleReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ConstPressureMoleReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ConstPressureMoleReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ConstPressureMoleReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_Reactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("A homogeneous, constant pressure, zero-dimensional reactor with a mole based\n    state vector. The volume of the reactor changes as a function of time in order to\n    keep the pressure constant.\n\n    .. versionadded:: 3.0\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_Reactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_Reactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_7Reactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_Reactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_IdealGasReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR(" A constant volume, zero-dimensional reactor for ideal gas mixtures. ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_Reactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_Reactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_Reactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_IdealGasReactor_spec = {
  "cantera.reactor.IdealGasReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_IdealGasReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_IdealGasReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_IdealGasReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""IdealGasReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_IdealGasReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_Reactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR(" A constant volume, zero-dimensional reactor for ideal gas mixtures. "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_Reactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_Reactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_7Reactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_Reactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_IdealGasConstPressureReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A homogeneous, constant pressure, zero-dimensional reactor for ideal gas\n    mixtures. The volume of the reactor changes as a function of time in order\n    to keep the pressure constant.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_Reactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_Reactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_Reactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_IdealGasConstPressureReactor_spec = {
  "cantera.reactor.IdealGasConstPressureReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_IdealGasConstPressureReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_IdealGasConstPressureReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_IdealGasConstPressureReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""IdealGasConstPressureReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_IdealGasConstPressureReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_Reactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A homogeneous, constant pressure, zero-dimensional reactor for ideal gas\n    mixtures. The volume of the reactor changes as a function of time in order\n    to keep the pressure constant.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_Reactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_Reactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_7Reactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_Reactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static int __pyx_setprop_7cantera_7reactor_11FlowReactor_mass_flow_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_11FlowReactor_14mass_flow_rate_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_11FlowReactor_area(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11FlowReactor_4area_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_11FlowReactor_area(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_11FlowReactor_4area_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_11FlowReactor_inlet_surface_atol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_atol_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_11FlowReactor_inlet_surface_atol(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_atol_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_11FlowReactor_inlet_surface_rtol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_11FlowReactor_inlet_surface_rtol(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_11FlowReactor_18inlet_surface_rtol_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_11FlowReactor_inlet_surface_max_steps(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_11FlowReactor_inlet_surface_max_steps(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_11FlowReactor_23inlet_surface_max_steps_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_11FlowReactor_inlet_surface_max_error_failures(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_11FlowReactor_inlet_surface_max_error_failures(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_11FlowReactor_32inlet_surface_max_error_failures_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_11FlowReactor_surface_area_to_volume_ratio(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_11FlowReactor_surface_area_to_volume_ratio(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_11FlowReactor_28surface_area_to_volume_ratio_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_11FlowReactor_speed(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11FlowReactor_5speed_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_11FlowReactor_distance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_11FlowReactor_8distance_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_FlowReactor[] = {
  {(char *)"mass_flow_rate", 0, __pyx_setprop_7cantera_7reactor_11FlowReactor_mass_flow_rate, (char *)PyDoc_STR(" Mass flow rate [kg/s] "), 0},
  {(char *)"area", __pyx_getprop_7cantera_7reactor_11FlowReactor_area, __pyx_setprop_7cantera_7reactor_11FlowReactor_area, (char *)PyDoc_STR("\n        Get/set the area of the reactor [m^2].\n\n        When the area is changed, the flow speed is scaled to keep the total mass flow\n        rate constant.\n        "), 0},
  {(char *)"inlet_surface_atol", __pyx_getprop_7cantera_7reactor_11FlowReactor_inlet_surface_atol, __pyx_setprop_7cantera_7reactor_11FlowReactor_inlet_surface_atol, (char *)PyDoc_STR("\n        Get/Set the steady-state tolerances used to determine the initial surface\n        species coverages.\n        "), 0},
  {(char *)"inlet_surface_rtol", __pyx_getprop_7cantera_7reactor_11FlowReactor_inlet_surface_rtol, __pyx_setprop_7cantera_7reactor_11FlowReactor_inlet_surface_rtol, (char *)PyDoc_STR("\n        Get/Set the steady-state tolerances used to determine the initial surface\n        species coverages.\n        "), 0},
  {(char *)"inlet_surface_max_steps", __pyx_getprop_7cantera_7reactor_11FlowReactor_inlet_surface_max_steps, __pyx_setprop_7cantera_7reactor_11FlowReactor_inlet_surface_max_steps, (char *)PyDoc_STR("\n        Get/Set the maximum number of integrator steps used to determine the initial\n        surface species coverages.\n        "), 0},
  {(char *)"inlet_surface_max_error_failures", __pyx_getprop_7cantera_7reactor_11FlowReactor_inlet_surface_max_error_failures, __pyx_setprop_7cantera_7reactor_11FlowReactor_inlet_surface_max_error_failures, (char *)PyDoc_STR("\n        Get/Set the maximum number of integrator error failures allowed when determining\n        the initial surface species coverages.\n        "), 0},
  {(char *)"surface_area_to_volume_ratio", __pyx_getprop_7cantera_7reactor_11FlowReactor_surface_area_to_volume_ratio, __pyx_setprop_7cantera_7reactor_11FlowReactor_surface_area_to_volume_ratio, (char *)PyDoc_STR(" Get/Set the surface area to volume ratio of the reactor [m^-1] "), 0},
  {(char *)"speed", __pyx_getprop_7cantera_7reactor_11FlowReactor_speed, 0, (char *)PyDoc_STR(" Speed [m/s] of the flow in the reactor at the current position "), 0},
  {(char *)"distance", __pyx_getprop_7cantera_7reactor_11FlowReactor_distance, 0, (char *)PyDoc_STR("\n        The distance of the fluid element from the inlet of the reactor.\n\n        .. deprecated:: 3.0\n\n            To be removed after Cantera 3.0. Access distance via `ReactorNet`.\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_FlowReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A steady-state plug flow reactor with constant cross sectional area.\n    Integration follows a fluid element along the length of the reactor.\n    The reactor is assumed to be frictionless and adiabatic.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_Reactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_Reactor},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_FlowReactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_Reactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_FlowReactor_spec = {
  "cantera.reactor.FlowReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_FlowReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_FlowReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_FlowReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""FlowReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_FlowReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_Reactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A steady-state plug flow reactor with constant cross sectional area.\n    Integration follows a fluid element along the length of the reactor.\n    The reactor is assumed to be frictionless and adiabatic.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_Reactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_Reactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_FlowReactor, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_7Reactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_Reactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7cantera_7reactor_ExtensibleReactor(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *p;
  PyObject *o = __pyx_tp_new_7cantera_7reactor_Reactor(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)o);
  p->_delegates = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cantera_7reactor_17ExtensibleReactor_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cantera_7reactor_ExtensibleReactor(PyObject *o) {
  struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *p = (struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7cantera_7reactor_ExtensibleReactor) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_delegates);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_7cantera_7reactor_Reactor(o);
}

static int __pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *p = (struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)o;
  e = __pyx_tp_traverse_7cantera_7reactor_Reactor(o, v, a); if (e) return e;
  if (p->_delegates) {
    e = (*v)(p->_delegates, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cantera_7reactor_ExtensibleReactor(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *p = (struct __pyx_obj_7cantera_7reactor_ExtensibleReactor *)o;
  __pyx_tp_clear_7cantera_7reactor_Reactor(o);
  tmp = ((PyObject*)p->_delegates);
  p->_delegates = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cantera_7reactor_17ExtensibleReactor_n_vars(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_6n_vars_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_17ExtensibleReactor_n_vars(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_6n_vars_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_17ExtensibleReactor_vdot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_4vdot_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_17ExtensibleReactor_vdot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_4vdot_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_17ExtensibleReactor_expansion_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_14expansion_rate_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_17ExtensibleReactor_expansion_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_14expansion_rate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_17ExtensibleReactor_qdot(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_4qdot_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_17ExtensibleReactor_qdot(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_4qdot_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_17ExtensibleReactor_heat_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_9heat_rate_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_17ExtensibleReactor_heat_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_9heat_rate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_17ExtensibleReactor__delegates(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_10_delegates_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_17ExtensibleReactor__delegates(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_10_delegates_3__set__(o, v);
  }
  else {
    return __pyx_pw_7cantera_7reactor_17ExtensibleReactor_10_delegates_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_7cantera_7reactor_ExtensibleReactor[] = {
  {"restore_thermo_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_17ExtensibleReactor_5restore_thermo_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_17ExtensibleReactor_4restore_thermo_state},
  {"restore_surface_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_17ExtensibleReactor_7restore_surface_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_17ExtensibleReactor_6restore_surface_state},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_ExtensibleReactor[] = {
  {(char *)"n_vars", __pyx_getprop_7cantera_7reactor_17ExtensibleReactor_n_vars, __pyx_setprop_7cantera_7reactor_17ExtensibleReactor_n_vars, (char *)PyDoc_STR("\n        Get/Set the number of state variables in the reactor.\n        "), 0},
  {(char *)"vdot", __pyx_getprop_7cantera_7reactor_17ExtensibleReactor_vdot, __pyx_setprop_7cantera_7reactor_17ExtensibleReactor_vdot, (char *)PyDoc_STR("\n        Get/Set the net rate of volume change (for example, from moving walls) [m^3/s]\n\n        .. deprecated:: 3.0\n\n            To be removed in Cantera 3.0; renamed to `expansion_rate`.\n        "), 0},
  {(char *)"expansion_rate", __pyx_getprop_7cantera_7reactor_17ExtensibleReactor_expansion_rate, __pyx_setprop_7cantera_7reactor_17ExtensibleReactor_expansion_rate, (char *)PyDoc_STR("\n        Get/Set the net rate of volume change (for example, from moving walls) [m^3/s]\n\n        .. versionadded:: 3.0\n        "), 0},
  {(char *)"qdot", __pyx_getprop_7cantera_7reactor_17ExtensibleReactor_qdot, __pyx_setprop_7cantera_7reactor_17ExtensibleReactor_qdot, (char *)PyDoc_STR("\n        Get/Set the net heat transfer rate (for example, through walls) [W]\n\n        .. deprecated:: 3.0\n\n            To be removed in Cantera 3.0; renamed to `heat_rate`.\n        "), 0},
  {(char *)"heat_rate", __pyx_getprop_7cantera_7reactor_17ExtensibleReactor_heat_rate, __pyx_setprop_7cantera_7reactor_17ExtensibleReactor_heat_rate, (char *)PyDoc_STR("\n        Get/Set the net heat transfer rate (for example, through walls) [W]\n\n        .. versionadded:: 3.0\n        "), 0},
  {(char *)"_delegates", __pyx_getprop_7cantera_7reactor_17ExtensibleReactor__delegates, __pyx_setprop_7cantera_7reactor_17ExtensibleReactor__delegates, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ExtensibleReactor_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_doc, (void *)PyDoc_STR("\n    A base class for a reactor with delegated methods where the base\n    functionality corresponds to the `Reactor` class.\n\n    The following methods of the C++ :ct:`Reactor` class can be modified by a\n    Python class which inherits from this class. For each method, the name below\n    should be prefixed with ``before_``, ``after_``, or ``replace_``, indicating\n    whether this method should be called before, after, or instead of the\n    corresponding method from the base class.\n\n    For methods that return a value and have a ``before`` method specified, if\n    that method returns a value other than ``None`` that value will be returned\n    without calling the base class method; otherwise, the value from the base\n    class method will be returned. For methods that return a value and have an\n    ``after`` method specified, the returned value wil be the sum of the values\n    from the supplied method and the base class method.\n\n    ``initialize(self, t0: double) -> None``\n        Responsible for allocating and setting the sizes of any internal\n        variables, initializing attached walls, and setting the total number of\n        state variables associated with this reactor, `n_vars`.\n\n        Called once before the start of time integration.\n\n    ``sync_state(self) -> None``\n        Responsible for setting the state of the reactor to correspond to the\n        state of the associated ThermoPhase object.\n\n    ``get_state(self, y : double[:]) -> None``\n        Responsible for populating the state vector ``y`` (length `n_vars`)\n        with the initial state of the reactor.\n\n    ``update_state(self, y : double[:]) -> None``\n        Responsible for setting the state of the reactor object from the\n        values in the state vector ``y`` (length `n_vars`)\n\n    ``update_surface_state(self, y : double[:]) -> None``\n        Responsible for setting the state of surface phases in this reactor\n        from the values in the state vector ``y``"". The length of ``y`` is the\n        total number of surface species in all surfaces.\n\n    ``get_surface_initial_conditions(self, y : double[:]) -> None``\n        Responsible for populating the state vector ``y`` with the initial\n        state of each surface phase in this reactor. The length of ``y`` is the\n        total number of surface species in all surfaces.\n\n    ``update_connected(self, update_pressure : bool) -> None``\n        Responsible for storing properties which may be accessed by connected\n        reactors, and for updating the mass flow rates of connected flow devices.\n\n    ``eval(self, t : double, LHS : double[:], RHS : double[:]) -> None``\n        Responsible for calculating the time derivative of the state at time ``t``\n        based on the current state of the reactor. For each component ``i`` of the\n        state vector, the time derivative ``dy[i]/dt`` is calculated as\n        ``LHS[i] * dy[i]/dt = RHS[i]``. ``LHS`` and ``RHS`` are arrays of length\n        `n_vars`.\n\n    ``eval_walls(self, t : double) -> None``\n        Responsible for calculating the net rate of volume change `expansion_rate`\n        and the net rate of heat transfer `heat_rate` caused by walls connected\n        to this reactor.\n\n    ``eval_surfaces(LHS : double[:], RHS : double[:], sdot : double[:]) -> None``\n        Responsible for calculating the ``LHS`` and ``RHS`` (length: total number of\n        surface species in all surfaces) of the ODEs for surface species coverages,\n        and the molar production rate of bulk phase species ``sdot`` (length: number\n        of bulk phase species).\n\n    ``component_name(i : int) -> string``\n        Returns the name of the state vector component with index ``i``\n\n    ``component_index(name: string) -> int``\n        Returns the index of the state vector component named ``name``\n\n    ``species_index(name : string) -> int``\n        Returns the index of the species named ``name``, in either the bulk\n    ""    phase or a surface phase, relative to the start of the species terms in\n        the state vector.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_init, (void *)__pyx_pw_7cantera_7reactor_17ExtensibleReactor_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ExtensibleReactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ExtensibleReactor_spec = {
  "cantera.reactor.ExtensibleReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ExtensibleReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ExtensibleReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ExtensibleReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ExtensibleReactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A base class for a reactor with delegated methods where the base\n    functionality corresponds to the `Reactor` class.\n\n    The following methods of the C++ :ct:`Reactor` class can be modified by a\n    Python class which inherits from this class. For each method, the name below\n    should be prefixed with ``before_``, ``after_``, or ``replace_``, indicating\n    whether this method should be called before, after, or instead of the\n    corresponding method from the base class.\n\n    For methods that return a value and have a ``before`` method specified, if\n    that method returns a value other than ``None`` that value will be returned\n    without calling the base class method; otherwise, the value from the base\n    class method will be returned. For methods that return a value and have an\n    ``after`` method specified, the returned value wil be the sum of the values\n    from the supplied method and the base class method.\n\n    ``initialize(self, t0: double) -> None``\n        Responsible for allocating and setting the sizes of any internal\n        variables, initializing attached walls, and setting the total number of\n        state variables associated with this reactor, `n_vars`.\n\n        Called once before the start of time integration.\n\n    ``sync_state(self) -> None``\n        Responsible for setting the state of the reactor to correspond to the\n        state of the associated ThermoPhase object.\n\n    ``get_state(self, y : double[:]) -> None``\n        Responsible for populating the state vector ``y`` (length `n_vars`)\n        with the initial state of the reactor.\n\n    ``update_state(self, y : double[:]) -> None``\n        Responsible for setting the state of the reactor object from the\n        values in the state vector ``y`` (length `n_vars`)\n\n    ``update_surface_state(self, y : double[:]) -> None``\n        Responsible for setting the state of surface phases in this reactor\n        from the values in the state vector ``y``"". The length of ``y`` is the\n        total number of surface species in all surfaces.\n\n    ``get_surface_initial_conditions(self, y : double[:]) -> None``\n        Responsible for populating the state vector ``y`` with the initial\n        state of each surface phase in this reactor. The length of ``y`` is the\n        total number of surface species in all surfaces.\n\n    ``update_connected(self, update_pressure : bool) -> None``\n        Responsible for storing properties which may be accessed by connected\n        reactors, and for updating the mass flow rates of connected flow devices.\n\n    ``eval(self, t : double, LHS : double[:], RHS : double[:]) -> None``\n        Responsible for calculating the time derivative of the state at time ``t``\n        based on the current state of the reactor. For each component ``i`` of the\n        state vector, the time derivative ``dy[i]/dt`` is calculated as\n        ``LHS[i] * dy[i]/dt = RHS[i]``. ``LHS`` and ``RHS`` are arrays of length\n        `n_vars`.\n\n    ``eval_walls(self, t : double) -> None``\n        Responsible for calculating the net rate of volume change `expansion_rate`\n        and the net rate of heat transfer `heat_rate` caused by walls connected\n        to this reactor.\n\n    ``eval_surfaces(LHS : double[:], RHS : double[:], sdot : double[:]) -> None``\n        Responsible for calculating the ``LHS`` and ``RHS`` (length: total number of\n        surface species in all surfaces) of the ODEs for surface species coverages,\n        and the molar production rate of bulk phase species ``sdot`` (length: number\n        of bulk phase species).\n\n    ``component_name(i : int) -> string``\n        Returns the name of the state vector component with index ``i``\n\n    ``component_index(name: string) -> int``\n        Returns the index of the state vector component named ``name``\n\n    ``species_index(name : string) -> int``\n        Returns the index of the species named ``name``, in either the bulk\n    ""    phase or a surface phase, relative to the start of the species terms in\n        the state vector.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ExtensibleReactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_7reactor_ExtensibleReactor, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_ExtensibleReactor, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_7reactor_17ExtensibleReactor_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ExtensibleReactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7cantera_7reactor_ReactorSurface(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7cantera_7reactor_ReactorSurface *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7cantera_7reactor_ReactorSurface *)o);
  p->_kinetics = ((struct __pyx_obj_7cantera_8kinetics_Kinetics *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cantera_7reactor_14ReactorSurface_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cantera_7reactor_ReactorSurface(PyObject *o) {
  struct __pyx_obj_7cantera_7reactor_ReactorSurface *p = (struct __pyx_obj_7cantera_7reactor_ReactorSurface *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7cantera_7reactor_ReactorSurface) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_7cantera_7reactor_14ReactorSurface_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_kinetics);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cantera_7reactor_ReactorSurface(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cantera_7reactor_ReactorSurface *p = (struct __pyx_obj_7cantera_7reactor_ReactorSurface *)o;
  if (p->_kinetics) {
    e = (*v)(((PyObject *)p->_kinetics), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cantera_7reactor_ReactorSurface(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cantera_7reactor_ReactorSurface *p = (struct __pyx_obj_7cantera_7reactor_ReactorSurface *)o;
  tmp = ((PyObject*)p->_kinetics);
  p->_kinetics = ((struct __pyx_obj_7cantera_8kinetics_Kinetics *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cantera_7reactor_14ReactorSurface_area(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_14ReactorSurface_4area_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_14ReactorSurface_area(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_14ReactorSurface_4area_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_14ReactorSurface_kinetics(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_14ReactorSurface_8kinetics_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_14ReactorSurface_kinetics(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_14ReactorSurface_8kinetics_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_14ReactorSurface_coverages(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_14ReactorSurface_9coverages_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_14ReactorSurface_coverages(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_14ReactorSurface_9coverages_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cantera_7reactor_ReactorSurface[] = {
  {"install", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_14ReactorSurface_7install, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_14ReactorSurface_6install},
  {"add_sensitivity_reaction", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_14ReactorSurface_9add_sensitivity_reaction, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_14ReactorSurface_8add_sensitivity_reaction},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_14ReactorSurface_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_14ReactorSurface_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_ReactorSurface[] = {
  {(char *)"area", __pyx_getprop_7cantera_7reactor_14ReactorSurface_area, __pyx_setprop_7cantera_7reactor_14ReactorSurface_area, (char *)PyDoc_STR(" Area on which reactions can occur [m^2] "), 0},
  {(char *)"kinetics", __pyx_getprop_7cantera_7reactor_14ReactorSurface_kinetics, __pyx_setprop_7cantera_7reactor_14ReactorSurface_kinetics, (char *)PyDoc_STR("\n        The `InterfaceKinetics` object used for calculating reaction rates on\n        this surface.\n        "), 0},
  {(char *)"coverages", __pyx_getprop_7cantera_7reactor_14ReactorSurface_coverages, __pyx_setprop_7cantera_7reactor_14ReactorSurface_coverages, (char *)PyDoc_STR("\n        The fraction of sites covered by each surface species.\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ReactorSurface_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7cantera_7reactor_ReactorSurface},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Represents a surface in contact with the contents of a reactor.\n\n    :param kin:\n        The `Kinetics` or `Interface` object representing reactions on this\n        surface.\n    :param r:\n        The `Reactor` into which this surface should be installed.\n    :param A:\n        The area of the reacting surface [m^2]\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ReactorSurface},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ReactorSurface},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_7reactor_ReactorSurface},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_ReactorSurface},
  {Py_tp_init, (void *)__pyx_pw_7cantera_7reactor_14ReactorSurface_5__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ReactorSurface},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ReactorSurface_spec = {
  "cantera.reactor.ReactorSurface",
  sizeof(struct __pyx_obj_7cantera_7reactor_ReactorSurface),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ReactorSurface_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ReactorSurface = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ReactorSurface", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ReactorSurface), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ReactorSurface, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    Represents a surface in contact with the contents of a reactor.\n\n    :param kin:\n        The `Kinetics` or `Interface` object representing reactions on this\n        surface.\n    :param r:\n        The `Reactor` into which this surface should be installed.\n    :param A:\n        The area of the reacting surface [m^2]\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ReactorSurface, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ReactorSurface, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_7reactor_ReactorSurface, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_ReactorSurface, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_7reactor_14ReactorSurface_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ReactorSurface, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7cantera_7reactor_WallBase(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cantera_7reactor_WallBase *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7cantera_7reactor_WallBase *)o);
  new((void*)&(p->_wall)) std::shared_ptr<Cantera::WallBase> ();
  p->_velocity_func = Py_None; Py_INCREF(Py_None);
  p->_heat_flux_func = Py_None; Py_INCREF(Py_None);
  p->_left_reactor = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)Py_None); Py_INCREF(Py_None);
  p->_right_reactor = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)Py_None); Py_INCREF(Py_None);
  p->name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cantera_7reactor_8WallBase_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cantera_7reactor_WallBase(PyObject *o) {
  struct __pyx_obj_7cantera_7reactor_WallBase *p = (struct __pyx_obj_7cantera_7reactor_WallBase *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7cantera_7reactor_WallBase) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_wall);
  Py_CLEAR(p->_velocity_func);
  Py_CLEAR(p->_heat_flux_func);
  Py_CLEAR(p->_left_reactor);
  Py_CLEAR(p->_right_reactor);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cantera_7reactor_WallBase(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cantera_7reactor_WallBase *p = (struct __pyx_obj_7cantera_7reactor_WallBase *)o;
  if (p->_velocity_func) {
    e = (*v)(p->_velocity_func, a); if (e) return e;
  }
  if (p->_heat_flux_func) {
    e = (*v)(p->_heat_flux_func, a); if (e) return e;
  }
  if (p->_left_reactor) {
    e = (*v)(((PyObject *)p->_left_reactor), a); if (e) return e;
  }
  if (p->_right_reactor) {
    e = (*v)(((PyObject *)p->_right_reactor), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cantera_7reactor_WallBase(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cantera_7reactor_WallBase *p = (struct __pyx_obj_7cantera_7reactor_WallBase *)o;
  tmp = ((PyObject*)p->_velocity_func);
  p->_velocity_func = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_heat_flux_func);
  p->_heat_flux_func = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_left_reactor);
  p->_left_reactor = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_right_reactor);
  p->_right_reactor = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cantera_7reactor_8WallBase_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_8WallBase_4type_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_8WallBase_area(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_8WallBase_4area_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_8WallBase_area(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_8WallBase_4area_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_8WallBase_expansion_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_8WallBase_14expansion_rate_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_8WallBase_heat_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_8WallBase_9heat_rate_1__get__(o);
}

static PyMethodDef __pyx_methods_7cantera_7reactor_WallBase[] = {
  {"_install", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_8WallBase_5_install, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_8WallBase_4_install},
  {"vdot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_8WallBase_7vdot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_8WallBase_6vdot},
  {"qdot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_8WallBase_9qdot, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_8WallBase_8qdot},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_8WallBase_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_8WallBase_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_WallBase[] = {
  {(char *)"type", __pyx_getprop_7cantera_7reactor_8WallBase_type, 0, (char *)PyDoc_STR("The type of the wall."), 0},
  {(char *)"area", __pyx_getprop_7cantera_7reactor_8WallBase_area, __pyx_setprop_7cantera_7reactor_8WallBase_area, (char *)PyDoc_STR(" The wall area [m^2]. "), 0},
  {(char *)"expansion_rate", __pyx_getprop_7cantera_7reactor_8WallBase_expansion_rate, 0, (char *)PyDoc_STR("\n        Get the rate of volumetric change [m^3/s] associated with the wall at the\n        current reactor network time. A positive value corresponds to the left-hand\n        reactor volume increasing, and the right-hand reactor volume decreasing.\n\n        .. versionadded:: 3.0\n        "), 0},
  {(char *)"heat_rate", __pyx_getprop_7cantera_7reactor_8WallBase_heat_rate, 0, (char *)PyDoc_STR("\n        Get the total heat flux [W] through the wall  at the current reactor network\n        time. A positive value corresponds to heat flowing from the left-hand reactor\n        to the right-hand one.\n\n        .. versionadded:: 3.0\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_WallBase_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7cantera_7reactor_WallBase},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Common base class for walls.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_WallBase},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_WallBase},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_7reactor_WallBase},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_WallBase},
  {Py_tp_init, (void *)__pyx_pw_7cantera_7reactor_8WallBase_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_WallBase},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_WallBase_spec = {
  "cantera.reactor.WallBase",
  sizeof(struct __pyx_obj_7cantera_7reactor_WallBase),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_WallBase_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_WallBase = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""WallBase", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_WallBase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_WallBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    Common base class for walls.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_WallBase, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_WallBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_7reactor_WallBase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_WallBase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_7reactor_8WallBase_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_WallBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_getprop_7cantera_7reactor_4Wall_expansion_rate_coeff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_4Wall_20expansion_rate_coeff_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_4Wall_expansion_rate_coeff(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_4Wall_20expansion_rate_coeff_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_4Wall_heat_transfer_coeff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_4Wall_19heat_transfer_coeff_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_4Wall_heat_transfer_coeff(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_4Wall_19heat_transfer_coeff_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_4Wall_emissivity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_4Wall_10emissivity_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_4Wall_emissivity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_4Wall_10emissivity_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_4Wall_velocity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_4Wall_8velocity_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_4Wall_velocity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_4Wall_8velocity_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_4Wall_heat_flux(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_4Wall_9heat_flux_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_4Wall_heat_flux(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_4Wall_9heat_flux_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cantera_7reactor_Wall[] = {
  {"set_velocity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_4Wall_1set_velocity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_4Wall_set_velocity},
  {"set_heat_flux", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_4Wall_3set_heat_flux, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_4Wall_2set_heat_flux},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_4Wall_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_4Wall_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_Wall[] = {
  {(char *)"expansion_rate_coeff", __pyx_getprop_7cantera_7reactor_4Wall_expansion_rate_coeff, __pyx_setprop_7cantera_7reactor_4Wall_expansion_rate_coeff, (char *)PyDoc_STR("\n        The coefficient *K* [m/s/Pa] that determines the velocity of the wall\n        as a function of the pressure difference between the adjacent reactors.\n        "), 0},
  {(char *)"heat_transfer_coeff", __pyx_getprop_7cantera_7reactor_4Wall_heat_transfer_coeff, __pyx_setprop_7cantera_7reactor_4Wall_heat_transfer_coeff, (char *)PyDoc_STR("the overall heat transfer coefficient [W/m^2/K]"), 0},
  {(char *)"emissivity", __pyx_getprop_7cantera_7reactor_4Wall_emissivity, __pyx_setprop_7cantera_7reactor_4Wall_emissivity, (char *)PyDoc_STR("The emissivity (nondimensional)"), 0},
  {(char *)"velocity", __pyx_getprop_7cantera_7reactor_4Wall_velocity, __pyx_setprop_7cantera_7reactor_4Wall_velocity, (char *)PyDoc_STR("\n        The wall velocity [m/s]. May be either set to a constant or an arbitrary\n        function of time. See `Func1`.\n\n        .. versionadded:: 3.0\n        "), 0},
  {(char *)"heat_flux", __pyx_getprop_7cantera_7reactor_4Wall_heat_flux, __pyx_setprop_7cantera_7reactor_4Wall_heat_flux, (char *)PyDoc_STR("\n        Heat flux [W/m^2] across the wall. May be either set to a constant or\n        an arbitrary function of time. See `Func1`.\n\n        .. versionadded:: 3.0\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_Wall_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A Wall separates two reactors, or a reactor and a reservoir. A wall has a\n    finite area, may conduct or radiate heat between the two reactors on either\n    side, and may move like a piston.\n\n    Walls are stateless objects in Cantera, meaning that no differential\n    equation is integrated to determine any wall property. Since it is the wall\n    (piston) velocity that enters the energy equation, this means that it is\n    the velocity, not the acceleration or displacement, that is specified.\n    The wall velocity is computed from\n\n    .. math:: v = K(P_{\\rm left} - P_{\\rm right}) + v_0(t),\n\n    where :math:`K` is a non-negative constant, and :math:`v_0(t)` is a\n    specified function of time. The velocity is positive if the wall is\n    moving to the right.\n\n    The heat flux through the wall is computed from\n\n    .. math::  q = U(T_{\\rm left} - T_{\\rm right}) + \\epsilon\\sigma (T_{\\rm left}^4 - T_{\\rm right}^4) + q_0(t),\n\n    where :math:`U` is the overall heat transfer coefficient for\n    conduction/convection, and :math:`\\epsilon` is the emissivity. The function\n    :math:`q_0(t)` is a specified function of time. The heat flux is positive\n    when heat flows from the reactor on the left to the reactor on the right.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_WallBase},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_WallBase},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_7reactor_Wall},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_Wall},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_WallBase},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_Wall_spec = {
  "cantera.reactor.Wall",
  sizeof(struct __pyx_obj_7cantera_7reactor_Wall),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_Wall_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_Wall = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""Wall", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_Wall), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_WallBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A Wall separates two reactors, or a reactor and a reservoir. A wall has a\n    finite area, may conduct or radiate heat between the two reactors on either\n    side, and may move like a piston.\n\n    Walls are stateless objects in Cantera, meaning that no differential\n    equation is integrated to determine any wall property. Since it is the wall\n    (piston) velocity that enters the energy equation, this means that it is\n    the velocity, not the acceleration or displacement, that is specified.\n    The wall velocity is computed from\n\n    .. math:: v = K(P_{\\rm left} - P_{\\rm right}) + v_0(t),\n\n    where :math:`K` is a non-negative constant, and :math:`v_0(t)` is a\n    specified function of time. The velocity is positive if the wall is\n    moving to the right.\n\n    The heat flux through the wall is computed from\n\n    .. math::  q = U(T_{\\rm left} - T_{\\rm right}) + \\epsilon\\sigma (T_{\\rm left}^4 - T_{\\rm right}^4) + q_0(t),\n\n    where :math:`U` is the overall heat transfer coefficient for\n    conduction/convection, and :math:`\\epsilon` is the emissivity. The function\n    :math:`q_0(t)` is a specified function of time. The heat flux is positive\n    when heat flows from the reactor on the left to the reactor on the right.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_WallBase, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_WallBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_7reactor_Wall, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_Wall, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_8WallBase_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_WallBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7cantera_7reactor_FlowDevice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7cantera_7reactor_FlowDevice *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7cantera_7reactor_FlowDevice *)o);
  new((void*)&(p->_dev)) std::shared_ptr<Cantera::FlowDevice> ();
  p->_rate_func = ((struct __pyx_obj_7cantera_5func1_Func1 *)Py_None); Py_INCREF(Py_None);
  p->_time_func = ((struct __pyx_obj_7cantera_5func1_Func1 *)Py_None); Py_INCREF(Py_None);
  p->name = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_upstream = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)Py_None); Py_INCREF(Py_None);
  p->_downstream = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7cantera_7reactor_10FlowDevice_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7cantera_7reactor_FlowDevice(PyObject *o) {
  struct __pyx_obj_7cantera_7reactor_FlowDevice *p = (struct __pyx_obj_7cantera_7reactor_FlowDevice *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7cantera_7reactor_FlowDevice) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_dev);
  Py_CLEAR(p->_rate_func);
  Py_CLEAR(p->_time_func);
  Py_CLEAR(p->name);
  Py_CLEAR(p->_upstream);
  Py_CLEAR(p->_downstream);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cantera_7reactor_FlowDevice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cantera_7reactor_FlowDevice *p = (struct __pyx_obj_7cantera_7reactor_FlowDevice *)o;
  if (p->_rate_func) {
    e = (*v)(((PyObject *)p->_rate_func), a); if (e) return e;
  }
  if (p->_time_func) {
    e = (*v)(((PyObject *)p->_time_func), a); if (e) return e;
  }
  if (p->_upstream) {
    e = (*v)(((PyObject *)p->_upstream), a); if (e) return e;
  }
  if (p->_downstream) {
    e = (*v)(((PyObject *)p->_downstream), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cantera_7reactor_FlowDevice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cantera_7reactor_FlowDevice *p = (struct __pyx_obj_7cantera_7reactor_FlowDevice *)o;
  tmp = ((PyObject*)p->_rate_func);
  p->_rate_func = ((struct __pyx_obj_7cantera_5func1_Func1 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_time_func);
  p->_time_func = ((struct __pyx_obj_7cantera_5func1_Func1 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_upstream);
  p->_upstream = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_downstream);
  p->_downstream = ((struct __pyx_obj_7cantera_7reactor_ReactorBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cantera_7reactor_10FlowDevice_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10FlowDevice_4type_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_10FlowDevice_mass_flow_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10FlowDevice_14mass_flow_rate_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_10FlowDevice_pressure_function(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10FlowDevice_17pressure_function_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10FlowDevice_pressure_function(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10FlowDevice_17pressure_function_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10FlowDevice_time_function(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10FlowDevice_13time_function_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10FlowDevice_time_function(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10FlowDevice_13time_function_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cantera_7reactor_FlowDevice[] = {
  {"_install", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10FlowDevice_5_install, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10FlowDevice_4_install},
  {"set_pressure_function", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10FlowDevice_7set_pressure_function, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10FlowDevice_6set_pressure_function},
  {"set_time_function", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10FlowDevice_9set_time_function, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10FlowDevice_8set_time_function},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10FlowDevice_11__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10FlowDevice_13__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_FlowDevice[] = {
  {(char *)"type", __pyx_getprop_7cantera_7reactor_10FlowDevice_type, 0, (char *)PyDoc_STR("The type of the flow device."), 0},
  {(char *)"mass_flow_rate", __pyx_getprop_7cantera_7reactor_10FlowDevice_mass_flow_rate, 0, (char *)PyDoc_STR("\n        Get the mass flow rate [kg/s] through this device at the current reactor\n        network time.\n        "), 0},
  {(char *)"pressure_function", __pyx_getprop_7cantera_7reactor_10FlowDevice_pressure_function, __pyx_setprop_7cantera_7reactor_10FlowDevice_pressure_function, (char *)PyDoc_STR("\n        The relationship between mass flow rate and the pressure drop across a flow\n        device. The mass flow rate [kg/s] is calculated given the pressure drop [Pa] and\n        a coefficient set by a flow device specific function. Unless a user-defined\n        pressure function is provided, the function returns the pressure difference\n        across the device. The calculation of mass flow rate depends on the flow device.\n\n        >>> f = FlowDevice(res1, reactor1)\n        >>> f.pressure_function = lambda dP: dP**2\n\n        where `FlowDevice` is either a `Valve` or `PressureController` object.\n\n        .. versionadded:: 3.0\n        "), 0},
  {(char *)"time_function", __pyx_getprop_7cantera_7reactor_10FlowDevice_time_function, __pyx_setprop_7cantera_7reactor_10FlowDevice_time_function, (char *)PyDoc_STR("\n        The time dependence of a flow device. The mass flow rate [kg/s] is calculated\n        for a Flow device, and multiplied by a function of time, which returns 1.0\n        unless a user-defined function is provided. The calculation of mass flow rate\n        depends on the flow device.\n\n        >>> f = FlowDevice(res1, reactor1)\n        >>> f.time_function = lambda t: exp(-10 * (t - 0.5)**2)\n\n        where `FlowDevice` is either a `Valve` or `MassFlowController` object.\n\n        .. versionadded:: 3.0\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_FlowDevice_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7cantera_7reactor_FlowDevice},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Base class for devices that allow flow between reactors.\n\n    FlowDevice objects are assumed to be adiabatic, non-reactive, and have\n    negligible internal volume, so that they are internally always in\n    steady-state even if the upstream and downstream reactors are not. The\n    fluid enthalpy, chemical composition, and mass flow rate are constant\n    across a FlowDevice, and the pressure difference equals the difference in\n    pressure between the upstream and downstream reactors.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_FlowDevice},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_FlowDevice},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_7reactor_FlowDevice},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_FlowDevice},
  {Py_tp_init, (void *)__pyx_pw_7cantera_7reactor_10FlowDevice_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_FlowDevice},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_FlowDevice_spec = {
  "cantera.reactor.FlowDevice",
  sizeof(struct __pyx_obj_7cantera_7reactor_FlowDevice),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_FlowDevice_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_FlowDevice = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""FlowDevice", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_FlowDevice), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_FlowDevice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    Base class for devices that allow flow between reactors.\n\n    FlowDevice objects are assumed to be adiabatic, non-reactive, and have\n    negligible internal volume, so that they are internally always in\n    steady-state even if the upstream and downstream reactors are not. The\n    fluid enthalpy, chemical composition, and mass flow rate are constant\n    across a FlowDevice, and the pressure difference equals the difference in\n    pressure between the upstream and downstream reactors.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_FlowDevice, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_FlowDevice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_7reactor_FlowDevice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_FlowDevice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_7reactor_10FlowDevice_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_FlowDevice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_getprop_7cantera_7reactor_18MassFlowController_mass_flow_coeff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_18MassFlowController_15mass_flow_coeff_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_18MassFlowController_mass_flow_coeff(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_18MassFlowController_15mass_flow_coeff_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_18MassFlowController_mass_flow_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_18MassFlowController_14mass_flow_rate_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_18MassFlowController_mass_flow_rate(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_18MassFlowController_14mass_flow_rate_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cantera_7reactor_MassFlowController[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_18MassFlowController_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_18MassFlowController_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_MassFlowController[] = {
  {(char *)"mass_flow_coeff", __pyx_getprop_7cantera_7reactor_18MassFlowController_mass_flow_coeff, __pyx_setprop_7cantera_7reactor_18MassFlowController_mass_flow_coeff, (char *)PyDoc_STR("Set the mass flow rate [kg/s] through the mass flow controller\n        as a constant, which may be modified by a function of time, see\n        `time_function`.\n\n        >>> mfc = MassFlowController(res1, reactor1)\n        >>> mfc.mass_flow_coeff = 1e-4  # Set the flow rate to a constant\n        >>> mfc.mass_flow_coeff  # Get the flow rate value\n        "), 0},
  {(char *)"mass_flow_rate", __pyx_getprop_7cantera_7reactor_18MassFlowController_mass_flow_rate, __pyx_setprop_7cantera_7reactor_18MassFlowController_mass_flow_rate, (char *)PyDoc_STR("\n        Set the mass flow rate [kg/s] through this controller to be either\n        a constant or an arbitrary function of time. See `Func1`, or get its\n        current value.\n\n        Note that depending on the argument type, this method either changes\n        the property `mass_flow_coeff` or updates the `time_function` property.\n\n        >>> mfc.mass_flow_rate = 0.3\n        >>> mfc.mass_flow_rate = lambda t: 2.5 * exp(-10 * (t - 0.5)**2)\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_MassFlowController_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A mass flow controller maintains a specified mass\n    flow rate independent of upstream and downstream conditions. The equation\n    used to compute the mass flow rate is\n\n    .. math:: \\dot m = \\max(\\dot m_0*g(t), 0.),\n\n    where :math:`\\dot m_0` is a constant value and :math:`g(t)` is a function of\n    time. Both :math:`\\dot m_0` and :math:`g(t)` can be set individually by\n    properties `mass_flow_coeff` and `time_function`, respectively. The property\n    `mass_flow_rate` combines the former into a single interface. Note that if\n    :math:`\\dot m_0*g(t) < 0`, the mass flow rate will be set to zero, since\n    reversal of the flow direction is not allowed.\n\n    Unlike a real mass flow controller, a MassFlowController object will\n    maintain the flow even if the downstream pressure is greater than the\n    upstream pressure. This allows simple implementation of loops, in which\n    exhaust gas from a reactor is fed back into it through an inlet. But note\n    that this capability should be used with caution, since no account is\n    taken of the work required to do this.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_FlowDevice},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_FlowDevice},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_7reactor_MassFlowController},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_MassFlowController},
  {Py_tp_init, (void *)__pyx_pw_7cantera_7reactor_18MassFlowController_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_FlowDevice},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_MassFlowController_spec = {
  "cantera.reactor.MassFlowController",
  sizeof(struct __pyx_obj_7cantera_7reactor_MassFlowController),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_MassFlowController_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_MassFlowController = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""MassFlowController", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_MassFlowController), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_FlowDevice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A mass flow controller maintains a specified mass\n    flow rate independent of upstream and downstream conditions. The equation\n    used to compute the mass flow rate is\n\n    .. math:: \\dot m = \\max(\\dot m_0*g(t), 0.),\n\n    where :math:`\\dot m_0` is a constant value and :math:`g(t)` is a function of\n    time. Both :math:`\\dot m_0` and :math:`g(t)` can be set individually by\n    properties `mass_flow_coeff` and `time_function`, respectively. The property\n    `mass_flow_rate` combines the former into a single interface. Note that if\n    :math:`\\dot m_0*g(t) < 0`, the mass flow rate will be set to zero, since\n    reversal of the flow direction is not allowed.\n\n    Unlike a real mass flow controller, a MassFlowController object will\n    maintain the flow even if the downstream pressure is greater than the\n    upstream pressure. This allows simple implementation of loops, in which\n    exhaust gas from a reactor is fed back into it through an inlet. But note\n    that this capability should be used with caution, since no account is\n    taken of the work required to do this.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_FlowDevice, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_FlowDevice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_7reactor_MassFlowController, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_MassFlowController, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_7reactor_18MassFlowController_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_FlowDevice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_getprop_7cantera_7reactor_5Valve_valve_coeff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_5Valve_11valve_coeff_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_5Valve_valve_coeff(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_5Valve_11valve_coeff_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cantera_7reactor_Valve[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_5Valve_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_5Valve_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_Valve[] = {
  {(char *)"valve_coeff", __pyx_getprop_7cantera_7reactor_5Valve_valve_coeff, __pyx_setprop_7cantera_7reactor_5Valve_valve_coeff, (char *)PyDoc_STR("Set valve coefficient, that is, the proportionality constant between mass\n        flow rate and pressure drop [kg/s/Pa].\n\n        >>> v = Valve(res1, reactor1)\n        >>> v.valve_coeff = 1e-4  # Set the value of K to a constant\n        >>> v.valve_coeff  # Get the value of K\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_Valve_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    In Cantera, a `Valve` is a flow device with mass flow rate that is a\n    function of the pressure drop across it. The default behavior is linear:\n\n    .. math:: \\dot m = K_v*(P_1 - P_2)\n\n    where :math:`K_v` is a constant set by the `set_valve_coeff` method.\n    Note that :math:`P_1` must be greater than :math:`P_2`; otherwise,\n    :math:`\\dot m = 0`. However, an arbitrary function can also be specified,\n    such that\n\n    .. math:: \\dot m = K_v*f(P_1 - P_2)\n\n    where :math:`f` is the arbitrary function that multiplies :math:`K_v` given\n    a single argument, the pressure differential. Further, a valve opening function\n    :math:`g` may be specified using the `time_function` property, such that\n\n    .. math:: \\dot m = K_v*g(t)*f(P_1 - P_2)\n\n    See the documentation for the `valve_coeff` property as well as the\n    `pressure_function` and `time_function` properties for examples. Note that\n    it is never possible for the flow to reverse and go from the downstream to the\n    upstream reactor/reservoir through a line containing a `Valve` object.\n\n    `Valve` objects are often used between an upstream reactor and a\n    downstream reactor or reservoir to maintain them both at nearly the same\n    pressure. By setting the constant :math:`K_v` to a sufficiently large\n    value, very small pressure differences will result in flow between the\n    reactors that counteracts the pressure difference.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_FlowDevice},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_FlowDevice},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_7reactor_Valve},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_Valve},
  {Py_tp_init, (void *)__pyx_pw_7cantera_7reactor_5Valve_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_FlowDevice},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_Valve_spec = {
  "cantera.reactor.Valve",
  sizeof(struct __pyx_obj_7cantera_7reactor_Valve),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_Valve_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_Valve = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""Valve", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_Valve), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_FlowDevice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    In Cantera, a `Valve` is a flow device with mass flow rate that is a\n    function of the pressure drop across it. The default behavior is linear:\n\n    .. math:: \\dot m = K_v*(P_1 - P_2)\n\n    where :math:`K_v` is a constant set by the `set_valve_coeff` method.\n    Note that :math:`P_1` must be greater than :math:`P_2`; otherwise,\n    :math:`\\dot m = 0`. However, an arbitrary function can also be specified,\n    such that\n\n    .. math:: \\dot m = K_v*f(P_1 - P_2)\n\n    where :math:`f` is the arbitrary function that multiplies :math:`K_v` given\n    a single argument, the pressure differential. Further, a valve opening function\n    :math:`g` may be specified using the `time_function` property, such that\n\n    .. math:: \\dot m = K_v*g(t)*f(P_1 - P_2)\n\n    See the documentation for the `valve_coeff` property as well as the\n    `pressure_function` and `time_function` properties for examples. Note that\n    it is never possible for the flow to reverse and go from the downstream to the\n    upstream reactor/reservoir through a line containing a `Valve` object.\n\n    `Valve` objects are often used between an upstream reactor and a\n    downstream reactor or reservoir to maintain them both at nearly the same\n    pressure. By setting the constant :math:`K_v` to a sufficiently large\n    value, very small pressure differences will result in flow between the\n    reactors that counteracts the pressure difference.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_FlowDevice, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_FlowDevice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_7reactor_Valve, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_Valve, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_7reactor_5Valve_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_FlowDevice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_getprop_7cantera_7reactor_18PressureController_pressure_coeff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_18PressureController_14pressure_coeff_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_18PressureController_pressure_coeff(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_18PressureController_14pressure_coeff_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_18PressureController_primary(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_18PressureController_7primary_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_18PressureController_primary(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_18PressureController_7primary_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cantera_7reactor_PressureController[] = {
  {"set_master", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_18PressureController_3set_master, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_18PressureController_2set_master},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_18PressureController_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_18PressureController_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_PressureController[] = {
  {(char *)"pressure_coeff", __pyx_getprop_7cantera_7reactor_18PressureController_pressure_coeff, __pyx_setprop_7cantera_7reactor_18PressureController_pressure_coeff, (char *)PyDoc_STR("\n        Get/set the proportionality constant :math:`K_v` [kg/s/Pa] between the\n        pressure drop and the mass flow rate.\n        "), 0},
  {(char *)"primary", __pyx_getprop_7cantera_7reactor_18PressureController_primary, __pyx_setprop_7cantera_7reactor_18PressureController_primary, (char *)PyDoc_STR("\n        Primary `FlowDevice` used to compute this device's mass flow rate.\n\n        .. versionadded:: 3.0\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_PressureController_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A PressureController is designed to be used in conjunction with another\n    primary flow controller, typically a `MassFlowController`. The primary\n    flow controller is installed on the inlet of the reactor, and the\n    corresponding `PressureController` is installed on the outlet of the\n    reactor. The `PressureController` mass flow rate is equal to the primary\n    mass flow rate, plus a small correction dependent on the pressure\n    difference:\n\n    .. math:: \\dot m = \\dot m_{\\rm primary} + K_v(P_1 - P_2).\n\n    As an alternative, an arbitrary function of pressure differential can be\n    specified using the `pressure_function` property, such that\n\n    .. math:: \\dot m = \\dot m_{\\rm primary} + K_v*f(P_1 - P_2)\n\n    where :math:`f` is the arbitrary function of a single argument.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_FlowDevice},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_FlowDevice},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_7reactor_PressureController},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_PressureController},
  {Py_tp_init, (void *)__pyx_pw_7cantera_7reactor_18PressureController_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_FlowDevice},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_PressureController_spec = {
  "cantera.reactor.PressureController",
  sizeof(struct __pyx_obj_7cantera_7reactor_PressureController),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_PressureController_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_PressureController = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""PressureController", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_PressureController), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_FlowDevice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A PressureController is designed to be used in conjunction with another\n    primary flow controller, typically a `MassFlowController`. The primary\n    flow controller is installed on the inlet of the reactor, and the\n    corresponding `PressureController` is installed on the outlet of the\n    reactor. The `PressureController` mass flow rate is equal to the primary\n    mass flow rate, plus a small correction dependent on the pressure\n    difference:\n\n    .. math:: \\dot m = \\dot m_{\\rm primary} + K_v(P_1 - P_2).\n\n    As an alternative, an arbitrary function of pressure differential can be\n    specified using the `pressure_function` property, such that\n\n    .. math:: \\dot m = \\dot m_{\\rm primary} + K_v*f(P_1 - P_2)\n\n    where :math:`f` is the arbitrary function of a single argument.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_FlowDevice, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_FlowDevice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_7reactor_PressureController, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_PressureController, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_7reactor_18PressureController_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_FlowDevice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_7cantera_7reactor_ReactorNet(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7cantera_7reactor_ReactorNet *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_7cantera_7reactor_ReactorNet *)o);
  new((void*)&(p->net)) Cantera::ReactorNet();
  p->_reactors = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_7cantera_7reactor_ReactorNet(PyObject *o) {
  struct __pyx_obj_7cantera_7reactor_ReactorNet *p = (struct __pyx_obj_7cantera_7reactor_ReactorNet *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_7cantera_7reactor_ReactorNet) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->net);
  Py_CLEAR(p->_reactors);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7cantera_7reactor_ReactorNet(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7cantera_7reactor_ReactorNet *p = (struct __pyx_obj_7cantera_7reactor_ReactorNet *)o;
  if (p->_reactors) {
    e = (*v)(p->_reactors, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7cantera_7reactor_ReactorNet(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7cantera_7reactor_ReactorNet *p = (struct __pyx_obj_7cantera_7reactor_ReactorNet *)o;
  tmp = ((PyObject*)p->_reactors);
  p->_reactors = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_4time_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_distance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_8distance_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_initial_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_12initial_time_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_initial_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_12initial_time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_max_time_step(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_13max_time_step_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_max_time_step(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_13max_time_step_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_max_err_test_fails(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_18max_err_test_fails_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_max_nonlinear_iterations(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_max_nonlinear_iterations(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_24max_nonlinear_iterations_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_max_nonlinear_convergence_failures(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_max_nonlinear_convergence_failures(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_34max_nonlinear_convergence_failures_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_include_algebraic_in_error_test(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_include_algebraic_in_error_test(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_31include_algebraic_in_error_test_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_max_order(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_9max_order_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_max_order(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_9max_order_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_max_steps(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_9max_steps_3__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_max_steps(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_9max_steps_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_rtol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_4rtol_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_rtol(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_4rtol_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_atol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_4atol_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_atol(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_4atol_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_rtol_sensitivity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_16rtol_sensitivity_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_rtol_sensitivity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_16rtol_sensitivity_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_atol_sensitivity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_16atol_sensitivity_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_atol_sensitivity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_16atol_sensitivity_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_verbose(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_7verbose_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_verbose(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_7verbose_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_n_sensitivity_params(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_20n_sensitivity_params_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_n_vars(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_6n_vars_1__get__(o);
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_advance_limits(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_14advance_limits_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_advance_limits(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_14advance_limits_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_preconditioner(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_14preconditioner_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_linear_solver_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_18linear_solver_type_3__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_linear_solver_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_18linear_solver_type_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7cantera_7reactor_10ReactorNet_solver_stats(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7cantera_7reactor_10ReactorNet_12solver_stats_1__get__(o);
}

static int __pyx_setprop_7cantera_7reactor_10ReactorNet_derivative_settings(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7cantera_7reactor_10ReactorNet_19derivative_settings_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7cantera_7reactor_ReactorNet[] = {
  {"add_reactor", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_3add_reactor, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_2add_reactor},
  {"advance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_5advance, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_4advance},
  {"step", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_7step, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_6step},
  {"initialize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_9initialize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_8initialize},
  {"reinitialize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_11reinitialize, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_10reinitialize},
  {"set_initial_time", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_13set_initial_time, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_12set_initial_time},
  {"global_component_index", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_15global_component_index, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_14global_component_index},
  {"component_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_17component_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_16component_name},
  {"sensitivity", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_19sensitivity, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_18sensitivity},
  {"sensitivities", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_21sensitivities, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_20sensitivities},
  {"sensitivity_parameter_name", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_23sensitivity_parameter_name, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_22sensitivity_parameter_name},
  {"get_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_25get_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_24get_state},
  {"get_derivative", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_27get_derivative, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_26get_derivative},
  {"advance_to_steady_state", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_29advance_to_steady_state, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_7cantera_7reactor_10ReactorNet_28advance_to_steady_state},
  {"__reduce__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_31__reduce__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__copy__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7cantera_7reactor_10ReactorNet_33__copy__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7cantera_7reactor_ReactorNet[] = {
  {(char *)"time", __pyx_getprop_7cantera_7reactor_10ReactorNet_time, 0, (char *)PyDoc_STR("\n        The current time [s], for reactor networks that are solved in the time domain.\n        "), 0},
  {(char *)"distance", __pyx_getprop_7cantera_7reactor_10ReactorNet_distance, 0, (char *)PyDoc_STR("\n        The current distance[ m] along the length of the reactor network, for reactors\n        that are solved as a function of space.\n        "), 0},
  {(char *)"initial_time", __pyx_getprop_7cantera_7reactor_10ReactorNet_initial_time, __pyx_setprop_7cantera_7reactor_10ReactorNet_initial_time, (char *)PyDoc_STR("\n        The initial time of the integrator. When set, integration is restarted from this\n        time using the current state as the initial condition. Default: 0.0 s.\n\n        .. versionadded:: 3.0\n        "), 0},
  {(char *)"max_time_step", __pyx_getprop_7cantera_7reactor_10ReactorNet_max_time_step, __pyx_setprop_7cantera_7reactor_10ReactorNet_max_time_step, (char *)PyDoc_STR("\n        Get/set the maximum time step *t* [s] that the integrator is\n        allowed to use. The default value is set to zero, so that no time\n        step maximum is used.\n        "), 0},
  {(char *)"max_err_test_fails", 0, __pyx_setprop_7cantera_7reactor_10ReactorNet_max_err_test_fails, (char *)PyDoc_STR("\n        The maximum number of error test failures permitted by the CVODES integrator\n        in a single step. The default is 10.\n        "), 0},
  {(char *)"max_nonlinear_iterations", __pyx_getprop_7cantera_7reactor_10ReactorNet_max_nonlinear_iterations, __pyx_setprop_7cantera_7reactor_10ReactorNet_max_nonlinear_iterations, (char *)PyDoc_STR("\n        Get/Set the maximum number of nonlinear solver iterations permitted by the\n        SUNDIALS solver in one solve attempt. The default value is 4.\n        "), 0},
  {(char *)"max_nonlinear_convergence_failures", __pyx_getprop_7cantera_7reactor_10ReactorNet_max_nonlinear_convergence_failures, __pyx_setprop_7cantera_7reactor_10ReactorNet_max_nonlinear_convergence_failures, (char *)PyDoc_STR("\n        Get/Set the maximum number of nonlinear solver convergence failures permitted in\n        one step of the SUNDIALS integrator. The default value is 10.\n        "), 0},
  {(char *)"include_algebraic_in_error_test", __pyx_getprop_7cantera_7reactor_10ReactorNet_include_algebraic_in_error_test, __pyx_setprop_7cantera_7reactor_10ReactorNet_include_algebraic_in_error_test, (char *)PyDoc_STR("\n        Get/Set whether to include algebraic variables in the in the local error test.\n        Applicable only to DAE systems. The default is `True`.\n        "), 0},
  {(char *)"max_order", __pyx_getprop_7cantera_7reactor_10ReactorNet_max_order, __pyx_setprop_7cantera_7reactor_10ReactorNet_max_order, (char *)PyDoc_STR("\n        Get/Set the maximum order of the linear multistep method. The default value and\n        maximum is 5.\n        "), 0},
  {(char *)"max_steps", __pyx_getprop_7cantera_7reactor_10ReactorNet_max_steps, __pyx_setprop_7cantera_7reactor_10ReactorNet_max_steps, (char *)PyDoc_STR("\n        The maximum number of internal integration steps that CVODES\n        is allowed to take before reaching the next output point.\n        "), 0},
  {(char *)"rtol", __pyx_getprop_7cantera_7reactor_10ReactorNet_rtol, __pyx_setprop_7cantera_7reactor_10ReactorNet_rtol, (char *)PyDoc_STR("\n        The relative error tolerance used while integrating the reactor\n        equations.\n        "), 0},
  {(char *)"atol", __pyx_getprop_7cantera_7reactor_10ReactorNet_atol, __pyx_setprop_7cantera_7reactor_10ReactorNet_atol, (char *)PyDoc_STR("\n        The absolute error tolerance used while integrating the reactor\n        equations.\n        "), 0},
  {(char *)"rtol_sensitivity", __pyx_getprop_7cantera_7reactor_10ReactorNet_rtol_sensitivity, __pyx_setprop_7cantera_7reactor_10ReactorNet_rtol_sensitivity, (char *)PyDoc_STR("\n        The relative error tolerance for sensitivity analysis.\n        "), 0},
  {(char *)"atol_sensitivity", __pyx_getprop_7cantera_7reactor_10ReactorNet_atol_sensitivity, __pyx_setprop_7cantera_7reactor_10ReactorNet_atol_sensitivity, (char *)PyDoc_STR("\n        The absolute error tolerance for sensitivity analysis.\n        "), 0},
  {(char *)"verbose", __pyx_getprop_7cantera_7reactor_10ReactorNet_verbose, __pyx_setprop_7cantera_7reactor_10ReactorNet_verbose, (char *)PyDoc_STR("\n        If `True`, verbose debug information will be printed during\n        integration. The default is `False`.\n        "), 0},
  {(char *)"n_sensitivity_params", __pyx_getprop_7cantera_7reactor_10ReactorNet_n_sensitivity_params, 0, (char *)PyDoc_STR("\n        The number of registered sensitivity parameters.\n        "), 0},
  {(char *)"n_vars", __pyx_getprop_7cantera_7reactor_10ReactorNet_n_vars, 0, (char *)PyDoc_STR("\n        The number of state variables in the system. This is the sum of the\n        number of variables for each `Reactor` and `Wall` in the system.\n        Equal to:\n\n        `Reactor` and `IdealGasReactor`: `n_species` + 3 (mass, volume,\n        internal energy or temperature).\n\n        `ConstPressureReactor` and `IdealGasConstPressureReactor`:\n        `n_species` + 2 (mass, enthalpy or temperature).\n\n        `Wall`: number of surface species\n        "), 0},
  {(char *)"advance_limits", __pyx_getprop_7cantera_7reactor_10ReactorNet_advance_limits, __pyx_setprop_7cantera_7reactor_10ReactorNet_advance_limits, (char *)PyDoc_STR("\n        Get or set absolute limits for state changes during `ReactorNet.advance`\n        (positive values are considered; negative values disable a previously\n        set advance limit for a solution component). Note that limits are\n        disabled by default (with individual values set to -1.).\n        "), 0},
  {(char *)"preconditioner", 0, __pyx_setprop_7cantera_7reactor_10ReactorNet_preconditioner, (char *)PyDoc_STR("Preconditioner associated with integrator"), 0},
  {(char *)"linear_solver_type", __pyx_getprop_7cantera_7reactor_10ReactorNet_linear_solver_type, __pyx_setprop_7cantera_7reactor_10ReactorNet_linear_solver_type, (char *)PyDoc_STR("\n            The type of linear solver used in integration.\n\n            Options for this property include:\n\n              - `\"DENSE\"`\n              - `\"GMRES\"`\n              - `\"BAND\"`\n              - `\"DIAG\"`\n\n        "), 0},
  {(char *)"solver_stats", __pyx_getprop_7cantera_7reactor_10ReactorNet_solver_stats, 0, (char *)PyDoc_STR("ODE solver stats from integrator"), 0},
  {(char *)"derivative_settings", 0, __pyx_setprop_7cantera_7reactor_10ReactorNet_derivative_settings, (char *)PyDoc_STR("\n        Apply derivative settings to all reactors in the network.\n        See also `Kinetics.derivative_settings`.\n        "), 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ReactorNet_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_7cantera_7reactor_ReactorNet},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Networks of reactors. ReactorNet objects are used to simultaneously\n    advance the state of one or more coupled reactors.\n\n    Example:\n\n    >>> r1 = Reactor(gas1)\n    >>> r2 = Reactor(gas2)\n    >>> <... install walls, inlets, outlets, etc...>\n\n    >>> reactor_network = ReactorNet([r1, r2])\n    >>> reactor_network.advance(time)\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ReactorNet},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ReactorNet},
  {Py_tp_methods, (void *)__pyx_methods_7cantera_7reactor_ReactorNet},
  {Py_tp_getset, (void *)__pyx_getsets_7cantera_7reactor_ReactorNet},
  {Py_tp_init, (void *)__pyx_pw_7cantera_7reactor_10ReactorNet_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ReactorNet},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ReactorNet_spec = {
  "cantera.reactor.ReactorNet",
  sizeof(struct __pyx_obj_7cantera_7reactor_ReactorNet),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ReactorNet_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ReactorNet = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ReactorNet", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ReactorNet), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ReactorNet, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    Networks of reactors. ReactorNet objects are used to simultaneously\n    advance the state of one or more coupled reactors.\n\n    Example:\n\n    >>> r1 = Reactor(gas1)\n    >>> r2 = Reactor(gas2)\n    >>> <... install walls, inlets, outlets, etc...>\n\n    >>> reactor_network = ReactorNet([r1, r2])\n    >>> reactor_network.advance(time)\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ReactorNet, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ReactorNet, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7cantera_7reactor_ReactorNet, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7cantera_7reactor_ReactorNet, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_7cantera_7reactor_10ReactorNet_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ReactorNet, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_IdealGasMoleReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A constant volume, zero-dimensional reactor for ideal gas mixtures with a mole\n    based state vector\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_Reactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_Reactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_Reactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_IdealGasMoleReactor_spec = {
  "cantera.reactor.IdealGasMoleReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_IdealGasMoleReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_IdealGasMoleReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_IdealGasMoleReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""IdealGasMoleReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_IdealGasMoleReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_Reactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A constant volume, zero-dimensional reactor for ideal gas mixtures with a mole\n    based state vector\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_Reactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_Reactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_7Reactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_Reactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A homogeneous, constant pressure, zero-dimensional reactor for ideal gas\n    mixtures. The volume of the reactor changes as a function of time in order\n    to keep the pressure constant. This reactor also uses a mole based state vector.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_Reactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_Reactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_Reactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor_spec = {
  "cantera.reactor.IdealGasConstPressureMoleReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_IdealGasConstPressureMoleReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""IdealGasConstPressureMoleReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_IdealGasConstPressureMoleReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_Reactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A homogeneous, constant pressure, zero-dimensional reactor for ideal gas\n    mixtures. The volume of the reactor changes as a function of time in order\n    to keep the pressure constant. This reactor also uses a mole based state vector.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_Reactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_Reactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_7Reactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_Reactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `IdealGasReactor` class.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ExtensibleReactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor_spec = {
  "cantera.reactor.ExtensibleIdealGasReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ExtensibleIdealGasReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ExtensibleReactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `IdealGasReactor` class.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ExtensibleReactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_17ExtensibleReactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ExtensibleReactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `ConstPressureReactor` class.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ExtensibleReactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor_spec = {
  "cantera.reactor.ExtensibleConstPressureReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleConstPressureReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ExtensibleConstPressureReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleConstPressureReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ExtensibleReactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `ConstPressureReactor` class.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ExtensibleReactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_17ExtensibleReactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ExtensibleReactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `IdealGasConstPressureReactor` class.\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ExtensibleReactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor_spec = {
  "cantera.reactor.ExtensibleIdealGasConstPressureReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ExtensibleIdealGasConstPressureReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ExtensibleReactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `IdealGasConstPressureReactor` class.\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ExtensibleReactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_17ExtensibleReactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ExtensibleReactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ExtensibleMoleReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `MoleReactor` class.\n\n    .. versionadded:: 3.0\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ExtensibleReactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ExtensibleMoleReactor_spec = {
  "cantera.reactor.ExtensibleMoleReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleMoleReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ExtensibleMoleReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ExtensibleMoleReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ExtensibleMoleReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleMoleReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ExtensibleReactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `MoleReactor` class.\n\n    .. versionadded:: 3.0\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ExtensibleReactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_17ExtensibleReactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ExtensibleReactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `IdealGasMoleReactor` class.\n\n    .. versionadded:: 3.0\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ExtensibleReactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor_spec = {
  "cantera.reactor.ExtensibleIdealGasMoleReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasMoleReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ExtensibleIdealGasMoleReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasMoleReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ExtensibleReactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `IdealGasMoleReactor` class.\n\n    .. versionadded:: 3.0\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ExtensibleReactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_17ExtensibleReactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ExtensibleReactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `ConstPressureMoleReactor` class.\n\n    .. versionadded:: 3.0\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ExtensibleReactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor_spec = {
  "cantera.reactor.ExtensibleConstPressureMoleReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleConstPressureMoleReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ExtensibleConstPressureMoleReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleConstPressureMoleReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ExtensibleReactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `ConstPressureMoleReactor` class.\n\n    .. versionadded:: 3.0\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ExtensibleReactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_17ExtensibleReactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ExtensibleReactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor_slots[] = {
  {Py_tp_doc, (void *)PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `IdealGasConstPressureMoleReactor` class.\n\n    .. versionadded:: 3.0\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_clear, (void *)__pyx_tp_clear_7cantera_7reactor_ExtensibleReactor},
  {Py_tp_new, (void *)__pyx_tp_new_7cantera_7reactor_ExtensibleReactor},
  {0, 0},
};
static PyType_Spec __pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor_spec = {
  "cantera.reactor.ExtensibleIdealGasConstPressureMoleReactor",
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor_slots,
};
#else

static PyTypeObject __pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "cantera.reactor.""ExtensibleIdealGasConstPressureMoleReactor", /*tp_name*/
  sizeof(struct __pyx_obj_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7cantera_7reactor_ExtensibleReactor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    A variant of `ExtensibleReactor` where the base behavior corresponds to the\n    `IdealGasConstPressureMoleReactor` class.\n\n    .. versionadded:: 3.0\n    "), /*tp_doc*/
  __pyx_tp_traverse_7cantera_7reactor_ExtensibleReactor, /*tp_traverse*/
  __pyx_tp_clear_7cantera_7reactor_ExtensibleReactor, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_pw_7cantera_7reactor_17ExtensibleReactor_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_7cantera_7reactor_ExtensibleReactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  static const char* internal_type_names[] = {
    "AdaptivePreconditioner",
    "Composition",
    "ConstPressureMoleReactor",
    "ConstPressureReactor",
    "CxxAdaptivePreconditioner",
    "CxxAnyMap",
    "CxxAnyValue",
    "CxxDelegator",
    "CxxDelegatorPtr",
    "CxxExtensionManager",
    "CxxExtensionManagerFactory",
    "CxxExternalHandle",
    "CxxFlowDevice",
    "CxxFlowReactor",
    "CxxFunc1",
    "CxxFunc1Py",
    "CxxIntegrator",
    "CxxInterfaceKinetics",
    "CxxKinetics",
    "CxxMassFlowController",
    "CxxPlasmaPhase",
    "CxxPreconditionerBase",
    "CxxPressureController",
    "CxxPythonExtensionManager",
    "CxxPythonHandle",
    "CxxReaction",
    "CxxReactor",
    "CxxReactorAccessor",
    "CxxReactorAccessorPtr",
    "CxxReactorBase",
    "CxxReactorNet",
    "CxxReactorSurface",
    "CxxSolution",
    "CxxSolutionArray",
    "CxxSparseMatrix",
    "CxxSpecies",
    "CxxSpeciesThermo",
    "CxxSurfPhase",
    "CxxThermoPhase",
    "CxxTransport",
    "CxxTransportData",
    "CxxUnitStack",
    "CxxUnitSystem",
    "CxxUnits",
    "CxxValve",
    "CxxWall",
    "CxxWallBase",
    "ExtensibleConstPressureMoleReactor",
    "ExtensibleConstPressureReactor",
    "ExtensibleIdealGasConstPressureMoleReactor",
    "ExtensibleIdealGasConstPressureReactor",
    "ExtensibleIdealGasMoleReactor",
    "ExtensibleIdealGasReactor",
    "ExtensibleMoleReactor",
    "ExtensibleReactor",
    "FlowDevice",
    "FlowReactor",
    "Func1",
    "IdealGasConstPressureMoleReactor",
    "IdealGasConstPressureReactor",
    "IdealGasMoleReactor",
    "IdealGasReactor",
    "InterfaceKinetics",
    "InterfacePhase",
    "Kinetics",
    "MassFlowController",
    "MoleReactor",
    "PreconditionerBase",
    "PressureController",
    "PyFuncInfo",
    "PyObject",
    "Reactor",
    "ReactorBase",
    "ReactorNet",
    "ReactorSurface",
    "Reservoir",
    "SolutionArrayBase",
    "Species",
    "ThermoBasis",
    "ThermoPhase",
    "Valve",
    "Wall",
    "WallBase",
    "_SolutionBase",
    "__pyx_ctuple_bool",
    "__pyx_ctuple_bool_struct",
    "__pyx_ctuple_double",
    "__pyx_ctuple_double_struct",
    "__pyx_ctuple_int",
    "__pyx_ctuple_int_struct",
    "__pyx_ctuple_long",
    "__pyx_ctuple_long_struct",
    "__pyx_opt_args_7cantera_12solutionbase__assign_Solution",
    "callback_wrapper",
    "cbool",
    "function",
    "kineticsMethod1d",
    "kineticsMethodSparse",
    "pair",
    "pybool",
    "shared_ptr",
    "size_array1",
    "size_array2",
    "size_array3",
    "stdmap",
    "string",
    "thermoMethod1d",
    "transportMethod1d",
    "transportMethod2d",
    "transportPolyMethod1i",
    "transportPolyMethod2i",
    "vector",
    "weak_ptr",
    0
  };
  const char** type_name = internal_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = PyObject_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;
    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1;
        PyErr_Clear();
        dict = PyObject_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }
    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            likely(PyString_Check(name)) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            likely(PyUnicode_Check(name)) &&
            likely(__Pyx_PyUnicode_GET_LENGTH(name)) &&
            __Pyx_PyUnicode_READ_CHAR(name, 0) == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}
static int __pyx_import_star(PyObject* m) {
    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;
    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;
    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;
bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}


#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_0___1, __pyx_k_0___1, sizeof(__pyx_k_0___1), 0, 1, 0, 0},
    {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
    {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
    {&__pyx_kp_u_Can_t_set_coverages_before_assig, __pyx_k_Can_t_set_coverages_before_assig, sizeof(__pyx_k_Can_t_set_coverages_before_assig), 0, 1, 0, 0},
    {&__pyx_n_s_CanteraError, __pyx_k_CanteraError, sizeof(__pyx_k_CanteraError), 0, 0, 1, 1},
    {&__pyx_n_s_ConstPressureMoleReactor, __pyx_k_ConstPressureMoleReactor, sizeof(__pyx_k_ConstPressureMoleReactor), 0, 0, 1, 1},
    {&__pyx_n_u_ConstPressureMoleReactor, __pyx_k_ConstPressureMoleReactor, sizeof(__pyx_k_ConstPressureMoleReactor), 0, 1, 0, 1},
    {&__pyx_n_s_ConstPressureReactor, __pyx_k_ConstPressureReactor, sizeof(__pyx_k_ConstPressureReactor), 0, 0, 1, 1},
    {&__pyx_n_u_ConstPressureReactor, __pyx_k_ConstPressureReactor, sizeof(__pyx_k_ConstPressureReactor), 0, 1, 0, 1},
    {&__pyx_n_s_DeprecationWarning, __pyx_k_DeprecationWarning, sizeof(__pyx_k_DeprecationWarning), 0, 0, 1, 1},
    {&__pyx_n_s_ExtensibleConstPressureMoleReact, __pyx_k_ExtensibleConstPressureMoleReact, sizeof(__pyx_k_ExtensibleConstPressureMoleReact), 0, 0, 1, 1},
    {&__pyx_n_u_ExtensibleConstPressureMoleReact, __pyx_k_ExtensibleConstPressureMoleReact, sizeof(__pyx_k_ExtensibleConstPressureMoleReact), 0, 1, 0, 1},
    {&__pyx_n_s_ExtensibleConstPressureReactor, __pyx_k_ExtensibleConstPressureReactor, sizeof(__pyx_k_ExtensibleConstPressureReactor), 0, 0, 1, 1},
    {&__pyx_n_u_ExtensibleConstPressureReactor, __pyx_k_ExtensibleConstPressureReactor, sizeof(__pyx_k_ExtensibleConstPressureReactor), 0, 1, 0, 1},
    {&__pyx_n_s_ExtensibleIdealGasConstPressureM, __pyx_k_ExtensibleIdealGasConstPressureM, sizeof(__pyx_k_ExtensibleIdealGasConstPressureM), 0, 0, 1, 1},
    {&__pyx_n_u_ExtensibleIdealGasConstPressureM, __pyx_k_ExtensibleIdealGasConstPressureM, sizeof(__pyx_k_ExtensibleIdealGasConstPressureM), 0, 1, 0, 1},
    {&__pyx_n_s_ExtensibleIdealGasConstPressureR, __pyx_k_ExtensibleIdealGasConstPressureR, sizeof(__pyx_k_ExtensibleIdealGasConstPressureR), 0, 0, 1, 1},
    {&__pyx_n_u_ExtensibleIdealGasConstPressureR, __pyx_k_ExtensibleIdealGasConstPressureR, sizeof(__pyx_k_ExtensibleIdealGasConstPressureR), 0, 1, 0, 1},
    {&__pyx_n_s_ExtensibleIdealGasMoleReactor, __pyx_k_ExtensibleIdealGasMoleReactor, sizeof(__pyx_k_ExtensibleIdealGasMoleReactor), 0, 0, 1, 1},
    {&__pyx_n_u_ExtensibleIdealGasMoleReactor, __pyx_k_ExtensibleIdealGasMoleReactor, sizeof(__pyx_k_ExtensibleIdealGasMoleReactor), 0, 1, 0, 1},
    {&__pyx_n_s_ExtensibleIdealGasReactor, __pyx_k_ExtensibleIdealGasReactor, sizeof(__pyx_k_ExtensibleIdealGasReactor), 0, 0, 1, 1},
    {&__pyx_n_u_ExtensibleIdealGasReactor, __pyx_k_ExtensibleIdealGasReactor, sizeof(__pyx_k_ExtensibleIdealGasReactor), 0, 1, 0, 1},
    {&__pyx_n_s_ExtensibleMoleReactor, __pyx_k_ExtensibleMoleReactor, sizeof(__pyx_k_ExtensibleMoleReactor), 0, 0, 1, 1},
    {&__pyx_n_u_ExtensibleMoleReactor, __pyx_k_ExtensibleMoleReactor, sizeof(__pyx_k_ExtensibleMoleReactor), 0, 1, 0, 1},
    {&__pyx_n_s_ExtensibleReactor, __pyx_k_ExtensibleReactor, sizeof(__pyx_k_ExtensibleReactor), 0, 0, 1, 1},
    {&__pyx_n_u_ExtensibleReactor, __pyx_k_ExtensibleReactor, sizeof(__pyx_k_ExtensibleReactor), 0, 1, 0, 1},
    {&__pyx_kp_u_ExtensibleReactor_qdot_To_be_rem, __pyx_k_ExtensibleReactor_qdot_To_be_rem, sizeof(__pyx_k_ExtensibleReactor_qdot_To_be_rem), 0, 1, 0, 0},
    {&__pyx_n_s_ExtensibleReactor_restore_surfac, __pyx_k_ExtensibleReactor_restore_surfac, sizeof(__pyx_k_ExtensibleReactor_restore_surfac), 0, 0, 1, 1},
    {&__pyx_n_s_ExtensibleReactor_restore_thermo, __pyx_k_ExtensibleReactor_restore_thermo, sizeof(__pyx_k_ExtensibleReactor_restore_thermo), 0, 0, 1, 1},
    {&__pyx_kp_u_ExtensibleReactor_vdot_To_be_rem, __pyx_k_ExtensibleReactor_vdot_To_be_rem, sizeof(__pyx_k_ExtensibleReactor_vdot_To_be_rem), 0, 1, 0, 0},
    {&__pyx_n_s_FlowDevice, __pyx_k_FlowDevice, sizeof(__pyx_k_FlowDevice), 0, 0, 1, 1},
    {&__pyx_n_s_FlowDevice___reduce_cython, __pyx_k_FlowDevice___reduce_cython, sizeof(__pyx_k_FlowDevice___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_FlowDevice___setstate_cython, __pyx_k_FlowDevice___setstate_cython, sizeof(__pyx_k_FlowDevice___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_FlowDevice__install, __pyx_k_FlowDevice__install, sizeof(__pyx_k_FlowDevice__install), 0, 0, 1, 1},
    {&__pyx_kp_u_FlowDevice_pressure_function___g, __pyx_k_FlowDevice_pressure_function___g, sizeof(__pyx_k_FlowDevice_pressure_function___g), 0, 1, 0, 0},
    {&__pyx_kp_u_FlowDevice_set_pressure_function, __pyx_k_FlowDevice_set_pressure_function, sizeof(__pyx_k_FlowDevice_set_pressure_function), 0, 1, 0, 0},
    {&__pyx_n_s_FlowDevice_set_pressure_function_2, __pyx_k_FlowDevice_set_pressure_function_2, sizeof(__pyx_k_FlowDevice_set_pressure_function_2), 0, 0, 1, 1},
    {&__pyx_kp_u_FlowDevice_set_pressure_function_3, __pyx_k_FlowDevice_set_pressure_function_3, sizeof(__pyx_k_FlowDevice_set_pressure_function_3), 0, 1, 0, 0},
    {&__pyx_n_s_FlowDevice_set_time_function, __pyx_k_FlowDevice_set_time_function, sizeof(__pyx_k_FlowDevice_set_time_function), 0, 0, 1, 1},
    {&__pyx_kp_u_FlowDevice_set_time_function_To, __pyx_k_FlowDevice_set_time_function_To, sizeof(__pyx_k_FlowDevice_set_time_function_To), 0, 1, 0, 0},
    {&__pyx_kp_u_FlowDevice_set_time_function_lin, __pyx_k_FlowDevice_set_time_function_lin, sizeof(__pyx_k_FlowDevice_set_time_function_lin), 0, 1, 0, 0},
    {&__pyx_kp_u_FlowDevice_time_function___get, __pyx_k_FlowDevice_time_function___get, sizeof(__pyx_k_FlowDevice_time_function___get), 0, 1, 0, 0},
    {&__pyx_n_s_FlowReactor, __pyx_k_FlowReactor, sizeof(__pyx_k_FlowReactor), 0, 0, 1, 1},
    {&__pyx_n_u_FlowReactor, __pyx_k_FlowReactor, sizeof(__pyx_k_FlowReactor), 0, 1, 0, 1},
    {&__pyx_n_s_IdealGasConstPressureMoleReactor, __pyx_k_IdealGasConstPressureMoleReactor, sizeof(__pyx_k_IdealGasConstPressureMoleReactor), 0, 0, 1, 1},
    {&__pyx_n_u_IdealGasConstPressureMoleReactor, __pyx_k_IdealGasConstPressureMoleReactor, sizeof(__pyx_k_IdealGasConstPressureMoleReactor), 0, 1, 0, 1},
    {&__pyx_n_s_IdealGasConstPressureReactor, __pyx_k_IdealGasConstPressureReactor, sizeof(__pyx_k_IdealGasConstPressureReactor), 0, 0, 1, 1},
    {&__pyx_n_u_IdealGasConstPressureReactor, __pyx_k_IdealGasConstPressureReactor, sizeof(__pyx_k_IdealGasConstPressureReactor), 0, 1, 0, 1},
    {&__pyx_n_s_IdealGasMoleReactor, __pyx_k_IdealGasMoleReactor, sizeof(__pyx_k_IdealGasMoleReactor), 0, 0, 1, 1},
    {&__pyx_n_u_IdealGasMoleReactor, __pyx_k_IdealGasMoleReactor, sizeof(__pyx_k_IdealGasMoleReactor), 0, 1, 0, 1},
    {&__pyx_n_s_IdealGasReactor, __pyx_k_IdealGasReactor, sizeof(__pyx_k_IdealGasReactor), 0, 0, 1, 1},
    {&__pyx_n_u_IdealGasReactor, __pyx_k_IdealGasReactor, sizeof(__pyx_k_IdealGasReactor), 0, 1, 0, 1},
    {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
    {&__pyx_kp_u_Incorrect_number_of_site_coverag, __pyx_k_Incorrect_number_of_site_coverag, sizeof(__pyx_k_Incorrect_number_of_site_coverag), 0, 1, 0, 0},
    {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
    {&__pyx_n_s_K, __pyx_k_K, sizeof(__pyx_k_K), 0, 0, 1, 1},
    {&__pyx_n_s_MassFlowController, __pyx_k_MassFlowController, sizeof(__pyx_k_MassFlowController), 0, 0, 1, 1},
    {&__pyx_n_u_MassFlowController, __pyx_k_MassFlowController, sizeof(__pyx_k_MassFlowController), 0, 1, 0, 1},
    {&__pyx_n_s_MassFlowController___reduce_cyth, __pyx_k_MassFlowController___reduce_cyth, sizeof(__pyx_k_MassFlowController___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_MassFlowController___setstate_cy, __pyx_k_MassFlowController___setstate_cy, sizeof(__pyx_k_MassFlowController___setstate_cy), 0, 0, 1, 1},
    {&__pyx_kp_u_Maximum_number_of_steps_reached, __pyx_k_Maximum_number_of_steps_reached, sizeof(__pyx_k_Maximum_number_of_steps_reached), 0, 1, 0, 0},
    {&__pyx_n_s_MoleReactor, __pyx_k_MoleReactor, sizeof(__pyx_k_MoleReactor), 0, 0, 1, 1},
    {&__pyx_n_u_MoleReactor, __pyx_k_MoleReactor, sizeof(__pyx_k_MoleReactor), 0, 1, 0, 1},
    {&__pyx_kp_u_No_kinetics_manager_present, __pyx_k_No_kinetics_manager_present, sizeof(__pyx_k_No_kinetics_manager_present), 0, 1, 0, 0},
    {&__pyx_kp_u_No_such_component_r, __pyx_k_No_such_component_r, sizeof(__pyx_k_No_such_component_r), 0, 1, 0, 0},
    {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
    {&__pyx_n_s_PressureController, __pyx_k_PressureController, sizeof(__pyx_k_PressureController), 0, 0, 1, 1},
    {&__pyx_n_u_PressureController, __pyx_k_PressureController, sizeof(__pyx_k_PressureController), 0, 1, 0, 1},
    {&__pyx_kp_u_PressureController_The_master_ke, __pyx_k_PressureController_The_master_ke, sizeof(__pyx_k_PressureController_The_master_ke), 0, 1, 0, 0},
    {&__pyx_n_s_PressureController___reduce_cyth, __pyx_k_PressureController___reduce_cyth, sizeof(__pyx_k_PressureController___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_PressureController___setstate_cy, __pyx_k_PressureController___setstate_cy, sizeof(__pyx_k_PressureController___setstate_cy), 0, 0, 1, 1},
    {&__pyx_kp_u_PressureController_primary, __pyx_k_PressureController_primary, sizeof(__pyx_k_PressureController_primary), 0, 1, 0, 0},
    {&__pyx_n_s_PressureController_set_master, __pyx_k_PressureController_set_master, sizeof(__pyx_k_PressureController_set_master), 0, 0, 1, 1},
    {&__pyx_kp_u_PressureController_set_master_To, __pyx_k_PressureController_set_master_To, sizeof(__pyx_k_PressureController_set_master_To), 0, 1, 0, 0},
    {&__pyx_n_s_Q, __pyx_k_Q, sizeof(__pyx_k_Q), 0, 0, 1, 1},
    {&__pyx_n_s_Reactor, __pyx_k_Reactor, sizeof(__pyx_k_Reactor), 0, 0, 1, 1},
    {&__pyx_n_u_Reactor, __pyx_k_Reactor, sizeof(__pyx_k_Reactor), 0, 1, 0, 1},
    {&__pyx_n_s_ReactorBase, __pyx_k_ReactorBase, sizeof(__pyx_k_ReactorBase), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorBase___copy, __pyx_k_ReactorBase___copy, sizeof(__pyx_k_ReactorBase___copy), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorBase___reduce, __pyx_k_ReactorBase___reduce, sizeof(__pyx_k_ReactorBase___reduce), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorBase__add_inlet, __pyx_k_ReactorBase__add_inlet, sizeof(__pyx_k_ReactorBase__add_inlet), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorBase__add_outlet, __pyx_k_ReactorBase__add_outlet, sizeof(__pyx_k_ReactorBase__add_outlet), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorBase__add_wall, __pyx_k_ReactorBase__add_wall, sizeof(__pyx_k_ReactorBase__add_wall), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorBase_insert, __pyx_k_ReactorBase_insert, sizeof(__pyx_k_ReactorBase_insert), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorBase_syncState, __pyx_k_ReactorBase_syncState, sizeof(__pyx_k_ReactorBase_syncState), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet, __pyx_k_ReactorNet, sizeof(__pyx_k_ReactorNet), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet___copy, __pyx_k_ReactorNet___copy, sizeof(__pyx_k_ReactorNet___copy), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet___reduce, __pyx_k_ReactorNet___reduce, sizeof(__pyx_k_ReactorNet___reduce), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet_add_reactor, __pyx_k_ReactorNet_add_reactor, sizeof(__pyx_k_ReactorNet_add_reactor), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet_advance, __pyx_k_ReactorNet_advance, sizeof(__pyx_k_ReactorNet_advance), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet_advance_to_steady_sta, __pyx_k_ReactorNet_advance_to_steady_sta, sizeof(__pyx_k_ReactorNet_advance_to_steady_sta), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet_component_name, __pyx_k_ReactorNet_component_name, sizeof(__pyx_k_ReactorNet_component_name), 0, 0, 1, 1},
    {&__pyx_kp_u_ReactorNet_empty_or_not_initiali, __pyx_k_ReactorNet_empty_or_not_initiali, sizeof(__pyx_k_ReactorNet_empty_or_not_initiali), 0, 1, 0, 0},
    {&__pyx_n_s_ReactorNet_get_derivative, __pyx_k_ReactorNet_get_derivative, sizeof(__pyx_k_ReactorNet_get_derivative), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet_get_state, __pyx_k_ReactorNet_get_state, sizeof(__pyx_k_ReactorNet_get_state), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet_global_component_inde, __pyx_k_ReactorNet_global_component_inde, sizeof(__pyx_k_ReactorNet_global_component_inde), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet_initialize, __pyx_k_ReactorNet_initialize, sizeof(__pyx_k_ReactorNet_initialize), 0, 0, 1, 1},
    {&__pyx_kp_u_ReactorNet_object_is_not_copyabl, __pyx_k_ReactorNet_object_is_not_copyabl, sizeof(__pyx_k_ReactorNet_object_is_not_copyabl), 0, 1, 0, 0},
    {&__pyx_kp_u_ReactorNet_object_is_not_picklab, __pyx_k_ReactorNet_object_is_not_picklab, sizeof(__pyx_k_ReactorNet_object_is_not_picklab), 0, 1, 0, 0},
    {&__pyx_n_s_ReactorNet_reinitialize, __pyx_k_ReactorNet_reinitialize, sizeof(__pyx_k_ReactorNet_reinitialize), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet_sensitivities, __pyx_k_ReactorNet_sensitivities, sizeof(__pyx_k_ReactorNet_sensitivities), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet_sensitivity, __pyx_k_ReactorNet_sensitivity, sizeof(__pyx_k_ReactorNet_sensitivity), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet_sensitivity_parameter, __pyx_k_ReactorNet_sensitivity_parameter, sizeof(__pyx_k_ReactorNet_sensitivity_parameter), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorNet_set_initial_time, __pyx_k_ReactorNet_set_initial_time, sizeof(__pyx_k_ReactorNet_set_initial_time), 0, 0, 1, 1},
    {&__pyx_kp_u_ReactorNet_set_initial_time_To_b, __pyx_k_ReactorNet_set_initial_time_To_b, sizeof(__pyx_k_ReactorNet_set_initial_time_To_b), 0, 1, 0, 0},
    {&__pyx_n_s_ReactorNet_step, __pyx_k_ReactorNet_step, sizeof(__pyx_k_ReactorNet_step), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorSurface, __pyx_k_ReactorSurface, sizeof(__pyx_k_ReactorSurface), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorSurface___reduce_cython, __pyx_k_ReactorSurface___reduce_cython, sizeof(__pyx_k_ReactorSurface___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorSurface___setstate_cython, __pyx_k_ReactorSurface___setstate_cython, sizeof(__pyx_k_ReactorSurface___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorSurface_add_sensitivity_r, __pyx_k_ReactorSurface_add_sensitivity_r, sizeof(__pyx_k_ReactorSurface_add_sensitivity_r), 0, 0, 1, 1},
    {&__pyx_n_s_ReactorSurface_install, __pyx_k_ReactorSurface_install, sizeof(__pyx_k_ReactorSurface_install), 0, 0, 1, 1},
    {&__pyx_kp_u_Reactor___init___line_174, __pyx_k_Reactor___init___line_174, sizeof(__pyx_k_Reactor___init___line_174), 0, 1, 0, 0},
    {&__pyx_n_s_Reactor_add_sensitivity_reaction, __pyx_k_Reactor_add_sensitivity_reaction, sizeof(__pyx_k_Reactor_add_sensitivity_reaction), 0, 0, 1, 1},
    {&__pyx_n_s_Reactor_add_sensitivity_species, __pyx_k_Reactor_add_sensitivity_species, sizeof(__pyx_k_Reactor_add_sensitivity_species), 0, 0, 1, 1},
    {&__pyx_n_s_Reactor_component_index, __pyx_k_Reactor_component_index, sizeof(__pyx_k_Reactor_component_index), 0, 0, 1, 1},
    {&__pyx_n_s_Reactor_component_name, __pyx_k_Reactor_component_name, sizeof(__pyx_k_Reactor_component_name), 0, 0, 1, 1},
    {&__pyx_kp_u_Reactor_empty_or_network_not_ini, __pyx_k_Reactor_empty_or_network_not_ini, sizeof(__pyx_k_Reactor_empty_or_network_not_ini), 0, 1, 0, 0},
    {&__pyx_n_s_Reactor_get_state, __pyx_k_Reactor_get_state, sizeof(__pyx_k_Reactor_get_state), 0, 0, 1, 1},
    {&__pyx_n_s_Reactor_insert, __pyx_k_Reactor_insert, sizeof(__pyx_k_Reactor_insert), 0, 0, 1, 1},
    {&__pyx_kp_u_Reactor_object_is_not_copyable, __pyx_k_Reactor_object_is_not_copyable, sizeof(__pyx_k_Reactor_object_is_not_copyable), 0, 1, 0, 0},
    {&__pyx_kp_u_Reactor_object_is_not_picklable, __pyx_k_Reactor_object_is_not_picklable, sizeof(__pyx_k_Reactor_object_is_not_picklable), 0, 1, 0, 0},
    {&__pyx_n_s_Reactor_set_advance_limit, __pyx_k_Reactor_set_advance_limit, sizeof(__pyx_k_Reactor_set_advance_limit), 0, 0, 1, 1},
    {&__pyx_n_s_Real, __pyx_k_Real, sizeof(__pyx_k_Real), 0, 0, 1, 1},
    {&__pyx_n_s_Reservoir, __pyx_k_Reservoir, sizeof(__pyx_k_Reservoir), 0, 0, 1, 1},
    {&__pyx_n_u_Reservoir, __pyx_k_Reservoir, sizeof(__pyx_k_Reservoir), 0, 1, 0, 1},
    {&__pyx_kp_u_Residual_threshold, __pyx_k_Residual_threshold, sizeof(__pyx_k_Residual_threshold), 0, 1, 0, 0},
    {&__pyx_kp_u_Set_the_relationship_between_ma, __pyx_k_Set_the_relationship_between_ma, sizeof(__pyx_k_Set_the_relationship_between_ma), 0, 1, 0, 0},
    {&__pyx_kp_u_Set_the_time_dependence_of_a_fl, __pyx_k_Set_the_time_dependence_of_a_fl, sizeof(__pyx_k_Set_the_time_dependence_of_a_fl), 0, 1, 0, 0},
    {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
    {&__pyx_kp_u_The_relationship_between_mass_f, __pyx_k_The_relationship_between_mass_f, sizeof(__pyx_k_The_relationship_between_mass_f), 0, 1, 0, 0},
    {&__pyx_kp_u_The_time_dependence_of_a_flow_d, __pyx_k_The_time_dependence_of_a_flow_d, sizeof(__pyx_k_The_time_dependence_of_a_flow_d), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s_U, __pyx_k_U, sizeof(__pyx_k_U), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_Valve, __pyx_k_Valve, sizeof(__pyx_k_Valve), 0, 0, 1, 1},
    {&__pyx_n_u_Valve, __pyx_k_Valve, sizeof(__pyx_k_Valve), 0, 1, 0, 1},
    {&__pyx_n_s_Valve___reduce_cython, __pyx_k_Valve___reduce_cython, sizeof(__pyx_k_Valve___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Valve___setstate_cython, __pyx_k_Valve___setstate_cython, sizeof(__pyx_k_Valve___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Wall, __pyx_k_Wall, sizeof(__pyx_k_Wall), 0, 0, 1, 1},
    {&__pyx_n_u_Wall, __pyx_k_Wall, sizeof(__pyx_k_Wall), 0, 1, 0, 1},
    {&__pyx_n_s_WallBase, __pyx_k_WallBase, sizeof(__pyx_k_WallBase), 0, 0, 1, 1},
    {&__pyx_n_s_WallBase___reduce_cython, __pyx_k_WallBase___reduce_cython, sizeof(__pyx_k_WallBase___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_WallBase___setstate_cython, __pyx_k_WallBase___setstate_cython, sizeof(__pyx_k_WallBase___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_WallBase__install, __pyx_k_WallBase__install, sizeof(__pyx_k_WallBase__install), 0, 0, 1, 1},
    {&__pyx_n_s_WallBase_qdot, __pyx_k_WallBase_qdot, sizeof(__pyx_k_WallBase_qdot), 0, 0, 1, 1},
    {&__pyx_n_s_WallBase_vdot, __pyx_k_WallBase_vdot, sizeof(__pyx_k_WallBase_vdot), 0, 0, 1, 1},
    {&__pyx_kp_u_Wall__0, __pyx_k_Wall__0, sizeof(__pyx_k_Wall__0), 0, 1, 0, 0},
    {&__pyx_n_s_Wall___reduce_cython, __pyx_k_Wall___reduce_cython, sizeof(__pyx_k_Wall___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Wall___setstate_cython, __pyx_k_Wall___setstate_cython, sizeof(__pyx_k_Wall___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_Wall_set_heat_flux, __pyx_k_Wall_set_heat_flux, sizeof(__pyx_k_Wall_set_heat_flux), 0, 0, 1, 1},
    {&__pyx_kp_u_Wall_set_heat_flux_To_be_removed, __pyx_k_Wall_set_heat_flux_To_be_removed, sizeof(__pyx_k_Wall_set_heat_flux_To_be_removed), 0, 1, 0, 0},
    {&__pyx_n_s_Wall_set_velocity, __pyx_k_Wall_set_velocity, sizeof(__pyx_k_Wall_set_velocity), 0, 0, 1, 1},
    {&__pyx_kp_u_Wall_set_velocity_To_be_removed, __pyx_k_Wall_set_velocity_To_be_removed, sizeof(__pyx_k_Wall_set_velocity_To_be_removed), 0, 1, 0, 0},
    {&__pyx_n_s_WeakrefProxy, __pyx_k_WeakrefProxy, sizeof(__pyx_k_WeakrefProxy), 0, 0, 1, 1},
    {&__pyx_n_s_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 0, 1, 1},
    {&__pyx_n_s__125, __pyx_k__125, sizeof(__pyx_k__125), 0, 0, 1, 1},
    {&__pyx_kp_u__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 0},
    {&__pyx_n_s__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 0, 1, 1},
    {&__pyx_kp_u__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 1, 0, 0},
    {&__pyx_n_s_add_inlet, __pyx_k_add_inlet, sizeof(__pyx_k_add_inlet), 0, 0, 1, 1},
    {&__pyx_n_s_add_outlet, __pyx_k_add_outlet, sizeof(__pyx_k_add_outlet), 0, 0, 1, 1},
    {&__pyx_n_s_add_reactor, __pyx_k_add_reactor, sizeof(__pyx_k_add_reactor), 0, 0, 1, 1},
    {&__pyx_n_s_add_sensitivity_reaction, __pyx_k_add_sensitivity_reaction, sizeof(__pyx_k_add_sensitivity_reaction), 0, 0, 1, 1},
    {&__pyx_n_s_add_sensitivity_species_enthalpy, __pyx_k_add_sensitivity_species_enthalpy, sizeof(__pyx_k_add_sensitivity_species_enthalpy), 0, 0, 1, 1},
    {&__pyx_n_s_add_wall, __pyx_k_add_wall, sizeof(__pyx_k_add_wall), 0, 0, 1, 1},
    {&__pyx_n_s_advance, __pyx_k_advance, sizeof(__pyx_k_advance), 0, 0, 1, 1},
    {&__pyx_n_s_advance_to_steady_state, __pyx_k_advance_to_steady_state, sizeof(__pyx_k_advance_to_steady_state), 0, 0, 1, 1},
    {&__pyx_n_s_apply_limit, __pyx_k_apply_limit, sizeof(__pyx_k_apply_limit), 0, 0, 1, 1},
    {&__pyx_n_s_area, __pyx_k_area, sizeof(__pyx_k_area), 0, 0, 1, 1},
    {&__pyx_kp_u_array_must_be_of_length_n_vars, __pyx_k_array_must_be_of_length_n_vars, sizeof(__pyx_k_array_must_be_of_length_n_vars), 0, 1, 0, 0},
    {&__pyx_n_s_ascontiguousarray, __pyx_k_ascontiguousarray, sizeof(__pyx_k_ascontiguousarray), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_atol, __pyx_k_atol, sizeof(__pyx_k_atol), 0, 0, 1, 1},
    {&__pyx_n_s_cantera_reactor, __pyx_k_cantera_reactor, sizeof(__pyx_k_cantera_reactor), 0, 0, 1, 1},
    {&__pyx_kp_s_cantera_reactor_pyx, __pyx_k_cantera_reactor_pyx, sizeof(__pyx_k_cantera_reactor_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
    {&__pyx_n_s_component, __pyx_k_component, sizeof(__pyx_k_component), 0, 0, 1, 1},
    {&__pyx_n_u_componentIndex, __pyx_k_componentIndex, sizeof(__pyx_k_componentIndex), 0, 1, 0, 1},
    {&__pyx_n_u_componentName, __pyx_k_componentName, sizeof(__pyx_k_componentName), 0, 1, 0, 1},
    {&__pyx_n_s_component_index, __pyx_k_component_index, sizeof(__pyx_k_component_index), 0, 0, 1, 1},
    {&__pyx_n_u_component_index, __pyx_k_component_index, sizeof(__pyx_k_component_index), 0, 1, 0, 1},
    {&__pyx_n_s_component_name, __pyx_k_component_name, sizeof(__pyx_k_component_name), 0, 0, 1, 1},
    {&__pyx_n_u_component_name, __pyx_k_component_name, sizeof(__pyx_k_component_name), 0, 1, 0, 1},
    {&__pyx_n_s_contents, __pyx_k_contents, sizeof(__pyx_k_contents), 0, 0, 1, 1},
    {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
    {&__pyx_n_s_coverages, __pyx_k_coverages, sizeof(__pyx_k_coverages), 0, 0, 1, 1},
    {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
    {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
    {&__pyx_n_s_defaultdict, __pyx_k_defaultdict, sizeof(__pyx_k_defaultdict), 0, 0, 1, 1},
    {&__pyx_n_s_defaultdict_2, __pyx_k_defaultdict_2, sizeof(__pyx_k_defaultdict_2), 0, 0, 1, 1},
    {&__pyx_n_s_delegatable_methods, __pyx_k_delegatable_methods, sizeof(__pyx_k_delegatable_methods), 0, 0, 1, 1},
    {&__pyx_n_s_density, __pyx_k_density, sizeof(__pyx_k_density), 0, 0, 1, 1},
    {&__pyx_n_s_density_mass, __pyx_k_density_mass, sizeof(__pyx_k_density_mass), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_dky, __pyx_k_dky, sizeof(__pyx_k_dky), 0, 0, 1, 1},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
    {&__pyx_n_s_downstream, __pyx_k_downstream, sizeof(__pyx_k_downstream), 0, 0, 1, 1},
    {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
    {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_energy, __pyx_k_energy, sizeof(__pyx_k_energy), 0, 0, 1, 1},
    {&__pyx_n_s_energy_enabled, __pyx_k_energy_enabled, sizeof(__pyx_k_energy_enabled), 0, 0, 1, 1},
    {&__pyx_kp_u_energy_must_be_either_on_or_off, __pyx_k_energy_must_be_either_on_or_off, sizeof(__pyx_k_energy_must_be_either_on_or_off), 0, 1, 0, 0},
    {&__pyx_n_u_eval, __pyx_k_eval, sizeof(__pyx_k_eval), 0, 1, 0, 1},
    {&__pyx_n_u_evalSurfaces, __pyx_k_evalSurfaces, sizeof(__pyx_k_evalSurfaces), 0, 1, 0, 1},
    {&__pyx_n_u_evalWalls, __pyx_k_evalWalls, sizeof(__pyx_k_evalWalls), 0, 1, 0, 1},
    {&__pyx_n_u_eval_surfaces, __pyx_k_eval_surfaces, sizeof(__pyx_k_eval_surfaces), 0, 1, 0, 1},
    {&__pyx_n_u_eval_walls, __pyx_k_eval_walls, sizeof(__pyx_k_eval_walls), 0, 1, 0, 1},
    {&__pyx_n_s_expansion_rate_coeff, __pyx_k_expansion_rate_coeff, sizeof(__pyx_k_expansion_rate_coeff), 0, 0, 1, 1},
    {&__pyx_n_s_flowdevice_type, __pyx_k_flowdevice_type, sizeof(__pyx_k_flowdevice_type), 0, 0, 1, 1},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_u_getState, __pyx_k_getState, sizeof(__pyx_k_getState), 0, 1, 0, 1},
    {&__pyx_n_u_getSurfaceInitialConditions, __pyx_k_getSurfaceInitialConditions, sizeof(__pyx_k_getSurfaceInitialConditions), 0, 1, 0, 1},
    {&__pyx_n_s_get_derivative, __pyx_k_get_derivative, sizeof(__pyx_k_get_derivative), 0, 0, 1, 1},
    {&__pyx_n_s_get_state, __pyx_k_get_state, sizeof(__pyx_k_get_state), 0, 0, 1, 1},
    {&__pyx_n_u_get_state, __pyx_k_get_state, sizeof(__pyx_k_get_state), 0, 1, 0, 1},
    {&__pyx_n_u_get_surface_initial_conditions, __pyx_k_get_surface_initial_conditions, sizeof(__pyx_k_get_surface_initial_conditions), 0, 1, 0, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_global_component_index, __pyx_k_global_component_index, sizeof(__pyx_k_global_component_index), 0, 0, 1, 1},
    {&__pyx_n_s_heat_flux, __pyx_k_heat_flux, sizeof(__pyx_k_heat_flux), 0, 0, 1, 1},
    {&__pyx_n_s_heat_transfer_coeff, __pyx_k_heat_transfer_coeff, sizeof(__pyx_k_heat_transfer_coeff), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
    {&__pyx_n_s_initial_time, __pyx_k_initial_time, sizeof(__pyx_k_initial_time), 0, 0, 1, 1},
    {&__pyx_n_s_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 0, 1, 1},
    {&__pyx_n_u_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 1, 0, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_inlet, __pyx_k_inlet, sizeof(__pyx_k_inlet), 0, 0, 1, 1},
    {&__pyx_n_s_insert, __pyx_k_insert, sizeof(__pyx_k_insert), 0, 0, 1, 1},
    {&__pyx_n_s_install, __pyx_k_install, sizeof(__pyx_k_install), 0, 0, 1, 1},
    {&__pyx_n_s_install_2, __pyx_k_install_2, sizeof(__pyx_k_install_2), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
    {&__pyx_n_s_kin, __pyx_k_kin, sizeof(__pyx_k_kin), 0, 0, 1, 1},
    {&__pyx_n_s_kinetics, __pyx_k_kinetics, sizeof(__pyx_k_kinetics), 0, 0, 1, 1},
    {&__pyx_n_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 1},
    {&__pyx_n_s_limit, __pyx_k_limit, sizeof(__pyx_k_limit), 0, 0, 1, 1},
    {&__pyx_n_s_linalg, __pyx_k_linalg, sizeof(__pyx_k_linalg), 0, 0, 1, 1},
    {&__pyx_n_s_linear_solver_type, __pyx_k_linear_solver_type, sizeof(__pyx_k_linear_solver_type), 0, 0, 1, 1},
    {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_mass_flow_coeff, __pyx_k_mass_flow_coeff, sizeof(__pyx_k_mass_flow_coeff), 0, 0, 1, 1},
    {&__pyx_n_s_mass_flow_rate, __pyx_k_mass_flow_rate, sizeof(__pyx_k_mass_flow_rate), 0, 0, 1, 1},
    {&__pyx_n_u_master, __pyx_k_master, sizeof(__pyx_k_master), 0, 1, 0, 1},
    {&__pyx_n_s_max_state_values, __pyx_k_max_state_values, sizeof(__pyx_k_max_state_values), 0, 0, 1, 1},
    {&__pyx_n_s_max_steps, __pyx_k_max_steps, sizeof(__pyx_k_max_steps), 0, 0, 1, 1},
    {&__pyx_n_s_maximum, __pyx_k_maximum, sizeof(__pyx_k_maximum), 0, 0, 1, 1},
    {&__pyx_n_s_mdot, __pyx_k_mdot, sizeof(__pyx_k_mdot), 0, 0, 1, 1},
    {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
    {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
    {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
    {&__pyx_n_s_n1, __pyx_k_n1, sizeof(__pyx_k_n1), 0, 0, 1, 1},
    {&__pyx_n_s_n_sensitivity_params, __pyx_k_n_sensitivity_params, sizeof(__pyx_k_n_sensitivity_params), 0, 0, 1, 1},
    {&__pyx_n_s_n_species, __pyx_k_n_species, sizeof(__pyx_k_n_species), 0, 0, 1, 1},
    {&__pyx_n_s_n_vars, __pyx_k_n_vars, sizeof(__pyx_k_n_vars), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_u_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 1, 0, 1},
    {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
    {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
    {&__pyx_n_s_numbers, __pyx_k_numbers, sizeof(__pyx_k_numbers), 0, 0, 1, 1},
    {&__pyx_n_s_numbers_2, __pyx_k_numbers_2, sizeof(__pyx_k_numbers_2), 0, 0, 1, 1},
    {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
    {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
    {&__pyx_n_u_off, __pyx_k_off, sizeof(__pyx_k_off), 0, 1, 0, 1},
    {&__pyx_n_u_on, __pyx_k_on, sizeof(__pyx_k_on), 0, 1, 0, 1},
    {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
    {&__pyx_n_s_outlet, __pyx_k_outlet, sizeof(__pyx_k_outlet), 0, 0, 1, 1},
    {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
    {&__pyx_kp_u_param_contents_Reactor_contents, __pyx_k_param_contents_Reactor_contents, sizeof(__pyx_k_param_contents_Reactor_contents), 0, 1, 0, 0},
    {&__pyx_n_s_precon_linear_solver_type, __pyx_k_precon_linear_solver_type, sizeof(__pyx_k_precon_linear_solver_type), 0, 0, 1, 1},
    {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
    {&__pyx_n_s_pressure_coeff, __pyx_k_pressure_coeff, sizeof(__pyx_k_pressure_coeff), 0, 0, 1, 1},
    {&__pyx_n_s_pressure_function, __pyx_k_pressure_function, sizeof(__pyx_k_pressure_function), 0, 0, 1, 1},
    {&__pyx_n_s_previous_state, __pyx_k_previous_state, sizeof(__pyx_k_previous_state), 0, 0, 1, 1},
    {&__pyx_n_s_primary, __pyx_k_primary, sizeof(__pyx_k_primary), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
    {&__pyx_n_s_qdot, __pyx_k_qdot, sizeof(__pyx_k_qdot), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_reactor, __pyx_k_reactor, sizeof(__pyx_k_reactor), 0, 0, 1, 1},
    {&__pyx_n_s_reactor_counts, __pyx_k_reactor_counts, sizeof(__pyx_k_reactor_counts), 0, 0, 1, 1},
    {&__pyx_n_s_reactor_type, __pyx_k_reactor_type, sizeof(__pyx_k_reactor_type), 0, 0, 1, 1},
    {&__pyx_n_s_reactors, __pyx_k_reactors, sizeof(__pyx_k_reactors), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_references, __pyx_k_references, sizeof(__pyx_k_references), 0, 0, 1, 1},
    {&__pyx_n_s_reinitialize, __pyx_k_reinitialize, sizeof(__pyx_k_reinitialize), 0, 0, 1, 1},
    {&__pyx_n_s_residual, __pyx_k_residual, sizeof(__pyx_k_residual), 0, 0, 1, 1},
    {&__pyx_n_s_residual_threshold, __pyx_k_residual_threshold, sizeof(__pyx_k_residual_threshold), 0, 0, 1, 1},
    {&__pyx_n_s_residuals, __pyx_k_residuals, sizeof(__pyx_k_residuals), 0, 0, 1, 1},
    {&__pyx_n_s_restore_surface_state, __pyx_k_restore_surface_state, sizeof(__pyx_k_restore_surface_state), 0, 0, 1, 1},
    {&__pyx_n_s_restore_thermo_state, __pyx_k_restore_thermo_state, sizeof(__pyx_k_restore_thermo_state), 0, 0, 1, 1},
    {&__pyx_n_s_return_residuals, __pyx_k_return_residuals, sizeof(__pyx_k_return_residuals), 0, 0, 1, 1},
    {&__pyx_n_s_right, __pyx_k_right, sizeof(__pyx_k_right), 0, 0, 1, 1},
    {&__pyx_n_s_rtol, __pyx_k_rtol, sizeof(__pyx_k_rtol), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_n_s_sensitivities, __pyx_k_sensitivities, sizeof(__pyx_k_sensitivities), 0, 0, 1, 1},
    {&__pyx_n_s_sensitivity, __pyx_k_sensitivity, sizeof(__pyx_k_sensitivity), 0, 0, 1, 1},
    {&__pyx_n_s_sensitivity_parameter_name, __pyx_k_sensitivity_parameter_name, sizeof(__pyx_k_sensitivity_parameter_name), 0, 0, 1, 1},
    {&__pyx_n_s_set_advance_limit, __pyx_k_set_advance_limit, sizeof(__pyx_k_set_advance_limit), 0, 0, 1, 1},
    {&__pyx_n_s_set_heat_flux, __pyx_k_set_heat_flux, sizeof(__pyx_k_set_heat_flux), 0, 0, 1, 1},
    {&__pyx_n_s_set_initial_time, __pyx_k_set_initial_time, sizeof(__pyx_k_set_initial_time), 0, 0, 1, 1},
    {&__pyx_n_s_set_master, __pyx_k_set_master, sizeof(__pyx_k_set_master), 0, 0, 1, 1},
    {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
    {&__pyx_n_s_set_pressure_function, __pyx_k_set_pressure_function, sizeof(__pyx_k_set_pressure_function), 0, 0, 1, 1},
    {&__pyx_n_s_set_time_function, __pyx_k_set_time_function, sizeof(__pyx_k_set_time_function), 0, 0, 1, 1},
    {&__pyx_n_s_set_velocity, __pyx_k_set_velocity, sizeof(__pyx_k_set_velocity), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_kp_u_should_be_below_solver_rtol, __pyx_k_should_be_below_solver_rtol, sizeof(__pyx_k_should_be_below_solver_rtol), 0, 1, 0, 0},
    {&__pyx_kp_u_size_t_string, __pyx_k_size_t_string, sizeof(__pyx_k_size_t_string), 0, 1, 0, 0},
    {&__pyx_n_s_solution, __pyx_k_solution, sizeof(__pyx_k_solution), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_u_speciesIndex, __pyx_k_speciesIndex, sizeof(__pyx_k_speciesIndex), 0, 1, 0, 1},
    {&__pyx_n_s_species_index, __pyx_k_species_index, sizeof(__pyx_k_species_index), 0, 0, 1, 1},
    {&__pyx_n_u_species_index, __pyx_k_species_index, sizeof(__pyx_k_species_index), 0, 1, 0, 1},
    {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
    {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
    {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
    {&__pyx_kp_u_string_size_t, __pyx_k_string_size_t, sizeof(__pyx_k_string_size_t), 0, 1, 0, 0},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_syncState, __pyx_k_syncState, sizeof(__pyx_k_syncState), 0, 0, 1, 1},
    {&__pyx_n_u_syncState, __pyx_k_syncState, sizeof(__pyx_k_syncState), 0, 1, 0, 1},
    {&__pyx_n_u_sync_state, __pyx_k_sync_state, sizeof(__pyx_k_sync_state), 0, 1, 0, 1},
    {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_thermo, __pyx_k_thermo, sizeof(__pyx_k_thermo), 0, 0, 1, 1},
    {&__pyx_n_s_time_function, __pyx_k_time_function, sizeof(__pyx_k_time_function), 0, 0, 1, 1},
    {&__pyx_n_u_updateConnected, __pyx_k_updateConnected, sizeof(__pyx_k_updateConnected), 0, 1, 0, 1},
    {&__pyx_n_u_updateState, __pyx_k_updateState, sizeof(__pyx_k_updateState), 0, 1, 0, 1},
    {&__pyx_n_u_updateSurfaceState, __pyx_k_updateSurfaceState, sizeof(__pyx_k_updateSurfaceState), 0, 1, 0, 1},
    {&__pyx_n_u_update_connected, __pyx_k_update_connected, sizeof(__pyx_k_update_connected), 0, 1, 0, 1},
    {&__pyx_n_u_update_state, __pyx_k_update_state, sizeof(__pyx_k_update_state), 0, 1, 0, 1},
    {&__pyx_n_u_update_surface_state, __pyx_k_update_surface_state, sizeof(__pyx_k_update_surface_state), 0, 1, 0, 1},
    {&__pyx_n_s_upstream, __pyx_k_upstream, sizeof(__pyx_k_upstream), 0, 0, 1, 1},
    {&__pyx_n_s_utils, __pyx_k_utils, sizeof(__pyx_k_utils), 0, 0, 1, 1},
    {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
    {&__pyx_n_s_valve_coeff, __pyx_k_valve_coeff, sizeof(__pyx_k_valve_coeff), 0, 0, 1, 1},
    {&__pyx_n_s_vdot, __pyx_k_vdot, sizeof(__pyx_k_vdot), 0, 0, 1, 1},
    {&__pyx_n_s_velocity, __pyx_k_velocity, sizeof(__pyx_k_velocity), 0, 0, 1, 1},
    {&__pyx_kp_u_void, __pyx_k_void, sizeof(__pyx_k_void), 0, 1, 0, 0},
    {&__pyx_kp_u_void_bool, __pyx_k_void_bool, sizeof(__pyx_k_void_bool), 0, 1, 0, 0},
    {&__pyx_kp_u_void_double, __pyx_k_void_double, sizeof(__pyx_k_void_double), 0, 1, 0, 0},
    {&__pyx_kp_u_void_double_2, __pyx_k_void_double_2, sizeof(__pyx_k_void_double_2), 0, 1, 0, 0},
    {&__pyx_kp_u_void_double_double_double, __pyx_k_void_double_double_double, sizeof(__pyx_k_void_double_double_double), 0, 1, 0, 0},
    {&__pyx_kp_u_void_double_double_double_2, __pyx_k_void_double_double_double_2, sizeof(__pyx_k_void_double_double_double_2), 0, 1, 0, 0},
    {&__pyx_n_s_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 0, 1, 1},
    {&__pyx_n_s_wall, __pyx_k_wall, sizeof(__pyx_k_wall), 0, 0, 1, 1},
    {&__pyx_n_s_wall_type, __pyx_k_wall_type, sizeof(__pyx_k_wall_type), 0, 0, 1, 1},
    {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
    {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
    {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
    {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 156, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 206, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 211, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 281, __pyx_L1_error)
  __pyx_builtin_DeprecationWarning = __Pyx_GetBuiltinName(__pyx_n_s_DeprecationWarning); if (!__pyx_builtin_DeprecationWarning) __PYX_ERR(0, 671, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 1154, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 1777, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(3, 987, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":987
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(3, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "../../../../../../../tmp/build-env-524pndgi/lib/python3.10/site-packages/numpy/__init__.cython-30.pxd":993
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(3, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "cantera/reactor.pyx":156
 * 
 *     def __reduce__(self):
 *         raise NotImplementedError('Reactor object is not picklable')             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Reactor_object_is_not_picklable); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "cantera/reactor.pyx":159
 * 
 *     def __copy__(self):
 *         raise NotImplementedError('Reactor object is not copyable')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Reactor_object_is_not_copyable); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "cantera/reactor.pyx":211
 *             self.energy_enabled = False
 *         elif energy != 'on':
 *             raise ValueError("'energy' must be either 'on' or 'off'")             # <<<<<<<<<<<<<<
 * 
 *     def insert(self, _SolutionBase solution):
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_energy_must_be_either_on_or_off); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "cantera/reactor.pyx":669
 *         """
 *         def __get__(self):
 *             warnings.warn(             # <<<<<<<<<<<<<<
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'expansion_rate'.", DeprecationWarning)
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_kp_u_ExtensibleReactor_vdot_To_be_rem, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "cantera/reactor.pyx":674
 *             return self.accessor.expansionRate()
 *         def __set__(self, vdot):
 *             warnings.warn(             # <<<<<<<<<<<<<<
 *                 "ExtensibleReactor.vdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'expansion_rate'.", DeprecationWarning)
 */
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_kp_u_ExtensibleReactor_vdot_To_be_rem, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "cantera/reactor.pyx":701
 *         """
 *         def __get__(self):
 *             warnings.warn(             # <<<<<<<<<<<<<<
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'heat_rate'.", DeprecationWarning)
 */
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_kp_u_ExtensibleReactor_qdot_To_be_rem, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "cantera/reactor.pyx":706
 *             return self.accessor.heatRate()
 *         def __set__(self, qdot):
 *             warnings.warn(             # <<<<<<<<<<<<<<
 *                 "ExtensibleReactor.qdot: To be removed in Cantera 3.0; "
 *                 "renamed to 'heat_rate'.", DeprecationWarning)
 */
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_kp_u_ExtensibleReactor_qdot_To_be_rem, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "cantera/reactor.pyx":873
 * 
 *             if len(coverages) != self._kinetics.n_species:
 *                 raise ValueError('Incorrect number of site coverages specified')             # <<<<<<<<<<<<<<
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 *                     np.ascontiguousarray(coverages, dtype=np.double)
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Incorrect_number_of_site_coverag); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "cantera/reactor.pyx":1096
 *             Replaced by the ``velocity`` property.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "Wall.set_velocity: To be removed after Cantera 3.0; replaced by property "
 *             "'velocity'.", DeprecationWarning)
 */
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_kp_u_Wall_set_velocity_To_be_removed, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "cantera/reactor.pyx":1131
 *             Replaced by the ``heat_flux`` property.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "Wall.set_heat_flux: To be removed after Cantera 3.0; replaced by property "
 *             "'heat_flux'.", DeprecationWarning)
 */
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_kp_u_Wall_set_heat_flux_To_be_removed, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "cantera/reactor.pyx":1234
 *             To be removed after Cantera 3.0. Use property ``pressure_function`` instead.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "FlowDevice.set_pressure_function: To be removed after Cantera 3.0; "
 *             "replaced by 'pressure_function'.", DeprecationWarning)
 */
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_kp_u_FlowDevice_set_pressure_function, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "cantera/reactor.pyx":1280
 *             To be removed after Cantera 3.0. Use property ``time_function`` instead.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "FlowDevice.set_time_function: To be removed after Cantera 3.0; "
 *             "replaced by 'time_function'.", DeprecationWarning)
 */
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_kp_u_FlowDevice_set_time_function_To, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 1280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "cantera/reactor.pyx":1430
 *             name=None, primary=None, K=1., **kwargs):
 *         if "master" in kwargs:
 *             warnings.warn(             # <<<<<<<<<<<<<<
 *                 "PressureController: The 'master' keyword argument is deprecated; "
 *                 "use 'primary' instead.", DeprecationWarning)
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_kp_u_PressureController_The_master_ke, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 1430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "cantera/reactor.pyx":1460
 *         .. versionadded:: 3.0
 *         """
 *         raise NotImplementedError("PressureController.primary")             # <<<<<<<<<<<<<<
 * 
 *     @primary.setter
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_PressureController_primary); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 1460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "cantera/reactor.pyx":1475
 *             To be removed after Cantera 3.0; replaced by property ``primary``.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "PressureController.set_master: To be removed after Cantera 3.0; "
 *             "replaced by 'primary'.", DeprecationWarning)
 */
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_kp_u_PressureController_set_master_To, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "cantera/reactor.pyx":1578
 *             To be removed after Cantera 3.0. Use property ``initial_time`` instead.
 *         """
 *         warnings.warn(             # <<<<<<<<<<<<<<
 *             "ReactorNet.set_initial_time: To be removed after Cantera 3.0. "
 *             "Use property 'initial_time' instead.", DeprecationWarning)
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_kp_u_ReactorNet_set_initial_time_To_b, __pyx_builtin_DeprecationWarning); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 1578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "cantera/reactor.pyx":1852
 *                 limits = -1. * np.ones([self.n_vars])
 *             elif len(limits) != self.n_vars:
 *                 raise ValueError('array must be of length n_vars')             # <<<<<<<<<<<<<<
 * 
 *             cdef np.ndarray[np.double_t, ndim=1] data = \
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_array_must_be_of_length_n_vars); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 1852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "cantera/reactor.pyx":1920
 * 
 *     def __reduce__(self):
 *         raise NotImplementedError('ReactorNet object is not picklable')             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_ReactorNet_object_is_not_picklab); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 1920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "cantera/reactor.pyx":1923
 * 
 *     def __copy__(self):
 *         raise NotImplementedError('ReactorNet object is not copyable')             # <<<<<<<<<<<<<<
 * 
 *     property preconditioner:
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_ReactorNet_object_is_not_copyabl); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 1923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "cantera/reactor.pyx":48
 *             self.volume = volume
 * 
 *     def insert(self, _SolutionBase solution):             # <<<<<<<<<<<<<<
 *         """
 *         Set ``solution`` to be the object used to compute thermodynamic
 */
  __pyx_tuple__25 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_solution); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_insert, 48, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 48, __pyx_L1_error)

  /* "cantera/reactor.pyx":71
 *             self.rbase.setName(stringify(name))
 * 
 *     def syncState(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the Reactor to match that of the associated
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_syncState, 71, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 71, __pyx_L1_error)

  /* "cantera/reactor.pyx":134
 *             return self._surfaces
 * 
 *     def _add_inlet(self, inlet):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``inlet`` to prevent it from being prematurely
 */
  __pyx_tuple__29 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_inlet); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_add_inlet, 134, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 134, __pyx_L1_error)

  /* "cantera/reactor.pyx":141
 *         self._inlets.append(inlet)
 * 
 *     def _add_outlet(self, outlet):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``outlet`` to prevent it from being prematurely
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_outlet); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_add_outlet, 141, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 141, __pyx_L1_error)

  /* "cantera/reactor.pyx":148
 *         self._outlets.append(outlet)
 * 
 *     def _add_wall(self, wall):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``wall`` to prevent it from being prematurely
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_wall); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_add_wall, 148, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 148, __pyx_L1_error)

  /* "cantera/reactor.pyx":155
 *         self._walls.append(wall)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('Reactor object is not picklable')
 * 
 */
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_reduce, 155, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 155, __pyx_L1_error)

  /* "cantera/reactor.pyx":158
 *         raise NotImplementedError('Reactor object is not picklable')
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('Reactor object is not copyable')
 * 
 */
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_copy, 158, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 158, __pyx_L1_error)

  /* "cantera/reactor.pyx":213
 *             raise ValueError("'energy' must be either 'on' or 'off'")
 * 
 *     def insert(self, _SolutionBase solution):             # <<<<<<<<<<<<<<
 *         """
 *         Set ``solution`` to be the object used to compute thermodynamic
 */
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_insert, 213, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 213, __pyx_L1_error)

  /* "cantera/reactor.pyx":255
 *             self.reactor.setEnergy(int(value))
 * 
 *     def add_sensitivity_reaction(self, m):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_m); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_add_sensitivity_reaction, 255, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 255, __pyx_L1_error)

  /* "cantera/reactor.pyx":264
 *         self.reactor.addSensitivityReaction(m)
 * 
 *     def add_sensitivity_species_enthalpy(self, k):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_k); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_add_sensitivity_species_enthalpy, 264, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 264, __pyx_L1_error)

  /* "cantera/reactor.pyx":272
 *         self.reactor.addSensitivitySpeciesEnthalpy(self.thermo.species_index(k))
 * 
 *     def component_index(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the index of the component named ``name`` in the system. This determines
 */
  __pyx_tuple__42 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_k); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_component_index, 272, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 272, __pyx_L1_error)

  /* "cantera/reactor.pyx":284
 *         return k
 * 
 *     def component_name(self, int i):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the name of the component with index ``i`` within the array of
 */
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_i); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_component_name, 284, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 284, __pyx_L1_error)

  /* "cantera/reactor.pyx":306
 *             return self.reactor.neq()
 * 
 *     def get_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the state vector of the reactor.
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_y); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_get_state, 306, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 306, __pyx_L1_error)

  /* "cantera/reactor.pyx":366
 *                                    self.n_vars, self.n_vars)
 * 
 *     def set_advance_limit(self, name, limit):             # <<<<<<<<<<<<<<
 *         """
 *         Limit absolute change of component ``name`` during `ReactorNet.advance`.
 */
  __pyx_tuple__48 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_limit); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_set_advance_limit, 366, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 366, __pyx_L1_error)

  /* "cantera/reactor.pyx":629
 * 
 *     delegatable_methods = {
 *         'initialize': ('initialize', 'void(double)'),             # <<<<<<<<<<<<<<
 *         'sync_state': ('syncState', 'void()'),
 *         'get_state': ('getState', 'void(double*)'),
 */
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_u_initialize, __pyx_kp_u_void_double); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "cantera/reactor.pyx":630
 *     delegatable_methods = {
 *         'initialize': ('initialize', 'void(double)'),
 *         'sync_state': ('syncState', 'void()'),             # <<<<<<<<<<<<<<
 *         'get_state': ('getState', 'void(double*)'),
 *         'update_state': ('updateState', 'void(double*)'),
 */
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_n_u_syncState, __pyx_kp_u_void); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "cantera/reactor.pyx":631
 *         'initialize': ('initialize', 'void(double)'),
 *         'sync_state': ('syncState', 'void()'),
 *         'get_state': ('getState', 'void(double*)'),             # <<<<<<<<<<<<<<
 *         'update_state': ('updateState', 'void(double*)'),
 *         'update_surface_state': ('updateSurfaceState', 'void(double*)'),
 */
  __pyx_tuple__52 = PyTuple_Pack(2, __pyx_n_u_getState, __pyx_kp_u_void_double_2); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "cantera/reactor.pyx":632
 *         'sync_state': ('syncState', 'void()'),
 *         'get_state': ('getState', 'void(double*)'),
 *         'update_state': ('updateState', 'void(double*)'),             # <<<<<<<<<<<<<<
 *         'update_surface_state': ('updateSurfaceState', 'void(double*)'),
 *         'get_surface_initial_conditions': ('getSurfaceInitialConditions', 'void(double*)'),
 */
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_n_u_updateState, __pyx_kp_u_void_double_2); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "cantera/reactor.pyx":633
 *         'get_state': ('getState', 'void(double*)'),
 *         'update_state': ('updateState', 'void(double*)'),
 *         'update_surface_state': ('updateSurfaceState', 'void(double*)'),             # <<<<<<<<<<<<<<
 *         'get_surface_initial_conditions': ('getSurfaceInitialConditions', 'void(double*)'),
 *         'update_connected': ('updateConnected', 'void(bool)'),
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_n_u_updateSurfaceState, __pyx_kp_u_void_double_2); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "cantera/reactor.pyx":634
 *         'update_state': ('updateState', 'void(double*)'),
 *         'update_surface_state': ('updateSurfaceState', 'void(double*)'),
 *         'get_surface_initial_conditions': ('getSurfaceInitialConditions', 'void(double*)'),             # <<<<<<<<<<<<<<
 *         'update_connected': ('updateConnected', 'void(bool)'),
 *         'eval': ('eval', 'void(double, double*, double*)'),
 */
  __pyx_tuple__55 = PyTuple_Pack(2, __pyx_n_u_getSurfaceInitialConditions, __pyx_kp_u_void_double_2); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "cantera/reactor.pyx":635
 *         'update_surface_state': ('updateSurfaceState', 'void(double*)'),
 *         'get_surface_initial_conditions': ('getSurfaceInitialConditions', 'void(double*)'),
 *         'update_connected': ('updateConnected', 'void(bool)'),             # <<<<<<<<<<<<<<
 *         'eval': ('eval', 'void(double, double*, double*)'),
 *         'eval_walls': ('evalWalls', 'void(double)'),
 */
  __pyx_tuple__56 = PyTuple_Pack(2, __pyx_n_u_updateConnected, __pyx_kp_u_void_bool); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "cantera/reactor.pyx":636
 *         'get_surface_initial_conditions': ('getSurfaceInitialConditions', 'void(double*)'),
 *         'update_connected': ('updateConnected', 'void(bool)'),
 *         'eval': ('eval', 'void(double, double*, double*)'),             # <<<<<<<<<<<<<<
 *         'eval_walls': ('evalWalls', 'void(double)'),
 *         'eval_surfaces': ('evalSurfaces', 'void(double*,double*,double*)'),
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_n_u_eval, __pyx_kp_u_void_double_double_double); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "cantera/reactor.pyx":637
 *         'update_connected': ('updateConnected', 'void(bool)'),
 *         'eval': ('eval', 'void(double, double*, double*)'),
 *         'eval_walls': ('evalWalls', 'void(double)'),             # <<<<<<<<<<<<<<
 *         'eval_surfaces': ('evalSurfaces', 'void(double*,double*,double*)'),
 *         'component_name': ('componentName', 'string(size_t)'),
 */
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_n_u_evalWalls, __pyx_kp_u_void_double); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "cantera/reactor.pyx":638
 *         'eval': ('eval', 'void(double, double*, double*)'),
 *         'eval_walls': ('evalWalls', 'void(double)'),
 *         'eval_surfaces': ('evalSurfaces', 'void(double*,double*,double*)'),             # <<<<<<<<<<<<<<
 *         'component_name': ('componentName', 'string(size_t)'),
 *         'component_index': ('componentIndex', 'size_t(string)'),
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_n_u_evalSurfaces, __pyx_kp_u_void_double_double_double_2); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "cantera/reactor.pyx":639
 *         'eval_walls': ('evalWalls', 'void(double)'),
 *         'eval_surfaces': ('evalSurfaces', 'void(double*,double*,double*)'),
 *         'component_name': ('componentName', 'string(size_t)'),             # <<<<<<<<<<<<<<
 *         'component_index': ('componentIndex', 'size_t(string)'),
 *         'species_index': ('speciesIndex', 'size_t(string)')
 */
  __pyx_tuple__60 = PyTuple_Pack(2, __pyx_n_u_componentName, __pyx_kp_u_string_size_t); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "cantera/reactor.pyx":640
 *         'eval_surfaces': ('evalSurfaces', 'void(double*,double*,double*)'),
 *         'component_name': ('componentName', 'string(size_t)'),
 *         'component_index': ('componentIndex', 'size_t(string)'),             # <<<<<<<<<<<<<<
 *         'species_index': ('speciesIndex', 'size_t(string)')
 *     }
 */
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_n_u_componentIndex, __pyx_kp_u_size_t_string); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "cantera/reactor.pyx":641
 *         'component_name': ('componentName', 'string(size_t)'),
 *         'component_index': ('componentIndex', 'size_t(string)'),
 *         'species_index': ('speciesIndex', 'size_t(string)')             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_n_u_speciesIndex, __pyx_kp_u_size_t_string); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "cantera/reactor.pyx":724
 *         self.accessor.setHeatRate(qdot)
 * 
 *     def restore_thermo_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the thermo object to correspond to the state of the
 */
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_restore_thermo_state, 724, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 724, __pyx_L1_error)

  /* "cantera/reactor.pyx":731
 *         self.accessor.restoreThermoState()
 * 
 *     def restore_surface_state(self, n):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the thermo object for surface ``n`` to correspond to the
 */
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_n); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_restore_surface_state, 731, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 731, __pyx_L1_error)

  /* "cantera/reactor.pyx":829
 *             self.area = A
 * 
 *     def install(self, Reactor r):             # <<<<<<<<<<<<<<
 *         """
 *         Add this `ReactorSurface` to the specified `Reactor`
 */
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_r); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_install, 829, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 829, __pyx_L1_error)

  /* "cantera/reactor.pyx":878
 *             self.surface.setCoverages(&data[0])
 * 
 *     def add_sensitivity_reaction(self, int m):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_add_sensitivity_reaction, 878, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 878, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cantera/reactor.pyx":942
 *             self.velocity = velocity
 * 
 *     def _install(self, ReactorBase left, ReactorBase right):             # <<<<<<<<<<<<<<
 *         """
 *         Install this Wall between two `Reactor` objects or between a
 */
  __pyx_tuple__72 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_left, __pyx_n_s_right); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_install_2, 942, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 942, __pyx_L1_error)

  /* "cantera/reactor.pyx":977
 *         return self.wall.expansionRate()
 * 
 *     def vdot(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         The rate of volumetric change [m^3/s] associated with the wall
 */
  __pyx_tuple__74 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_t); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_vdot, 977, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 977, __pyx_L1_error)

  /* "cantera/reactor.pyx":1000
 *         return self.wall.heatRate()
 * 
 *     def qdot(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         Total heat flux [W] through the wall at time ``t``. A positive value
 */
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_qdot, 1000, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 1000, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cantera/reactor.pyx":1087
 *         (<CxxWall*>(self.wall)).setVelocity(f.func)
 * 
 *     def set_velocity(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         The wall velocity [m/s]. May be either a constant or an arbitrary
 */
  __pyx_tuple__79 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_v); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);
  __pyx_codeobj__80 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__79, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_set_velocity, 1087, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__80)) __PYX_ERR(0, 1087, __pyx_L1_error)

  /* "cantera/reactor.pyx":1122
 *         (<CxxWall*>self.wall).setHeatFlux(f.func)
 * 
 *     def set_heat_flux(self, q):             # <<<<<<<<<<<<<<
 *         """
 *         Heat flux [W/m^2] across the wall. May be either a constant or
 */
  __pyx_tuple__81 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_q); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_set_heat_flux, 1122, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 1122, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cantera/reactor.pyx":1171
 *             return pystr(self.dev.type())
 * 
 *     def _install(self, ReactorBase upstream, ReactorBase downstream):             # <<<<<<<<<<<<<<
 *         """
 *         Install the device between the ``upstream`` (source) and ``downstream``
 */
  __pyx_tuple__85 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_upstream, __pyx_n_s_downstream); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_install_2, 1171, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 1171, __pyx_L1_error)

  /* "cantera/reactor.pyx":1219
 *         self.dev.setPressureFunction(f.func)
 * 
 *     def set_pressure_function(self, k):             # <<<<<<<<<<<<<<
 *         r"""
 *         Set the relationship between mass flow rate and the pressure drop across a
 */
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_set_pressure_function, 1219, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 1219, __pyx_L1_error)

  /* "cantera/reactor.pyx":1266
 *         self.dev.setTimeFunction(g.func)
 * 
 *     def set_time_function(self, k):             # <<<<<<<<<<<<<<
 *         r"""
 *         Set the time dependence of a flow device. The mass flow rate [kg/s] is
 */
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_set_time_function, 1266, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 1266, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cantera/reactor.pyx":1466
 *         (<CxxPressureController*>self.dev).setPrimary(d.dev)
 * 
 *     def set_master(self, FlowDevice d):             # <<<<<<<<<<<<<<
 *         """
 *         Set the "master" `FlowDevice` used to compute this device's mass flow
 */
  __pyx_tuple__95 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_d); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_set_master, 1466, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 1466, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "cantera/reactor.pyx":1500
 *             self.add_reactor(R)
 * 
 *     def add_reactor(self, Reactor r):             # <<<<<<<<<<<<<<
 *         """Add a reactor to the network."""
 *         self._reactors.append(r)
 */
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_add_reactor, 1500, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 1500, __pyx_L1_error)

  /* "cantera/reactor.pyx":1505
 *         self.net.addReactor(deref(r.reactor))
 * 
 *     def advance(self, double t, pybool apply_limit=True):             # <<<<<<<<<<<<<<
 *         """
 *         Advance the state of the reactor network from the current time/distance towards
 */
  __pyx_tuple__100 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_t, __pyx_n_s_apply_limit); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_advance, 1505, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __pyx_tuple__102 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);

  /* "cantera/reactor.pyx":1520
 *         return self.net.advance(t, apply_limit)
 * 
 *     def step(self):             # <<<<<<<<<<<<<<
 *         """
 *         Take a single internal step. The time/distance after taking the step is
 */
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_step, 1520, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 1520, __pyx_L1_error)

  /* "cantera/reactor.pyx":1527
 *         return self.net.step()
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Force initialization of the integrator after initial setup.
 */
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_initialize, 1527, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(0, 1527, __pyx_L1_error)

  /* "cantera/reactor.pyx":1533
 *         self.net.initialize()
 * 
 *     def reinitialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Reinitialize the integrator after making changing to the state of the
 */
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_reinitialize, 1533, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 1533, __pyx_L1_error)

  /* "cantera/reactor.pyx":1570
 *         self.net.setInitialTime(t)
 * 
 *     def set_initial_time(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         Set the initial time. Restarts integration from this time using the
 */
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_set_initial_time, 1570, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 1570, __pyx_L1_error)

  /* "cantera/reactor.pyx":1709
 *             self.net.setVerbose(v)
 * 
 *     def global_component_index(self, name, int reactor):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the index of a component named ``name`` of a reactor with index
 */
  __pyx_tuple__107 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_name, __pyx_n_s_reactor); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_global_component_index, 1709, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 1709, __pyx_L1_error)

  /* "cantera/reactor.pyx":1720
 *         return self.net.globalComponentIndex(stringify(name), reactor)
 * 
 *     def component_name(self, int i):             # <<<<<<<<<<<<<<
 *         """
 *         Return the name of the i-th component of the global state vector. The
 */
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_component_name, 1720, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 1720, __pyx_L1_error)

  /* "cantera/reactor.pyx":1728
 *         return pystr(self.net.componentName(i))
 * 
 *     def sensitivity(self, component, int p, int r=0):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the sensitivity of the solution variable ``component`` in
 */
  __pyx_tuple__110 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_component, __pyx_n_s_p, __pyx_n_s_r); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 1728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_sensitivity, 1728, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 1728, __pyx_L1_error)
  __pyx_tuple__112 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 1728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);

  /* "cantera/reactor.pyx":1743
 *             return self.net.sensitivity(stringify(component), p, r)
 * 
 *     def sensitivities(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Returns the sensitivities of all of the solution variables with respect
 */
  __pyx_tuple__113 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_data, __pyx_n_s_p, __pyx_n_s_k); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 1743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_sensitivities, 1743, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(0, 1743, __pyx_L1_error)

  /* "cantera/reactor.pyx":1782
 *         return data
 * 
 *     def sensitivity_parameter_name(self, int p):             # <<<<<<<<<<<<<<
 *         """
 *         Name of the sensitivity parameter with index ``p``.
 */
  __pyx_tuple__115 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_p); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(0, 1782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_sensitivity_parameter_name, 1782, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(0, 1782, __pyx_L1_error)

  /* "cantera/reactor.pyx":1812
 *             return self.net.neq()
 * 
 *     def get_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the combined state vector of the reactor network.
 */
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_get_state, 1812, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 1812, __pyx_L1_error)

  /* "cantera/reactor.pyx":1825
 *         return y
 * 
 *     def get_derivative(self, k):             # <<<<<<<<<<<<<<
 *         """
 *         Get the k-th derivative of the state vector of the reactor network with respect
 */
  __pyx_tuple__118 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_k, __pyx_n_s_dky); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_get_derivative, 1825, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 1825, __pyx_L1_error)

  /* "cantera/reactor.pyx":1858
 *             self.net.setAdvanceLimits(&data[0])
 * 
 *     def advance_to_steady_state(self, int max_steps=10000,             # <<<<<<<<<<<<<<
 *                                 double residual_threshold=0., double atol=0.,
 *                                 pybool return_residuals=False):
 */
  __pyx_tuple__120 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_max_steps, __pyx_n_s_residual_threshold, __pyx_n_s_atol, __pyx_n_s_return_residuals, __pyx_n_s_residuals, __pyx_n_s_max_state_values, __pyx_n_s_step, __pyx_n_s_previous_state, __pyx_n_s_n1, __pyx_n_s_state, __pyx_n_s_residual); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_advance_to_steady_state, 1858, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __pyx_tuple__122 = PyTuple_Pack(4, __pyx_int_10000, __pyx_float_0_, __pyx_float_0_, Py_False); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "cantera/reactor.pyx":1919
 *             return residuals[:step + 1]
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('ReactorNet object is not picklable')
 * 
 */
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_reduce, 1919, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 1919, __pyx_L1_error)

  /* "cantera/reactor.pyx":1922
 *         raise NotImplementedError('ReactorNet object is not picklable')
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('ReactorNet object is not copyable')
 * 
 */
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_cantera_reactor_pyx, __pyx_n_s_copy, 1922, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(0, 1922, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_10_ = PyFloat_FromDouble(10.); if (unlikely(!__pyx_float_10_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1_ = PyFloat_FromDouble(-1.); if (unlikely(!__pyx_float_neg_1_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10000 = PyInt_FromLong(10000L); if (unlikely(!__pyx_int_10000)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* AssertionsEnabled.init */
  __Pyx_init_assertions_enabled();

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7cantera_7reactor_ReactorBase = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ReactorBase_spec, NULL); if (unlikely(!__pyx_ptype_7cantera_7reactor_ReactorBase)) __PYX_ERR(0, 20, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ReactorBase_spec, __pyx_ptype_7cantera_7reactor_ReactorBase) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ReactorBase = &__pyx_type_7cantera_7reactor_ReactorBase;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ReactorBase) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ReactorBase->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ReactorBase->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ReactorBase->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ReactorBase->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ReactorBase, (PyObject *) __pyx_ptype_7cantera_7reactor_ReactorBase) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_ReactorBase); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_Reactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_Reactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_Reactor)) __PYX_ERR(0, 162, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_Reactor_spec, __pyx_ptype_7cantera_7reactor_Reactor) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_Reactor = &__pyx_type_7cantera_7reactor_Reactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_Reactor->tp_base = __pyx_ptype_7cantera_7reactor_ReactorBase;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_Reactor) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_Reactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_Reactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_Reactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_Reactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 162, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_7cantera_7reactor_7Reactor_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7cantera_7reactor_7Reactor_2__init__.doc = __pyx_doc_7cantera_7reactor_7Reactor_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7cantera_7reactor_7Reactor_2__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Reactor, (PyObject *) __pyx_ptype_7cantera_7reactor_Reactor) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_Reactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_MoleReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_MoleReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_MoleReactor)) __PYX_ERR(0, 377, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_MoleReactor_spec, __pyx_ptype_7cantera_7reactor_MoleReactor) < 0) __PYX_ERR(0, 377, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_MoleReactor = &__pyx_type_7cantera_7reactor_MoleReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_MoleReactor->tp_base = __pyx_ptype_7cantera_7reactor_Reactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_MoleReactor) < 0) __PYX_ERR(0, 377, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_MoleReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_MoleReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_MoleReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_MoleReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MoleReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_MoleReactor) < 0) __PYX_ERR(0, 377, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_ReactorBase); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_Reservoir = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_Reservoir_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_Reservoir)) __PYX_ERR(0, 388, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_Reservoir_spec, __pyx_ptype_7cantera_7reactor_Reservoir) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_Reservoir = &__pyx_type_7cantera_7reactor_Reservoir;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_Reservoir->tp_base = __pyx_ptype_7cantera_7reactor_ReactorBase;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_Reservoir) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_Reservoir->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_Reservoir->tp_dictoffset && __pyx_ptype_7cantera_7reactor_Reservoir->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_Reservoir->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Reservoir, (PyObject *) __pyx_ptype_7cantera_7reactor_Reservoir) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_Reactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_ConstPressureReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ConstPressureReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_ConstPressureReactor)) __PYX_ERR(0, 397, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ConstPressureReactor_spec, __pyx_ptype_7cantera_7reactor_ConstPressureReactor) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ConstPressureReactor = &__pyx_type_7cantera_7reactor_ConstPressureReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_ConstPressureReactor->tp_base = __pyx_ptype_7cantera_7reactor_Reactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ConstPressureReactor) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ConstPressureReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ConstPressureReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ConstPressureReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ConstPressureReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ConstPressureReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_ConstPressureReactor) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_Reactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ConstPressureMoleReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor)) __PYX_ERR(0, 404, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ConstPressureMoleReactor_spec, __pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor = &__pyx_type_7cantera_7reactor_ConstPressureMoleReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor->tp_base = __pyx_ptype_7cantera_7reactor_Reactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ConstPressureMoleReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_Reactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_IdealGasReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_IdealGasReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_IdealGasReactor)) __PYX_ERR(0, 414, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_IdealGasReactor_spec, __pyx_ptype_7cantera_7reactor_IdealGasReactor) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_IdealGasReactor = &__pyx_type_7cantera_7reactor_IdealGasReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_IdealGasReactor->tp_base = __pyx_ptype_7cantera_7reactor_Reactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_IdealGasReactor) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_IdealGasReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_IdealGasReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_IdealGasReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_IdealGasReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IdealGasReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_IdealGasReactor) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_Reactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_IdealGasConstPressureReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor)) __PYX_ERR(0, 427, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_IdealGasConstPressureReactor_spec, __pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor = &__pyx_type_7cantera_7reactor_IdealGasConstPressureReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor->tp_base = __pyx_ptype_7cantera_7reactor_Reactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IdealGasConstPressureReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_Reactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_FlowReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_FlowReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_FlowReactor)) __PYX_ERR(0, 444, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_FlowReactor_spec, __pyx_ptype_7cantera_7reactor_FlowReactor) < 0) __PYX_ERR(0, 444, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_FlowReactor = &__pyx_type_7cantera_7reactor_FlowReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_FlowReactor->tp_base = __pyx_ptype_7cantera_7reactor_Reactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_FlowReactor) < 0) __PYX_ERR(0, 444, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_FlowReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_FlowReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_FlowReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_FlowReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FlowReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_FlowReactor) < 0) __PYX_ERR(0, 444, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_Reactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_ExtensibleReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ExtensibleReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_ExtensibleReactor)) __PYX_ERR(0, 545, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ExtensibleReactor_spec, __pyx_ptype_7cantera_7reactor_ExtensibleReactor) < 0) __PYX_ERR(0, 545, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ExtensibleReactor = &__pyx_type_7cantera_7reactor_ExtensibleReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_ExtensibleReactor->tp_base = __pyx_ptype_7cantera_7reactor_Reactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ExtensibleReactor) < 0) __PYX_ERR(0, 545, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ExtensibleReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ExtensibleReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ExtensibleReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ExtensibleReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExtensibleReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_ExtensibleReactor) < 0) __PYX_ERR(0, 545, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7cantera_7reactor_ReactorSurface = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ReactorSurface_spec, NULL); if (unlikely(!__pyx_ptype_7cantera_7reactor_ReactorSurface)) __PYX_ERR(0, 803, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ReactorSurface_spec, __pyx_ptype_7cantera_7reactor_ReactorSurface) < 0) __PYX_ERR(0, 803, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ReactorSurface = &__pyx_type_7cantera_7reactor_ReactorSurface;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ReactorSurface) < 0) __PYX_ERR(0, 803, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ReactorSurface->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ReactorSurface->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ReactorSurface->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ReactorSurface->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ReactorSurface, (PyObject *) __pyx_ptype_7cantera_7reactor_ReactorSurface) < 0) __PYX_ERR(0, 803, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7cantera_7reactor_ReactorSurface) < 0) __PYX_ERR(0, 803, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7cantera_7reactor_WallBase = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_WallBase_spec, NULL); if (unlikely(!__pyx_ptype_7cantera_7reactor_WallBase)) __PYX_ERR(0, 887, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_WallBase_spec, __pyx_ptype_7cantera_7reactor_WallBase) < 0) __PYX_ERR(0, 887, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_WallBase = &__pyx_type_7cantera_7reactor_WallBase;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_WallBase) < 0) __PYX_ERR(0, 887, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_WallBase->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_WallBase->tp_dictoffset && __pyx_ptype_7cantera_7reactor_WallBase->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_WallBase->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)__pyx_ptype_7cantera_7reactor_WallBase, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 887, __pyx_L1_error)
    if (__Pyx_IS_TYPE(wrapper, &PyWrapperDescr_Type)) {
      __pyx_wrapperbase_7cantera_7reactor_8WallBase_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7cantera_7reactor_8WallBase_2__init__.doc = __pyx_doc_7cantera_7reactor_8WallBase_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7cantera_7reactor_8WallBase_2__init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_WallBase, (PyObject *) __pyx_ptype_7cantera_7reactor_WallBase) < 0) __PYX_ERR(0, 887, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7cantera_7reactor_WallBase) < 0) __PYX_ERR(0, 887, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_WallBase); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_Wall = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_Wall_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_Wall)) __PYX_ERR(0, 1013, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_Wall_spec, __pyx_ptype_7cantera_7reactor_Wall) < 0) __PYX_ERR(0, 1013, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_Wall = &__pyx_type_7cantera_7reactor_Wall;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_Wall->tp_base = __pyx_ptype_7cantera_7reactor_WallBase;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_Wall) < 0) __PYX_ERR(0, 1013, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_Wall->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_Wall->tp_dictoffset && __pyx_ptype_7cantera_7reactor_Wall->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_Wall->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Wall, (PyObject *) __pyx_ptype_7cantera_7reactor_Wall) < 0) __PYX_ERR(0, 1013, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7cantera_7reactor_Wall) < 0) __PYX_ERR(0, 1013, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7cantera_7reactor_FlowDevice = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_FlowDevice_spec, NULL); if (unlikely(!__pyx_ptype_7cantera_7reactor_FlowDevice)) __PYX_ERR(0, 1137, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_FlowDevice_spec, __pyx_ptype_7cantera_7reactor_FlowDevice) < 0) __PYX_ERR(0, 1137, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_FlowDevice = &__pyx_type_7cantera_7reactor_FlowDevice;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_FlowDevice) < 0) __PYX_ERR(0, 1137, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_FlowDevice->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_FlowDevice->tp_dictoffset && __pyx_ptype_7cantera_7reactor_FlowDevice->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_FlowDevice->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FlowDevice, (PyObject *) __pyx_ptype_7cantera_7reactor_FlowDevice) < 0) __PYX_ERR(0, 1137, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7cantera_7reactor_FlowDevice) < 0) __PYX_ERR(0, 1137, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_FlowDevice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_MassFlowController = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_MassFlowController_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_MassFlowController)) __PYX_ERR(0, 1286, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_MassFlowController_spec, __pyx_ptype_7cantera_7reactor_MassFlowController) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_MassFlowController = &__pyx_type_7cantera_7reactor_MassFlowController;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_MassFlowController->tp_base = __pyx_ptype_7cantera_7reactor_FlowDevice;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_MassFlowController) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_MassFlowController->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_MassFlowController->tp_dictoffset && __pyx_ptype_7cantera_7reactor_MassFlowController->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_MassFlowController->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_MassFlowController, (PyObject *) __pyx_ptype_7cantera_7reactor_MassFlowController) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7cantera_7reactor_MassFlowController) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_FlowDevice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_Valve = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_Valve_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_Valve)) __PYX_ERR(0, 1351, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_Valve_spec, __pyx_ptype_7cantera_7reactor_Valve) < 0) __PYX_ERR(0, 1351, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_Valve = &__pyx_type_7cantera_7reactor_Valve;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_Valve->tp_base = __pyx_ptype_7cantera_7reactor_FlowDevice;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_Valve) < 0) __PYX_ERR(0, 1351, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_Valve->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_Valve->tp_dictoffset && __pyx_ptype_7cantera_7reactor_Valve->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_Valve->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Valve, (PyObject *) __pyx_ptype_7cantera_7reactor_Valve) < 0) __PYX_ERR(0, 1351, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7cantera_7reactor_Valve) < 0) __PYX_ERR(0, 1351, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_FlowDevice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_PressureController = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_PressureController_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_PressureController)) __PYX_ERR(0, 1406, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_PressureController_spec, __pyx_ptype_7cantera_7reactor_PressureController) < 0) __PYX_ERR(0, 1406, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_PressureController = &__pyx_type_7cantera_7reactor_PressureController;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_PressureController->tp_base = __pyx_ptype_7cantera_7reactor_FlowDevice;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_PressureController) < 0) __PYX_ERR(0, 1406, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_PressureController->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_PressureController->tp_dictoffset && __pyx_ptype_7cantera_7reactor_PressureController->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_PressureController->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PressureController, (PyObject *) __pyx_ptype_7cantera_7reactor_PressureController) < 0) __PYX_ERR(0, 1406, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_7cantera_7reactor_PressureController) < 0) __PYX_ERR(0, 1406, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_7cantera_7reactor_ReactorNet = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ReactorNet_spec, NULL); if (unlikely(!__pyx_ptype_7cantera_7reactor_ReactorNet)) __PYX_ERR(0, 1481, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ReactorNet_spec, __pyx_ptype_7cantera_7reactor_ReactorNet) < 0) __PYX_ERR(0, 1481, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ReactorNet = &__pyx_type_7cantera_7reactor_ReactorNet;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ReactorNet) < 0) __PYX_ERR(0, 1481, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ReactorNet->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ReactorNet->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ReactorNet->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ReactorNet, (PyObject *) __pyx_ptype_7cantera_7reactor_ReactorNet) < 0) __PYX_ERR(0, 1481, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_Reactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_IdealGasMoleReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_IdealGasMoleReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_IdealGasMoleReactor)) __PYX_ERR(0, 419, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_IdealGasMoleReactor_spec, __pyx_ptype_7cantera_7reactor_IdealGasMoleReactor) < 0) __PYX_ERR(0, 419, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_IdealGasMoleReactor = &__pyx_type_7cantera_7reactor_IdealGasMoleReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_IdealGasMoleReactor->tp_base = __pyx_ptype_7cantera_7reactor_Reactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_IdealGasMoleReactor) < 0) __PYX_ERR(0, 419, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_IdealGasMoleReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_IdealGasMoleReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_IdealGasMoleReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_IdealGasMoleReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IdealGasMoleReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_IdealGasMoleReactor) < 0) __PYX_ERR(0, 419, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_Reactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor)) __PYX_ERR(0, 435, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor_spec, __pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor) < 0) __PYX_ERR(0, 435, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor = &__pyx_type_7cantera_7reactor_IdealGasConstPressureMoleReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor->tp_base = __pyx_ptype_7cantera_7reactor_Reactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor) < 0) __PYX_ERR(0, 435, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IdealGasConstPressureMoleReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor) < 0) __PYX_ERR(0, 435, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor)) __PYX_ERR(0, 739, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor_spec, __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor) < 0) __PYX_ERR(0, 739, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor = &__pyx_type_7cantera_7reactor_ExtensibleIdealGasReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor->tp_base = __pyx_ptype_7cantera_7reactor_ExtensibleReactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor) < 0) __PYX_ERR(0, 739, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExtensibleIdealGasReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor) < 0) __PYX_ERR(0, 739, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor)) __PYX_ERR(0, 747, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor_spec, __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor) < 0) __PYX_ERR(0, 747, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor = &__pyx_type_7cantera_7reactor_ExtensibleConstPressureReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor->tp_base = __pyx_ptype_7cantera_7reactor_ExtensibleReactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor) < 0) __PYX_ERR(0, 747, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExtensibleConstPressureReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor) < 0) __PYX_ERR(0, 747, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor)) __PYX_ERR(0, 755, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor_spec, __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor) < 0) __PYX_ERR(0, 755, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor = &__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor->tp_base = __pyx_ptype_7cantera_7reactor_ExtensibleReactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor) < 0) __PYX_ERR(0, 755, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExtensibleIdealGasConstPressureR, (PyObject *) __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor) < 0) __PYX_ERR(0, 755, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ExtensibleMoleReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor)) __PYX_ERR(0, 763, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ExtensibleMoleReactor_spec, __pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor = &__pyx_type_7cantera_7reactor_ExtensibleMoleReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor->tp_base = __pyx_ptype_7cantera_7reactor_ExtensibleReactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExtensibleMoleReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor)) __PYX_ERR(0, 773, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor_spec, __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor) < 0) __PYX_ERR(0, 773, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor = &__pyx_type_7cantera_7reactor_ExtensibleIdealGasMoleReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor->tp_base = __pyx_ptype_7cantera_7reactor_ExtensibleReactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor) < 0) __PYX_ERR(0, 773, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExtensibleIdealGasMoleReactor, (PyObject *) __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor) < 0) __PYX_ERR(0, 773, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor)) __PYX_ERR(0, 783, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor_spec, __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor = &__pyx_type_7cantera_7reactor_ExtensibleConstPressureMoleReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor->tp_base = __pyx_ptype_7cantera_7reactor_ExtensibleReactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExtensibleConstPressureMoleReact, (PyObject *) __pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor)) __PYX_ERR(0, 793, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor_spec, __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor) < 0) __PYX_ERR(0, 793, __pyx_L1_error)
  #else
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor = &__pyx_type_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor->tp_base = __pyx_ptype_7cantera_7reactor_ExtensibleReactor;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor) < 0) __PYX_ERR(0, 793, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor->tp_dictoffset && __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ExtensibleIdealGasConstPressureM, (PyObject *) __pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor) < 0) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_0(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_3_0_0(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyBoolObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_3_0_0(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyComplexObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_3_0_0); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 203, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_0); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_0); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 230, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_3_0_0); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(3, 813, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_number) __PYX_ERR(3, 815, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(3, 817, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(3, 819, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(3, 821, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(3, 823, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(3, 825, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(3, 827, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(3, 829, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_5numpy_character) __PYX_ERR(3, 831, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_3_0_0(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_3_0_0); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.func1"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_5func1_Func1 = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.func1", "Func1", sizeof(struct __pyx_obj_7cantera_5func1_Func1), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_5func1_Func1),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_5func1_Func1) __PYX_ERR(7, 46, __pyx_L1_error)
  __pyx_vtabptr_7cantera_5func1_Func1 = (struct __pyx_vtabstruct_7cantera_5func1_Func1*)__Pyx_GetVtable(__pyx_ptype_7cantera_5func1_Func1); if (unlikely(!__pyx_vtabptr_7cantera_5func1_Func1)) __PYX_ERR(7, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.units"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_5units_Units = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.units", "Units", sizeof(struct __pyx_obj_7cantera_5units_Units), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_5units_Units),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_5units_Units) __PYX_ERR(8, 42, __pyx_L1_error)
  __pyx_vtabptr_7cantera_5units_Units = (struct __pyx_vtabstruct_7cantera_5units_Units*)__Pyx_GetVtable(__pyx_ptype_7cantera_5units_Units); if (unlikely(!__pyx_vtabptr_7cantera_5units_Units)) __PYX_ERR(8, 42, __pyx_L1_error)
  __pyx_ptype_7cantera_5units_UnitStack = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.units", "UnitStack", sizeof(struct __pyx_obj_7cantera_5units_UnitStack), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_5units_UnitStack),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_5units_UnitStack) __PYX_ERR(8, 47, __pyx_L1_error)
  __pyx_vtabptr_7cantera_5units_UnitStack = (struct __pyx_vtabstruct_7cantera_5units_UnitStack*)__Pyx_GetVtable(__pyx_ptype_7cantera_5units_UnitStack); if (unlikely(!__pyx_vtabptr_7cantera_5units_UnitStack)) __PYX_ERR(8, 47, __pyx_L1_error)
  __pyx_ptype_7cantera_5units_UnitSystem = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.units", "UnitSystem", sizeof(struct __pyx_obj_7cantera_5units_UnitSystem), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_5units_UnitSystem),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_5units_UnitSystem) __PYX_ERR(8, 53, __pyx_L1_error)
  __pyx_vtabptr_7cantera_5units_UnitSystem = (struct __pyx_vtabstruct_7cantera_5units_UnitSystem*)__Pyx_GetVtable(__pyx_ptype_7cantera_5units_UnitSystem); if (unlikely(!__pyx_vtabptr_7cantera_5units_UnitSystem)) __PYX_ERR(8, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.solutionbase"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_12solutionbase__SolutionBase = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.solutionbase", "_SolutionBase", sizeof(struct __pyx_obj_7cantera_12solutionbase__SolutionBase), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_12solutionbase__SolutionBase),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_12solutionbase__SolutionBase) __PYX_ERR(9, 108, __pyx_L1_error)
  __pyx_ptype_7cantera_12solutionbase_SolutionArrayBase = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.solutionbase", "SolutionArrayBase", sizeof(struct __pyx_obj_7cantera_12solutionbase_SolutionArrayBase), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_12solutionbase_SolutionArrayBase),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_12solutionbase_SolutionArrayBase) __PYX_ERR(9, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.kinetics"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_8kinetics_Kinetics = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.kinetics", "Kinetics", sizeof(struct __pyx_obj_7cantera_8kinetics_Kinetics), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_8kinetics_Kinetics),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_8kinetics_Kinetics) __PYX_ERR(10, 143, __pyx_L1_error)
  __pyx_ptype_7cantera_8kinetics_InterfaceKinetics = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.kinetics", "InterfaceKinetics", sizeof(struct __pyx_obj_7cantera_8kinetics_InterfaceKinetics), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_8kinetics_InterfaceKinetics),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_8kinetics_InterfaceKinetics) __PYX_ERR(10, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.preconditioners"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_15preconditioners_PreconditionerBase = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.preconditioners", "PreconditionerBase", sizeof(struct __pyx_obj_7cantera_15preconditioners_PreconditionerBase), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_15preconditioners_PreconditionerBase),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_15preconditioners_PreconditionerBase) __PYX_ERR(11, 33, __pyx_L1_error)
  __pyx_ptype_7cantera_15preconditioners_AdaptivePreconditioner = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.preconditioners", "AdaptivePreconditioner", sizeof(struct __pyx_obj_7cantera_15preconditioners_AdaptivePreconditioner), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_15preconditioners_AdaptivePreconditioner),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_15preconditioners_AdaptivePreconditioner) __PYX_ERR(11, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.thermo"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_6thermo_Species = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.thermo", "Species", sizeof(struct __pyx_obj_7cantera_6thermo_Species), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_6thermo_Species),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_6thermo_Species) __PYX_ERR(12, 259, __pyx_L1_error)
  __pyx_vtabptr_7cantera_6thermo_Species = (struct __pyx_vtabstruct_7cantera_6thermo_Species*)__Pyx_GetVtable(__pyx_ptype_7cantera_6thermo_Species); if (unlikely(!__pyx_vtabptr_7cantera_6thermo_Species)) __PYX_ERR(12, 259, __pyx_L1_error)
  __pyx_ptype_7cantera_6thermo_ThermoPhase = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.thermo", "ThermoPhase", sizeof(struct __pyx_obj_7cantera_6thermo_ThermoPhase), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_6thermo_ThermoPhase),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_6thermo_ThermoPhase) __PYX_ERR(12, 266, __pyx_L1_error)
  __pyx_vtabptr_7cantera_6thermo_ThermoPhase = (struct __pyx_vtabstruct_7cantera_6thermo_ThermoPhase*)__Pyx_GetVtable(__pyx_ptype_7cantera_6thermo_ThermoPhase); if (unlikely(!__pyx_vtabptr_7cantera_6thermo_ThermoPhase)) __PYX_ERR(12, 266, __pyx_L1_error)
  __pyx_ptype_7cantera_6thermo_InterfacePhase = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera.thermo", "InterfacePhase", sizeof(struct __pyx_obj_7cantera_6thermo_InterfacePhase), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_6thermo_InterfacePhase),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_6thermo_InterfacePhase) __PYX_ERR(12, 276, __pyx_L1_error)
  __pyx_vtabptr_7cantera_6thermo_InterfacePhase = (struct __pyx_vtabstruct_7cantera_6thermo_InterfacePhase*)__Pyx_GetVtable(__pyx_ptype_7cantera_6thermo_InterfacePhase); if (unlikely(!__pyx_vtabptr_7cantera_6thermo_InterfacePhase)) __PYX_ERR(12, 276, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera._utils"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cantera_6_utils_AnyMap = __Pyx_ImportType_3_0_0(__pyx_t_1, "cantera._utils", "AnyMap", sizeof(struct __pyx_obj_7cantera_6_utils_AnyMap), __PYX_GET_STRUCT_ALIGNMENT_3_0_0(struct __pyx_obj_7cantera_6_utils_AnyMap),__Pyx_ImportType_CheckSize_Warn_3_0_0); if (!__pyx_ptype_7cantera_6_utils_AnyMap) __PYX_ERR(13, 96, __pyx_L1_error)
  __pyx_vtabptr_7cantera_6_utils_AnyMap = (struct __pyx_vtabstruct_7cantera_6_utils_AnyMap*)__Pyx_GetVtable(__pyx_ptype_7cantera_6_utils_AnyMap); if (unlikely(!__pyx_vtabptr_7cantera_6_utils_AnyMap)) __PYX_ERR(13, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cantera.delegator"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "assign_delegates", (void (**)(void))&__pyx_f_7cantera_9delegator_assign_delegates, "int (PyObject *, Cantera::Delegator *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera.kinetics"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "get_from_sparse", (void (**)(void))&__pyx_f_7cantera_8kinetics_get_from_sparse, "PyObject *(Eigen::SparseMatrix<double> &, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cantera._utils"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "stringify", (void (**)(void))&__pyx_f_7cantera_6_utils_stringify, "std::string (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "pystr", (void (**)(void))&__pyx_f_7cantera_6_utils_pystr, "PyObject *(std::string)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "comp_map", (void (**)(void))&__pyx_f_7cantera_6_utils_comp_map, "__pyx_t_7cantera_5ctcxx_Composition (PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "py_to_anymap", (void (**)(void))&__pyx_f_7cantera_6_utils_py_to_anymap, "Cantera::AnyMap (PyObject *, struct __pyx_opt_args_7cantera_6_utils_py_to_anymap *__pyx_optional_args)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_0(__pyx_t_1, "anymap_to_py", (void (**)(void))&__pyx_f_7cantera_6_utils_anymap_to_py, "PyObject *(Cantera::AnyMap &)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_reactor(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_reactor},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "reactor",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initreactor(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initreactor(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_reactor(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_reactor(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_reactor(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'reactor' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("reactor", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to reactor pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_reactor(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cantera__reactor) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cantera.reactor")) {
      if (unlikely((PyDict_SetItemString(modules, "cantera.reactor", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely((__Pyx_modinit_function_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "cantera/reactor.pyx":4
 * # at https://cantera.org/license.txt for license and copyright information.
 * 
 * import warnings             # <<<<<<<<<<<<<<
 * from collections import defaultdict as _defaultdict
 * import numbers as _numbers
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_warnings, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/reactor.pyx":5
 * 
 * import warnings
 * from collections import defaultdict as _defaultdict             # <<<<<<<<<<<<<<
 * import numbers as _numbers
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_defaultdict);
  __Pyx_GIVEREF(__pyx_n_s_defaultdict);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_defaultdict);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_defaultdict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_defaultdict_2, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/reactor.pyx":6
 * import warnings
 * from collections import defaultdict as _defaultdict
 * import numbers as _numbers             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref
 * 
 */
  __pyx_t_3 = __Pyx_ImportDottedModule(__pyx_n_s_numbers_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numbers, __pyx_t_3) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/reactor.pyx":11
 * from .thermo cimport *
 * from ._utils cimport pystr, stringify, comp_map, py_to_anymap, anymap_to_py
 * from ._utils import *             # <<<<<<<<<<<<<<
 * from .delegator cimport *
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s__23);
  __Pyx_GIVEREF(__pyx_n_s__23);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s__23);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_utils, __pyx_t_3, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_import_star(__pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cantera/reactor.pyx":14
 * from .delegator cimport *
 * 
 * _reactor_counts = _defaultdict(int)             # <<<<<<<<<<<<<<
 * 
 * # Need a pure-python class to store weakrefs to
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_defaultdict_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)(&PyInt_Type))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reactor_counts, __pyx_t_3) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/reactor.pyx":17
 * 
 * # Need a pure-python class to store weakrefs to
 * class _WeakrefProxy:             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_WeakrefProxy, __pyx_n_s_WeakrefProxy, (PyObject *) NULL, __pyx_n_s_cantera_reactor, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_Py3ClassCreate(((PyObject*)&PyType_Type), __pyx_n_s_WeakrefProxy, __pyx_empty_tuple, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_WeakrefProxy, __pyx_t_2) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/reactor.pyx":24
 *     Common base class for reactors and reservoirs.
 *     """
 *     reactor_type = "none"             # <<<<<<<<<<<<<<
 *     def __cinit__(self, *args, **kwargs):
 *         self._reactor = newReactor3(stringify(self.reactor_type))
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorBase->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_none) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorBase);

  /* "cantera/reactor.pyx":48
 *             self.volume = volume
 * 
 *     def insert(self, _SolutionBase solution):             # <<<<<<<<<<<<<<
 *         """
 *         Set ``solution`` to be the object used to compute thermodynamic
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_11ReactorBase_5insert, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorBase_insert, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorBase->tp_dict, __pyx_n_s_insert, __pyx_t_3) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorBase);

  /* "cantera/reactor.pyx":71
 *             self.rbase.setName(stringify(name))
 * 
 *     def syncState(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the Reactor to match that of the associated
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_11ReactorBase_7syncState, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorBase_syncState, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorBase->tp_dict, __pyx_n_s_syncState, __pyx_t_3) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorBase);

  /* "cantera/reactor.pyx":134
 *             return self._surfaces
 * 
 *     def _add_inlet(self, inlet):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``inlet`` to prevent it from being prematurely
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_11ReactorBase_9_add_inlet, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorBase__add_inlet, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorBase->tp_dict, __pyx_n_s_add_inlet, __pyx_t_3) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorBase);

  /* "cantera/reactor.pyx":141
 *         self._inlets.append(inlet)
 * 
 *     def _add_outlet(self, outlet):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``outlet`` to prevent it from being prematurely
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_11ReactorBase_11_add_outlet, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorBase__add_outlet, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorBase->tp_dict, __pyx_n_s_add_outlet, __pyx_t_3) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorBase);

  /* "cantera/reactor.pyx":148
 *         self._outlets.append(outlet)
 * 
 *     def _add_wall(self, wall):             # <<<<<<<<<<<<<<
 *         """
 *         Store a reference to ``wall`` to prevent it from being prematurely
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_11ReactorBase_13_add_wall, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorBase__add_wall, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorBase->tp_dict, __pyx_n_s_add_wall, __pyx_t_3) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorBase);

  /* "cantera/reactor.pyx":155
 *         self._walls.append(wall)
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('Reactor object is not picklable')
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_11ReactorBase_15__reduce__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorBase___reduce, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorBase->tp_dict, __pyx_n_s_reduce, __pyx_t_3) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorBase);

  /* "cantera/reactor.pyx":158
 *         raise NotImplementedError('Reactor object is not picklable')
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('Reactor object is not copyable')
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_11ReactorBase_17__copy__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorBase___copy, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorBase->tp_dict, __pyx_n_s_copy, __pyx_t_3) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorBase);

  /* "cantera/reactor.pyx":169
 *     appropriate components such as `Wall`, `MassFlowController` and `Valve`.
 *     """
 *     reactor_type = "Reactor"             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, *args, **kwargs):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_Reactor) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Reactor);

  /* "cantera/reactor.pyx":213
 *             raise ValueError("'energy' must be either 'on' or 'off'")
 * 
 *     def insert(self, _SolutionBase solution):             # <<<<<<<<<<<<<<
 *         """
 *         Set ``solution`` to be the object used to compute thermodynamic
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_7Reactor_5insert, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Reactor_insert, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor->tp_dict, __pyx_n_s_insert, __pyx_t_3) < 0) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Reactor);

  /* "cantera/reactor.pyx":255
 *             self.reactor.setEnergy(int(value))
 * 
 *     def add_sensitivity_reaction(self, m):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_7Reactor_7add_sensitivity_reaction, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Reactor_add_sensitivity_reaction, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor->tp_dict, __pyx_n_s_add_sensitivity_reaction, __pyx_t_3) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Reactor);

  /* "cantera/reactor.pyx":264
 *         self.reactor.addSensitivityReaction(m)
 * 
 *     def add_sensitivity_species_enthalpy(self, k):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_7Reactor_9add_sensitivity_species_enthalpy, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Reactor_add_sensitivity_species, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor->tp_dict, __pyx_n_s_add_sensitivity_species_enthalpy, __pyx_t_3) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Reactor);

  /* "cantera/reactor.pyx":272
 *         self.reactor.addSensitivitySpeciesEnthalpy(self.thermo.species_index(k))
 * 
 *     def component_index(self, name):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the index of the component named ``name`` in the system. This determines
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_7Reactor_11component_index, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Reactor_component_index, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor->tp_dict, __pyx_n_s_component_index, __pyx_t_3) < 0) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Reactor);

  /* "cantera/reactor.pyx":284
 *         return k
 * 
 *     def component_name(self, int i):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the name of the component with index ``i`` within the array of
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_7Reactor_13component_name, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Reactor_component_name, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor->tp_dict, __pyx_n_s_component_name, __pyx_t_3) < 0) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Reactor);

  /* "cantera/reactor.pyx":306
 *             return self.reactor.neq()
 * 
 *     def get_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the state vector of the reactor.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_7Reactor_15get_state, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Reactor_get_state, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor->tp_dict, __pyx_n_s_get_state, __pyx_t_3) < 0) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Reactor);

  /* "cantera/reactor.pyx":366
 *                                    self.n_vars, self.n_vars)
 * 
 *     def set_advance_limit(self, name, limit):             # <<<<<<<<<<<<<<
 *         """
 *         Limit absolute change of component ``name`` during `ReactorNet.advance`.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_7Reactor_17set_advance_limit, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Reactor_set_advance_limit, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Reactor->tp_dict, __pyx_n_s_set_advance_limit, __pyx_t_3) < 0) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Reactor);

  /* "cantera/reactor.pyx":386
 *     .. versionadded:: 3.0
 *     """
 *     reactor_type = "MoleReactor"             # <<<<<<<<<<<<<<
 * 
 * cdef class Reservoir(ReactorBase):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_MoleReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_MoleReactor) < 0) __PYX_ERR(0, 386, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_MoleReactor);

  /* "cantera/reactor.pyx":394
 *     their initial values.
 *     """
 *     reactor_type = "Reservoir"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Reservoir->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_Reservoir) < 0) __PYX_ERR(0, 394, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Reservoir);

  /* "cantera/reactor.pyx":402
 *     pressure constant.
 *     """
 *     reactor_type = "ConstPressureReactor"             # <<<<<<<<<<<<<<
 * 
 * cdef class ConstPressureMoleReactor(Reactor):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ConstPressureReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_ConstPressureReactor) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ConstPressureReactor);

  /* "cantera/reactor.pyx":411
 *     .. versionadded:: 3.0
 *     """
 *     reactor_type = "ConstPressureMoleReactor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_ConstPressureMoleReactor) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ConstPressureMoleReactor);

  /* "cantera/reactor.pyx":416
 * cdef class IdealGasReactor(Reactor):
 *     """ A constant volume, zero-dimensional reactor for ideal gas mixtures. """
 *     reactor_type = "IdealGasReactor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_IdealGasReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_IdealGasReactor) < 0) __PYX_ERR(0, 416, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_IdealGasReactor);

  /* "cantera/reactor.pyx":424
 *     based state vector
 *     """
 *     reactor_type = "IdealGasMoleReactor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_IdealGasMoleReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_IdealGasMoleReactor) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_IdealGasMoleReactor);

  /* "cantera/reactor.pyx":433
 *     to keep the pressure constant.
 *     """
 *     reactor_type = "IdealGasConstPressureReactor"             # <<<<<<<<<<<<<<
 * 
 * cdef class IdealGasConstPressureMoleReactor(Reactor):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_IdealGasConstPressureReactor) < 0) __PYX_ERR(0, 433, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_IdealGasConstPressureReactor);

  /* "cantera/reactor.pyx":441
 *     to keep the pressure constant. This reactor also uses a mole based state vector.
 *     """
 *     reactor_type = "IdealGasConstPressureMoleReactor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_IdealGasConstPressureMoleReactor) < 0) __PYX_ERR(0, 441, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_IdealGasConstPressureMoleReactor);

  /* "cantera/reactor.pyx":450
 *     The reactor is assumed to be frictionless and adiabatic.
 *     """
 *     reactor_type = "FlowReactor"             # <<<<<<<<<<<<<<
 * 
 *     property mass_flow_rate:
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_FlowReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_FlowReactor) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_FlowReactor);

  /* "cantera/reactor.pyx":626
 *     """
 * 
 *     reactor_type = "ExtensibleReactor"             # <<<<<<<<<<<<<<
 * 
 *     delegatable_methods = {
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_ExtensibleReactor) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ExtensibleReactor);

  /* "cantera/reactor.pyx":629
 * 
 *     delegatable_methods = {
 *         'initialize': ('initialize', 'void(double)'),             # <<<<<<<<<<<<<<
 *         'sync_state': ('syncState', 'void()'),
 *         'get_state': ('getState', 'void(double*)'),
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_initialize, __pyx_tuple__50) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":630
 *     delegatable_methods = {
 *         'initialize': ('initialize', 'void(double)'),
 *         'sync_state': ('syncState', 'void()'),             # <<<<<<<<<<<<<<
 *         'get_state': ('getState', 'void(double*)'),
 *         'update_state': ('updateState', 'void(double*)'),
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_sync_state, __pyx_tuple__51) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":631
 *         'initialize': ('initialize', 'void(double)'),
 *         'sync_state': ('syncState', 'void()'),
 *         'get_state': ('getState', 'void(double*)'),             # <<<<<<<<<<<<<<
 *         'update_state': ('updateState', 'void(double*)'),
 *         'update_surface_state': ('updateSurfaceState', 'void(double*)'),
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_get_state, __pyx_tuple__52) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":632
 *         'sync_state': ('syncState', 'void()'),
 *         'get_state': ('getState', 'void(double*)'),
 *         'update_state': ('updateState', 'void(double*)'),             # <<<<<<<<<<<<<<
 *         'update_surface_state': ('updateSurfaceState', 'void(double*)'),
 *         'get_surface_initial_conditions': ('getSurfaceInitialConditions', 'void(double*)'),
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_update_state, __pyx_tuple__53) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":633
 *         'get_state': ('getState', 'void(double*)'),
 *         'update_state': ('updateState', 'void(double*)'),
 *         'update_surface_state': ('updateSurfaceState', 'void(double*)'),             # <<<<<<<<<<<<<<
 *         'get_surface_initial_conditions': ('getSurfaceInitialConditions', 'void(double*)'),
 *         'update_connected': ('updateConnected', 'void(bool)'),
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_update_surface_state, __pyx_tuple__54) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":634
 *         'update_state': ('updateState', 'void(double*)'),
 *         'update_surface_state': ('updateSurfaceState', 'void(double*)'),
 *         'get_surface_initial_conditions': ('getSurfaceInitialConditions', 'void(double*)'),             # <<<<<<<<<<<<<<
 *         'update_connected': ('updateConnected', 'void(bool)'),
 *         'eval': ('eval', 'void(double, double*, double*)'),
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_get_surface_initial_conditions, __pyx_tuple__55) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":635
 *         'update_surface_state': ('updateSurfaceState', 'void(double*)'),
 *         'get_surface_initial_conditions': ('getSurfaceInitialConditions', 'void(double*)'),
 *         'update_connected': ('updateConnected', 'void(bool)'),             # <<<<<<<<<<<<<<
 *         'eval': ('eval', 'void(double, double*, double*)'),
 *         'eval_walls': ('evalWalls', 'void(double)'),
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_update_connected, __pyx_tuple__56) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":636
 *         'get_surface_initial_conditions': ('getSurfaceInitialConditions', 'void(double*)'),
 *         'update_connected': ('updateConnected', 'void(bool)'),
 *         'eval': ('eval', 'void(double, double*, double*)'),             # <<<<<<<<<<<<<<
 *         'eval_walls': ('evalWalls', 'void(double)'),
 *         'eval_surfaces': ('evalSurfaces', 'void(double*,double*,double*)'),
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_eval, __pyx_tuple__57) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":637
 *         'update_connected': ('updateConnected', 'void(bool)'),
 *         'eval': ('eval', 'void(double, double*, double*)'),
 *         'eval_walls': ('evalWalls', 'void(double)'),             # <<<<<<<<<<<<<<
 *         'eval_surfaces': ('evalSurfaces', 'void(double*,double*,double*)'),
 *         'component_name': ('componentName', 'string(size_t)'),
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_eval_walls, __pyx_tuple__58) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":638
 *         'eval': ('eval', 'void(double, double*, double*)'),
 *         'eval_walls': ('evalWalls', 'void(double)'),
 *         'eval_surfaces': ('evalSurfaces', 'void(double*,double*,double*)'),             # <<<<<<<<<<<<<<
 *         'component_name': ('componentName', 'string(size_t)'),
 *         'component_index': ('componentIndex', 'size_t(string)'),
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_eval_surfaces, __pyx_tuple__59) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":639
 *         'eval_walls': ('evalWalls', 'void(double)'),
 *         'eval_surfaces': ('evalSurfaces', 'void(double*,double*,double*)'),
 *         'component_name': ('componentName', 'string(size_t)'),             # <<<<<<<<<<<<<<
 *         'component_index': ('componentIndex', 'size_t(string)'),
 *         'species_index': ('speciesIndex', 'size_t(string)')
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_component_name, __pyx_tuple__60) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":640
 *         'eval_surfaces': ('evalSurfaces', 'void(double*,double*,double*)'),
 *         'component_name': ('componentName', 'string(size_t)'),
 *         'component_index': ('componentIndex', 'size_t(string)'),             # <<<<<<<<<<<<<<
 *         'species_index': ('speciesIndex', 'size_t(string)')
 *     }
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_component_index, __pyx_tuple__61) < 0) __PYX_ERR(0, 629, __pyx_L1_error)

  /* "cantera/reactor.pyx":641
 *         'component_name': ('componentName', 'string(size_t)'),
 *         'component_index': ('componentIndex', 'size_t(string)'),
 *         'species_index': ('speciesIndex', 'size_t(string)')             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_species_index, __pyx_tuple__62) < 0) __PYX_ERR(0, 629, __pyx_L1_error)
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor->tp_dict, __pyx_n_s_delegatable_methods, __pyx_t_3) < 0) __PYX_ERR(0, 628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ExtensibleReactor);

  /* "cantera/reactor.pyx":724
 *         self.accessor.setHeatRate(qdot)
 * 
 *     def restore_thermo_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the thermo object to correspond to the state of the
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_17ExtensibleReactor_5restore_thermo_state, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ExtensibleReactor_restore_thermo, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor->tp_dict, __pyx_n_s_restore_thermo_state, __pyx_t_3) < 0) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ExtensibleReactor);

  /* "cantera/reactor.pyx":731
 *         self.accessor.restoreThermoState()
 * 
 *     def restore_surface_state(self, n):             # <<<<<<<<<<<<<<
 *         """
 *         Set the state of the thermo object for surface ``n`` to correspond to the
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_17ExtensibleReactor_7restore_surface_state, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ExtensibleReactor_restore_surfac, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleReactor->tp_dict, __pyx_n_s_restore_surface_state, __pyx_t_3) < 0) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ExtensibleReactor);

  /* "cantera/reactor.pyx":744
 *     `IdealGasReactor` class.
 *     """
 *     reactor_type = "ExtensibleIdealGasReactor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_ExtensibleIdealGasReactor) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasReactor);

  /* "cantera/reactor.pyx":752
 *     `ConstPressureReactor` class.
 *     """
 *     reactor_type = "ExtensibleConstPressureReactor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_ExtensibleConstPressureReactor) < 0) __PYX_ERR(0, 752, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureReactor);

  /* "cantera/reactor.pyx":760
 *     `IdealGasConstPressureReactor` class.
 *     """
 *     reactor_type = "ExtensibleIdealGasConstPressureReactor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_ExtensibleIdealGasConstPressureR) < 0) __PYX_ERR(0, 760, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureReactor);

  /* "cantera/reactor.pyx":770
 *     .. versionadded:: 3.0
 *     """
 *     reactor_type = "ExtensibleMoleReactor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_ExtensibleMoleReactor) < 0) __PYX_ERR(0, 770, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ExtensibleMoleReactor);

  /* "cantera/reactor.pyx":780
 *     .. versionadded:: 3.0
 *     """
 *     reactor_type = "ExtensibleIdealGasMoleReactor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_ExtensibleIdealGasMoleReactor) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasMoleReactor);

  /* "cantera/reactor.pyx":790
 *     .. versionadded:: 3.0
 *     """
 *     reactor_type = "ExtensibleConstPressureMoleReactor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_ExtensibleConstPressureMoleReact) < 0) __PYX_ERR(0, 790, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ExtensibleConstPressureMoleReactor);

  /* "cantera/reactor.pyx":800
 *     .. versionadded:: 3.0
 *     """
 *     reactor_type = "ExtensibleIdealGasConstPressureMoleReactor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor->tp_dict, __pyx_n_s_reactor_type, __pyx_n_u_ExtensibleIdealGasConstPressureM) < 0) __PYX_ERR(0, 800, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ExtensibleIdealGasConstPressureMoleReactor);

  /* "cantera/reactor.pyx":829
 *             self.area = A
 * 
 *     def install(self, Reactor r):             # <<<<<<<<<<<<<<
 *         """
 *         Add this `ReactorSurface` to the specified `Reactor`
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_14ReactorSurface_7install, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorSurface_install, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorSurface->tp_dict, __pyx_n_s_install, __pyx_t_3) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorSurface);

  /* "cantera/reactor.pyx":878
 *             self.surface.setCoverages(&data[0])
 * 
 *     def add_sensitivity_reaction(self, int m):             # <<<<<<<<<<<<<<
 *         """
 *         Specifies that the sensitivity of the state variables with respect to
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_14ReactorSurface_9add_sensitivity_reaction, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorSurface_add_sensitivity_r, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorSurface->tp_dict, __pyx_n_s_add_sensitivity_reaction, __pyx_t_3) < 0) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorSurface);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_14ReactorSurface_11__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorSurface___reduce_cython, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_14ReactorSurface_13__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorSurface___setstate_cython, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/reactor.pyx":891
 *     Common base class for walls.
 *     """
 *     wall_type = "none"             # <<<<<<<<<<<<<<
 *     def __cinit__(self, *args, **kwargs):
 *         self._wall = newWall3(stringify(self.wall_type))
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_WallBase->tp_dict, __pyx_n_s_wall_type, __pyx_n_u_none) < 0) __PYX_ERR(0, 891, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_WallBase);

  /* "cantera/reactor.pyx":942
 *             self.velocity = velocity
 * 
 *     def _install(self, ReactorBase left, ReactorBase right):             # <<<<<<<<<<<<<<
 *         """
 *         Install this Wall between two `Reactor` objects or between a
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_8WallBase_5_install, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WallBase__install, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_WallBase->tp_dict, __pyx_n_s_install_2, __pyx_t_3) < 0) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_WallBase);

  /* "cantera/reactor.pyx":977
 *         return self.wall.expansionRate()
 * 
 *     def vdot(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         The rate of volumetric change [m^3/s] associated with the wall
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_8WallBase_7vdot, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WallBase_vdot, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_WallBase->tp_dict, __pyx_n_s_vdot, __pyx_t_3) < 0) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_WallBase);

  /* "cantera/reactor.pyx":1000
 *         return self.wall.heatRate()
 * 
 *     def qdot(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         Total heat flux [W] through the wall at time ``t``. A positive value
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_8WallBase_9qdot, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WallBase_qdot, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_WallBase->tp_dict, __pyx_n_s_qdot, __pyx_t_3) < 0) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_WallBase);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_8WallBase_11__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WallBase___reduce_cython, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_8WallBase_13__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_WallBase___setstate_cython, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/reactor.pyx":1040
 *     when heat flows from the reactor on the left to the reactor on the right.
 *     """
 *     wall_type = "Wall"             # <<<<<<<<<<<<<<
 * 
 *     property expansion_rate_coeff:
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Wall->tp_dict, __pyx_n_s_wall_type, __pyx_n_u_Wall) < 0) __PYX_ERR(0, 1040, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Wall);

  /* "cantera/reactor.pyx":1087
 *         (<CxxWall*>(self.wall)).setVelocity(f.func)
 * 
 *     def set_velocity(self, v):             # <<<<<<<<<<<<<<
 *         """
 *         The wall velocity [m/s]. May be either a constant or an arbitrary
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_4Wall_1set_velocity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Wall_set_velocity, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__80)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Wall->tp_dict, __pyx_n_s_set_velocity, __pyx_t_3) < 0) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Wall);

  /* "cantera/reactor.pyx":1122
 *         (<CxxWall*>self.wall).setHeatFlux(f.func)
 * 
 *     def set_heat_flux(self, q):             # <<<<<<<<<<<<<<
 *         """
 *         Heat flux [W/m^2] across the wall. May be either a constant or
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_4Wall_3set_heat_flux, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Wall_set_heat_flux, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__82)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Wall->tp_dict, __pyx_n_s_set_heat_flux, __pyx_t_3) < 0) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Wall);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_4Wall_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Wall___reduce_cython, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_4Wall_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Wall___setstate_cython, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__84)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/reactor.pyx":1148
 *     pressure between the upstream and downstream reactors.
 *     """
 *     flowdevice_type = "none"             # <<<<<<<<<<<<<<
 *     def __cinit__(self, *args, **kwargs):
 *         self._dev = newFlowDevice3(stringify(self.flowdevice_type))
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_FlowDevice->tp_dict, __pyx_n_s_flowdevice_type, __pyx_n_u_none) < 0) __PYX_ERR(0, 1148, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_FlowDevice);

  /* "cantera/reactor.pyx":1171
 *             return pystr(self.dev.type())
 * 
 *     def _install(self, ReactorBase upstream, ReactorBase downstream):             # <<<<<<<<<<<<<<
 *         """
 *         Install the device between the ``upstream`` (source) and ``downstream``
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10FlowDevice_5_install, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_FlowDevice__install, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__86)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_FlowDevice->tp_dict, __pyx_n_s_install_2, __pyx_t_3) < 0) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_FlowDevice);

  /* "cantera/reactor.pyx":1219
 *         self.dev.setPressureFunction(f.func)
 * 
 *     def set_pressure_function(self, k):             # <<<<<<<<<<<<<<
 *         r"""
 *         Set the relationship between mass flow rate and the pressure drop across a
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10FlowDevice_7set_pressure_function, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_FlowDevice_set_pressure_function_2, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_FlowDevice->tp_dict, __pyx_n_s_set_pressure_function, __pyx_t_3) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_FlowDevice);

  /* "cantera/reactor.pyx":1266
 *         self.dev.setTimeFunction(g.func)
 * 
 *     def set_time_function(self, k):             # <<<<<<<<<<<<<<
 *         r"""
 *         Set the time dependence of a flow device. The mass flow rate [kg/s] is
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10FlowDevice_9set_time_function, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_FlowDevice_set_time_function, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__88)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_FlowDevice->tp_dict, __pyx_n_s_set_time_function, __pyx_t_3) < 0) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_FlowDevice);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10FlowDevice_11__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_FlowDevice___reduce_cython, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10FlowDevice_13__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_FlowDevice___setstate_cython, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/reactor.pyx":1308
 *     taken of the work required to do this.
 *     """
 *     flowdevice_type = "MassFlowController"             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, upstream, downstream, *, name=None, mdot=1.):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_MassFlowController->tp_dict, __pyx_n_s_flowdevice_type, __pyx_n_u_MassFlowController) < 0) __PYX_ERR(0, 1308, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_MassFlowController);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_18MassFlowController_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MassFlowController___reduce_cyth, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_18MassFlowController_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_MassFlowController___setstate_cy, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/reactor.pyx":1382
 *     reactors that counteracts the pressure difference.
 *     """
 *     flowdevice_type = "Valve"             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, upstream, downstream, *, name=None, K=1.):
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_Valve->tp_dict, __pyx_n_s_flowdevice_type, __pyx_n_u_Valve) < 0) __PYX_ERR(0, 1382, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_Valve);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_5Valve_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Valve___reduce_cython, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_5Valve_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_Valve___setstate_cython, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/reactor.pyx":1425
 *     where :math:`f` is the arbitrary function of a single argument.
 *     """
 *     flowdevice_type = "PressureController"             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, upstream, downstream, *,
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_PressureController->tp_dict, __pyx_n_s_flowdevice_type, __pyx_n_u_PressureController) < 0) __PYX_ERR(0, 1425, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_7cantera_7reactor_PressureController);

  /* "cantera/reactor.pyx":1466
 *         (<CxxPressureController*>self.dev).setPrimary(d.dev)
 * 
 *     def set_master(self, FlowDevice d):             # <<<<<<<<<<<<<<
 *         """
 *         Set the "master" `FlowDevice` used to compute this device's mass flow
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_18PressureController_3set_master, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PressureController_set_master, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_PressureController->tp_dict, __pyx_n_s_set_master, __pyx_t_3) < 0) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_PressureController);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_18PressureController_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PressureController___reduce_cyth, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_18PressureController_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PressureController___setstate_cy, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "cantera/reactor.pyx":1500
 *             self.add_reactor(R)
 * 
 *     def add_reactor(self, Reactor r):             # <<<<<<<<<<<<<<
 *         """Add a reactor to the network."""
 *         self._reactors.append(r)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_3add_reactor, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_add_reactor, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_add_reactor, __pyx_t_3) < 0) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1505
 *         self.net.addReactor(deref(r.reactor))
 * 
 *     def advance(self, double t, pybool apply_limit=True):             # <<<<<<<<<<<<<<
 *         """
 *         Advance the state of the reactor network from the current time/distance towards
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_5advance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_advance, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__102);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_advance, __pyx_t_3) < 0) __PYX_ERR(0, 1505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1520
 *         return self.net.advance(t, apply_limit)
 * 
 *     def step(self):             # <<<<<<<<<<<<<<
 *         """
 *         Take a single internal step. The time/distance after taking the step is
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_7step, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_step, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_step, __pyx_t_3) < 0) __PYX_ERR(0, 1520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1527
 *         return self.net.step()
 * 
 *     def initialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Force initialization of the integrator after initial setup.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_9initialize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_initialize, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_initialize, __pyx_t_3) < 0) __PYX_ERR(0, 1527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1533
 *         self.net.initialize()
 * 
 *     def reinitialize(self):             # <<<<<<<<<<<<<<
 *         """
 *         Reinitialize the integrator after making changing to the state of the
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_11reinitialize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_reinitialize, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_reinitialize, __pyx_t_3) < 0) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1570
 *         self.net.setInitialTime(t)
 * 
 *     def set_initial_time(self, double t):             # <<<<<<<<<<<<<<
 *         """
 *         Set the initial time. Restarts integration from this time using the
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_13set_initial_time, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_set_initial_time, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_set_initial_time, __pyx_t_3) < 0) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1709
 *             self.net.setVerbose(v)
 * 
 *     def global_component_index(self, name, int reactor):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the index of a component named ``name`` of a reactor with index
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_15global_component_index, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_global_component_inde, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_global_component_index, __pyx_t_3) < 0) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1720
 *         return self.net.globalComponentIndex(stringify(name), reactor)
 * 
 *     def component_name(self, int i):             # <<<<<<<<<<<<<<
 *         """
 *         Return the name of the i-th component of the global state vector. The
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_17component_name, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_component_name, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_component_name, __pyx_t_3) < 0) __PYX_ERR(0, 1720, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1728
 *         return pystr(self.net.componentName(i))
 * 
 *     def sensitivity(self, component, int p, int r=0):             # <<<<<<<<<<<<<<
 *         """
 *         Returns the sensitivity of the solution variable ``component`` in
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_19sensitivity, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_sensitivity, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__112);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_sensitivity, __pyx_t_3) < 0) __PYX_ERR(0, 1728, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1743
 *             return self.net.sensitivity(stringify(component), p, r)
 * 
 *     def sensitivities(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Returns the sensitivities of all of the solution variables with respect
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_21sensitivities, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_sensitivities, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_sensitivities, __pyx_t_3) < 0) __PYX_ERR(0, 1743, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1782
 *         return data
 * 
 *     def sensitivity_parameter_name(self, int p):             # <<<<<<<<<<<<<<
 *         """
 *         Name of the sensitivity parameter with index ``p``.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_23sensitivity_parameter_name, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_sensitivity_parameter, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_sensitivity_parameter_name, __pyx_t_3) < 0) __PYX_ERR(0, 1782, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1812
 *             return self.net.neq()
 * 
 *     def get_state(self):             # <<<<<<<<<<<<<<
 *         """
 *         Get the combined state vector of the reactor network.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_25get_state, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_get_state, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_get_state, __pyx_t_3) < 0) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1825
 *         return y
 * 
 *     def get_derivative(self, k):             # <<<<<<<<<<<<<<
 *         """
 *         Get the k-th derivative of the state vector of the reactor network with respect
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_27get_derivative, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_get_derivative, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_get_derivative, __pyx_t_3) < 0) __PYX_ERR(0, 1825, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1858
 *             self.net.setAdvanceLimits(&data[0])
 * 
 *     def advance_to_steady_state(self, int max_steps=10000,             # <<<<<<<<<<<<<<
 *                                 double residual_threshold=0., double atol=0.,
 *                                 pybool return_residuals=False):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_29advance_to_steady_state, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet_advance_to_steady_sta, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__122);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_advance_to_steady_state, __pyx_t_3) < 0) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1919
 *             return residuals[:step + 1]
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('ReactorNet object is not picklable')
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_31__reduce__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet___reduce, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_reduce, __pyx_t_3) < 0) __PYX_ERR(0, 1919, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1922
 *         raise NotImplementedError('ReactorNet object is not picklable')
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError('ReactorNet object is not copyable')
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7cantera_7reactor_10ReactorNet_33__copy__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ReactorNet___copy, NULL, __pyx_n_s_cantera_reactor, __pyx_d, ((PyObject *)__pyx_codeobj__124)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_7cantera_7reactor_ReactorNet->tp_dict, __pyx_n_s_copy, __pyx_t_3) < 0) __PYX_ERR(0, 1922, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_7cantera_7reactor_ReactorNet);

  /* "cantera/reactor.pyx":1
 * # This file is part of Cantera. See License.txt in the top-level directory or             # <<<<<<<<<<<<<<
 * # at https://cantera.org/license.txt for license and copyright information.
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_Reactor___init___line_174, __pyx_kp_u_param_contents_Reactor_contents) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_FlowDevice_pressure_function___g, __pyx_kp_u_The_relationship_between_mass_f) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_FlowDevice_set_pressure_function_3, __pyx_kp_u_Set_the_relationship_between_ma) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_FlowDevice_time_function___get, __pyx_kp_u_The_time_dependence_of_a_flow_d) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_kp_u_FlowDevice_set_time_function_lin, __pyx_kp_u_Set_the_time_dependence_of_a_fl) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init cantera.reactor", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cantera.reactor");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + (unsigned long)b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (meth) {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparsable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferIndexError */
  static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* RaiseUnexpectedTypeError */
  static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* DictGetItem */
  #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* UnicodeConcatInPlace */
  # if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        __Pyx_GIVEREF(*p_left);
        if (unlikely(PyUnicode_Resize(p_left, new_len) != 0)) {
            __Pyx_GOTREF(*p_left);
            return NULL;
        }
        __Pyx_INCREF(*p_left);
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* RaiseUnboundLocalError */
  static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* SliceObject */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is unsliceable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return NULL;
}

/* FixUpExtensionType */
  #if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectCallNoArg */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
  static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
  static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
  #if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n = PyTuple_GET_SIZE(bases);
    for (i = 1; i < n; i++)
    {
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
        if (dictoffset == 0 && b->tp_dictoffset)
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "extension type '%.200s' has no __dict__ slot, "
                "but base type '" __Pyx_FMT_TYPENAME "' has: "
                "either add 'cdef dict __dict__' to the extension type "
                "or add '__slots__ = [...]' to the base type",
                type_name, b_name);
            __Pyx_DECREF_TypeName(b_name);
            return -1;
        }
    }
    return 0;
}
#endif

/* PyType_Ready */
  static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType_3_0_0
#define __PYX_HAVE_RT_ImportType_3_0_0
static PyTypeObject *__Pyx_ImportType_3_0_0(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_0 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_0 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_0 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
  static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
  #if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__23;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__24);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
  static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* PyObjectCall2Args */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectLookupSpecial */
  #if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* Py3ClassCreate */
  static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
#if PY_VERSION_HEX >= 0x03030000
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
#else
    CYTHON_MAYBE_UNUSED_VAR(qualname);
#endif
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
static int __Pyx_SetNamesPEP487(PyObject *type_obj) {
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *names_to_set, *key, *value, *set_name, *tmp;
    Py_ssize_t i = 0;
#if CYTHON_USE_TYPE_SLOTS
    names_to_set = PyDict_Copy(type->tp_dict);
#else
    {
        PyObject *d = PyObject_GetAttr(type_obj, __pyx_n_s_dict);
        names_to_set = NULL;
        if (likely(d)) {
            PyObject *names_to_set = PyDict_New();
            int ret = likely(names_to_set) ? PyDict_Update(names_to_set, d) : -1;
            Py_DECREF(d);
            if (unlikely(ret < 0))
                Py_CLEAR(names_to_set);
        }
    }
#endif
    if (unlikely(names_to_set == NULL))
        goto bad;
    while (PyDict_Next(names_to_set, &i, &key, &value)) {
        set_name = __Pyx_PyObject_LookupSpecialNoError(value, __pyx_n_s_set_name);
        if (unlikely(set_name != NULL)) {
            tmp = __Pyx_PyObject_Call2Args(set_name, type_obj, key);
            Py_DECREF(set_name);
            if (unlikely(tmp == NULL)) {
                __Pyx_TypeName value_type_name =
                    __Pyx_PyType_GetName(Py_TYPE(value));
                __Pyx_TypeName type_name = __Pyx_PyType_GetName(type);
                PyErr_Format(PyExc_RuntimeError,
#if PY_MAJOR_VERSION >= 3
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %R " "in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name, key, type_name);
#else
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %.100s in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name,
                    PyString_Check(key) ? PyString_AS_STRING(key) : "?",
                    type_name);
#endif
                goto bad;
            } else {
                Py_DECREF(tmp);
            }
        }
        else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
    Py_DECREF(names_to_set);
    return 0;
bad:
    Py_XDECREF(names_to_set);
    return -1;
}
static PyObject *__Pyx_InitSubclassPEP487(PyObject *type_obj, PyObject *mkw) {
#if CYTHON_USE_TYPE_SLOTS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *mro = type->tp_mro;
    Py_ssize_t i, nbases;
    if (unlikely(!mro)) goto done;
    (void) &__Pyx_GetBuiltinName;
    Py_INCREF(mro);
    nbases = PyTuple_GET_SIZE(mro);
    assert(PyTuple_GET_ITEM(mro, 0) == type_obj);
    for (i = 1; i < nbases-1; i++) {
        PyObject *base, *dict, *meth;
        base = PyTuple_GET_ITEM(mro, i);
        dict = ((PyTypeObject *)base)->tp_dict;
        meth = __Pyx_PyDict_GetItemStrWithError(dict, __pyx_n_s_init_subclass);
        if (unlikely(meth)) {
            descrgetfunc f = Py_TYPE(meth)->tp_descr_get;
            PyObject *res;
            Py_INCREF(meth);
            if (likely(f)) {
                res = f(meth, NULL, type_obj);
                Py_DECREF(meth);
                if (unlikely(!res)) goto bad;
                meth = res;
            }
            res = __Pyx_PyObject_FastCallDict(meth, NULL, 0, mkw);
            Py_DECREF(meth);
            if (unlikely(!res)) goto bad;
            Py_DECREF(res);
            goto done;
        } else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
done:
    Py_XDECREF(mro);
    return type_obj;
bad:
    Py_XDECREF(mro);
    Py_DECREF(type_obj);
    return NULL;
#else
    PyObject *super_type, *super, *func, *res;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    super_type = __Pyx_GetBuiltinName(__pyx_n_s_super);
#else
    super_type = (PyObject*) &PySuper_Type;
    (void) &__Pyx_GetBuiltinName;
#endif
    super = likely(super_type) ? __Pyx_PyObject_Call2Args(super_type, type_obj, type_obj) : NULL;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    Py_XDECREF(super_type);
#endif
    if (unlikely(!super)) {
        Py_CLEAR(type_obj);
        goto done;
    }
    func = __Pyx_PyObject_GetAttrStrNoError(super, __pyx_n_s_init_subclass);
    Py_DECREF(super);
    if (likely(!func)) {
        if (unlikely(PyErr_Occurred()))
            Py_CLEAR(type_obj);
        goto done;
    }
    res = __Pyx_PyObject_FastCallDict(func, NULL, 0, mkw);
    Py_DECREF(func);
    if (unlikely(!res))
        Py_CLEAR(type_obj);
    Py_XDECREF(res);
done:
    return type_obj;
#endif
}
#endif
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET,
#if PY_VERSION_HEX < 0x030600A4
        (metaclass == (PyObject*)&PyType_Type) ? NULL : mkw
#else
        mkw
#endif
    );
    Py_XDECREF(owned_metaclass);
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
    if (likely(result) && likely(PyType_Check(result))) {
        if (unlikely(__Pyx_SetNamesPEP487(result) < 0)) {
            Py_CLEAR(result);
        } else {
            result = __Pyx_InitSubclassPEP487(result, mkw);
        }
    }
#else
    (void) &__Pyx_GetBuiltinName;
#endif
    return result;
}

/* FetchSharedCythonModule */
  static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (unlikely(!abi_module)) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}

/* FetchCommonType */
  static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
  #if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
  static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    cf->m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    __Pyx_TypeName obj_type_name;
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
                 "'" __Pyx_FMT_TYPENAME "' does not have the buffer interface",
                 obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(size_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                                return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                                return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                                return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(size_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                                return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                                return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                                return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(size_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (size_t) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (size_t) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (size_t) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (size_t) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (size_t) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((size_t) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((size_t) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name_2);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__125));
    }
    return name;
}
#endif

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CStringEquals */
  static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    return *s1 == *s2;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compile time version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionImport */
  #ifndef __PYX_HAVE_RT_ImportFunction_3_0_0
#define __PYX_HAVE_RT_ImportFunction_3_0_0
static int __Pyx_ImportFunction_3_0_0(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
